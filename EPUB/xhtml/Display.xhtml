<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>15 Controlling the Display (GNU Emacs Manual)</title>

<meta name="description" content="15 Controlling the Display (GNU Emacs Manual)"/>
<meta name="keywords" content="15 Controlling the Display (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Search.xhtml#Search" rel="next" title="16 Searching and Replacement"/>
<link href="Registers.xhtml#Registers" rel="prev" title="14 Registers"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Display">

<h2 class="chapter" id="Controlling-the-Display">15 Controlling the Display</h2>

<p>Since only part of a large buffer fits in the window, Emacs has to
show only a part of it.  This chapter describes commands and variables
that let you specify which part of the text you want to see, and how
the text is displayed.
</p>

<div class="section-level-extent" id="Scrolling">
<h3 class="section" id="Scrolling-1">15.1 Scrolling</h3>
<a class="index-entry-id" id="index-scrolling"></a>

<p>If a window is too small to display all the text in its buffer, it
displays only a portion of it.  <em class="dfn">Scrolling</em> commands change which
portion of the buffer is displayed.
</p>
<p>Scrolling forward or up advances the portion of the buffer
displayed in the window; equivalently, it moves the buffer text
upwards relative to the window.  Scrolling backward or down
displays an earlier portion of the buffer, and moves the text
downwards relative to the window.
</p>
<p>In Emacs, scrolling up or down refers to the direction that
the text moves in the window, <em class="emph">not</em> the direction that the window
moves relative to the text.  This terminology was adopted by Emacs
before the modern meaning of &#8220;scrolling up&#8221; and &#8220;scrolling down&#8221;
became widespread.  Hence, the strange result that <kbd class="key">PageDown</kbd>
scrolls up in the Emacs sense.
</p>
<p>The portion of a buffer displayed in a window always contains point.
If you move point past the bottom or top of the window, scrolling
occurs automatically to bring it back onscreen (see <a class="pxref" href="#Auto-Scrolling">Automatic Scrolling</a>).  You can also scroll explicitly with these commands:
</p>
<dl class="table">
<dt><kbd class="kbd">C-v</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">PageDown</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">next</kbd></kbd></dt>
<dd><p>Scroll forward by nearly a full window (<code class="code">scroll-up-command</code>).
</p></dd>
<dt><kbd class="kbd">M-v</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">PageUp</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">prior</kbd></kbd></dt>
<dd><p>Scroll backward (<code class="code">scroll-down-command</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dv-1"></a>
<a class="index-entry-id" id="index-M_002dv-1"></a>
<a class="index-entry-id" id="index-PageDown-1"></a>
<a class="index-entry-id" id="index-PageUp-1"></a>
<a class="index-entry-id" id="index-next-1"></a>
<a class="index-entry-id" id="index-prior-1"></a>
<a class="index-entry-id" id="index-scroll_002dup_002dcommand"></a>
<a class="index-entry-id" id="index-scroll_002ddown_002dcommand"></a>
<p><kbd class="kbd">C-v</kbd> (<code class="code">scroll-up-command</code>) scrolls forward by nearly the
whole window height.  The effect is to take the two lines at the
bottom of the window and put them at the top, followed by lines that
were not previously visible.  If point was in the text that scrolled
off the top, it ends up on the window&#8217;s new topmost line.  The
<kbd class="key">PageDown</kbd> (or <kbd class="key">next</kbd>) key is equivalent to <kbd class="kbd">C-v</kbd>.
</p>
<p><kbd class="kbd">M-v</kbd> (<code class="code">scroll-down-command</code>) scrolls backward in a similar
way.  The <kbd class="key">PageUp</kbd> (or <kbd class="key">prior</kbd>) key is equivalent to
<kbd class="kbd">M-v</kbd>.
</p>
<a class="index-entry-id" id="index-next_002dscreen_002dcontext_002dlines"></a>
<p>The number of lines of overlap left by these scroll commands is
controlled by the variable <code class="code">next-screen-context-lines</code>, whose
default value is 2.  You can supply the commands with a numeric prefix
argument, <var class="var">n</var>, to scroll by <var class="var">n</var> lines; Emacs attempts to leave
point unchanged, so that the text and point move up or down together.
<kbd class="kbd">C-v</kbd> with a negative argument is like <kbd class="kbd">M-v</kbd> and vice versa.
</p>
<a class="index-entry-id" id="index-scroll_002derror_002dtop_002dbottom"></a>
<p>By default, these commands signal an error (by beeping or flashing
the screen) if no more scrolling is possible, because the window has
reached the beginning or end of the buffer.  If you change the
variable <code class="code">scroll-error-top-bottom</code> to <code class="code">t</code>, these commands
move point to the farthest possible position.  If point is already
there, the commands signal an error.
</p>
<a class="index-entry-id" id="index-scroll_002dpreserve_002dscreen_002dposition"></a>
<a class="index-entry-id" id="index-scroll_002dcommand-property"></a>
<p>Some users like scroll commands to keep point at the same screen
position, so that scrolling back to the same screen conveniently
returns point to its original position.  You can enable this behavior
via the variable <code class="code">scroll-preserve-screen-position</code>.  If the value
is <code class="code">t</code>, Emacs adjusts point to keep the cursor at the same screen
position whenever a scroll command moves it off-window, rather than
moving it to the topmost or bottommost line.  With any other
non-<code class="code">nil</code> value, Emacs adjusts point this way even if the scroll
command leaves point in the window.  This variable affects all the
scroll commands documented in this section, as well as scrolling with
the mouse wheel (see <a class="pxref" href="Frames.xhtml#Mouse-Commands">Mouse Commands for Editing</a>); in general, it affects any
command that has a non-<code class="code">nil</code> <code class="code">scroll-command</code> property.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html#Property-Lists">Property Lists</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.  The
same property also causes Emacs not to exit incremental search when
one of these commands is invoked and <code class="code">isearch-allow-scroll</code> is
non-<code class="code">nil</code> (see <a class="pxref" href="Search.xhtml#Not-Exiting-Isearch">Not Exiting Incremental Search</a>).
</p>
<a class="index-entry-id" id="index-fast_002dbut_002dimprecise_002dscrolling"></a>
<p>Sometimes, particularly when you hold down keys such as <kbd class="kbd">C-v</kbd>
and <kbd class="kbd">M-v</kbd>, activating keyboard auto-repeat, Emacs fails to keep up
with the rapid rate of scrolling requested; the display doesn&#8217;t update
and Emacs can become unresponsive to input for quite a long time.  You
can counter this sluggishness by setting the variable
<code class="code">fast-but-imprecise-scrolling</code> to a non-<code class="code">nil</code> value.  This
instructs the scrolling commands not to fontify (see <a class="pxref" href="#Font-Lock">Font Lock mode</a>)
any unfontified text they scroll over, instead to assume it has the
default face.  This can cause Emacs to scroll to somewhat wrong buffer
positions when the faces in use are not all the same size, even with
single (i.e., without auto-repeat) scrolling operations.
</p>
<a class="index-entry-id" id="index-jit_002dlock_002ddefer_002dtime"></a>
<p>As an alternative to setting <code class="code">fast-but-imprecise-scrolling</code> you
might prefer to enable jit-lock deferred fontification (see <a class="pxref" href="#Font-Lock">Font Lock mode</a>).  To do this, customize <code class="code">jit-lock-defer-time</code> to a small
positive number such as 0.25, or even 0.1 if you type quickly.  This
gives you less jerky scrolling when you hold down <kbd class="kbd">C-v</kbd>, but the
window contents after any action which scrolls into a fresh portion of
the buffer will be momentarily unfontified.
</p>
<a class="index-entry-id" id="index-redisplay_002dskip_002dfontification_002don_002dinput"></a>
<p>Finally, a third alternative to these variables is
<code class="code">redisplay-skip-fontification-on-input</code>.  If this variable is
non-<code class="code">nil</code>, skip some fontifications if there&#8217;s input pending.
This usually does not affect the display because redisplay is
completely skipped anyway if input was pending, but it can make
scrolling smoother by avoiding unnecessary fontification.
</p>
<a class="index-entry-id" id="index-scroll_002dup"></a>
<a class="index-entry-id" id="index-scroll_002ddown"></a>
<a class="index-entry-id" id="index-scroll_002dup_002dline"></a>
<a class="index-entry-id" id="index-scroll_002ddown_002dline"></a>
<p>The commands <kbd class="kbd">M-x scroll-up</kbd> and <kbd class="kbd">M-x scroll-down</kbd> behave
similarly to <code class="code">scroll-up-command</code> and <code class="code">scroll-down-command</code>,
except they do not obey <code class="code">scroll-error-top-bottom</code>.  Prior to
Emacs 24, these were the default commands for scrolling up and down.
The commands <kbd class="kbd">M-x scroll-up-line</kbd> and <kbd class="kbd">M-x scroll-down-line</kbd>
scroll the current window by one line at a time.  If you intend to use
any of these commands, you might want to give them key bindings
(see <a class="pxref" href="Customization.xhtml#Init-Rebinding">Rebinding Keys in Your Init File</a>).
</p>
</div>
<div class="section-level-extent" id="Recentering">
<h3 class="section" id="Recentering-1">15.2 Recentering</h3>

<dl class="table">
<dt><kbd class="kbd">C-l</kbd></dt>
<dd><p>Scroll the selected window so the current line is the center-most text
line; on subsequent consecutive invocations, make the current line the
top line, the bottom line, and so on in cyclic order.  Possibly
redisplay the screen too (<code class="code">recenter-top-bottom</code>).
</p>
</dd>
<dt><kbd class="kbd">C-M-S-l</kbd></dt>
<dd><p>Scroll the other window; this is equivalent to <kbd class="kbd">C-l</kbd> acting on the
other window.
</p>
</dd>
<dt><kbd class="kbd">M-x recenter</kbd></dt>
<dd><p>Scroll the selected window so the current line is the center-most text
line.  Possibly redisplay the screen too.
</p>
</dd>
<dt><kbd class="kbd">C-M-l</kbd></dt>
<dd><p>Scroll heuristically to bring useful information onto the screen
(<code class="code">reposition-window</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dl"></a>
<a class="index-entry-id" id="index-recenter_002dtop_002dbottom"></a>
<p>The <kbd class="kbd">C-l</kbd> (<code class="code">recenter-top-bottom</code>) command <em class="dfn">recenters</em>
the selected window, scrolling it so that the current screen line is
exactly in the center of the window, or as close to the center as
possible.
</p>
<p>Typing <kbd class="kbd">C-l</kbd> twice in a row (<kbd class="kbd">C-l C-l</kbd>) scrolls the window
so that point is on the topmost screen line.  Typing a third <kbd class="kbd">C-l</kbd>
scrolls the window so that point is on the bottom-most screen line.
Each successive <kbd class="kbd">C-l</kbd> cycles through these three positions.
</p>
<a class="index-entry-id" id="index-recenter_002dpositions"></a>
<p>You can change the cycling order by customizing the list variable
<code class="code">recenter-positions</code>.  Each list element should be the symbol
<code class="code">top</code>, <code class="code">middle</code>, or <code class="code">bottom</code>, or a number; an integer
means to move the line to the specified screen line, while a
floating-point number between 0.0 and 1.0 specifies a percentage of
the screen space from the top of the window.  The default,
<code class="code">(middle top bottom)</code>, is the cycling order described above.
Furthermore, if you change the variable <code class="code">scroll-margin</code> to a
non-zero value <var class="var">n</var>, <kbd class="kbd">C-l</kbd> always leaves at least <var class="var">n</var>
screen lines between point and the top or bottom of the window
(see <a class="pxref" href="#Auto-Scrolling">Automatic Scrolling</a>).
</p>
<p>You can also give <kbd class="kbd">C-l</kbd> a prefix argument.  A plain prefix
argument, <kbd class="kbd">C-u C-l</kbd>, simply recenters the line showing point.  A
positive argument <var class="var">n</var> moves line showing point <var class="var">n</var> lines down
from the top of the window.  An argument of zero moves point&#8217;s line to
the top of the window.  A negative argument &#8722;<var class="var">n</var> moves point&#8217;s
line <var class="var">n</var> lines from the bottom of the window.  When given an
argument, <kbd class="kbd">C-l</kbd> does not clear the screen or cycle through
different screen positions.
</p>
<a class="index-entry-id" id="index-recenter_002dredisplay"></a>
<p>If the variable <code class="code">recenter-redisplay</code> has a non-<code class="code">nil</code>
value, each invocation of <kbd class="kbd">C-l</kbd> also clears and redisplays the
screen; the special value <code class="code">tty</code> (the default) says to do this on
text-terminal frames only.  Redisplaying is useful in case the screen
becomes garbled for any reason (see <a class="pxref" href="Lossage.xhtml#Screen-Garbled">Garbage on the Screen</a>).
</p>
<a class="index-entry-id" id="index-recenter"></a>
<p>The more primitive command <kbd class="kbd">M-x recenter</kbd> behaves like
<code class="code">recenter-top-bottom</code>, but does not cycle among screen positions.
</p>
<a class="index-entry-id" id="index-C_002dM_002dl"></a>
<a class="index-entry-id" id="index-reposition_002dwindow"></a>
<p><kbd class="kbd">C-M-l</kbd> (<code class="code">reposition-window</code>) scrolls the current window
heuristically in a way designed to get useful information onto the
screen.  For example, in a Lisp file, this command tries to get the
entire current defun onto the screen if possible.
</p>
</div>
<div class="section-level-extent" id="Auto-Scrolling">
<h3 class="section" id="Automatic-Scrolling">15.3 Automatic Scrolling</h3>

<a class="index-entry-id" id="index-automatic-scrolling"></a>
<p>Emacs performs <em class="dfn">automatic scrolling</em> when point moves out of the
visible portion of the text.  Normally, automatic scrolling centers
point vertically in the window, but there are several ways to alter
this behavior.
</p>
<a class="index-entry-id" id="index-scroll_002dconservatively"></a>
<a class="index-entry-id" id="index-scroll_002dminibuffer_002dconservatively"></a>
<p>If you set <code class="code">scroll-conservatively</code> to a small number <var class="var">n</var>,
then moving point just a little off the screen (no more than <var class="var">n</var>
lines) causes Emacs to scroll just enough to bring point back on
screen; if doing so fails to make point visible, Emacs scrolls just
far enough to center point in the window.  If you set
<code class="code">scroll-conservatively</code> to a large number (larger than 100),
automatic scrolling never centers point, no matter how far point
moves; Emacs always scrolls text just enough to bring point into view,
either at the top or bottom of the window depending on the scroll
direction.  By default, <code class="code">scroll-conservatively</code> is&#160;0, which
means to always center point in the window.
This said, in minibuffer windows, scrolling is always conservative by
default because <code class="code">scroll-minibuffer-conservatively</code> is non-<code class="code">nil</code>,
which takes precedence over <code class="code">scroll-conservatively</code>.
</p>
<a class="index-entry-id" id="index-scroll_002dstep"></a>
<p>Another way to control automatic scrolling is to customize the
variable <code class="code">scroll-step</code>.  Its value determines the number of lines
by which to automatically scroll, when point moves off the screen.  If
scrolling by that number of lines fails to bring point back into view,
point is centered instead.  The default value is zero, which (by
default) causes point to always be centered after scrolling.
</p>
<a class="index-entry-id" id="index-aggressive-scrolling"></a>
<a class="index-entry-id" id="index-scroll_002dup_002daggressively"></a>
<a class="index-entry-id" id="index-scroll_002ddown_002daggressively"></a>
<p>A third way to control automatic scrolling is to customize the
variables <code class="code">scroll-up-aggressively</code> and
<code class="code">scroll-down-aggressively</code>, which directly specify the vertical
position of point after scrolling.  The value of
<code class="code">scroll-up-aggressively</code> should be either <code class="code">nil</code> (the
default), or a floating point number <var class="var">f</var> between 0 and 1.  The
latter means that when point goes below the bottom window edge (i.e.,
scrolling forward), Emacs scrolls the window so that point is <var class="var">f</var>
parts of the window height from the bottom window edge.  Thus, larger
<var class="var">f</var> means more aggressive scrolling: more new text is brought into
view.  The default value, <code class="code">nil</code>, is equivalent to 0.5.
</p>
<p>Likewise, <code class="code">scroll-down-aggressively</code> is used when point goes
above the top window edge (i.e., scrolling backward).  The value
specifies how far point should be from the top margin of the window
after scrolling.  Thus, as with <code class="code">scroll-up-aggressively</code>, a
larger value is more aggressive.
</p>
<p>Note that the variables <code class="code">scroll-conservatively</code>,
<code class="code">scroll-step</code>, and <code class="code">scroll-up-aggressively</code> /
<code class="code">scroll-down-aggressively</code> control automatic scrolling in
contradictory ways.  Therefore, you should pick no more than one of
these methods to customize automatic scrolling.  In case you customize
multiple variables, the order of priority is:
<code class="code">scroll-conservatively</code>, then <code class="code">scroll-step</code>, and finally
<code class="code">scroll-up-aggressively</code> / <code class="code">scroll-down-aggressively</code>.
</p>
<a class="index-entry-id" id="index-scroll_002dmargin"></a>
<a class="index-entry-id" id="index-maximum_002dscroll_002dmargin"></a>
<p>The variable <code class="code">scroll-margin</code> restricts how close point can come
to the top or bottom of a window (even if aggressive scrolling
specifies a fraction <var class="var">f</var> that is larger than the window portion
between the top and the bottom margins).  Its value is a number of
screen lines; if point comes within that many lines of the top or
bottom of the window, Emacs performs automatic scrolling.  By default,
<code class="code">scroll-margin</code> is 0.  The effective margin size is limited to a
quarter of the window height by default, but this limit can be
increased up to half (or decreased down to zero) by customizing
<code class="code">maximum-scroll-margin</code>.
</p>
</div>
<div class="section-level-extent" id="Horizontal-Scrolling">
<h3 class="section" id="Horizontal-Scrolling-1">15.4 Horizontal Scrolling</h3>
<a class="index-entry-id" id="index-horizontal-scrolling"></a>

<a class="index-entry-id" id="index-auto_002dhscroll_002dmode"></a>
<p><em class="dfn">Horizontal scrolling</em> means shifting all the lines sideways
within a window, so that some of the text near the left margin is not
displayed.  When the text in a window is scrolled horizontally, text
lines are truncated rather than continued (see <a class="pxref" href="#Line-Truncation">Line Truncation</a>).
If a window shows truncated lines, Emacs performs automatic horizontal
scrolling whenever point moves off the left or right edge of the
screen.  By default, all the lines in the window are scrolled
horizontally together, but if you set the variable
<code class="code">auto-hscroll-mode</code> to the special value of <code class="code">current-line</code>,
only the line showing the cursor will be scrolled.  To disable
automatic horizontal scrolling entirely, set the variable
<code class="code">auto-hscroll-mode</code> to <code class="code">nil</code>.  Note that when the automatic
horizontal scrolling is turned off, if point moves off the edge of the
screen, the cursor disappears to indicate that.  (On text terminals,
the cursor is left at the edge instead.)
</p>
<a class="index-entry-id" id="index-hscroll_002dmargin"></a>
<p>The variable <code class="code">hscroll-margin</code> controls how close point can get
to the window&#8217;s left and right edges before automatic scrolling
occurs.  It is measured in columns.  For example, if the value is 5,
then moving point within 5 columns of an edge causes horizontal
scrolling away from that edge.
</p>
<a class="index-entry-id" id="index-hscroll_002dstep"></a>
<p>The variable <code class="code">hscroll-step</code> determines how many columns to
scroll the window when point gets too close to the edge.  Zero, the
default value, means to center point horizontally within the window.
A positive integer value specifies the number of columns to scroll by.
A floating-point number (whose value should be between 0 and 1)
specifies the fraction of the window&#8217;s width to scroll by.
</p>
<p>You can also perform explicit horizontal scrolling with the
following commands:
</p>
<dl class="table">
<dt><kbd class="kbd">C-x &lt;</kbd></dt>
<dd><p>Scroll text in current window to the left (<code class="code">scroll-left</code>).
</p></dd>
<dt><kbd class="kbd">C-x &gt;</kbd></dt>
<dd><p>Scroll to the right (<code class="code">scroll-right</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-_003c"></a>
<a class="index-entry-id" id="index-C_002dx-_003e"></a>
<a class="index-entry-id" id="index-scroll_002dleft"></a>
<a class="index-entry-id" id="index-scroll_002dright"></a>
<p><kbd class="kbd">C-x &lt;</kbd> (<code class="code">scroll-left</code>) scrolls text in the selected window
to the left by the full width of the window, less two columns.  (In
other words, the text in the window moves left relative to the
window.)  With a numeric argument <var class="var">n</var>, it scrolls by <var class="var">n</var>
columns.
</p>
<p>If the text is scrolled to the left, and point moves off the left
edge of the window, the cursor will freeze at the left edge of the
window, until point moves back to the displayed portion of the text.
This is independent of the current setting of
<code class="code">auto-hscroll-mode</code>, which, for text scrolled to the left, only
affects the behavior at the right edge of the window.
</p>
<p><kbd class="kbd">C-x &gt;</kbd> (<code class="code">scroll-right</code>) scrolls similarly to the right.
The window cannot be scrolled any farther to the right once it is
displayed normally, with each line starting at the window&#8217;s left
margin; attempting to do so has no effect.  This means that you don&#8217;t
have to calculate the argument precisely for <kbd class="kbd">C-x&#160;&gt;</kbd><!-- /@w -->; any
sufficiently large argument will restore the normal display.
</p>
<p>If you use those commands to scroll a window horizontally, that sets
a lower bound for automatic horizontal scrolling.  Automatic scrolling
will continue to scroll the window, but never farther to the right
than the amount you previously set by <code class="code">scroll-left</code>.  When
<code class="code">auto-hscroll-mode</code> is set to <code class="code">current-line</code>, all the lines
other than the one showing the cursor will be scrolled by that minimal
amount.
</p>
</div>
<div class="section-level-extent" id="Narrowing">
<h3 class="section" id="Narrowing-1">15.5 Narrowing</h3>
<a class="index-entry-id" id="index-widening"></a>
<a class="index-entry-id" id="index-restriction"></a>
<a class="index-entry-id" id="index-narrowing"></a>
<a class="index-entry-id" id="index-accessible-portion"></a>

<p><em class="dfn">Narrowing</em> means focusing in on some portion of the buffer,
making the rest temporarily inaccessible.  The portion which you can
still get to is called the <em class="dfn">accessible portion</em>.  Canceling the
narrowing, which makes the entire buffer once again accessible, is
called <em class="dfn">widening</em>.  The bounds of narrowing in effect in a buffer
are called the buffer&#8217;s <em class="dfn">restriction</em>.
</p>
<p>Narrowing can make it easier to concentrate on a single subroutine or
paragraph by eliminating clutter.  It can also be used to limit the
range of operation of a replace command or repeating keyboard macro.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x n n</kbd></dt>
<dd><p>Narrow down to between point and mark (<code class="code">narrow-to-region</code>).
</p></dd>
<dt><kbd class="kbd">C-x n w</kbd></dt>
<dd><p>Widen to make the entire buffer accessible again (<code class="code">widen</code>).
</p></dd>
<dt><kbd class="kbd">C-x n p</kbd></dt>
<dd><p>Narrow down to the current page (<code class="code">narrow-to-page</code>).
</p></dd>
<dt><kbd class="kbd">C-x n d</kbd></dt>
<dd><p>Narrow down to the current defun (<code class="code">narrow-to-defun</code>).
</p></dd>
</dl>

<p>When you have narrowed down to a part of the buffer, that part appears
to be all there is.  You can&#8217;t see the rest, you can&#8217;t move into it
(motion commands won&#8217;t go outside the accessible part), you can&#8217;t change
it in any way.  However, it is not gone, and if you save the file all
the inaccessible text will be saved.  The word &#8216;<samp class="samp">Narrow</samp>&#8217; appears in
the mode line whenever narrowing is in effect.
</p>
<a class="index-entry-id" id="index-C_002dx-n-n"></a>
<a class="index-entry-id" id="index-narrow_002dto_002dregion"></a>
<p>The primary narrowing command is <kbd class="kbd">C-x n n</kbd> (<code class="code">narrow-to-region</code>).
It sets the current buffer&#8217;s restrictions so that the text in the current
region remains accessible, but all text before the region or after the
region is inaccessible.  Point and mark do not change.
</p>
<a class="index-entry-id" id="index-C_002dx-n-p"></a>
<a class="index-entry-id" id="index-narrow_002dto_002dpage"></a>
<a class="index-entry-id" id="index-C_002dx-n-d"></a>
<a class="index-entry-id" id="index-narrow_002dto_002ddefun"></a>
<p>Alternatively, use <kbd class="kbd">C-x n p</kbd> (<code class="code">narrow-to-page</code>) to narrow
down to the current page.  See <a class="xref" href="Text.xhtml#Pages">Pages</a>, for the definition of a page.
<kbd class="kbd">C-x n d</kbd> (<code class="code">narrow-to-defun</code>) narrows down to the defun
containing point (see <a class="pxref" href="Programs.xhtml#Defuns">Top-Level Definitions, or Defuns</a>).
</p>
<a class="index-entry-id" id="index-C_002dx-n-w"></a>
<a class="index-entry-id" id="index-widen"></a>
<p>The way to cancel narrowing is to widen with <kbd class="kbd">C-x n w</kbd>
(<code class="code">widen</code>).  This makes all text in the buffer accessible again.
</p>
<p>You can get information on what part of the buffer you are narrowed down
to using the <kbd class="kbd">C-x =</kbd> command.  See <a class="xref" href="Basic.xhtml#Position-Info">Cursor Position Information</a>.
</p>
<p>Because narrowing can easily confuse users who do not understand it,
<code class="code">narrow-to-region</code> is normally a disabled command.  Attempting to use
this command asks for confirmation and gives you the option of enabling it;
if you enable the command, confirmation will no longer be required for
it.  See <a class="xref" href="Customization.xhtml#Disabling">Disabling Commands</a>.
</p>
</div>
<div class="section-level-extent" id="View-Mode">
<h3 class="section" id="View-Mode-1">15.6 View Mode</h3>
<a class="index-entry-id" id="index-View-mode"></a>
<a class="index-entry-id" id="index-mode_002c-View"></a>

<a class="index-entry-id" id="index-s-_0028View-mode_0029"></a>
<a class="index-entry-id" id="index-SPC-_0028View-mode_0029"></a>
<a class="index-entry-id" id="index-DEL-_0028View-mode_0029"></a>
<p>View mode is a minor mode that lets you scan a buffer by sequential
screenfuls.  It provides commands for scrolling through the buffer
conveniently but not for changing it.  Apart from the usual Emacs
cursor motion commands, you can type <kbd class="key">SPC</kbd> to scroll forward one
windowful, <kbd class="kbd">S-<kbd class="key">SPC</kbd></kbd> or <kbd class="key">DEL</kbd> to scroll backward, and <kbd class="kbd">s</kbd> to
start an incremental search.
</p>
<a class="index-entry-id" id="index-q-_0028View-mode_0029"></a>
<a class="index-entry-id" id="index-e-_0028View-mode_0029"></a>
<a class="index-entry-id" id="index-View_002dquit"></a>
<a class="index-entry-id" id="index-View_002dexit"></a>
<p>Typing <kbd class="kbd">q</kbd> (<code class="code">View-quit</code>) disables View mode, and switches
back to the buffer and position before View mode was enabled.  Typing
<kbd class="kbd">e</kbd> (<code class="code">View-exit</code>) disables View mode, keeping the current
buffer and position.
</p>
<a class="index-entry-id" id="index-view_002dbuffer"></a>
<a class="index-entry-id" id="index-view_002dfile"></a>
<p><kbd class="kbd">M-x view-buffer</kbd> prompts for an existing Emacs buffer, switches
to it, and enables View mode.  <kbd class="kbd">M-x view-file</kbd> prompts for a file
and visits it with View mode enabled.
</p>
</div>
<div class="section-level-extent" id="Follow-Mode">
<h3 class="section" id="Follow-Mode-1">15.7 Follow Mode</h3>
<a class="index-entry-id" id="index-Follow-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Follow"></a>
<a class="index-entry-id" id="index-follow_002dmode"></a>
<a class="index-entry-id" id="index-windows_002c-synchronizing"></a>
<a class="index-entry-id" id="index-synchronizing-windows"></a>

<p><em class="dfn">Follow mode</em> is a minor mode that makes two windows, both
showing the same buffer, scroll as a single tall virtual window.
To use Follow mode, go to a frame with just one window, split it into
two side-by-side windows using <kbd class="kbd">C-x 3</kbd>, and then type <kbd class="kbd">M-x
follow-mode</kbd>.  From then on, you can edit the buffer in either of the
two windows, or scroll either one; the other window follows it.
</p>
<p>In Follow mode, if you move point outside the portion visible in one
window and into the portion visible in the other window, that selects
the other window&#8212;again, treating the two as if they were parts of
one large window.
</p>
<p>To turn off Follow mode, type <kbd class="kbd">M-x follow-mode</kbd> a second time.
</p>
</div>
<div class="section-level-extent" id="Faces">
<h3 class="section" id="Text-Faces">15.8 Text Faces</h3>
<a class="index-entry-id" id="index-faces"></a>

<p>Emacs can display text in several different styles, called
<em class="dfn">faces</em>.  Each face can specify various <em class="dfn">face attributes</em>,
such as the font, height, weight, slant, foreground and background
color, and underlining or overlining.  Most major modes assign faces
to the text automatically, via Font Lock mode.  See <a class="xref" href="#Font-Lock">Font Lock mode</a>, for
more information about how these faces are assigned.
</p>
<a class="index-entry-id" id="index-list_002dfaces_002ddisplay"></a>
<p>To see what faces are currently defined, and what they look like,
type <kbd class="kbd">M-x list-faces-display</kbd>.  With a prefix argument, this
prompts for a regular expression, and displays only faces with names
matching that regular expression (see <a class="pxref" href="Search.xhtml#Regexps">Syntax of Regular Expressions</a>).
</p>
<a class="index-entry-id" id="index-frame_002dbackground_002dmode"></a>
<p>It&#8217;s possible for a given face to look different in different
frames.  For instance, some text terminals do not support all face
attributes, particularly font, height, and width, and some support a
limited range of colors.  In addition, most Emacs faces are defined so
that their attributes are different on light and dark frame
backgrounds, for reasons of legibility.  By default, Emacs
automatically chooses which set of face attributes to display on each
frame, based on the frame&#8217;s current background color.  However, you
can override this by giving the variable <code class="code">frame-background-mode</code>
a non-<code class="code">nil</code> value.  A value of <code class="code">dark</code> makes Emacs treat all
frames as if they have a dark background, whereas a value of
<code class="code">light</code> makes it treat all frames as if they have a light
background.
</p>
<a class="index-entry-id" id="index-background-color"></a>
<a class="index-entry-id" id="index-default-face"></a>
<p>You can customize a face to alter its attributes, and save those
customizations for future Emacs sessions.  See <a class="xref" href="Customization.xhtml#Face-Customization">Customizing Faces</a>,
for details.
</p>
<p>The <code class="code">default</code> face is the default for displaying text, and all
of its attributes are specified.  Its background color is also used as
the frame&#8217;s background color.  See <a class="xref" href="#Colors">Colors for Faces</a>.
</p>
<a class="index-entry-id" id="index-cursor-face"></a>
<p>Another special face is the <code class="code">cursor</code> face.  On graphical
displays, the background color of this face is used to draw the text
cursor.  None of the other attributes of this face have any effect;
the foreground color for text under the cursor is taken from the
background color of the underlying text.  On text terminals, the
appearance of the text cursor is determined by the terminal, not by
the <code class="code">cursor</code> face.
</p>
<p>You can also use X resources to specify attributes of any particular
face.  See <a class="xref" href="X-Resources.xhtml#Resources">X Resources</a>.
</p>
<p>Emacs can display variable-width fonts, but some Emacs commands,
particularly indentation commands, do not account for variable
character display widths.  Therefore, we recommend not using
variable-width fonts for most faces, particularly those assigned by
Font Lock mode.
</p>
</div>
<div class="section-level-extent" id="Colors">
<h3 class="section" id="Colors-for-Faces">15.9 Colors for Faces</h3>

<p>Faces can have various foreground and background colors.  When you
specify a color for a face&#8212;for instance, when customizing the face
(see <a class="pxref" href="Customization.xhtml#Face-Customization">Customizing Faces</a>)&#8212;you can use either a <em class="dfn">color name</em>
or an <em class="dfn">RGB triplet</em>.
</p>
<div class="subsection-level-extent" id="Color-Names">
<h4 class="subsection">15.9.1 Color Names</h4>
<a class="index-entry-id" id="index-color-name"></a>
<a class="index-entry-id" id="index-list_002dcolors_002ddisplay"></a>
<a class="index-entry-id" id="index-list_002dcolors_002dsort"></a>
<p>A color name is a pre-defined name, such as &#8216;<samp class="samp">dark orange</samp>&#8217; or
&#8216;<samp class="samp">medium sea green</samp>&#8217;.  To view a list of color names, type <kbd class="kbd">M-x
list-colors-display</kbd>.  To control the order in which colors are shown,
customize <code class="code">list-colors-sort</code>.  If you run this command on a
graphical display, it shows the full range of color names known to
Emacs (these are the standard X11 color names, defined in X&#8217;s
<samp class="file">rgb.txt</samp> file).  If you run the command on a text terminal, it
shows only a small subset of colors that can be safely displayed on
such terminals.  However, Emacs understands X11 color names even on
text terminals; if a face is given a color specified by an X11 color
name, it is displayed using the closest-matching terminal color.
</p>
</div>
<div class="subsection-level-extent" id="RGB-Triplets">
<h4 class="subsection">15.9.2 RGB Triplets</h4>
<a class="index-entry-id" id="index-RGB-triplet"></a>
<p>An RGB triplet is a string of the form &#8216;<samp class="samp">#RRGGBB</samp>&#8217;.  Each of the
primary color components is represented by a hexadecimal number
between &#8216;<samp class="samp">00</samp>&#8217; (intensity 0) and &#8216;<samp class="samp">FF</samp>&#8217; (the maximum intensity).
It is also possible to use one, three, or four hex digits for each
component, so &#8216;<samp class="samp">red</samp>&#8217; can be represented as &#8216;<samp class="samp">#F00</samp>&#8217;,
&#8216;<samp class="samp">#fff000000</samp>&#8217;, or &#8216;<samp class="samp">#ffff00000000</samp>&#8217;.  The components must have
the same number of digits.  For hexadecimal values A to F, either
upper or lower case are acceptable.
</p>
<p>The <kbd class="kbd">M-x list-colors-display</kbd> command also shows the equivalent
RGB triplet for each named color.  For instance, &#8216;<samp class="samp">medium sea
green</samp>&#8217; is equivalent to &#8216;<samp class="samp">#3CB371</samp>&#8217;.
</p>
<a class="index-entry-id" id="index-face-colors_002c-setting"></a>
<a class="index-entry-id" id="index-set_002dface_002dforeground"></a>
<a class="index-entry-id" id="index-set_002dface_002dbackground"></a>
<p>You can change the foreground and background colors of a face with
<kbd class="kbd">M-x set-face-foreground</kbd> and <kbd class="kbd">M-x set-face-background</kbd>.
These commands prompt in the minibuffer for a face name and a color,
with completion, and then set that face to use the specified color.
They affect the face colors on all frames, but their effects do not
persist for future Emacs sessions, unlike using the customization
buffer or X resources.  You can also use frame parameters to set
foreground and background colors for a specific frame; See <a class="xref" href="Frames.xhtml#Frame-Parameters">Frame Parameters</a>.
</p>
</div>
</div>
<div class="section-level-extent" id="Standard-Faces">
<h3 class="section" id="Standard-Faces-1">15.10 Standard Faces</h3>
<a class="index-entry-id" id="index-standard-faces"></a>

<p>Here are the standard faces for specifying text appearance.  You can
apply them to specific text when you want the effects they produce.
</p>
<dl class="table">
<dt><code class="code">default</code></dt>
<dd><p>This face is used for ordinary text that doesn&#8217;t specify any face.
Its background color is used as the frame&#8217;s background color.
</p>
</dd>
<dt><code class="code">bold</code></dt>
<dd><p>This face uses a bold variant of the default font.
</p>
</dd>
<dt><code class="code">italic</code></dt>
<dd><p>This face uses an italic variant of the default font.
</p>
</dd>
<dt><code class="code">bold-italic</code></dt>
<dd><p>This face uses a bold italic variant of the default font.
</p>
</dd>
<dt><code class="code">underline</code></dt>
<dd><p>This face underlines text.
</p>
</dd>
<dt><code class="code">fixed-pitch</code></dt>
<dd><p>This face forces use of a fixed-width font.  It&#8217;s reasonable to
customize this face to use a different fixed-width font, if you like,
but you should not make it a variable-width font.
</p>
</dd>
<dt><code class="code">fixed-pitch-serif</code></dt>
<dd><p>This face is like <code class="code">fixed-pitch</code>, except the font has serifs and
looks more like traditional typewriting.
</p>
</dd>
<dt><a id="index-variable_002dpitch-face"></a><code class="code">variable-pitch</code></dt>
<dd><p>This face forces use of a variable-width (i.e., proportional) font.
The font size picked for this face matches the font picked for the
default (usually fixed-width) font.
</p>
</dd>
<dt><code class="code">variable-pitch-text</code></dt>
<dd><p>This is like the <code class="code">variable-pitch</code> face (from which it inherits),
but is slightly larger.  A proportional font of the same height as a
monospace font usually appears visually smaller, and can therefore be
harder to read.  When displaying longer texts, this face can be a good
choice over the (slightly smaller) <code class="code">variable-pitch</code> face.
</p>
</dd>
<dt><a id="index-shadow-face"></a><code class="code">shadow</code></dt>
<dd><p>This face is used for making the text less noticeable than the surrounding
ordinary text.  Usually this can be achieved by using shades of gray in
contrast with either black or white default foreground color.
</p></dd>
</dl>

<p>Here&#8217;s an incomplete list of faces used to highlight parts of the
text temporarily for specific purposes.  (Many other modes define
their own faces for this purpose.)
</p>
<dl class="table">
<dt><code class="code">highlight</code></dt>
<dd><p>This face is used for text highlighting in various contexts, such as
when the mouse cursor is moved over a hyperlink.
</p></dd>
<dt><code class="code">isearch</code></dt>
<dd><p>This face is used to highlight the current Isearch match
(see <a class="pxref" href="Search.xhtml#Incremental-Search">Incremental Search</a>).
</p></dd>
<dt><code class="code">query-replace</code></dt>
<dd><p>This face is used to highlight the current Query Replace match
(see <a class="pxref" href="Search.xhtml#Replace">Replacement Commands</a>).
</p></dd>
<dt><code class="code">lazy-highlight</code></dt>
<dd><p>This face is used to highlight lazy matches for Isearch and Query
Replace (matches other than the current one).
</p></dd>
<dt><code class="code">region</code></dt>
<dd><p>This face is used for displaying an active region (see <a class="pxref" href="Mark.xhtml#Mark">The Mark and the Region</a>).
When Emacs is built with GTK+ support, its colors are taken from the
current GTK+ theme.
</p></dd>
<dt><code class="code">secondary-selection</code></dt>
<dd><p>This face is used for displaying a secondary X selection (see <a class="pxref" href="Killing.xhtml#Secondary-Selection">Secondary Selection</a>).
</p></dd>
<dt><code class="code">trailing-whitespace</code></dt>
<dd><p>The face for highlighting excess spaces and tabs at the end of a line
when <code class="code">show-trailing-whitespace</code> is non-<code class="code">nil</code> (see <a class="pxref" href="#Useless-Whitespace">Useless Whitespace</a>).
</p></dd>
<dt><code class="code">escape-glyph</code></dt>
<dd><p>The face for displaying control characters and escape sequences
(see <a class="pxref" href="#Text-Display">How Text Is Displayed</a>).
</p></dd>
<dt><code class="code">homoglyph</code></dt>
<dd><p>The face for displaying lookalike characters, i.e., characters that
look like but are not the characters being represented
(see <a class="pxref" href="#Text-Display">How Text Is Displayed</a>).
</p></dd>
<dt><code class="code">nobreak-space</code></dt>
<dd><p>The face for displaying no-break space characters (see <a class="pxref" href="#Text-Display">How Text Is Displayed</a>).
</p></dd>
<dt><code class="code">nobreak-hyphen</code></dt>
<dd><p>The face for displaying no-break hyphen characters (see <a class="pxref" href="#Text-Display">How Text Is Displayed</a>).
</p></dd>
</dl>

<p>The following faces control the appearance of parts of the Emacs
frame:
</p>
<dl class="table">
<dt><a id="index-mode_002dline-face"></a><code class="code">mode-line</code></dt>
<dd><p>This is the base face used for the mode lines, as well as header lines
and for menu bars when toolkit menus are not used.  By default, it&#8217;s
drawn with shadows for a raised effect on graphical displays, and
drawn as the inverse of the default face on text terminals.
</p>
<p>The <code class="code">mode-line-active</code> and <code class="code">mode-line-inactive</code> faces (which
are the ones used on the mode lines) inherit from this face.
</p>
</dd>
<dt><a id="index-faces-for-mode-lines"></a><code class="code">mode-line-active</code></dt>
<dd><p>Like <code class="code">mode-line</code>, but used for the mode line of the currently
selected window.  This face inherits from <code class="code">mode-line</code>, so changes
in that face affect mode lines in all windows.
</p>
</dd>
<dt><a id="index-mode_002dline_002dinactive-face"></a><code class="code">mode-line-inactive</code></dt>
<dd><p>Like <code class="code">mode-line</code>, but used for mode lines of the windows other
than the selected one (if <code class="code">mode-line-in-non-selected-windows</code> is
non-<code class="code">nil</code>).  This face inherits from <code class="code">mode-line</code>, so changes
in that face affect mode lines in all windows.
</p>
</dd>
<dt><a id="index-mode_002dline_002dhighlight-face"></a><code class="code">mode-line-highlight</code></dt>
<dd><p>Like <code class="code">highlight</code>, but used for mouse-sensitive portions of text
on mode lines.  Such portions of text typically pop up tooltips
(see <a class="pxref" href="Frames.xhtml#Tooltips">Tooltips</a>) when the mouse pointer hovers above them.
</p>
</dd>
<dt><a id="index-mode_002dline_002dbuffer_002did-face"></a><code class="code">mode-line-buffer-id</code></dt>
<dd><p>This face is used for buffer identification parts in the mode line.
</p>
</dd>
<dt><a id="index-header_002dline-face"></a><code class="code">header-line</code></dt>
<dd><p>Similar to <code class="code">mode-line</code> for a window&#8217;s header line, which appears
at the top of a window just as the mode line appears at the bottom.
Most windows do not have a header line&#8212;only some special modes, such
Info mode, create one.
</p>
</dd>
<dt><a id="index-header_002dline_002dhighlight-face"></a><code class="code">header-line-highlight</code></dt>
<dd><p>Similar to <code class="code">highlight</code> and <code class="code">mode-line-highlight</code>, but used
for mouse-sensitive portions of text on header lines.  This is a
separate face because the <code class="code">header-line</code> face might be customized
in a way that does not interact well with <code class="code">highlight</code>.
</p>
</dd>
<dt><a id="index-tab_002dline-face"></a><code class="code">tab-line</code></dt>
<dd><p>Similar to <code class="code">mode-line</code> for a window&#8217;s tab line, which appears
at the top of a window with tabs representing window buffers.
See <a class="xref" href="Windows.xhtml#Tab-Line">Window Tab Line</a>.
</p>
</dd>
<dt><a id="index-vertical_002dborder-face"></a><code class="code">vertical-border</code></dt>
<dd><p>This face is used for the vertical divider between windows on text
terminals.
</p>
</dd>
<dt><a class="index-entry-id" id="index-minibuffer_002dprompt_002dproperties"></a>
<a id="index-minibuffer_002dprompt-face"></a><code class="code">minibuffer-prompt</code></dt>
<dd><p>This face is used for the prompt strings displayed in the minibuffer.
By default, Emacs automatically adds this face to the value of
<code class="code">minibuffer-prompt-properties</code>, which is a list of text
properties (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html#Text-Properties">Text Properties</a> in <cite class="cite">the Emacs Lisp Reference
Manual</cite>) used to display the prompt text.  (This variable takes effect
when you enter the minibuffer.)
</p>
</dd>
<dt><a id="index-fringe-face"></a><code class="code">fringe</code></dt>
<dd><p>The face for the fringes to the left and right of windows on graphic
displays.  (The fringes are the narrow portions of the Emacs frame
between the text area and the window&#8217;s right and left borders.)
See <a class="xref" href="#Fringes">Window Fringes</a>.
</p>
</dd>
<dt><code class="code">cursor</code></dt>
<dd><p>The <code class="code">:background</code> attribute of this face specifies the color of
the text cursor.  See <a class="xref" href="#Cursor-Display">Displaying the Cursor</a>.
</p>
</dd>
<dt><code class="code">tooltip</code></dt>
<dd><p>This face is used for tooltip text.  By default, if Emacs is built
with GTK+ support, tooltips are drawn via GTK+ and this face has no
effect.  See <a class="xref" href="Frames.xhtml#Tooltips">Tooltips</a>.
</p>
</dd>
<dt><code class="code">mouse</code></dt>
<dd><p>This face determines the color of the mouse pointer.
</p></dd>
</dl>

<p>The following faces likewise control the appearance of parts of the
Emacs frame, but only on text terminals, or when Emacs is built on X
with no toolkit support.  (For all other cases, the appearance of the
respective frame elements is determined by system-wide settings.)
</p>
<dl class="table">
<dt><code class="code">scroll-bar</code></dt>
<dd><p>This face determines the visual appearance of the scroll bar.
See <a class="xref" href="Frames.xhtml#Scroll-Bars">Scroll Bars</a>.
</p></dd>
<dt><code class="code">tool-bar</code></dt>
<dd><p>This face determines the color of tool bar icons.  See <a class="xref" href="Frames.xhtml#Tool-Bars">Tool Bars</a>.
</p></dd>
<dt><code class="code">tab-bar</code></dt>
<dd><p>This face determines the color of tab bar icons.  See <a class="xref" href="Frames.xhtml#Tab-Bars">Tab Bars</a>.
</p></dd>
<dt><a class="index-entry-id" id="index-menu-face_002c-no-effect-if-customized"></a>
<a class="index-entry-id" id="index-customization-of-menu-face"></a>
<a id="index-menu-bar-appearance"></a><code class="code">menu</code></dt>
<dd><p>This face determines the colors and font of Emacs&#8217;s menus.  See <a class="xref" href="Frames.xhtml#Menu-Bars">Menu Bars</a>.
</p></dd>
<dt><a class="index-entry-id" id="index-TTY-menu-faces"></a>
<a id="index-faces-for-text_002dmode-menus"></a><code class="code">tty-menu-enabled-face</code></dt>
<dd><p>This face is used to display enabled menu items on text-mode
terminals.
</p></dd>
<dt><code class="code">tty-menu-disabled-face</code></dt>
<dd><p>This face is used to display disabled menu items on text-mode
terminals.
</p></dd>
<dt><code class="code">tty-menu-selected-face</code></dt>
<dd><p>This face is used to display on text-mode terminals the menu item that
would be selected if you click a mouse or press <kbd class="key">RET</kbd>.
</p></dd>
</dl>

</div>
<div class="section-level-extent" id="Icons">
<h3 class="section" id="Icons-1">15.11 Icons</h3>
<a class="index-entry-id" id="index-icons_002c-on-clickable-buttons"></a>

<p>Emacs sometimes displays clickable buttons (or other informative
icons), and you can customize how these look on display.
</p>
<a class="index-entry-id" id="index-icon_002dpreference"></a>
<p>The main customization point here is the <code class="code">icon-preference</code> user
option.  By using this, you can tell Emacs your overall preferences
for icons.  This is a list of icon types, and the first icon type
that&#8217;s supported will be used.  The supported types are:
</p>
<dl class="table">
<dt><code class="code">image</code></dt>
<dd><p>Use an image for the icon.
</p>
</dd>
<dt><code class="code">emoji</code></dt>
<dd><p>Use a colorful emoji for the icon.
</p>
</dd>
<dt><code class="code">symbol</code></dt>
<dd><p>Use a monochrome symbol for the icon.
</p>
</dd>
<dt><code class="code">text</code></dt>
<dd><p>Use a simple text for the icon.
</p></dd>
</dl>

<p>In addition, each individual icon can be customized with <kbd class="kbd">M-x
customize-icon</kbd>, and themes can further alter the looks of the icons.
</p>
<p>To get a quick description of an icon, use the <kbd class="kbd">M-x describe-icon</kbd>
command.
</p>
</div>
<div class="section-level-extent" id="Text-Scale">
<h3 class="section" id="Text-Scale-1">15.12 Text Scale</h3>

<a class="index-entry-id" id="index-adjust-buffer-font-size"></a>
<a class="index-entry-id" id="index-font-size-of-default-face_002c-increase-or-decrease"></a>
<a class="index-entry-id" id="index-text_002dscale_002dadjust"></a>
<a class="index-entry-id" id="index-C_002dx-C_002d_002b"></a>
<a class="index-entry-id" id="index-C_002dx-C_002d_002d"></a>
<a class="index-entry-id" id="index-C_002dx-C_002d_003d"></a>
<a class="index-entry-id" id="index-C_002dx-C_002d0"></a>
<a class="index-entry-id" id="index-C_002dwheel_002ddown"></a>
<a class="index-entry-id" id="index-C_002dwheel_002dup"></a>
<p>To increase the font size of the <code class="code">default</code> face in the current
buffer, type <kbd class="kbd">C-x C-+</kbd> or <kbd class="kbd">C-x C-=</kbd>.  To decrease it, type
<kbd class="kbd">C-x C--</kbd>.  To restore the default (global) font size, type
<kbd class="kbd">C-x C-0</kbd>.  These keys are all bound to the same command,
<code class="code">text-scale-adjust</code>, which looks at the last key typed to
determine which action to take and adjusts the font size accordingly
by changing the height of the default face.
</p>
<p>Most faces don&#8217;t have an explicit setting of the <code class="code">:height</code>
attribute, and thus inherit the height from the <code class="code">default</code> face.
Those faces are also scaled by the above commands.
</p>
<p>Faces other than <code class="code">default</code> that have an explicit setting of the
<code class="code">:height</code> attribute are not affected by these font size changes.
The <code class="code">header-line</code> face is an exception: it will be scaled even if
it has an explicit setting of the <code class="code">:height</code> attribute.
</p>
<p>Similarly, scrolling the mouse wheel with the <kbd class="kbd">Ctrl</kbd> modifier
pressed, when the mouse pointer is above buffer text, will increase or
decrease the font size of the affected faces, depending on the
direction of the scrolling.
</p>
<p>The final key of these commands may be repeated without the leading
<kbd class="kbd">C-x</kbd> and without the modifiers.  For instance, <kbd class="kbd">C-x&#160;C-=&#160;C-=&#160;C-=</kbd><!-- /@w -->
and <kbd class="kbd">C-x&#160;C-=&#160;=&#160;=</kbd><!-- /@w --> increase the face height by three steps.  Each
step scales the text height by a factor of 1.2; to change this factor,
customize the variable <code class="code">text-scale-mode-step</code>.  A numeric
argument of 0 to the <code class="code">text-scale-adjust</code> command restores the
default height, the same as typing <kbd class="kbd">C-x C-0</kbd>.
</p>
<a class="index-entry-id" id="index-adjust-global-font-size"></a>
<a class="index-entry-id" id="index-global_002dtext_002dscale_002dadjust"></a>
<a class="index-entry-id" id="index-global_002dtext_002dscale_002dadjust_002dresizes_002dframes"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dM_002d_002b"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dM_002d_003d"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dM_002d_002d"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dM_002d0"></a>
<a class="index-entry-id" id="index-C_002dM_002dwheel_002ddown"></a>
<a class="index-entry-id" id="index-C_002dM_002dwheel_002dup"></a>
<p>Similarly, to change the sizes of the fonts globally, type <kbd class="kbd">C-x
C-M-+</kbd>, <kbd class="kbd">C-x C-M-=</kbd>, <kbd class="kbd">C-x C-M--</kbd> or <kbd class="kbd">C-x C-M-0</kbd>, or scroll
the mouse wheel with both the <kbd class="kbd">Ctrl</kbd> and <kbd class="kbd">Meta</kbd> modifiers
pressed.  To enable frame resizing when the font size is changed
globally, customize the variable
<code class="code">global-text-scale-adjust-resizes-frames</code> (see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>).
</p>
<a class="index-entry-id" id="index-increase-buffer-font-size"></a>
<a class="index-entry-id" id="index-text_002dscale_002dincrease"></a>
<a class="index-entry-id" id="index-decrease-buffer-font-size"></a>
<a class="index-entry-id" id="index-text_002dscale_002ddecrease"></a>
<p>The commands <code class="code">text-scale-increase</code> and
<code class="code">text-scale-decrease</code> increase or decrease the size of the font
in the current buffer, just like <kbd class="kbd">C-x C-+</kbd> and <kbd class="kbd">C-x C--</kbd>
respectively.  You may find it convenient to bind to these commands,
rather than <code class="code">text-scale-adjust</code>.
</p>
<a class="index-entry-id" id="index-set-buffer-font-size"></a>
<a class="index-entry-id" id="index-text_002dscale_002dset"></a>
<p>The command <code class="code">text-scale-set</code> scales the size of the font in the
current buffer to an absolute level specified by its prefix argument.
</p>
<a class="index-entry-id" id="index-text_002dscale_002dmode"></a>
<p>The above commands automatically enable the minor mode
<code class="code">text-scale-mode</code> if the current font scaling is other than 1,
and disable it otherwise.
</p>
<a class="index-entry-id" id="index-pinch-to-scale"></a>
<a class="index-entry-id" id="index-text_002dscale_002dpinch"></a>
<p>The command <code class="code">text-scale-pinch</code> increases or decreases the text
scale based on the distance between fingers on a touchpad when a pinch
gesture is performed by placing two fingers on a touchpad and moving
them towards or apart from each other.  This is only available on some
systems with supported hardware.
</p>
<a class="index-entry-id" id="index-mouse_002dwheel_002dtext_002dscale"></a>
<p>The command <code class="code">mouse-wheel-text-scale</code> also changes the text
scale.  Normally, it is run when you press <kbd class="key">Ctrl</kbd> while moving the
mouse wheel.  The text scale is increased when the wheel is moved
downwards, and it is decreased when the wheel is moved upwards.
</p>
</div>
<div class="section-level-extent" id="Font-Lock">
<h3 class="section" id="Font-Lock-mode">15.13 Font Lock mode</h3>
<a class="index-entry-id" id="index-Font-Lock-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Font-Lock"></a>
<a class="index-entry-id" id="index-syntax-highlighting-and-coloring"></a>

<p>Font Lock mode is a minor mode, always local to a particular buffer,
which assigns faces to (or <em class="dfn">fontifies</em>) the text in the buffer.
Each buffer&#8217;s major mode tells Font Lock mode which text to fontify;
for instance, programming language modes fontify syntactically
relevant constructs like comments, strings, and function names.
</p>
<a class="index-entry-id" id="index-font_002dlock_002dmode"></a>
<p>Font Lock mode is enabled by default in major modes that support it.
To toggle it in the current buffer, type <kbd class="kbd">M-x font-lock-mode</kbd>.  A
positive numeric argument unconditionally enables Font Lock mode, and
a negative or zero argument disables it.
</p>
<a class="index-entry-id" id="index-global_002dfont_002dlock_002dmode"></a>
<a class="index-entry-id" id="index-global_002dfont_002dlock_002dmode-1"></a>
<p>Type <kbd class="kbd">M-x global-font-lock-mode</kbd> to toggle Font Lock mode in all
buffers.  To impose this setting for future Emacs sessions, customize
the variable <code class="code">global-font-lock-mode</code> (see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>), or add the following line to your init file:
</p>
<div class="example">
<pre class="example-preformatted">(global-font-lock-mode 0)
</pre></div>

<p>If you have disabled Global Font Lock mode, you can still enable Font
Lock for specific major modes by adding the function
<code class="code">font-lock-mode</code> to the mode hooks (see <a class="pxref" href="Customization.xhtml#Hooks">Hooks</a>).  For example,
to enable Font Lock mode for editing C files, you can do this:
</p>
<div class="example">
<pre class="example-preformatted">(add-hook 'c-mode-hook 'font-lock-mode)
</pre></div>

<p>Font Lock mode uses several specifically named faces to do its job,
including <code class="code">font-lock-string-face</code>, <code class="code">font-lock-comment-face</code>,
and others.  The easiest way to find them all is to use <kbd class="kbd">M-x
customize-group <kbd class="key">RET</kbd> font-lock-faces <kbd class="key">RET</kbd></kbd>.  You can then
use that customization buffer to customize the appearance of these
faces.  See <a class="xref" href="Customization.xhtml#Face-Customization">Customizing Faces</a>.
</p>
<a class="index-entry-id" id="index-just_002din_002dtime-_0028JIT_0029-font_002dlock"></a>
<a class="index-entry-id" id="index-background-syntax-highlighting"></a>
<p>Fontifying very large buffers can take a long time.  To avoid large
delays when a file is visited, Emacs initially fontifies only the
visible portion of a buffer.  As you scroll through the buffer, each
portion that becomes visible is fontified as soon as it is displayed;
this type of Font Lock is called <em class="dfn">Just-In-Time</em> (or <em class="dfn">JIT</em>)
Lock.  You can control how JIT Lock behaves, including telling it to
perform fontification while idle, by customizing variables in the
customization group &#8216;<samp class="samp">jit-lock</samp>&#8217;.  See <a class="xref" href="Customization.xhtml#Specific-Customization">Customizing Specific Items</a>.
</p>
<p>The information that major modes use for determining which parts of
buffer text to fontify and what faces to use can be based on several
different ways of analyzing the text:
</p>
<ul class="itemize mark-bullet">
<li>Search for keywords and other textual patterns based on regular
expressions (see <a class="pxref" href="Search.xhtml#Regexp-Search">Regular Expression Search</a>).

</li><li>Find syntactically distinct parts of text based on built-in syntax
tables (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Tables.html#Syntax-Tables">Syntax Tables</a> in <cite class="cite">The Emacs Lisp Reference
Manual</cite>).

</li><li>Use syntax tree produced by a full-blown parser, via a special-purpose
library, such as the tree-sitter library (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Parsing-Program-Source.html#Parsing-Program-Source">Parsing Program
Source</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>), or an external
program.
</li></ul>


<div class="subsection-level-extent" id="Traditional-Font-Lock">
<h4 class="subsection" id="Traditional-Font-Lock-1">15.13.1 Traditional Font Lock</h4>
<a class="index-entry-id" id="index-traditional-font_002dlock"></a>

<p>&#8220;Traditional&#8221; methods of providing font-lock information are based
on regular-expression search and on syntactic analysis using syntax
tables built into Emacs.  This subsection describes the use and
customization of font-lock for major modes which use these traditional
methods.
</p>
<a class="index-entry-id" id="index-font_002dlock_002dmaximum_002ddecoration"></a>
<p>You can control the amount of fontification applied by Font Lock
mode by customizing the variable <code class="code">font-lock-maximum-decoration</code>,
for major modes that support this feature.  The value of this variable
should be a number (with 1 representing a minimal amount of
fontification; some modes support levels as high as 3); or <code class="code">t</code>,
meaning &#8220;as high as possible&#8221; (the default).  To be effective for a
given file buffer, the customization of
<code class="code">font-lock-maximum-decoration</code> should be done <em class="emph">before</em> the
file is visited; if you already have the file visited in a buffer when
you customize this variable, kill the buffer and visit the file again
after the customization.
</p>
<p>You can also specify different numbers for particular major modes; for
example, to use level 1 for C/C++ modes, and the default level
otherwise, use the value
</p>
<div class="example">
<pre class="example-preformatted">'((c-mode . 1) (c++-mode . 1)))
</pre></div>

<a class="index-entry-id" id="index-incorrect-fontification"></a>
<a class="index-entry-id" id="index-parenthesis-in-column-zero-and-fontification"></a>
<a class="index-entry-id" id="index-brace-in-column-zero-and-fontification"></a>
<p>Comment and string fontification (or &#8220;syntactic&#8221; fontification)
relies on analysis of the syntactic structure of the buffer text.  For
the sake of speed, some modes, including Lisp mode, rely on a special
convention: an open-parenthesis or open-brace in the leftmost column
always defines the beginning of a defun, and is thus always outside
any string or comment.  Therefore, you should avoid placing an
open-parenthesis or open-brace in the leftmost column, if it is inside
a string or comment.  See <a class="xref" href="Programs.xhtml#Left-Margin-Paren">Left Margin Convention</a>, for details.
</p>
<a class="index-entry-id" id="index-font_002dlock_002dadd_002dkeywords"></a>
<p>Font Lock highlighting patterns already exist for most modes, but
you may want to fontify additional patterns.  You can use the function
<code class="code">font-lock-add-keywords</code>, to add your own highlighting patterns
for a particular mode.  For example, to highlight &#8216;<samp class="samp">FIXME:</samp>&#8217; words
in C comments, use this:
</p>
<div class="example">
<pre class="example-preformatted">(add-hook 'c-mode-hook
          (lambda ()
           (font-lock-add-keywords nil
            '((&quot;\\&lt;\\(FIXME\\):&quot; 1
               font-lock-warning-face t)))))
</pre></div>

<a class="index-entry-id" id="index-font_002dlock_002dremove_002dkeywords"></a>
<a class="index-entry-id" id="index-font_002dlock_002dignore"></a>
<p>To remove keywords from the font-lock highlighting patterns, use the
function <code class="code">font-lock-remove-keywords</code>.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Search_002dbased-Fontification.html#Search_002dbased-Fontification">Search-based
Fontification</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.
Alternatively, you can selectively disable highlighting due to some
keywords by customizing the <code class="code">font-lock-ignore</code> option,
see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Customizing-Keywords.html#Customizing-Keywords">Customizing Keywords</a> in <cite class="cite">The Emacs Lisp Reference
Manual</cite>.
</p>
</div>
<div class="subsection-level-extent" id="Parser_002dbased-Font-Lock">
<h4 class="subsection" id="Parser_002dbased-Font-Lock-1">15.13.2 Parser-based Font Lock</h4>
<a class="index-entry-id" id="index-font_002dlock-via-tree_002dsitter"></a>
<a class="index-entry-id" id="index-parser_002dbased-font_002dlock"></a>
<p>If your Emacs was built with the tree-sitter library, it can use the
results of parsing the buffer text by that library for the purposes of
fontification.  This is usually faster and more accurate than the
&#8220;traditional&#8221; methods described in the previous subsection, since
the tree-sitter library provides full-blown parsers for programming
languages and other kinds of formatted text which it supports.  Major
modes which utilize the tree-sitter library are named
<code class="code"><var class="var">foo</var>-ts-mode</code>, with the &#8216;<samp class="samp">-ts-</samp>&#8217; part indicating the use
of the library.  This subsection documents the Font Lock support based
on the tree-sitter library.
</p>
<a class="index-entry-id" id="index-treesit_002dfont_002dlock_002dlevel"></a>
<p>You can control the amount of fontification applied by Font Lock
mode of major modes based on tree-sitter by customizing the variable
<code class="code">treesit-font-lock-level</code>.  Its value is a number between 1 and
4:
</p>
<dl class="table">
<dt>Level 1</dt>
<dd><p>This level usually fontifies only comments and function names in
function definitions.
</p></dd>
<dt>Level 2</dt>
<dd><p>This level adds fontification of keywords, strings, and data types.
</p></dd>
<dt>Level 3</dt>
<dd><p>This is the default level; it adds fontification of assignments,
numbers, etc.
</p></dd>
<dt>Level 4</dt>
<dd><p>This level adds everything else that can be fontified: operators,
delimiters, brackets, other punctuation, function names in function
calls, property look ups, variables, etc.
</p></dd>
</dl>

<a class="index-entry-id" id="index-treesit_002dfont_002dlock_002dfeature_002dlist"></a>
<p>What exactly constitutes each of the syntactical categories mentioned
above depends on the major mode and the parser grammar used by
tree-sitter for the major-mode&#8217;s language.  However, in general the
categories follow the conventions of the programming language or the
file format supported by the major mode.  The buffer-local value of
the variable <code class="code">treesit-font-lock-feature-list</code> holds the
fontification features supported by a tree-sitter based major mode,
where each sub-list shows the features provided by the corresponding
fontification level.
</p>
<p>Once you change the value of <code class="code">treesit-font-lock-level</code> via
<kbd class="kbd">M-x&#160;customize-variable</kbd><!-- /@w --> (see <a class="pxref" href="Customization.xhtml#Specific-Customization">Customizing Specific Items</a>), it
takes effect immediately in all the existing buffers and for files you
visit in the future in the same session.
</p>

</div>
</div>
<div class="section-level-extent" id="Highlight-Interactively">
<h3 class="section" id="Interactive-Highlighting">15.14 Interactive Highlighting</h3>
<a class="index-entry-id" id="index-highlighting-by-matching"></a>
<a class="index-entry-id" id="index-interactive-highlighting"></a>
<a class="index-entry-id" id="index-Highlight-Changes-mode"></a>

<a class="index-entry-id" id="index-highlight_002dchanges_002dmode"></a>
<p>Highlight Changes mode is a minor mode that <em class="dfn">highlights</em> the parts
of the buffer that were changed most recently, by giving that text a
different face.  To enable or disable Highlight Changes mode, use
<kbd class="kbd">M-x highlight-changes-mode</kbd>.
</p>
<a class="index-entry-id" id="index-Hi-Lock-mode"></a>
<a class="index-entry-id" id="index-hi_002dlock_002dmode"></a>
<p>Hi Lock mode is a minor mode that highlights text that matches
regular expressions you specify.  For example, you can use it to
highlight all the references to a certain variable in a program source
file, highlight certain parts in a voluminous output of some program,
or highlight certain names in an article.  To enable or disable Hi
Lock mode, use the command <kbd class="kbd">M-x hi-lock-mode</kbd>.  To enable Hi Lock
mode for all buffers, use <kbd class="kbd">M-x global-hi-lock-mode</kbd> or place
<code class="code">(global-hi-lock-mode 1)</code> in your <samp class="file">.emacs</samp> file.
</p>
<p>Hi Lock mode works like Font Lock mode (see <a class="pxref" href="#Font-Lock">Font Lock mode</a>), except
that you specify explicitly the regular expressions to highlight.  You
can control them with the following commands.  (The key bindings
below that begin with <kbd class="kbd">C-x w</kbd> are deprecated in favor of the
global <kbd class="kbd">M-s h</kbd> bindings, and will be removed in some future Emacs
version.)
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-C_002dx-w-h"></a>
<a class="index-entry-id" id="index-highlight_002dregexp"></a>
<a id="index-M_002ds-h-r"></a><kbd class="kbd">M-s h r <var class="var">regexp</var> <kbd class="key">RET</kbd> <var class="var">face</var> <kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">C-x w h <var class="var">regexp</var> <kbd class="key">RET</kbd> <var class="var">face</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Highlight text that matches <var class="var">regexp</var> using face <var class="var">face</var>
(<code class="code">highlight-regexp</code>).  The highlighting will remain as long as
the buffer is loaded.  For example, to highlight all occurrences of
the word &#8220;whim&#8221; using the default face (a yellow background), type
<kbd class="kbd">M-s h r whim <kbd class="key">RET</kbd> <kbd class="key">RET</kbd></kbd>.  Any face can be used for
highlighting, Hi Lock provides several of its own and these are
pre-loaded into a list of default values.  While being prompted for a
face use <kbd class="kbd">M-n</kbd> and <kbd class="kbd">M-p</kbd> to cycle through them.  A prefix
numeric argument limits the highlighting to the corresponding
subexpression.
</p>
<a class="index-entry-id" id="index-hi_002dlock_002dauto_002dselect_002dface"></a>
<p>Setting the option <code class="code">hi-lock-auto-select-face</code> to a non-<code class="code">nil</code>
value causes this command (and other Hi Lock commands that read faces)
to automatically choose the next face from the default list without
prompting.
</p>
<p>You can use this command multiple times, specifying various regular
expressions to highlight in different ways.
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dx-w-r"></a>
<a class="index-entry-id" id="index-unhighlight_002dregexp"></a>
<a id="index-M_002ds-h-u"></a><kbd class="kbd">M-s h u <var class="var">regexp</var> <kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">C-x w r <var class="var">regexp</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Unhighlight <var class="var">regexp</var> (<code class="code">unhighlight-regexp</code>).  If you invoke
this from the menu, you select the expression to unhighlight from a
list.  If you invoke this from the keyboard, you use the minibuffer.
It will show the most recently added regular expression; use <kbd class="kbd">M-n</kbd>
to show the next older expression and <kbd class="kbd">M-p</kbd> to select the next
newer expression.  (You can also type the expression by hand, with
completion.)  When the expression you want to unhighlight appears in
the minibuffer, press <kbd class="kbd"><kbd class="key">RET</kbd></kbd> to exit the minibuffer and
unhighlight it.
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dx-w-l"></a>
<a class="index-entry-id" id="index-highlight_002dlines_002dmatching_002dregexp"></a>
<a class="index-entry-id" id="index-lines_002c-highlighting"></a>
<a class="index-entry-id" id="index-highlighting-lines-of-text"></a>
<a id="index-M_002ds-h-l"></a><kbd class="kbd">M-s h l <var class="var">regexp</var> <kbd class="key">RET</kbd> <var class="var">face</var> <kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">C-x w l <var class="var">regexp</var> <kbd class="key">RET</kbd> <var class="var">face</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Highlight entire lines containing a match for <var class="var">regexp</var>, using face
<var class="var">face</var> (<code class="code">highlight-lines-matching-regexp</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dx-w-p"></a>
<a class="index-entry-id" id="index-highlight_002dphrase"></a>
<a class="index-entry-id" id="index-phrase_002c-highlighting"></a>
<a class="index-entry-id" id="index-highlighting-phrase"></a>
<a id="index-M_002ds-h-p"></a><kbd class="kbd">M-s h p <var class="var">phrase</var> <kbd class="key">RET</kbd> <var class="var">face</var> <kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">C-x w p <var class="var">phrase</var> <kbd class="key">RET</kbd> <var class="var">face</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Highlight matches of <var class="var">phrase</var>, using face <var class="var">face</var>
(<code class="code">highlight-phrase</code>).  <var class="var">phrase</var> can be any regexp,
but spaces will be replaced by matches to whitespace and
initial lower-case letters will become case insensitive.
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dx-w-_002e"></a>
<a class="index-entry-id" id="index-highlight_002dsymbol_002dat_002dpoint"></a>
<a class="index-entry-id" id="index-symbol_002c-highlighting"></a>
<a class="index-entry-id" id="index-highlighting-symbol-at-point"></a>
<a id="index-M_002ds-h-_002e"></a><kbd class="kbd">M-s h .</kbd></dt>
<dt><kbd class="kbd">C-x w .</kbd></dt>
<dd><p>Highlight the symbol found near point, using the next available face
(<code class="code">highlight-symbol-at-point</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dx-w-b"></a>
<a class="index-entry-id" id="index-hi_002dlock_002dwrite_002dinteractive_002dpatterns"></a>
<a id="index-M_002ds-h-w"></a><kbd class="kbd">M-s h w</kbd></dt>
<dt><kbd class="kbd">C-x w b</kbd></dt>
<dd><p>Insert all the current highlighting regexp/face pairs into the buffer
at point, with comment delimiters to prevent them from changing your
program.  (This key binding runs the
<code class="code">hi-lock-write-interactive-patterns</code> command.)
</p>
<p>These patterns are extracted from the comments, if appropriate, if you
invoke <kbd class="kbd">M-x hi-lock-find-patterns</kbd>, or if you visit the file while
Hi Lock mode is enabled (since that runs <code class="code">hi-lock-find-patterns</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dx-w-i"></a>
<a class="index-entry-id" id="index-hi_002dlock_002dfind_002dpatterns"></a>
<a id="index-M_002ds-h-f"></a><kbd class="kbd">M-s h f</kbd></dt>
<dt><kbd class="kbd">C-x w i</kbd></dt>
<dd><p>Extract regexp/face pairs from comments in the current buffer
(<code class="code">hi-lock-find-patterns</code>).  Thus, you can enter patterns
interactively with <code class="code">highlight-regexp</code>, store them into the file
with <code class="code">hi-lock-write-interactive-patterns</code>, edit them (perhaps
including different faces for different parenthesized parts of the
match), and finally use this command (<code class="code">hi-lock-find-patterns</code>) to
have Hi Lock highlight the edited patterns.
</p>
<a class="index-entry-id" id="index-hi_002dlock_002dfile_002dpatterns_002dpolicy"></a>
<p>The variable <code class="code">hi-lock-file-patterns-policy</code> controls whether Hi
Lock mode should automatically extract and highlight patterns found in a
file when it is visited.  Its value can be <code class="code">nil</code> (never highlight),
<code class="code">ask</code> (query the user), or a function.  If it is a function,
<code class="code">hi-lock-find-patterns</code> calls it with the patterns as argument; if
the function returns non-<code class="code">nil</code>, the patterns are used.  The default
is <code class="code">ask</code>.  Note that patterns are always highlighted if you call
<code class="code">hi-lock-find-patterns</code> directly, regardless of the value of this
variable.
</p>
<a class="index-entry-id" id="index-hi_002dlock_002dexclude_002dmodes"></a>
<p>Also, <code class="code">hi-lock-find-patterns</code> does nothing if the current major
mode&#8217;s symbol is a member of the list <code class="code">hi-lock-exclude-modes</code>.
</p></dd>
</dl>

</div>
<div class="section-level-extent" id="Fringes">
<h3 class="section" id="Window-Fringes">15.15 Window Fringes</h3>
<a class="index-entry-id" id="index-fringes"></a>

<a class="index-entry-id" id="index-set_002dfringe_002dstyle"></a>
<a class="index-entry-id" id="index-fringe_002dmode"></a>
<a class="index-entry-id" id="index-fringe_002dmode-_0028variable_0029"></a>
<p>On graphical displays, each Emacs window normally has narrow
<em class="dfn">fringes</em> on the left and right edges.  The fringes are used to
display symbols that provide information about the text in the window.
You can type <kbd class="kbd">M-x fringe-mode</kbd> to toggle display of the fringes or
to modify their width.  This command affects fringes in all frames; to
modify fringes on the selected frame only, use <kbd class="kbd">M-x
set-fringe-style</kbd>.  You can make your changes to the fringes permanent
by customizing the variable <code class="code">fringe-mode</code>.
</p>
<p>The most common use of the fringes is to indicate a continuation
line (see <a class="pxref" href="Basic.xhtml#Continuation-Lines">Continuation Lines</a>).  When one line of text is split
into multiple screen lines, the left fringe shows a curving arrow for
each screen line except the first, indicating that this is not the
real beginning.  The right fringe shows a curving arrow for each
screen line except the last, indicating that this is not the real
end.  If the line&#8217;s direction is right-to-left (see <a class="pxref" href="International.xhtml#Bidirectional-Editing">Bidirectional Editing</a>), the meanings of the curving arrows in the fringes are
swapped.
</p>
<p>The fringes indicate line truncation (see <a class="pxref" href="#Line-Truncation">Line Truncation</a>) with
short horizontal arrows meaning there&#8217;s more text on this line which
is scrolled horizontally out of view.  Clicking the mouse on one of
the arrows scrolls the display horizontally in the direction of the
arrow.
</p>
<p>The fringes can also indicate other things, such as buffer
boundaries (see <a class="pxref" href="#Displaying-Boundaries">Displaying Boundaries</a>), unused lines near the end
of the window (see <a class="pxref" href="#indicate_002dempty_002dlines">indicate-empty-lines</a>), and where a program you
are debugging is executing (see <a class="pxref" href="Building.xhtml#Debuggers">Running Debuggers Under Emacs</a>).
</p>
<a class="index-entry-id" id="index-overflow_002dnewline_002dinto_002dfringe"></a>
<p>The fringe is also used for drawing the cursor, if the current line
is exactly as wide as the window and point is at the end of the line.
To disable this, change the variable
<code class="code">overflow-newline-into-fringe</code> to <code class="code">nil</code>; this causes Emacs
to continue or truncate lines that are exactly as wide as the window.
</p>
<p>If you customize <code class="code">fringe-mode</code> to remove the fringes on one or
both sides of the window display, the features that display on the
fringe are not available.  Indicators of line continuation and
truncation are an exception: when fringes are not available, Emacs
uses the leftmost and rightmost character cells to indicate
continuation and truncation with special ASCII characters, see
<a class="ref" href="Basic.xhtml#Continuation-Lines">Continuation Lines</a>, and <a class="ref" href="#Line-Truncation">Line Truncation</a>.  This reduces the
width available for displaying text on each line, because the
character cells used for truncation and continuation indicators are
reserved for that purpose.  Since buffer text can include
bidirectional text, and thus both left-to-right and right-to-left
paragraphs (see <a class="pxref" href="International.xhtml#Bidirectional-Editing">Bidirectional Editing</a>), removing only one of the
fringes still reserves two character cells, one on each side of the
window, for truncation and continuation indicators, because these
indicators are displayed on opposite sides of the window in
right-to-left paragraphs.
</p>
</div>
<div class="section-level-extent" id="Displaying-Boundaries">
<h3 class="section" id="Displaying-Boundaries-1">15.16 Displaying Boundaries</h3>

<a class="index-entry-id" id="index-mode_002c-display_002dfill_002dcolumn_002dindicator"></a>
<a class="index-entry-id" id="index-display_002dfill_002dcolumn_002dindicator_002dmode"></a>
<a class="index-entry-id" id="index-global_002ddisplay_002dfill_002dcolumn_002dindicator_002dmode"></a>
<p>Emacs can display an indication of the <code class="code">fill-column</code> position
(see <a class="pxref" href="Text.xhtml#Fill-Commands">Explicit Fill Commands</a>).  The fill-column indicator is a useful
functionality especially in <code class="code">prog-mode</code> and its descendants
(see <a class="pxref" href="Modes.xhtml#Major-Modes">Major Modes</a>) to indicate the position of a specific column
that has some special meaning for formatting the source code of a
program.  This assumes the buffer uses a fixed-pitch font, where all
the characters (with the possible exception of double-width
characters) have the same width on display.  If the buffer uses
variable-pitch fonts, the fill-column indicators on different lines
might appear unaligned.
</p>
<p>To activate the fill-column indication display, use the minor modes
<code class="code">display-fill-column-indicator-mode</code> and
<code class="code">global-display-fill-column-indicator-mode</code>, which enable
the indicator locally or globally, respectively.
</p>
<p>Alternatively, you can set the two buffer-local variables
<code class="code">display-fill-column-indicator</code> and
<code class="code">display-fill-column-indicator-character</code> to activate the
indicator and control the character used for the indication.  Note
that both variables must be non-<code class="code">nil</code> for the indication to be
displayed.  (Turning on the minor mode sets both these variables.)
</p>
<p>There are 2 buffer local variables and a face to customize this mode:
</p>
<dl class="table">
<dt><a id="index-display_002dfill_002dcolumn_002dindicator_002dcolumn"></a><code class="code">display-fill-column-indicator-column</code></dt>
<dd><p>Specifies the column number where the indicator should be set.  It can
take positive numerical values for the column, or the special value
<code class="code">t</code>, which means that the value of the variable
<code class="code">fill-column</code> will be used.
</p>
<p>Any other value disables the indicator.  The default value is <code class="code">t</code>.
</p>
</dd>
<dt><a id="index-display_002dfill_002dcolumn_002dindicator_002dcharacter"></a><code class="code">display-fill-column-indicator-character</code></dt>
<dd><p>Specifies the character used for the indicator.  This character can be
any valid character including Unicode ones if the font supports them.
The value <code class="code">nil</code> disables the indicator.  When the mode is enabled
through the functions <code class="code">display-fill-column-indicator-mode</code> or
<code class="code">global-display-fill-column-indicator-mode</code>, they will use the
character specified by this variable, if it is non-<code class="code">nil</code>;
otherwise Emacs will use the character U+2502 <small class="sc">BOX DRAWINGS LIGHT VERTICAL</small>,
falling back to &#8216;<samp class="samp">|</samp>&#8217; if U+2502 cannot be displayed.
</p>
</dd>
<dt><a id="index-fill_002dcolumn_002dindicator"></a><code class="code">fill-column-indicator</code></dt>
<dd><p>Specifies the face used to display the indicator.  It inherits its
default values from the face <code class="code">shadow</code>, but without background
color.  To change the indicator color, you need only set the foreground
color of this face.
</p></dd>
</dl>

<a class="index-entry-id" id="index-indicate_002dbuffer_002dboundaries"></a>
<p>On graphical displays, Emacs can indicate the buffer boundaries in
the fringes.  If you enable this feature, the first line and the last
line are marked with angle images in the fringes.  This can be
combined with up and down arrow images which say whether it is
possible to scroll the window.
</p>
<p>The buffer-local variable <code class="code">indicate-buffer-boundaries</code> controls
how the buffer boundaries and window scrolling is indicated in the
fringes.  If the value is <code class="code">left</code> or <code class="code">right</code>, both angle and
arrow bitmaps are displayed in the left or right fringe, respectively.
</p>
<p>If value is an alist (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html#Association-Lists">Association Lists</a> in <cite class="cite">the Emacs
Lisp Reference Manual</cite>), each element <code class="code">(<var class="var">indicator</var> .
<var class="var">position</var>)</code> specifies the position of one of the indicators.  The
<var class="var">indicator</var> must be one of <code class="code">top</code>, <code class="code">bottom</code>, <code class="code">up</code>,
<code class="code">down</code>, or <code class="code">t</code> which specifies the default position for the
indicators not present in the alist.  The <var class="var">position</var> is one of
<code class="code">left</code>, <code class="code">right</code>, or <code class="code">nil</code> which specifies not to show
this indicator.
</p>
<p>For example, <code class="code">((top . left) (t . right))</code> places the top angle
bitmap in left fringe, the bottom angle bitmap in right fringe, and
both arrow bitmaps in right fringe.  To show just the angle bitmaps in
the left fringe, but no arrow bitmaps, use <code class="code">((top .  left)
(bottom . left))</code>.
</p>
</div>
<div class="section-level-extent" id="Useless-Whitespace">
<h3 class="section" id="Useless-Whitespace-1">15.17 Useless Whitespace</h3>

<a class="index-entry-id" id="index-trailing-whitespace"></a>
<a class="index-entry-id" id="index-whitespace_002c-trailing"></a>
<a class="index-entry-id" id="index-show_002dtrailing_002dwhitespace"></a>
<p>It is easy to leave unnecessary spaces at the end of a line, or
empty lines at the end of a buffer, without realizing it.  In most
cases, this <em class="dfn">trailing whitespace</em> has no effect, but sometimes it
can be a nuisance.
</p>
<a class="index-entry-id" id="index-trailing_002dwhitespace-face"></a>
<p>You can make trailing whitespace at the end of a line visible by
setting the buffer-local variable <code class="code">show-trailing-whitespace</code> to
<code class="code">t</code>.  Then Emacs displays trailing whitespace, using the face
<code class="code">trailing-whitespace</code>.
</p>
<p>This feature does not apply when point is at the end of the line
containing the whitespace.  Strictly speaking, that is trailing
whitespace nonetheless, but displaying it specially in that case
looks ugly while you are typing in new text.  In this special case,
the location of point is enough to show you that the spaces are
present.
</p>
<a class="index-entry-id" id="index-delete_002dtrailing_002dwhitespace"></a>
<a class="index-entry-id" id="index-delete_002dtrailing_002dlines"></a>
<p>Type <kbd class="kbd">M-x delete-trailing-whitespace</kbd> to delete all trailing
whitespace.  This command deletes all extra spaces at the end of each
line in the buffer, and all empty lines at the end of the buffer; to
ignore the latter, change the variable <code class="code">delete-trailing-lines</code> to
<code class="code">nil</code>.  If the region is active, the command instead deletes
extra spaces at the end of each line in the region.
</p>
<a class="index-entry-id" id="index-indicate_002dempty_002dlines"></a>
<a class="index-entry-id" id="index-unused-lines"></a>
<a class="index-entry-id" id="index-fringes_002c-and-unused-line-indication"></a>
<a class="anchor" id="indicate_002dempty_002dlines"></a><p>On graphical displays, Emacs can indicate unused lines at the end of
the window with a small image in the left fringe (see <a class="pxref" href="#Fringes">Window Fringes</a>).
The image appears for screen lines that do not correspond to any
buffer text, so blank lines at the end of the buffer stand out because
they lack this image.  To enable this feature, set the buffer-local
variable <code class="code">indicate-empty-lines</code> to a non-<code class="code">nil</code> value.  You
can enable or disable this feature for all new buffers by setting the
default value of this variable, e.g., <code class="code">(setq-default
indicate-empty-lines t)</code>.
</p>
<a class="index-entry-id" id="index-Whitespace-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Whitespace"></a>
<a class="index-entry-id" id="index-whitespace_002dmode"></a>
<a class="index-entry-id" id="index-whitespace_002dstyle"></a>
<a class="index-entry-id" id="index-whitespace_002dtoggle_002doptions"></a>
<p>Whitespace mode is a buffer-local minor mode that lets you
visualize many kinds of whitespace in the buffer, by either
drawing the whitespace characters with a special face or displaying
them as special glyphs.  To toggle this mode, type <kbd class="kbd">M-x
whitespace-mode</kbd>.  The kinds of whitespace visualized are determined
by the list variable <code class="code">whitespace-style</code>.  Individual elements in
that list can be toggled on or off in the current buffer by typing
<kbd class="kbd">M-x&#160;whitespace-toggle-options</kbd><!-- /@w -->.  Here is a partial list
of possible elements (see the variable&#8217;s documentation for the full
list):
</p>
<dl class="table">
<dt><code class="code">face</code></dt>
<dd><p>Enable all visualizations which use special faces.  This element has a
special meaning: if it is absent from the list, none of the other
visualizations take effect except <code class="code">space-mark</code>, <code class="code">tab-mark</code>,
and <code class="code">newline-mark</code>.
</p>
</dd>
<dt><code class="code">trailing</code></dt>
<dd><p>Highlight trailing whitespace.
</p>
</dd>
<dt><code class="code">tabs</code></dt>
<dd><p>Highlight tab characters.
</p>
</dd>
<dt><code class="code">spaces</code></dt>
<dd><p>Highlight space and non-breaking space characters.
</p>
</dd>
<dt><a id="index-whitespace_002dline_002dcolumn"></a><code class="code">lines</code></dt>
<dd><p>Highlight lines longer than 80 columns.  To change the column limit,
customize the variable <code class="code">whitespace-line-column</code>.
</p>
</dd>
<dt><code class="code">newline</code></dt>
<dd><p>Highlight newlines.
</p>
</dd>
<dt><code class="code">missing-newline-at-eof</code></dt>
<dd><p>Highlight the final character if the buffer doesn&#8217;t end with a newline
character.
</p>
</dd>
<dt><code class="code">empty</code></dt>
<dd><p>Highlight empty lines at the beginning and/or end of the buffer.
</p>
</dd>
<dt><a id="index-whitespace_002dbig_002dindent_002dregexp"></a><code class="code">big-indent</code></dt>
<dd><p>Highlight too-deep indentation.  By default any sequence of at least 4
consecutive tab characters or 32 consecutive space characters is
highlighted.  To change that, customize the regular expression
<code class="code">whitespace-big-indent-regexp</code>.
</p>
</dd>
<dt><code class="code">space-mark</code></dt>
<dd><p>Draw space and non-breaking characters with a special glyph.
</p>
</dd>
<dt><code class="code">tab-mark</code></dt>
<dd><p>Draw tab characters with a special glyph.
</p>
</dd>
<dt><code class="code">newline-mark</code></dt>
<dd><p>Draw newline characters with a special glyph.
</p></dd>
</dl>

<a class="index-entry-id" id="index-global_002dwhitespace_002dtoggle_002doptions"></a>
<a class="index-entry-id" id="index-global_002dwhitespace_002dmode"></a>
<p>Global Whitespace mode is a global minor mode that lets you visualize
whitespace in all buffers.  To toggle individual features, use
<kbd class="kbd">M-x global-whitespace-toggle-options</kbd>.
</p>
</div>
<div class="section-level-extent" id="Selective-Display">
<h3 class="section" id="Selective-Display-1">15.18 Selective Display</h3>
<a class="index-entry-id" id="index-selective-display"></a>
<a class="index-entry-id" id="index-set_002dselective_002ddisplay"></a>
<a class="index-entry-id" id="index-C_002dx-_0024"></a>

<p>Emacs has the ability to hide lines indented more than a given
number of columns.  You can use this to get an overview of a part of a
program.
</p>
<p>To hide lines in the current buffer, type <kbd class="kbd">C-x $</kbd>
(<code class="code">set-selective-display</code>) with a numeric argument <var class="var">n</var>.  Then
lines with at least <var class="var">n</var> columns of indentation disappear from the
screen.  The only indication of their presence is that three dots
(&#8216;<samp class="samp">&#8230;</samp>&#8217;) appear at the end of each visible line that is
followed by one or more hidden ones.
</p>
<p>The commands <kbd class="kbd">C-n</kbd> and <kbd class="kbd">C-p</kbd> move across the hidden lines as
if they were not there.
</p>
<p>The hidden lines are still present in the buffer, and most editing
commands see them as usual, so you may find point in the middle of the
hidden text.  When this happens, the cursor appears at the end of the
previous line, after the three dots.  If point is at the end of the
visible line, before the newline that ends it, the cursor appears before
the three dots.
</p>
<p>To make all lines visible again, type <kbd class="kbd">C-x $</kbd> with no argument.
</p>
<a class="index-entry-id" id="index-selective_002ddisplay_002dellipses"></a>
<p>If you set the variable <code class="code">selective-display-ellipses</code> to
<code class="code">nil</code>, the three dots do not appear at the end of a line that
precedes hidden lines.  Then there is no visible indication of the
hidden lines.  This variable becomes local automatically when set.
</p>
<p>See also <a class="ref" href="Text.xhtml#Outline-Mode">Outline Mode</a> for another way to hide part of
the text in a buffer.
</p>
</div>
<div class="section-level-extent" id="Optional-Mode-Line">
<h3 class="section" id="Optional-Mode-Line-Features">15.19 Optional Mode Line Features</h3>

<a class="index-entry-id" id="index-buffer-size-display"></a>
<a class="index-entry-id" id="index-display-of-buffer-size"></a>
<a class="index-entry-id" id="index-size_002dindication_002dmode"></a>
<p>The buffer percentage <var class="var">pos</var> indicates the percentage of the
buffer above the top of the window.  You can additionally display the
size of the buffer by typing <kbd class="kbd">M-x size-indication-mode</kbd> to turn on
Size Indication mode.  The size will be displayed immediately
following the buffer percentage like this:
</p>
<div class="example">
<pre class="example-preformatted"><var class="var">pos</var> of <var class="var">size</var>
</pre></div>

<p>Here <var class="var">size</var> is the human readable representation of the number of
characters in the buffer, which means that &#8216;<samp class="samp">k</samp>&#8217; for 10^3, &#8216;<samp class="samp">M</samp>&#8217;
for 10^6, &#8216;<samp class="samp">G</samp>&#8217; for 10^9, etc., are used to abbreviate.
</p>
<a class="index-entry-id" id="index-line-number-display"></a>
<a class="index-entry-id" id="index-display-of-current-line-number"></a>
<a class="index-entry-id" id="index-line_002dnumber_002dmode"></a>
<p>The current line number of point appears in the mode line when Line
Number mode is enabled.  Use the command <kbd class="kbd">M-x line-number-mode</kbd> to
turn this mode on and off; normally it is on.  The line number appears
after the buffer percentage <var class="var">pos</var>, with the letter &#8216;<samp class="samp">L</samp>&#8217; to
indicate what it is.
</p>
<a class="index-entry-id" id="index-Column-Number-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Column-Number"></a>
<a class="index-entry-id" id="index-column_002dnumber_002dmode"></a>
<p>Similarly, you can display the current column number by turning on
Column Number mode with <kbd class="kbd">M-x column-number-mode</kbd>.  The column
number is indicated by the letter &#8216;<samp class="samp">C</samp>&#8217;.  However, when both of
these modes are enabled, the line and column numbers are displayed in
parentheses, the line number first, rather than with &#8216;<samp class="samp">L</samp>&#8217; and
&#8216;<samp class="samp">C</samp>&#8217;.  For example: &#8216;<samp class="samp">(561,2)</samp>&#8217;.  See <a class="xref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>, for more
information about minor modes and about how to use these commands.
</p>
<a class="index-entry-id" id="index-column_002dnumber_002dindicator_002dzero_002dbased"></a>
<p>In Column Number mode, the displayed column number counts from zero
starting at the left margin of the window.  If you would prefer for
the displayed column number to count from one, you may set
<code class="code">column-number-indicator-zero-based</code> to <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-narrowing_002c-and-line-number-display"></a>
<p>If you have narrowed the buffer (see <a class="pxref" href="#Narrowing">Narrowing</a>), the displayed
line number is relative to the accessible portion of the buffer.
Thus, it isn&#8217;t suitable as an argument to <code class="code">goto-line</code>.  (The
command <code class="code">what-line</code> shows the line number relative to the whole
file.)  You can use <code class="code">goto-line-relative</code> command to move point to
the line relative to the accessible portion of the narrowed buffer.
</p>
<a class="index-entry-id" id="index-line_002dnumber_002ddisplay_002dlimit"></a>
<p>If the buffer is very large (larger than the value of
<code class="code">line-number-display-limit</code>), Emacs won&#8217;t compute the line
number, because that would be too slow; therefore, the line number
won&#8217;t appear on the mode-line.  To remove this limit, set
<code class="code">line-number-display-limit</code> to <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-line_002dnumber_002ddisplay_002dlimit_002dwidth"></a>
<p>Line-number computation can also be slow if the lines in the buffer
are too long.  For this reason, Emacs doesn&#8217;t display line numbers if
the average width, in characters, of lines near point is larger than
the value of <code class="code">line-number-display-limit-width</code>.  The default
value is 200 characters.
</p>
<a class="index-entry-id" id="index-display_002dtime"></a>
<a class="index-entry-id" id="index-time-_0028on-mode-line_0029"></a>
<p>Emacs can optionally display the time and system load in all mode
lines.  To enable this feature, type <kbd class="kbd">M-x display-time</kbd> or customize
the option <code class="code">display-time-mode</code>.  The information added to the mode
line looks like this:
</p>
<div class="example">
<pre class="example-preformatted"><var class="var">hh</var>:<var class="var">mm</var>PM <var class="var">l.ll</var>
</pre></div>

<a class="index-entry-id" id="index-display_002dtime_002d24hr_002dformat"></a>
<p>Here <var class="var">hh</var> and <var class="var">mm</var> are the hour and minute, followed always by
&#8216;<samp class="samp">AM</samp>&#8217; or &#8216;<samp class="samp">PM</samp>&#8217;.  <var class="var">l.ll</var> is the average number, collected
for the last few minutes, of processes in the whole system that were
either running or ready to run (i.e., were waiting for an available
processor).  (Some fields may be missing if your operating system
cannot support them.)  If you prefer time display in 24-hour format,
set the variable <code class="code">display-time-24hr-format</code> to <code class="code">t</code>.
</p>
<a class="index-entry-id" id="index-mail-_0028on-mode-line_0029"></a>
<a class="index-entry-id" id="index-display_002dtime_002duse_002dmail_002dicon"></a>
<a class="index-entry-id" id="index-display_002dtime_002dmail_002dface"></a>
<a class="index-entry-id" id="index-display_002dtime_002dmail_002dfile"></a>
<a class="index-entry-id" id="index-display_002dtime_002dmail_002ddirectory"></a>
<p>The word &#8216;<samp class="samp">Mail</samp>&#8217; appears after the load level if there is mail
for you that you have not read yet.  On graphical displays, you can
use an icon instead of &#8216;<samp class="samp">Mail</samp>&#8217; by customizing
<code class="code">display-time-use-mail-icon</code>; this may save some space on the
mode line.  You can customize <code class="code">display-time-mail-face</code> to make
the mail indicator prominent.  Use <code class="code">display-time-mail-file</code> to
specify the mail file to check, or set
<code class="code">display-time-mail-directory</code> to specify the directory to check
for incoming mail (any nonempty regular file in the directory is
considered to be newly arrived mail).
</p>
<a class="index-entry-id" id="index-battery-status-_0028on-mode-line_0029"></a>
<a class="index-entry-id" id="index-display_002dbattery_002dmode"></a>
<a class="index-entry-id" id="index-display_002dbattery_002dmode-1"></a>
<a class="index-entry-id" id="index-battery_002dmode_002dline_002dformat"></a>
<p>When running Emacs on a laptop computer, you can display the battery
charge on the mode-line, by using the command
<code class="code">display-battery-mode</code> or customizing the variable
<code class="code">display-battery-mode</code>.  The variable
<code class="code">battery-mode-line-format</code> determines the way the battery charge
is displayed; the exact mode-line message depends on the operating
system, and it usually shows the current battery charge as a
percentage of the total charge.  The functions in
<code class="code">battery-update-functions</code> are run after updating the mode line,
and can be used to trigger actions based on the battery status.
</p>
<a class="index-entry-id" id="index-mode-line_002c-3D-appearance"></a>
<a class="index-entry-id" id="index-attributes-of-mode-line_002c-changing"></a>
<a class="index-entry-id" id="index-non_002dintegral-number-of-lines-in-a-window"></a>
<p>On graphical displays, the mode line is drawn as a 3D box.  If you
don&#8217;t like this effect, you can disable it by customizing the
<code class="code">mode-line</code> face and setting its <code class="code">box</code> attribute to
<code class="code">nil</code>.  See <a class="xref" href="Customization.xhtml#Face-Customization">Customizing Faces</a>.
</p>
<a class="index-entry-id" id="index-non_002dselected-windows_002c-mode-line-appearance"></a>
<p>By default, the mode line of nonselected windows is displayed in a
different face, called <code class="code">mode-line-inactive</code>.  Only the selected
window is displayed in the <code class="code">mode-line</code> face.  This helps show
which window is selected.  When the minibuffer is selected, since
it has no mode line, the window from which you activated the minibuffer
has its mode line displayed using <code class="code">mode-line</code>; as a result,
ordinary entry to the minibuffer does not change any mode lines.
</p>
<a class="index-entry-id" id="index-mode_002dline_002din_002dnon_002dselected_002dwindows"></a>
<p>You can disable use of <code class="code">mode-line-inactive</code> by setting variable
<code class="code">mode-line-in-non-selected-windows</code> to <code class="code">nil</code>; then all mode
lines are displayed in the <code class="code">mode-line</code> face.
</p>
<a class="index-entry-id" id="index-eol_002dmnemonic_002dunix"></a>
<a class="index-entry-id" id="index-eol_002dmnemonic_002ddos"></a>
<a class="index-entry-id" id="index-eol_002dmnemonic_002dmac"></a>
<a class="index-entry-id" id="index-eol_002dmnemonic_002dundecided"></a>
<p>You can customize the mode line display for each of the end-of-line
formats by setting each of the variables <code class="code">eol-mnemonic-unix</code>,
<code class="code">eol-mnemonic-dos</code>, <code class="code">eol-mnemonic-mac</code>, and
<code class="code">eol-mnemonic-undecided</code> to the strings you prefer.
</p>
</div>
<div class="section-level-extent" id="Text-Display">
<h3 class="section" id="How-Text-Is-Displayed">15.20 How Text Is Displayed</h3>
<a class="index-entry-id" id="index-characters-_0028in-text_0029"></a>
<a class="index-entry-id" id="index-printing-character"></a>

<p>Most characters are <em class="dfn">printing characters</em>: when they appear in a
buffer, they are displayed literally on the screen.  Printing
characters include <abbr class="acronym">ASCII</abbr> numbers, letters, and punctuation
characters, as well as many non-<abbr class="acronym">ASCII</abbr> characters.
</p>
<a class="index-entry-id" id="index-tab_002dwidth"></a>
<a class="index-entry-id" id="index-control-characters-on-display"></a>
<p>The <abbr class="acronym">ASCII</abbr> character set contains non-printing <em class="dfn">control
characters</em>.  Two of these are displayed specially: the newline
character (Unicode code point U+000A) is displayed by starting
a new line, while the tab character (U+0009) is displayed as a
space that extends to the next tab stop column (normally every 8
columns).  The number of spaces per tab is controlled by the
buffer-local variable <code class="code">tab-width</code>, which must have an integer
value between 1 and 1000, inclusive.  Note that the way the tab
character in the buffer is displayed has nothing to do with the
definition of <kbd class="key">TAB</kbd> as a command.
</p>
<p>Other <abbr class="acronym">ASCII</abbr> control characters, whose codes are below
U+0020 (octal 40, decimal 32), are displayed as a caret
(&#8216;<samp class="samp">^</samp>&#8217;) followed by the non-control version of the character, with
the <code class="code">escape-glyph</code> face.  For instance, the &#8216;<samp class="samp">control-A</samp>&#8217;
character, U+0001, is displayed as &#8216;<samp class="samp">^A</samp>&#8217;.
</p>
<a class="index-entry-id" id="index-octal-escapes"></a>
<a class="index-entry-id" id="index-ctl_002darrow"></a>
<p>The raw bytes with codes U+0080 (octal 200) through
U+009F (octal 237) are displayed as <em class="dfn">octal escape
sequences</em>, with the <code class="code">escape-glyph</code> face.  For instance,
character code U+0098 (octal 230) is displayed as &#8216;<samp class="samp">\230</samp>&#8217;.
If you change the buffer-local variable <code class="code">ctl-arrow</code> to
<code class="code">nil</code>, the <abbr class="acronym">ASCII</abbr> control characters are also displayed
as octal escape sequences instead of caret escape sequences.  (You can
also request that raw bytes be shown in hex, see <a class="pxref" href="#Display-Custom">display-raw-bytes-as-hex</a>.)
</p>
<a class="index-entry-id" id="index-nobreak_002dchar_002ddisplay"></a>
<a class="index-entry-id" id="index-non_002dbreaking-space"></a>
<a class="index-entry-id" id="index-non_002dbreaking-hyphen"></a>
<a class="index-entry-id" id="index-soft-hyphen"></a>
<a class="index-entry-id" id="index-escape_002dglyph-face"></a>
<a class="index-entry-id" id="index-nobreak_002dspace-face"></a>
<p>Some non-<abbr class="acronym">ASCII</abbr> characters have the same appearance as an
<abbr class="acronym">ASCII</abbr> space or hyphen (minus) character.  Such characters
can cause problems if they are entered into a buffer without your
realization, e.g., by yanking; for instance, source code compilers
typically do not treat non-<abbr class="acronym">ASCII</abbr> spaces as whitespace
characters.  To deal with this problem, Emacs displays such characters
specially: it displays U+00A0 <small class="sc">NO-BREAK SPACE</small> and other
characters from the Unicode horizontal space class with the
<code class="code">nobreak-space</code> face, and it displays U+00AD <small class="sc">SOFT
HYPHEN</small>, U+2010 <small class="sc">HYPHEN</small>, and U+2011 <small class="sc">NON-BREAKING
HYPHEN</small> with the <code class="code">nobreak-hyphen</code> face.  To disable this, change
the variable <code class="code">nobreak-char-display</code> to <code class="code">nil</code>.  If you give
this variable a non-<code class="code">nil</code> and non-<code class="code">t</code> value, Emacs instead
displays such characters as a highlighted backslash followed by a
space or hyphen.
</p>
<p>You can customize the way any particular character code is displayed
by means of a display table.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Tables.html#Display-Tables">Display Tables</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.
</p>
<a class="index-entry-id" id="index-glyphless-characters"></a>
<a class="index-entry-id" id="index-characters-with-no-font-glyphs"></a>
<a class="index-entry-id" id="index-glyphless_002dchar-face"></a>
<p>On graphical displays, some characters may have no glyphs in any of
the fonts available to Emacs.  These <em class="dfn">glyphless characters</em> are
normally displayed as boxes containing the hexadecimal character code.
Similarly, on text terminals, characters that cannot be displayed
using the terminal encoding (see <a class="pxref" href="International.xhtml#Terminal-Coding">Coding Systems for Terminal I/O</a>) are normally
displayed as question signs.  You can control the display method by
customizing the variable <code class="code">glyphless-char-display-control</code>.  You
can also customize the <code class="code">glyphless-char</code> face to make these
characters more prominent on display.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Glyphless-Chars.html#Glyphless-Chars">Glyphless Character Display</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>,
for details.
</p>
<a class="index-entry-id" id="index-glyphless_002ddisplay_002dmode"></a>
<p>The <code class="code">glyphless-display-mode</code> minor mode can be used to toggle
the display of glyphless characters in the current buffer.  The
glyphless characters will be displayed as boxes with acronyms of their
names inside.
</p>
<a class="index-entry-id" id="index-curly-quotes_002c-and-terminal-capabilities"></a>
<a class="index-entry-id" id="index-curved-quotes_002c-and-terminal-capabilities"></a>
<a class="index-entry-id" id="index-homoglyph-face"></a>

<p>Emacs tries to determine if the curved quotes <code class="t">‘</code> and <code class="t">’</code>
can be displayed on the current display.  By default, if this seems to
be so, then Emacs will translate the <abbr class="acronym">ASCII</abbr> quotes (&#8216;<samp class="samp">`</samp>&#8217;&#160;and&#160;&#8216;<samp class="samp">'</samp>&#8217;)<!-- /@w -->, when they appear in messages and help texts, to these
curved quotes.  You can influence or inhibit this translation by
customizing the user option <code class="code">text-quoting-style</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Keys-in-Documentation.html#Keys-in-Documentation">Keys in
Documentation</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).
</p>
<p>If the curved quotes <code class="t">‘</code>, <code class="t">’</code>, <code class="t">“</code>, and <code class="t">”</code> are
known to look just like <abbr class="acronym">ASCII</abbr> characters, they are shown
with the <code class="code">homoglyph</code> face.  Curved quotes that are known not to
be displayable are shown as their <abbr class="acronym">ASCII</abbr> approximations
&#8216;<samp class="samp">`</samp>&#8217;, &#8216;<samp class="samp">'</samp>&#8217;, and &#8216;<samp class="samp">&quot;</samp>&#8217; with the <code class="code">homoglyph</code> face.
</p>
</div>
<div class="section-level-extent" id="Cursor-Display">
<h3 class="section" id="Displaying-the-Cursor">15.21 Displaying the Cursor</h3>
<a class="index-entry-id" id="index-text-cursor"></a>

<a class="index-entry-id" id="index-visible_002dcursor"></a>
<p>On a text terminal, the cursor&#8217;s appearance is controlled by the
terminal, largely out of the control of Emacs.  Some terminals offer
two different cursors: a visible static cursor, and a very
visible blinking cursor.  By default, Emacs uses the very visible
cursor, and switches to it when you start or resume Emacs.  If the
variable <code class="code">visible-cursor</code> is <code class="code">nil</code> when Emacs starts or
resumes, it uses the normal cursor.
</p>
<a class="index-entry-id" id="index-cursor_002dtype"></a>
<p>On a graphical display, many more properties of the text cursor can
be altered.  To customize its color, change the <code class="code">:background</code>
attribute of the face named <code class="code">cursor</code> (see <a class="pxref" href="Customization.xhtml#Face-Customization">Customizing Faces</a>).  (The other attributes of this face have no effect;
the text shown under the cursor is drawn using the frame&#8217;s background
color.)  To change its shape, customize the buffer-local variable
<code class="code">cursor-type</code>; possible values are <code class="code">box</code> (the default),
<code class="code">(box . <var class="var">size</var>)</code> (box cursor becoming a hollow box under
masked images larger than <var class="var">size</var> pixels in either dimension),
<code class="code">hollow</code> (a hollow box), <code class="code">bar</code> (a vertical bar), <code class="code">(bar
. <var class="var">n</var>)</code> (a vertical bar <var class="var">n</var> pixels wide), <code class="code">hbar</code> (a
horizontal bar), <code class="code">(hbar . <var class="var">n</var>)</code> (a horizontal bar <var class="var">n</var>
pixels tall), or <code class="code">nil</code> (no cursor at all).
</p>
<a class="index-entry-id" id="index-blink_002dcursor_002dmode"></a>
<a class="index-entry-id" id="index-cursor_002c-blinking"></a>
<a class="index-entry-id" id="index-blinking-cursor"></a>
<a class="index-entry-id" id="index-blink_002dcursor_002dmode-1"></a>
<a class="index-entry-id" id="index-blink_002dcursor_002dblinks"></a>
<a class="index-entry-id" id="index-blink_002dcursor_002dalist"></a>
<p>By default, the cursor stops blinking after 10 blinks, if Emacs does
not get any input during that time; any input event restarts the
count.  You can customize the variable <code class="code">blink-cursor-blinks</code> to
control that: its value says how many times to blink without input
before stopping.  Setting that variable to a zero or negative value
will make the cursor blink forever.  To disable cursor blinking
altogether, change the variable <code class="code">blink-cursor-mode</code> to <code class="code">nil</code>
(see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>), or add the line
</p>
<div class="example lisp">
<pre class="lisp-preformatted">  (blink-cursor-mode 0)
</pre></div>

<p>to your init file.  Alternatively, you can change how the cursor
looks when it blinks off by customizing the list variable
<code class="code">blink-cursor-alist</code>.  Each element in the list should have the
form <code class="code">(<var class="var">on-type</var> . <var class="var">off-type</var>)</code>; this means that if the
cursor is displayed as <var class="var">on-type</var> when it blinks on (where
<var class="var">on-type</var> is one of the cursor types described above), then it is
displayed as <var class="var">off-type</var> when it blinks off.
</p>
<a class="index-entry-id" id="index-x_002dstretch_002dcursor"></a>
<a class="index-entry-id" id="index-wide-block-cursor"></a>
<p>Some characters, such as tab characters, are extra wide.  When
the cursor is positioned over such a character, it is normally drawn
with the default character width.  You can make the cursor stretch to
cover wide characters, by changing the variable
<code class="code">x-stretch-cursor</code> to a non-<code class="code">nil</code> value.
</p>
<a class="index-entry-id" id="index-cursor-in-non_002dselected-windows"></a>
<a class="index-entry-id" id="index-cursor_002din_002dnon_002dselected_002dwindows"></a>
<p>The cursor normally appears in non-selected windows as a
non-blinking hollow box.  (For a bar cursor, it instead appears as a
thinner bar.)  To turn off cursors in non-selected windows, change the
variable <code class="code">cursor-in-non-selected-windows</code> to <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-hl_002dline_002dmode"></a>
<a class="index-entry-id" id="index-global_002dhl_002dline_002dmode"></a>
<a class="index-entry-id" id="index-highlight-current-line"></a>
<p>To make the cursor even more visible, you can use HL Line mode, a
minor mode that highlights the line containing point.  Use <kbd class="kbd">M-x
hl-line-mode</kbd> to enable or disable it in the current buffer.  <kbd class="kbd">M-x
global-hl-line-mode</kbd> enables or disables the same mode globally.
</p>
</div>
<div class="section-level-extent" id="Line-Truncation">
<h3 class="section" id="Line-Truncation-1">15.22 Line Truncation</h3>

<a class="index-entry-id" id="index-truncation"></a>
<a class="index-entry-id" id="index-line-truncation"></a>
<p>As an alternative to continuation (see <a class="pxref" href="Basic.xhtml#Continuation-Lines">Continuation Lines</a>),
Emacs can display long lines by <em class="dfn">truncation</em>.  This means that all
the characters that do not fit in the width of the screen or window do
not appear at all.  On graphical displays, a small straight arrow in
the fringe indicates truncation at either end of the line.  On text
terminals, this is indicated with &#8216;<samp class="samp">$</samp>&#8217; signs in the rightmost
and/or leftmost columns.
</p>
<a class="index-entry-id" id="index-C_002dx-x-t"></a>
<a class="index-entry-id" id="index-truncate_002dlines"></a>
<a class="index-entry-id" id="index-toggle_002dtruncate_002dlines"></a>
<p>Horizontal scrolling automatically causes line truncation
(see <a class="pxref" href="#Horizontal-Scrolling">Horizontal Scrolling</a>).  You can explicitly enable line
truncation for a particular buffer with the command <kbd class="kbd">C-x x t</kbd>
(<code class="code">toggle-truncate-lines</code>).  This works by locally changing the
variable <code class="code">truncate-lines</code>.  If that variable is non-<code class="code">nil</code>,
long lines are truncated; if it is <code class="code">nil</code>, they are continued onto
multiple screen lines.  Setting the variable <code class="code">truncate-lines</code> in
any way makes it local to the current buffer; until that time, the
default value, which is normally <code class="code">nil</code>, is in effect.
</p>
<p>Since line truncation and word wrap (described in the next section)
are contradictory, <code class="code">toggle-truncate-lines</code> disables word wrap
when it turns on line truncation.
</p>
<p>If a split window becomes too narrow, Emacs may automatically enable
line truncation.  See <a class="xref" href="Windows.xhtml#Split-Window">Splitting Windows</a>, for the variable
<code class="code">truncate-partial-width-windows</code> which controls this.
</p>
</div>
<div class="section-level-extent" id="Visual-Line-Mode">
<h3 class="section" id="Visual-Line-Mode-1">15.23 Visual Line Mode</h3>

<a class="index-entry-id" id="index-word-wrap"></a>
<p>Another alternative to ordinary line continuation
(see <a class="pxref" href="Basic.xhtml#Continuation-Lines">Continuation Lines</a>) is to use <em class="dfn">word wrap</em>.  Here, each
long logical line is divided into two or more screen lines, or
&#8220;visual lines&#8221;, like in ordinary line continuation.  However, Emacs
attempts to wrap the line at word boundaries near the right window
edge.  (If the line&#8217;s direction is right-to-left, it is wrapped at the
left window edge instead.)  This makes the text easier to read, as
wrapping does not occur in the middle of words.
</p>
<a class="index-entry-id" id="index-mode_002c-Visual-Line"></a>
<a class="index-entry-id" id="index-Visual-Line-mode"></a>
<a class="index-entry-id" id="index-visual_002dline_002dmode"></a>
<a class="index-entry-id" id="index-global_002dvisual_002dline_002dmode"></a>
<p>Word wrap is enabled by Visual Line mode, an optional minor mode.
To turn on Visual Line mode in the current buffer, type <kbd class="kbd">M-x
visual-line-mode</kbd>; repeating this command turns it off.  You can also
turn on Visual Line mode using the menu bar: in the Options menu,
select the &#8216;<samp class="samp">Line Wrapping in this Buffer</samp>&#8217; submenu, followed by
the &#8216;<samp class="samp">Word Wrap (Visual Line mode)</samp>&#8217; menu item.  While Visual Line
mode is enabled, the mode line shows the string &#8216;<samp class="samp">wrap</samp>&#8217; in the
mode display.  The command <kbd class="kbd">M-x global-visual-line-mode</kbd> toggles
Visual Line mode in all buffers.
</p>
<p>Since word wrap and line truncation (described in the previous
section) are contradictory, turning on <code class="code">visual-line-mode</code>
disables line truncation.
</p>
<a class="index-entry-id" id="index-beginning_002dof_002dvisual_002dline"></a>
<a class="index-entry-id" id="index-end_002dof_002dvisual_002dline"></a>
<a class="index-entry-id" id="index-next_002dlogical_002dline"></a>
<a class="index-entry-id" id="index-previous_002dlogical_002dline"></a>
<p>In Visual Line mode, some editing commands work on screen lines
instead of logical lines: <kbd class="kbd">C-a</kbd> (<code class="code">beginning-of-visual-line</code>)
moves to the beginning of the screen line, <kbd class="kbd">C-e</kbd>
(<code class="code">end-of-visual-line</code>) moves to the end of the screen line, and
<kbd class="kbd">C-k</kbd> (<code class="code">kill-visual-line</code>) kills text to the end of the
screen line.
</p>
<p>To move by logical lines, use the commands <kbd class="kbd">M-x
next-logical-line</kbd> and <kbd class="kbd">M-x previous-logical-line</kbd>.  These move
point to the next logical line and the previous logical line
respectively, regardless of whether Visual Line mode is enabled.  If
you use these commands frequently, it may be convenient to assign key
bindings to them.  See <a class="xref" href="Customization.xhtml#Init-Rebinding">Rebinding Keys in Your Init File</a>.
</p>
<p>By default, word-wrapped lines do not display fringe indicators.
Visual Line mode is often used to edit files that contain many long
logical lines, so having a fringe indicator for each wrapped line
would be visually distracting.  You can change this by customizing the
variable <code class="code">visual-line-fringe-indicators</code>.
</p>
<a class="index-entry-id" id="index-word_002dwrap_002dwhitespace_002dmode"></a>
<p>By default, Emacs only breaks lines after whitespace characters like
<kbd class="key">SPC</kbd> and <kbd class="key">TAB</kbd>, but does not break after whitespace
characters like <kbd class="key">EN QUAD</kbd>.  Emacs provides a minor mode called
<code class="code">word-wrap-whitespace-mode</code> that switches on word wrapping in the
current mode, and sets up which characters to wrap lines on based on
the <code class="code">word-wrap-whitespace-characters</code> user option.  There&#8217;s also
a globalized version of that mode called
<code class="code">global-word-wrap-whitespace-mode</code>.
</p>
<a class="index-entry-id" id="index-word_002dwrap_002dby_002dcategory"></a>
<a class="index-entry-id" id="index-modify_002dcategory_002dentry"></a>
<a class="index-entry-id" id="index-char_002dcategory_002dset"></a>
<a class="index-entry-id" id="index-category_002dset_002dmnemonics"></a>
<p>Only breaking after whitespace character produces incorrect
results when CJK and Latin text are mixed
together (because CJK characters don&#8217;t use whitespace to separate
words).  You can customize the option <code class="code">word-wrap-by-category</code> to
allow Emacs to break lines after any character with &#8216;<samp class="samp">|</samp>&#8217; category
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#Categories">Categories</a> in <cite class="cite">the Emacs Lisp Reference Manual</cite>), which
provides better support for CJK characters.  Also, if this variable is
set using Customize, Emacs automatically loads <samp class="file">kinsoku.el</samp>.
When <samp class="file">kinsoku.el</samp> is loaded, Emacs respects kinsoku rules when
breaking lines.  That means characters with the &#8216;<samp class="samp">&gt;</samp>&#8217; category don&#8217;t
appear at the beginning of a line (e.g., U+FF0C <small class="sc">FULLWIDTH COMMA</small>), and
characters with the &#8216;<samp class="samp">&lt;</samp>&#8217; category don&#8217;t appear at the end of a line
(e.g., U+300A <small class="sc">LEFT DOUBLE ANGLE BRACKET</small>).  You can view the category
set of a character using the commands <code class="code">char-category-set</code> and
<code class="code">category-set-mnemonics</code>, or by typing <kbd class="kbd">C-u C-x =</kbd> with point
on the character and looking at the &#8220;category&#8221; section in the
report.  You can add categories to a character using the command
<code class="code">modify-category-entry</code>.
</p>
</div>
<div class="section-level-extent" id="Display-Custom">
<h3 class="section" id="Customization-of-Display">15.24 Customization of Display</h3>

<p>This section describes variables that control miscellaneous aspects
of the appearance of the Emacs screen.  Beginning users can skip it.
</p>
<a class="index-entry-id" id="index-display_002dline_002dnumbers"></a>
<a class="index-entry-id" id="index-number-lines-in-a-buffer"></a>
<a class="index-entry-id" id="index-display-line-numbers"></a>
<p>If you want to have Emacs display line numbers for every line in the
buffer, customize the buffer-local variable
<code class="code">display-line-numbers</code>; it is <code class="code">nil</code> by default.  This
variable can have several different values to support various modes of
line-number display:
</p>
<dl class="table">
<dt><code class="code">t</code></dt>
<dd><p>Display (an absolute) line number before each non-continuation screen
line that displays buffer text.  If the line is a continuation line,
or if the entire screen line displays a display or an overlay string,
that line will not be numbered.
</p>
</dd>
<dt><code class="code">relative</code></dt>
<dd><p>Display relative line numbers before non-continuation lines which show
buffer text.  The line numbers are relative to the line showing point,
so the numbers grow both up and down as lines become farther from the
current line.
</p>
</dd>
<dt><code class="code">visual</code></dt>
<dd><p>This value causes Emacs to count lines visually: only lines actually
shown on the display will be counted (disregarding any lines in
invisible parts of text), and lines which wrap to consume more than
one screen line will be numbered that many times.  The displayed
numbers are relative, as with <code class="code">relative</code> value above.  This is
handy in modes that fold text, such as Outline mode (see <a class="pxref" href="Text.xhtml#Outline-Mode">Outline Mode</a>), and when you need to move by exact number of screen lines.
</p>
</dd>
<dt>anything else</dt>
<dd><p>Any other non-<code class="code">nil</code> value is treated as <code class="code">t</code>.
</p></dd>
</dl>

<a class="index-entry-id" id="index-display_002dline_002dnumbers_002dmode"></a>
<a class="index-entry-id" id="index-global_002ddisplay_002dline_002dnumbers_002dmode"></a>
<a class="index-entry-id" id="index-display_002dline_002dnumbers_002dtype"></a>
<p>The command <kbd class="kbd">M-x display-line-numbers-mode</kbd> provides a
convenient way to turn on display of line numbers.  This mode has a globalized
variant, <code class="code">global-display-line-numbers-mode</code>.  The user option
<code class="code">display-line-numbers-type</code> controls which sub-mode of
line-number display, described above, these modes will activate.
</p>
<p>Note that line numbers are not displayed in the minibuffer and in the
tooltips, even if you turn on <code class="code">display-line-numbers-mode</code>
globally.
</p>
<a class="index-entry-id" id="index-display_002dline_002dnumbers_002dcurrent_002dabsolute"></a>
<p>When Emacs displays relative line numbers, you can control the number
displayed before the current line, the line showing point.  By
default, Emacs displays the absolute number of the current line there,
even though all the other line numbers are relative.  If you customize
the variable <code class="code">display-line-numbers-current-absolute</code> to a
<code class="code">nil</code> value, the number displayed for the current line will be
zero.  This is handy if you don&#8217;t care about the number of the current
line, and want to leave more horizontal space for text in large
buffers.
</p>
<a class="index-entry-id" id="index-display_002dline_002dnumbers_002dwiden"></a>
<p>In a narrowed buffer (see <a class="pxref" href="#Narrowing">Narrowing</a>) lines are normally numbered
starting at the beginning of the narrowing.  However, if you customize
the variable <code class="code">display-line-numbers-widen</code> to a non-<code class="code">nil</code>
value, line numbers will disregard any narrowing and will start at the
first character of the buffer.
</p>
<a class="index-entry-id" id="index-display_002dline_002dnumbers_002doffset"></a>
<p>If the value of <code class="code">display-line-numbers-offset</code> is non-zero, it is
added to each absolute line number, and lines are counted from the
beginning of the buffer, as if <code class="code">display-line-numbers-widen</code> were
non-<code class="code">nil</code>.  It has no effect when set to zero, or when line
numbers are not absolute.
</p>
<a class="index-entry-id" id="index-display_002dline_002dnumbers_002dwidth_002dstart"></a>
<a class="index-entry-id" id="index-display_002dline_002dnumbers_002dgrow_002donly"></a>
<a class="index-entry-id" id="index-display_002dline_002dnumbers_002dwidth"></a>
<p>In selective display mode (see <a class="pxref" href="#Selective-Display">Selective Display</a>), and other modes
that hide many lines from display (such as Outline and Org modes), you
may wish to customize the variables
<code class="code">display-line-numbers-width-start</code> and
<code class="code">display-line-numbers-grow-only</code>, or set
<code class="code">display-line-numbers-width</code> to a large enough value, to avoid
occasional miscalculations of space reserved for the line numbers.
</p>
<a class="index-entry-id" id="index-line_002dnumber-face"></a>
<p>The line numbers are displayed in a special face <code class="code">line-number</code>.
The current line number is displayed in a different face,
<code class="code">line-number-current-line</code>, so you can make the current line&#8217;s
number have a distinct appearance, which will help locating the line
showing point. Additional faces <code class="code">line-number-major-tick</code> and
<code class="code">line-number-minor-tick</code> can be used to highlight the line numbers
of lines which are a multiple of certain numbers.  Customize
<code class="code">display-line-numbers-major-tick</code> and
<code class="code">display-line-numbers-minor-tick</code> respectively to set those
numbers.
</p>
<a class="index-entry-id" id="index-visible_002dbell"></a>
<p>If the variable <code class="code">visible-bell</code> is non-<code class="code">nil</code>, Emacs attempts
to make the whole screen blink when it would normally make an audible bell
sound.  This variable has no effect if your terminal does not have a way
to make the screen blink.
</p>
<a class="index-entry-id" id="index-echo_002dkeystrokes"></a>
<p>The variable <code class="code">echo-keystrokes</code> controls the echoing of multi-character
keys; its value is the number of seconds of pause required to cause echoing
to start, or zero, meaning don&#8217;t echo at all.  The value takes effect when
there is something to echo.  See <a class="xref" href="Screen.xhtml#Echo-Area">The Echo Area</a>.
</p>
<a class="index-entry-id" id="index-mouse-pointer"></a>
<a class="index-entry-id" id="index-hourglass-pointer-display"></a>
<a class="index-entry-id" id="index-display_002dhourglass"></a>
<a class="index-entry-id" id="index-hourglass_002ddelay"></a>
<p>On graphical displays, Emacs displays the mouse pointer as an
hourglass if Emacs is busy.  To disable this feature, set the variable
<code class="code">display-hourglass</code> to <code class="code">nil</code>.  The variable
<code class="code">hourglass-delay</code> determines the number of seconds of busy
time before the hourglass is shown; the default is 1.
</p>
<a class="index-entry-id" id="index-make_002dpointer_002dinvisible"></a>
<p>If the mouse pointer lies inside an Emacs frame, Emacs makes it
invisible each time you type a character to insert text, to prevent it
from obscuring the text.  (To be precise, the hiding occurs when you
type a self-inserting character.  See <a class="xref" href="Basic.xhtml#Inserting-Text">Inserting Text</a>.)  Moving
the mouse pointer makes it visible again.  To disable this feature,
set the variable <code class="code">make-pointer-invisible</code> to <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-underline_002dminimum_002doffset"></a>
<a class="index-entry-id" id="index-x_002dunderline_002dat_002ddescent_002dline"></a>
<p>On graphical displays, the variable <code class="code">underline-minimum-offset</code>
determines the minimum distance between the baseline and underline, in
pixels, for underlined text.  By default, the value is 1; increasing
it may improve the legibility of underlined text for certain fonts.
(However, Emacs will never draw the underline below the current line
area.)  The variable <code class="code">x-underline-at-descent-line</code> determines how
to draw underlined text.  The default is <code class="code">nil</code>, which means to
draw it at the baseline level of the font; if you change it to
<code class="code">t</code>, Emacs draws the underline at the same height as the font&#8217;s
descent line.  (If non-default line spacing was specified for the
underlined text, see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Line-Height.html#Line-Height">Line Height</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>, Emacs draws the underline below the additional
spacing.)
</p>
<a class="index-entry-id" id="index-overline_002dmargin"></a>
<p>The variable <code class="code">overline-margin</code> specifies the vertical position
of an overline above the text, including the height of the overline
itself, in pixels; the default is 2.
</p>
<a class="index-entry-id" id="index-tty_002dsuppress_002dbold_002dinverse_002ddefault_002dcolors"></a>
<p>On some text terminals, bold face and inverse video together result
in text that is hard to read.  Call the function
<code class="code">tty-suppress-bold-inverse-default-colors</code> with a non-<code class="code">nil</code>
argument to suppress the effect of bold-face in this case.
</p>
<a class="index-entry-id" id="index-display_002draw_002dbytes_002das_002dhex"></a>
<p>Raw bytes are displayed in octal format by default, for example a
byte with a decimal value of 128 is displayed as <code class="code">\200</code>.  To
change display to the hexadecimal format of <code class="code">\x80</code>, set the
variable <code class="code">display-raw-bytes-as-hex</code> to <code class="code">t</code>.
Care may be needed when interpreting a raw byte when copying
text from a terminal containing an Emacs session, or when a terminal&#8217;s
<code class="code">escape-glyph</code> face looks like the default face.  For example, by
default Emacs displays the four characters &#8216;<samp class="samp">\</samp>&#8217;, &#8216;<samp class="samp">2</samp>&#8217;,
&#8216;<samp class="samp">0</samp>&#8217;, &#8216;<samp class="samp">0</samp>&#8217; with the same characters it displays a byte with
decimal value 128.  The problem can be worse with hex displays, where
the raw byte 128 followed by the character &#8216;<samp class="samp">7</samp>&#8217; is displayed as
<code class="code">\x807</code>, which Emacs Lisp reads as the single character U+0807
SAMARITAN LETTER IT; this confusion does not occur with the
corresponding octal display <code class="code">\2007</code> because octal escapes contain
at most three digits.
</p></div>
</div>



</body>
</html>
