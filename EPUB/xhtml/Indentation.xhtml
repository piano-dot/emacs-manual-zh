<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>25 Indentation (GNU Emacs Manual)</title>

<meta name="description" content="25 Indentation (GNU Emacs Manual)"/>
<meta name="keywords" content="25 Indentation (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Text.xhtml#Text" rel="next" title="26 Commands for Human Languages"/>
<link href="Modes.xhtml#Modes" rel="prev" title="24 Major and Minor Modes"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Indentation">

<h2 class="chapter" id="Indentation-1">25 Indentation</h2>
<a class="index-entry-id" id="index-indentation"></a>
<a class="index-entry-id" id="index-tabs"></a>
<a class="index-entry-id" id="index-columns-_0028indentation_0029"></a>

<a class="index-entry-id" id="index-whitespace-character"></a>
<p><em class="dfn">Indentation</em> refers to inserting or adjusting <em class="dfn">whitespace
characters</em> (space and/or tab characters) at the beginning of a line
of text.  This chapter documents indentation commands and options
which are common to Text mode and related modes, as well as
programming language modes.  See <a class="xref" href="Programs.xhtml#Program-Indent">Indentation for Programs</a>, for additional
documentation about indenting in programming modes.
</p>
<a class="index-entry-id" id="index-indent_002dfor_002dtab_002dcommand"></a>
<a class="index-entry-id" id="index-TAB-_0028indentation_0029"></a>
<p>The simplest way to perform indentation is the <kbd class="key">TAB</kbd> key.  In
most major modes, this runs the command <code class="code">indent-for-tab-command</code>.
(In C and related modes, <kbd class="key">TAB</kbd> runs the command
<code class="code">c-indent-line-or-region</code>, which behaves similarly, see <a class="pxref" href="Programs.xhtml#C-Indent">Commands for C Indentation</a>).
</p>
<dl class="table">
<dt><kbd class="key">TAB</kbd></dt>
<dd><p>Insert whitespace, or indent the current line, in a mode-appropriate
way (<code class="code">indent-for-tab-command</code>).  If the region is active, indent
all the lines within it.
</p></dd>
</dl>

<p>The exact behavior of <kbd class="key">TAB</kbd> depends on the major mode.  In Text
mode and related major modes, <kbd class="key">TAB</kbd> normally inserts some
combination of space and tab characters to advance point to the next
tab stop (see <a class="pxref" href="#Tab-Stops">Tab Stops</a>).  For this purpose, the position of the
first non-whitespace character on the preceding line is treated as an
additional tab stop, so you can use <kbd class="key">TAB</kbd> to align point with
the preceding line.  If the region is active (see <a class="pxref" href="Mark.xhtml#Using-Region">Operating on the Region</a>),
<kbd class="key">TAB</kbd> acts specially: it indents each line in the region so that
its first non-whitespace character is aligned with the preceding line.
</p>
<p>In programming modes, <kbd class="key">TAB</kbd> indents the current line of code in
a way that makes sense given the code in the preceding lines.  If the
region is active, all the lines in the region are indented this way.
If point was initially within the current line&#8217;s indentation, it is
repositioned to the first non-whitespace character on the line.
</p>
<p>If you just want to insert a tab character in the buffer, type
<kbd class="kbd">C-q <kbd class="key">TAB</kbd></kbd> (see <a class="pxref" href="Basic.xhtml#Inserting-Text">Inserting Text</a>).
</p>

<div class="section-level-extent" id="Indentation-Commands">
<h3 class="section" id="Indentation-Commands-1">25.1 Indentation Commands</h3>

<p>Apart from the <kbd class="kbd"><kbd class="key">TAB</kbd></kbd> (<code class="code">indent-for-tab-command</code>)
command, Emacs provides a variety of commands to perform indentation
in other ways.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-split_002dline"></a>
<a id="index-C_002dM_002do"></a><kbd class="kbd">C-M-o</kbd></dt>
<dd><p>Split the current line at point (<code class="code">split-line</code>).  The text on the
line after point becomes a new line, indented to the same column where
point is located.  This command first moves point forward over any
spaces and tabs.  Afterward, point is positioned before the inserted
newline.
</p>
</dd>
<dt><a class="index-entry-id" id="index-back_002dto_002dindentation"></a>
<a id="index-M_002dm"></a><kbd class="kbd">M-m</kbd></dt>
<dd><p>Move (forward or back) to the first non-whitespace character on the
current line (<code class="code">back-to-indentation</code>).  If there are no
non-whitespace characters on the line, move to the end of the line.
</p>
</dd>
<dt><a class="index-entry-id" id="index-tab_002dto_002dtab_002dstop"></a>
<a id="index-M_002di"></a><kbd class="kbd">M-i</kbd></dt>
<dd><p>Indent whitespace at point, up to the next tab stop
(<code class="code">tab-to-tab-stop</code>).  See <a class="xref" href="#Tab-Stops">Tab Stops</a>.
</p>
</dd>
<dt><a id="index-indent_002drelative"></a><kbd class="kbd">M-x indent-relative</kbd></dt>
<dd><p>Insert whitespace at point, until point is aligned with the first
non-whitespace character on the previous line (actually, the last
non-blank line).  If point is already farther right than that, run
<code class="code">tab-to-tab-stop</code> instead&#8212;unless called with a numeric
argument, in which case do nothing.
</p>
</dd>
<dt><a class="index-entry-id" id="index-delete_002dindentation"></a>
<a id="index-M_002d_005e"></a><kbd class="kbd">M-^</kbd></dt>
<dd><p>Merge the previous and the current line (<code class="code">delete-indentation</code>).
This joins the two lines cleanly, by replacing any indentation at
the front of the current line, together with the line boundary, with a
single space.
</p>
<p>As a special case (useful for Lisp code), the single space is omitted
if the characters to be joined are consecutive opening and closing
parentheses, or if the junction follows another newline.
</p>
<p>If there is a fill prefix, <kbd class="kbd">M-^</kbd> deletes the fill prefix if it
appears after the newline that is deleted.  See <a class="xref" href="Text.xhtml#Fill-Prefix">The Fill Prefix</a>.
</p>
<p>With a prefix argument, join the current line to the following line.
If the region is active, and no prefix argument is given, join all
lines in the region instead.
</p>
</dd>
<dt><a class="index-entry-id" id="index-indent_002dregion"></a>
<a id="index-C_002dM_002d_005c"></a><kbd class="kbd">C-M-\</kbd></dt>
<dd><p>Indent all the lines in the region, as though you had typed
<kbd class="kbd"><kbd class="key">TAB</kbd></kbd> at the beginning of each line (<code class="code">indent-region</code>).
</p>
<p>If a numeric argument is supplied, indent every line in the region to
that column number.
</p>
</dd>
<dt><a class="index-entry-id" id="index-indent_002drigidly"></a>
<a class="index-entry-id" id="index-remove-indentation"></a>
<a id="index-C_002dx-TAB"></a><kbd class="kbd">C-x <kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Indent all lines that begin in the region, moving the affected lines
as a rigid unit (<code class="code">indent-rigidly</code>).
</p>
<p>If called with no argument, this command activates a transient mode for
adjusting the indentation of the affected lines interactively.  While
this transient mode is active, typing <kbd class="kbd"><kbd class="key">LEFT</kbd></kbd> or
<kbd class="kbd"><kbd class="key">RIGHT</kbd></kbd> indents leftward and rightward, respectively, by one
space.  You can also type <kbd class="kbd">S-<kbd class="key">LEFT</kbd></kbd> or <kbd class="kbd">S-<kbd class="key">RIGHT</kbd></kbd> to
indent leftward or rightward to the next tab stop (see <a class="pxref" href="#Tab-Stops">Tab Stops</a>).
Typing any other key disables the transient mode, and this key is then
acted upon as normally.
</p>
<p>If called with a prefix argument <var class="var">n</var>, this command indents the
lines forward by <var class="var">n</var> spaces (without enabling the transient mode).
Negative values of <var class="var">n</var> indent backward, so you can remove all
indentation from the lines in the region using a large negative
argument, like this:
</p>
<div class="example smallexample">
<pre class="example-preformatted">C-u -999 C-x <kbd class="key">TAB</kbd>
</pre></div>
</dd>
</dl>

</div>
<div class="section-level-extent" id="Tab-Stops">
<h3 class="section" id="Tab-Stops-1">25.2 Tab Stops</h3>
<a class="index-entry-id" id="index-tab-stops"></a>

<a class="index-entry-id" id="index-tab_002dstop_002dlist"></a>
<p>Emacs defines certain column numbers to be <em class="dfn">tab stops</em>.  These
are used as stopping points by <kbd class="key">TAB</kbd> when inserting whitespace in
Text mode and related modes (see <a class="pxref" href="#Indentation">Indentation</a>), and by commands
like <kbd class="kbd">M-i</kbd> (see <a class="pxref" href="#Indentation-Commands">Indentation Commands</a>).  The variable
<code class="code">tab-stop-list</code> controls these positions.  The default value is
<code class="code">nil</code>, which means a tab stop every 8 columns.  The value can
also be a list of zero-based column numbers (in increasing order) at
which to place tab stops.  Emacs extends the list forever by repeating
the difference between the last and next-to-last elements.
</p>
<a class="index-entry-id" id="index-edit_002dtab_002dstops"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dc-_0028Edit-Tab-Stops_0029"></a>
<p>Instead of customizing the variable <code class="code">tab-stop-list</code> directly, a
convenient way to view and set tab stops is via the command <kbd class="kbd">M-x
edit-tab-stops</kbd>.  This switches to a buffer containing a description
of the tab stop settings, which looks like this:
</p>
<div class="example">
<pre class="example-preformatted">        :       :       :       :       :       :
0         1         2         3         4
0123456789012345678901234567890123456789012345678
To install changes, type C-c C-c
</pre></div>

<p>The first line contains a colon at each tab stop.  The numbers on the
next two lines are present just to indicate where the colons are.
If the value of <code class="code">tab-stop-list</code> is <code class="code">nil</code>, as it is by default,
no colons are displayed initially.
</p>
<p>You can edit this buffer to specify different tab stops by placing
colons on the desired columns.  The buffer uses Overwrite mode
(see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).  Remember that Emacs will extend the list of
tab stops forever by repeating the difference between the last two
explicit stops that you place.  When you are done, type <kbd class="kbd">C-c C-c</kbd> to make
the new tab stops take effect.  Normally, the new tab stop settings
apply to all buffers.  However, if you have made the
<code class="code">tab-stop-list</code> variable local to the buffer where you called
<kbd class="kbd">M-x edit-tab-stops</kbd> (see <a class="pxref" href="Customization.xhtml#Locals">Local Variables</a>), then the new tab stop
settings apply only to that buffer.  To save the tab stop settings for
future Emacs sessions, use the Customize interface to save the value
of <code class="code">tab-stop-list</code> (see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>).
</p>
<p>Note that the tab stops discussed in this section have nothing to do
with how tab characters are displayed in the buffer.  Tab characters
are always displayed as empty spaces extending to the next
<em class="dfn">display tab stop</em>.  See <a class="xref" href="Display.xhtml#Text-Display">How Text Is Displayed</a>.
</p>
</div>
<div class="section-level-extent" id="Just-Spaces">
<h3 class="section" id="Tabs-vs_002e-Spaces">25.3 Tabs vs. Spaces</h3>

<p>Normally, indentation commands insert (or remove) the shortest
possible series of tab and space characters so as to align to the
desired column.  Tab characters are displayed as a stretch of empty
space extending to the next <em class="dfn">display tab stop</em>.  By default, there
is one display tab stop every <code class="code">tab-width</code> columns (the default is
8).  See <a class="xref" href="Display.xhtml#Text-Display">How Text Is Displayed</a>.
</p>
<a class="index-entry-id" id="index-indent_002dtabs_002dmode"></a>
<p>If you prefer, all indentation can be made from spaces only.  To
request this, set the buffer-local variable <code class="code">indent-tabs-mode</code> to
<code class="code">nil</code>.  See <a class="xref" href="Customization.xhtml#Locals">Local Variables</a>, for information about setting buffer-local
variables.  Note, however, that <kbd class="kbd">C-q <kbd class="key">TAB</kbd></kbd> always inserts a
tab character, regardless of the value of <code class="code">indent-tabs-mode</code>.
</p>
<p>One reason to set <code class="code">indent-tabs-mode</code> to <code class="code">nil</code> is that not
all editors display tab characters in the same way.  Emacs users, too,
may have different customized values of <code class="code">tab-width</code>.  By using
spaces only, you can make sure that your file always looks the same.
If you only care about how it looks within Emacs, another way to
tackle this problem is to set the <code class="code">tab-width</code> variable in a
file-local variable (see <a class="pxref" href="Customization.xhtml#File-Variables">Local Variables in Files</a>).
</p>
<a class="index-entry-id" id="index-tabify"></a>
<a class="index-entry-id" id="index-untabify"></a>
<p>There are also commands to convert tabs to spaces or vice versa, always
preserving the columns of all non-whitespace text.  <kbd class="kbd">M-x tabify</kbd> scans the
region for sequences of spaces, and converts sequences of at least two
spaces to tabs if that can be done without changing indentation.  <kbd class="kbd">M-x
untabify</kbd> changes all tabs in the region to appropriate numbers of spaces.
</p>
</div>
<div class="section-level-extent" id="Indent-Convenience">
<h3 class="section" id="Convenience-Features-for-Indentation">25.4 Convenience Features for Indentation</h3>

<a class="index-entry-id" id="index-tab_002dalways_002dindent"></a>
<p>The variable <code class="code">tab-always-indent</code> tweaks the behavior of the
<kbd class="key">TAB</kbd> (<code class="code">indent-for-tab-command</code>) command.  The default value,
<code class="code">t</code>, gives the behavior described in <a class="ref" href="#Indentation">Indentation</a>.  If you
change the value to the symbol <code class="code">complete</code>, then <kbd class="key">TAB</kbd> first
tries to indent the current line, and if the line was already
indented, it tries to complete the text at point (see <a class="pxref" href="Programs.xhtml#Symbol-Completion">Completion for Symbol Names</a>).  If the value is <code class="code">nil</code>, then <kbd class="key">TAB</kbd> indents the
current line only if point is at the left margin or in the line&#8217;s
indentation; otherwise, it inserts a tab character.
</p>
<a class="index-entry-id" id="index-tab_002dfirst_002dcompletion"></a>
<p>If <code class="code">tab-always-indent</code> is <code class="code">complete</code>, whether to expand or
indent can be further customized via the <code class="code">tab-first-completion</code>
variable.  For instance, if that variable is <code class="code">eol</code>, only complete
if point is at the end of a line.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode_002dSpecific-Indent.html#Mode_002dSpecific-Indent">Mode-Specific Indent</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>, for further details.
</p>
<a class="index-entry-id" id="index-Electric-Indent-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Electric-Indent"></a>
<a class="index-entry-id" id="index-electric_002dindent_002dmode"></a>
<p>Electric Indent mode is a global minor mode that automatically
indents the line after every <kbd class="key">RET</kbd> you type.  This mode is enabled
by default.  To toggle this minor mode, type <kbd class="kbd">M-x
electric-indent-mode</kbd>.  To toggle the mode in a single buffer,
use <kbd class="kbd">M-x electric-indent-local-mode</kbd>.
</p>
</div>
<div class="section-level-extent" id="Code-Alignment">
<h3 class="section" id="Code-Alignment-1">25.5 Code Alignment</h3>
<a class="index-entry-id" id="index-code-alignment"></a>
<a class="index-entry-id" id="index-aligning-code"></a>

<p><em class="dfn">Alignment</em> is the process of adjusting whitespace in a sequence
of lines in the region such that in all lines certain parts begin at
the same column.  This is usually something you do to enhance
readability of a piece of text or code.  The classic example is
aligning a series of assignments in C-like programming languages:
</p>
<div class="example">
<pre class="example-preformatted">int a = 1;
short foo = 2;
double blah = 4;
</pre></div>

<p>is commonly aligned to:
</p>
<div class="example">
<pre class="example-preformatted">int    a    = 1;
short  foo  = 2;
double blah = 4;
</pre></div>

<a class="index-entry-id" id="index-alignment-rules"></a>
<a class="index-entry-id" id="index-align"></a>
<p>You can use the command <kbd class="kbd">M-x align</kbd> to align lines in the
current region.  This command knows about common alignment patterns
across many markup and programming languages.  It encodes these
patterns as a set of <em class="dfn">alignment rules</em>, that say how to align
different kinds of text in different contexts.
</p>
<a class="index-entry-id" id="index-align_002drules_002dlist"></a>
<a class="index-entry-id" id="index-align_002dmode_002drules_002dlist"></a>
<p>The user option <code class="code">align-rules-list</code> says which alignment rules
<kbd class="kbd">M-x align</kbd> should consult.  The value of this option is a list
with elements describing alignment rules.  Each element is a cons cell
<code class="code">(<var class="var">title</var> . <var class="var">attributes</var>)</code>, where <var class="var">title</var> is the name
of the alignment rule as a symbol, and <var class="var">attributes</var> is a list of
rule attributes that define when the rule should apply and how it
partitions and aligns lines.  Each rule attribute is a cons cell
<code class="code">(<var class="var">attribute</var> . <var class="var">value</var>)</code>, where <var class="var">attribute</var> is the
name of attribute and <var class="var">value</var> is its value.  The only required
attribute is <code class="code">regexp</code>, whose value is a regular expression with
sub-expressions matching the parts of each line where <kbd class="kbd">M-x align</kbd>
should expand or contract whitespace (see <a class="pxref" href="Search.xhtml#Regexp-Backslash">Backslash in Regular Expressions</a>).  See
the documentation string of <code class="code">align-rules-list</code> (<kbd class="kbd">C-h v
align-rules-list <kbd class="key">RET</kbd></kbd>) for a full description of possible
alignment rule attributes.  By default, this option is set to a long
list of alignment rules for many languages that Emacs supports.  The
default rules use the <code class="code">modes</code> rule attribute to specify major
modes in which <kbd class="kbd">M-x align</kbd> should apply them.  Major modes can
also override <code class="code">align-rules-list</code> by setting the buffer-local
variable <code class="code">align-mode-rules-list</code> to a non-<code class="code">nil</code> list of
alignment rules.  When <code class="code">align-mode-rules-list</code> is non-<code class="code">nil</code>,
<kbd class="kbd">M-x align</kbd> consults it instead of <code class="code">align-rules-list</code>.
</p>
<a class="index-entry-id" id="index-align-exclusion-rules"></a>
<a class="index-entry-id" id="index-align_002dexclude_002drules_002dlist"></a>
<a class="index-entry-id" id="index-align_002dmode_002dexclude_002drules_002dlist"></a>
<p>Besides alignment rules, <kbd class="kbd">M-x align</kbd> uses another kind of rules
called <em class="dfn">exclusion rules</em>.  The exclusion rules say which parts in
the region <kbd class="kbd">M-x align</kbd> should not align and instead leave them
intact.  The user option <code class="code">align-exclude-rules-list</code> specifies
these exclusion rules.  Similarly to <code class="code">align-rules-list</code>, the
value of <code class="code">align-exclude-rules-list</code> is also a list of cons cells
that describe the exclusion rules.  By default,
<code class="code">align-exclude-rules-list</code> includes rules that exclude alignment
in quoted strings and comments in Lisp, C and other languages.  Beyond
the default exclusion rules in <code class="code">align-exclude-rules-list</code>, major
modes can define bespoke exclusion rules by setting
<code class="code">align-mode-exclude-rules-list</code> to a non-<code class="code">nil</code> list of
rules, this overrides <code class="code">align-exclude-rules-list</code> just like
<code class="code">align-mode-rules-list</code> overrides <code class="code">align-rules-list</code>.
</p>
<a class="index-entry-id" id="index-alignment-sections"></a>
<a class="index-entry-id" id="index-align_002dregion_002dseparate"></a>
<p><kbd class="kbd">M-x align</kbd> splits the region into a series of <em class="dfn">sections</em>,
usually sequences of non-blank lines, and aligns each section
according to all matching alignment rule by expanding or contracting
stretches of whitespace.  <kbd class="kbd">M-x align</kbd> consistently aligns all
lines inside a single section, but it may align different sections in
the region differently.  The user option <code class="code">align-region-separate</code>
specifies how <kbd class="kbd">M-x align</kbd> separates the region to sections.  This
option can be one of the symbols <code class="code">entire</code>, <code class="code">group</code>, or a
regular expression.  If <code class="code">align-region-separate</code> is <code class="code">entire</code>,
Emacs aligns the entire region as a single section.  If this option is
<code class="code">group</code>, Emacs aligns each group of consecutive non-blank lines
in the region as a separate section.  If <code class="code">align-region-separate</code>
is a regular expression, <kbd class="kbd">M-x align</kbd> scans the region for matches
to that regular expression and treats them as section separators.  By
default <code class="code">align-region-separate</code> is set to a regular expression
that matches blank lines and lines that contains only whitespace and a
single curly brace (&#8216;<samp class="samp">{</samp>&#8217; or &#8216;<samp class="samp">}</samp>&#8217;).  For special cases where
regular expressions are not accurate enough, you can also set
<code class="code">align-region-separate</code> to a function that says how to separate
the region to alignment sections.  See the documentation string of
<code class="code">align-region-separate</code> for more details.  Specific alignment
rules can override the value of <code class="code">align-region-separate</code> and
define their own section separator by specifying the <code class="code">separate</code>
rule attribute.
</p>
<p>If you call <kbd class="kbd">M-x align</kbd> with a prefix argument (<kbd class="kbd">C-u</kbd>), it
enables more alignment rules that are often useful but may sometimes
be too intrusive.  For example, in a Lisp buffer with the following
form:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(set-face-attribute 'mode-line-inactive nil
                    :box nil
                    :background nil
                    :underline &quot;black&quot;)
</pre></div>

<p>Typing (<kbd class="kbd">C-u M-x align</kbd>) yields:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(set-face-attribute 'mode-line-inactive nil
                    :box                nil
                    :background         nil
                    :underline          &quot;black&quot;)
</pre></div>

<p>In most cases, you should try <kbd class="kbd">M-x align</kbd> without a prefix
argument first, and if that doesn&#8217;t produce the right result you can
undo with <kbd class="kbd">C-/</kbd> and try again with <kbd class="kbd">C-u M-x align</kbd>.
</p>
<a class="index-entry-id" id="index-align_002dhighlight_002drule"></a>
<a class="index-entry-id" id="index-align_002dunhighlight_002drule"></a>
<p>You can use the command <kbd class="kbd">M-x align-highlight-rule</kbd> to visualize
the effect of a specific alignment or exclusion rule in the current
region.  This command prompts you for the title of a rule and
highlights the parts on the region that this rule affects.  For
alignment rules, this command highlights the whitespace that <kbd class="kbd">M-x
align</kbd> would expand or contract, and for exclusion this command
highlights the parts that <kbd class="kbd">M-x align</kbd> would exclude from
alignment.  To remove the highlighting that this command creates, type
<kbd class="kbd">M-x align-unhighlight-rule</kbd>.
</p>
<a class="index-entry-id" id="index-align_002dcurrent"></a>
<a class="index-entry-id" id="index-align_002dentire"></a>
<p>The command <kbd class="kbd">M-x align-current</kbd> is similar to <kbd class="kbd">M-x align</kbd>,
except that it operates only on the alignment section that contains
point regardless of the current region.  This command determines the
boundaries of the current section according to the section separators
that <code class="code">align-region-separate</code> define.  <kbd class="kbd">M-x align-entire</kbd> is
another variant of <kbd class="kbd">M-x align</kbd>, that disregards
<code class="code">align-region-separate</code> and aligns the entire region as a single
alignment section with consistent alignment.  If you set
<code class="code">align-region-separate</code> to <code class="code">entire</code>, <kbd class="kbd">M-x align</kbd> behaves
like <kbd class="kbd">M-x align-entire</kbd> by default.  To illustrate the effect of
aligning the entire region as a single alignment section, consider the
following code:
</p>
<div class="example">
<pre class="example-preformatted">one = 1;
foobarbaz = 2;

spam = 3;
emacs = 4;
</pre></div>

<p>when the region covers all of these lines, typing <kbd class="kbd">M-x align</kbd>
yields:
</p>
<div class="example">
<pre class="example-preformatted">one       = 1;
foobarbaz = 2;

spam  = 3;
emacs = 4;
</pre></div>

<p>On the other hand, <kbd class="kbd">M-x align-entire</kbd> aligns all of the lines as a
single section, so the &#8216;<samp class="samp">=</samp>&#8217; appears at the same column in all
lines:
</p>
<div class="example">
<pre class="example-preformatted">one       = 1;
foobarbaz = 2;

spam      = 3;
emacs     = 4;
</pre></div>

<a class="index-entry-id" id="index-align_002dregexp"></a>
<p>The command <kbd class="kbd">M-x align-regexp</kbd> lets you align the current region
with an alignment rule that you define ad-hoc, instead of using the
predefined rules in <code class="code">align-rules-list</code>.  <kbd class="kbd">M-x align-regexp</kbd>
prompts you for a regular expression and uses that expression as the
<code class="code">regexp</code> attribute for an ad-hoc alignment rule that this command
uses to align the current region.  By default, this command adjusts
the whitespace that matches the first sub-expression of the regular
expression you specify.  If you call <kbd class="kbd">M-x align-regexp</kbd> with a
prefix argument, it also prompts you for the sub-expression to use and
lets you specify the amount of whitespace to use as padding, as well
as whether to apply the rule repeatedly to all matches of the regular
expression in each line.  See <a class="xref" href="Search.xhtml#Regexp-Backslash">Backslash in Regular Expressions</a>, for more
information about regular expressions and their sub-expressions.
</p>
<a class="index-entry-id" id="index-align_002dindent_002dbefore_002daligning"></a>
<p>If the user option <code class="code">align-indent-before-aligning</code> is
non-<code class="code">nil</code>, Emacs indents the region before aligning it with
<kbd class="kbd">M-x align</kbd>.  See <a class="xref" href="#Indentation">Indentation</a>.  By default
<code class="code">align-indent-before-aligning</code> is set to <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-align_002dto_002dtab_002dstop"></a>
<p>The user option <code class="code">align-to-tab-stop</code> says whether aligned parts
should start at a tab stop (see <a class="pxref" href="#Tab-Stops">Tab Stops</a>).  If this option is
<code class="code">nil</code>, <kbd class="kbd">M-x align</kbd> uses just enough whitespace for alignment,
disregarding tab stops.  If this is a non-<code class="code">nil</code> symbol, <kbd class="kbd">M-x
align</kbd> checks the value of that symbol, and if this value is
non-<code class="code">nil</code>, <kbd class="kbd">M-x align</kbd> aligns to tab stops.  By default, this
option is set to <code class="code">indent-tabs-mode</code>, so alignment respects tab
stops in buffers that use tabs for indentation.  See <a class="xref" href="#Just-Spaces">Tabs vs. Spaces</a>.
</p>
<a class="index-entry-id" id="index-align_002ddefault_002dspacing"></a>
<p>The user option <code class="code">align-default-spacing</code> specifies the default
amount of whitespace that <kbd class="kbd">M-x align</kbd> and its related commands use
for padding between the different parts of each line when aligning it.
When <code class="code">align-to-tab-stop</code> is <code class="code">nil</code>, the value of
<code class="code">align-default-spacing</code> is the number of spaces to use for
padding; when <code class="code">align-to-tab-stop</code> is non-<code class="code">nil</code>, the value of
<code class="code">align-default-spacing</code> is instead the number of tab stops to
use.  Each alignment rule can override the default that
<code class="code">align-default-spacing</code> specifies with the <code class="code">spacing</code>
attribute rule.
</p></div>
</div>



</body>
</html>
