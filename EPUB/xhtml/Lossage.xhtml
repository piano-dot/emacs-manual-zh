<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>52 Dealing with Emacs Trouble (GNU Emacs Manual)</title>

<meta name="description" content="52 Dealing with Emacs Trouble (GNU Emacs Manual)"/>
<meta name="keywords" content="52 Dealing with Emacs Trouble (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Bugs.xhtml#Bugs" rel="next" title="53 Reporting Bugs"/>
<link href="Quitting.xhtml" rel="prev" title="51 Quitting and Aborting"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Lossage">

<h2 class="chapter section-level-set-chapter" id="Dealing-with-Emacs-Trouble">52 Dealing with Emacs Trouble</h2>
<a class="index-entry-id" id="index-troubleshooting-Emacs"></a>

<p>This section describes how to recognize and deal with situations in
which Emacs does not work as you expect, such as keyboard code mixups,
garbled displays, running out of memory, and crashes and hangs.
</p>
<p>See <a class="xref" href="Bugs.xhtml#Bugs">Reporting Bugs</a>, for what to do when you think you have found a bug in
Emacs.
</p>

<div class="section-level-extent" id="Stuck-Recursive">
<h3 class="section subsection-level-set-section" id="Recursive-Editing-Levels-1">52.1 Recursive Editing Levels</h3>
<a class="index-entry-id" id="index-stuck-in-recursive-editing"></a>
<a class="index-entry-id" id="index-recursive-editing_002c-cannot-exit"></a>

<p>Recursive editing levels are important and useful features of Emacs, but
they can seem like malfunctions if you do not understand them.
</p>
<p>If the mode line has square brackets &#8216;<samp class="samp">[&#8230;]</samp>&#8217; around the
parentheses that contain the names of the major and minor modes, you
have entered a recursive editing level.  If you did not do this on
purpose, or if you don&#8217;t understand what that means, you should just
get out of the recursive editing level.  To do so, type <kbd class="kbd">M-x
top-level</kbd>.  See <a class="xref" href="Recursive-Edit.xhtml">Recursive Editing Levels</a>.
</p>
</div>
<div class="section-level-extent" id="Screen-Garbled">
<h3 class="section subsection-level-set-section" id="Garbage-on-the-Screen">52.2 Garbage on the Screen</h3>
<a class="index-entry-id" id="index-garbled-display"></a>
<a class="index-entry-id" id="index-display_002c-incorrect"></a>
<a class="index-entry-id" id="index-screen-display_002c-wrong"></a>

<p>If the text on a text terminal looks wrong, the first thing to do is
see whether it is wrong in the buffer.  Type <kbd class="kbd">C-l</kbd>
(<code class="code">recenter-top-bottom</code>) to redisplay the entire screen.  If the
screen appears correct after this, the problem was entirely in the
previous screen update.  (Otherwise, see the following section.)
</p>
<p>Display updating problems often result from an incorrect terminfo
entry for the terminal you are using.  The file <samp class="file">etc/TERMS</samp> in
the Emacs distribution gives the fixes for known problems of this
sort.  <samp class="file">INSTALL</samp> contains general advice for these problems in
one of its sections.  If you seem to be using the right terminfo
entry, it is possible that there is a bug in the terminfo entry, or a
bug in Emacs that appears for certain terminal types.
</p>
</div>
<div class="section-level-extent" id="Text-Garbled">
<h3 class="section subsection-level-set-section" id="Garbage-in-the-Text">52.3 Garbage in the Text</h3>
<a class="index-entry-id" id="index-garbled-text"></a>
<a class="index-entry-id" id="index-buffer-text-garbled"></a>

<p>If <kbd class="kbd">C-l</kbd> shows that the text is wrong, first type <kbd class="kbd">C-h l</kbd>
(<code class="code">view-lossage</code>) to see what commands you typed to produce the
observed results.  Then try undoing the changes step by step using
<kbd class="kbd">C-x u</kbd> (<code class="code">undo</code>), until it gets back to a state you consider
correct.
</p>
<p>If a large portion of text appears to be missing at the beginning or
end of the buffer, check for the word &#8216;<samp class="samp">Narrow</samp>&#8217; in the mode line.
If it appears, the text you don&#8217;t see is probably still present, but
temporarily off-limits.  To make it accessible again, type <kbd class="kbd">C-x n
w</kbd> (<code class="code">widen</code>).  See <a class="xref" href="Display.xhtml#Narrowing">Narrowing</a>.
</p>
</div>
<div class="section-level-extent" id="Memory-Full">
<h3 class="section subsection-level-set-section" id="Running-out-of-Memory">52.4 Running out of Memory</h3>
<a class="index-entry-id" id="index-memory-full"></a>
<a class="index-entry-id" id="index-out-of-memory"></a>

<p>If you get the error message &#8216;<samp class="samp">Virtual memory exceeded</samp>&#8217;, save
your modified buffers with <kbd class="kbd">C-x s</kbd> (<code class="code">save-some-buffers</code>).
This method of saving them has the smallest need for additional
memory.  Emacs keeps a reserve of memory which it makes available when
this error happens; that should be enough to enable <kbd class="kbd">C-x s</kbd> to
complete its work.  When the reserve has been used, &#8216;<samp class="samp">!MEM FULL!</samp>&#8217;
appears at the beginning of the mode line, indicating there is no more
reserve.
</p>
<p>Once you have saved your modified buffers, you can exit this Emacs
session and start another, or you can use <kbd class="kbd">M-x kill-some-buffers</kbd>
to free space in the current Emacs job.  If this frees up sufficient
space, Emacs will refill its memory reserve, and &#8216;<samp class="samp">!MEM FULL!</samp>&#8217;
will disappear from the mode line.  That means you can safely go on
editing in the same Emacs session.
</p>
<p>Do not use <kbd class="kbd">M-x buffer-menu</kbd> to save or kill buffers when you run
out of memory, because the Buffer Menu needs a fair amount of memory
itself, and the reserve supply may not be enough.
</p>
<a class="index-entry-id" id="index-out-of-memory-killer_002c-GNU_002fLinux"></a>
<a class="index-entry-id" id="index-OOM-killer"></a>
<p>On GNU/Linux systems, Emacs does not normally get notified about
out-of-memory situations; instead, the OS can kill the Emacs process
when it runs out of memory.  This feature is known as the
<em class="dfn">out-of-memory killer</em>, or <em class="dfn"><abbr class="acronym">OOM</abbr> killer</em>.  When this
behavior is in effect, Emacs is unable to detect the out-of-memory
situation in time, and won&#8217;t be able to let you save your buffer as
described above.  However, it is possible to turn off this behavior of
the OS, and thus allow Emacs a chance to handle the out-of-memory
situation in a more useful manner, before it is killed.  To do that,
become the super user, edit the file <code class="code">/etc/sysctl.conf</code> to
contain the lines shown below, and then invoke the command
<kbd class="kbd">sysctl&#160;-p</kbd><!-- /@w --> from the shell prompt:
</p>
<div class="example">
<pre class="example-preformatted">vm.overcommit_memory=2
vm.overcommit_ratio=0
</pre></div>

<p>Please note that the above setting affects all the processes on the
system, and in general the behavior of the system under memory
pressure, not just the Emacs process alone.
</p>
</div>
<div class="section-level-extent" id="Crashing">
<h3 class="section subsection-level-set-section" id="When-Emacs-Crashes">52.5 When Emacs Crashes</h3>

<a class="index-entry-id" id="index-crash-report"></a>
<a class="index-entry-id" id="index-backtrace"></a>
<a class="index-entry-id" id="index-emacs_005fbacktrace_002etxt-file_002c-MS_002dWindows"></a>
<p>Emacs is not supposed to crash, but if it does, it produces a
<em class="dfn">crash report</em> prior to exiting.  The crash report is printed to
the standard error stream.  If Emacs was started from a graphical
desktop on a GNU or Unix system, the standard error stream is commonly
redirected to a file such as <samp class="file">~/.xsession-errors</samp>, so you can
look for the crash report there.  On MS-Windows, the crash report is
written to a file named <samp class="file">emacs_backtrace.txt</samp> in the current
directory of the Emacs process, in addition to the standard error
stream.
</p>
<p>The format of the crash report depends on the platform.  On some
platforms, such as those using the GNU C Library, the crash report
includes a <em class="dfn">backtrace</em> describing the execution state prior to
crashing, which can be used to help debug the crash.  Here is an
example for a GNU system:
</p>
<div class="example">
<pre class="example-preformatted">Fatal error 11: Segmentation fault
Backtrace:
emacs[0x5094e4]
emacs[0x4ed3e6]
emacs[0x4ed504]
/lib64/libpthread.so.0[0x375220efe0]
/lib64/libpthread.so.0(read+0xe)[0x375220e08e]
emacs[0x509af6]
emacs[0x5acc26]
...
</pre></div>

<p>The number &#8216;<samp class="samp">11</samp>&#8217; is the system signal number corresponding to the
crash&#8212;in this case a segmentation fault.  The hexadecimal numbers
are program addresses, which can be associated with source code lines
using a debugging tool.  For example, the GDB command
&#8216;<samp class="samp">list *0x509af6</samp>&#8217; prints the source-code lines corresponding to
the &#8216;<samp class="samp">emacs[0x509af6]</samp>&#8217; entry.  If your system has the
<code class="command">addr2line</code> utility, the following shell command outputs a
backtrace with source-code line numbers:
</p>
<div class="example">
<pre class="example-preformatted">sed -n 's/.*\[\(.*\)]$/\1/p' <var class="var">backtrace</var> |
  addr2line -C -f -i -p -e <var class="var">bindir</var>/<var class="var">emacs-binary</var>
</pre></div>

<p>On MS-Windows, the backtrace looks somewhat differently, for example:
</p>
<div class="example">
<pre class="example-preformatted">Backtrace:
00007ff61166a12e
00007ff611538be1
00007ff611559601
00007ff6116ce84a
00007ff9b7977ff0
...
</pre></div>

<p>Therefore, the filtering via <code class="command">sed</code> is not required, and the
command to show the source-code line number is
</p>
<div class="example">
<pre class="example-preformatted"> addr2line -C -f -i -p -e <var class="var">bindir</var>/<var class="var">emacs-binary</var> &lt; <var class="var">backtrace</var>
</pre></div>

<p>Here, <var class="var">backtrace</var> is the name of a text file containing a copy of
the backtrace (on MS-Windows, <samp class="file">emacs_backtrace.txt</samp> in the
directory where Emacs was started), <var class="var">bindir</var> is the name of the
directory that contains the Emacs executable, and <var class="var">emacs-binary</var>
is the name of the Emacs executable file, normally <samp class="file">emacs</samp> on GNU
and Unix systems and <samp class="file">emacs.exe</samp> on MS-Windows and MS-DOS.  Omit
the <samp class="option">-p</samp> option if your version of <code class="command">addr2line</code> is too
old to have it.
</p>
<a class="index-entry-id" id="index-core-dump"></a>
<p>Optionally, Emacs can generate a <em class="dfn">core dump</em> when it crashes, on
systems that support core files.  A core dump is a file containing
voluminous data about the state of the program prior to the crash,
usually examined by loading it into a debugger such as GDB.  On many
platforms, core dumps are disabled by default, and you must explicitly
enable them by running the shell command &#8216;<samp class="samp">ulimit -c unlimited</samp>&#8217;
(e.g., in your shell startup script).
</p>
</div>
<div class="section-level-extent" id="After-a-Crash">
<h3 class="section subsection-level-set-section" id="Recovery-After-a-Crash">52.6 Recovery After a Crash</h3>
<a class="index-entry-id" id="index-recovering-crashed-session"></a>

<p>If Emacs or the computer crashes, you can recover the files you were
editing at the time of the crash from their auto-save files.  To do
this, start Emacs again and type the command <kbd class="kbd">M-x recover-session</kbd>.
</p>
<p>This command initially displays a buffer which lists interrupted
session files, each with its date.  You must choose which session to
recover from.  Typically the one you want is the most recent one.  Move
point to the one you choose, and type <kbd class="kbd">C-c C-c</kbd>.
</p>
<p>Then <code class="code">recover-session</code> considers each of the files that you
were editing during that session; for each such file, it asks whether
to recover that file.  If you answer <kbd class="kbd">y</kbd> for a file, it shows the
dates of that file and its auto-save file, then asks once again
whether to recover that file.  For the second question, you must
confirm with <kbd class="kbd">yes</kbd>.  If you do, Emacs visits the file but gets the
text from the auto-save file.
</p>
<p>When <code class="code">recover-session</code> is done, the files you&#8217;ve chosen to
recover are present in Emacs buffers.  You should then save them.  Only
this&#8212;saving them&#8212;updates the files themselves.
</p>
<p>As a last resort, if you had buffers with content which were not
associated with any files, or if the autosave was not recent enough to
have recorded important changes, you can use the
<samp class="file">etc/emacs-buffer.gdb</samp> script with GDB (the GNU Debugger) to
retrieve them from a core dump&#8212;provided that a core dump was saved,
and that the Emacs executable was not stripped of its debugging
symbols.
</p>
<p>As soon as you get the core dump, rename it to another name such as
<samp class="file">core.emacs</samp>, so that another crash won&#8217;t overwrite it.
</p>
<p>To use this script, run <code class="code">gdb</code> with the file name of your Emacs
executable and the file name of the core dump, e.g., &#8216;<samp class="samp">gdb
/usr/bin/emacs core.emacs</samp>&#8217;.  At the <code class="code">(gdb)</code> prompt, load the
recovery script: &#8216;<samp class="samp">source /usr/src/emacs/etc/emacs-buffer.gdb</samp>&#8217;.
Then type the command <code class="code">ybuffer-list</code> to see which buffers are
available.  For each buffer, it lists a buffer number.  To save a
buffer, use <code class="code">ysave-buffer</code>; you specify the buffer number, and
the file name to write that buffer into.  You should use a file name
which does not already exist; if the file does exist, the script does
not make a backup of its old contents.
</p>
</div>
<div class="section-level-extent" id="Emergency-Escape">
<h3 class="section subsection-level-set-section" id="Emergency-Escape-1">52.7 Emergency Escape</h3>
<a class="index-entry-id" id="index-emergency-escape"></a>

<p>On text terminals, the <em class="dfn">emergency escape</em> feature suspends Emacs
immediately if you type <kbd class="kbd">C-g</kbd> a second time before Emacs can
actually respond to the first one by quitting.  This is so you can
always get out of GNU Emacs no matter how badly it might be hung.
When things are working properly, Emacs recognizes and handles the
first <kbd class="kbd">C-g</kbd> so fast that the second one won&#8217;t trigger emergency
escape.  However, if some problem prevents Emacs from handling the
first <kbd class="kbd">C-g</kbd> properly, then the second one will get you back to the
shell.
</p>
<p>When you resume Emacs after a suspension caused by emergency escape,
it reports the resumption and asks a question or two before going back
to what it had been doing:
</p>
<div class="example">
<pre class="example-preformatted">Emacs is resuming after an emergency escape.
Auto-save? (y or n)
Abort (and dump core)? (y or n)
</pre></div>

<p>Answer each question with <kbd class="kbd">y</kbd> or <kbd class="kbd">n</kbd> followed by <kbd class="key">RET</kbd>.
</p>
<p>Saying <kbd class="kbd">y</kbd> to &#8216;<samp class="samp">Auto-save?</samp>&#8217; causes immediate auto-saving of
all modified buffers in which auto-saving is enabled.  Saying <kbd class="kbd">n</kbd>
skips this.  This question is omitted if Emacs is in a state where
auto-saving cannot be done safely.
</p>
<p>Saying <kbd class="kbd">y</kbd> to &#8216;<samp class="samp">Abort (and dump core)?</samp>&#8217; causes Emacs to
crash, dumping core.  This is to enable a wizard to figure out why
Emacs was failing to quit in the first place.  Execution does not
continue after a core dump.
</p>
<p>If you answer this question <kbd class="kbd">n</kbd>, Emacs execution resumes.  With
luck, Emacs will ultimately do the requested quit.  If not, each
subsequent <kbd class="kbd">C-g</kbd> invokes emergency escape again.
</p>
<p>If Emacs is not really hung, just slow, you may invoke the double
<kbd class="kbd">C-g</kbd> feature without really meaning to.  Then just resume and
answer <kbd class="kbd">n</kbd> to both questions, and you will get back to the former
state.  The quit you requested will happen by and by.
</p>
<p>Emergency escape is active only for text terminals.  On graphical
displays, you can use the mouse to kill Emacs or switch to another
program.
</p>
<p>On MS-DOS, you must type <kbd class="kbd">C-<kbd class="key">Break</kbd></kbd> (twice) to cause
emergency escape&#8212;but there are cases where it won&#8217;t work, when a
system call hangs or when Emacs is stuck in a tight loop in C code.
</p>
</div>
<div class="section-level-extent" id="DEL-Does-Not-Delete">
<h3 class="section subsection-level-set-section" id="If-DEL-Fails-to-Delete">52.8 If <kbd class="key">DEL</kbd> Fails to Delete</h3>
<a class="index-entry-id" id="index-DEL-vs-BACKSPACE"></a>
<a class="index-entry-id" id="index-BACKSPACE-vs-DEL"></a>
<a class="index-entry-id" id="index-DEL-does-not-delete"></a>

<p>Every keyboard has a large key, usually labeled <kbd class="key">BACKSPACE</kbd>,
which is ordinarily used to erase the last character that you typed.
In Emacs, this key is supposed to be equivalent to <kbd class="key">DEL</kbd>.
</p>
<p>When Emacs starts up on a graphical display, it determines
automatically which key should be <kbd class="key">DEL</kbd>.  In some unusual cases,
Emacs gets the wrong information from the system, and <kbd class="key">BACKSPACE</kbd>
ends up deleting forwards instead of backwards.
</p>
<p>Some keyboards also have a <kbd class="key">Delete</kbd> key, which is ordinarily
used to delete forwards.  If this key deletes backward in Emacs, that
too suggests Emacs got the wrong information&#8212;but in the opposite
sense.
</p>
<p>On a text terminal, if you find that <kbd class="key">BACKSPACE</kbd> prompts for a
Help command, like <kbd class="kbd">Control-h</kbd>, instead of deleting a character,
it means that key is actually sending the &#8216;<samp class="samp">BS</samp>&#8217; character.  Emacs
ought to be treating <kbd class="key">BS</kbd> as <kbd class="key">DEL</kbd>, but it isn&#8217;t.
</p>
<a class="index-entry-id" id="index-normal_002derase_002dis_002dbackspace_002dmode"></a>
<p>In all of those cases, the immediate remedy is the same: use the
command <kbd class="kbd">M-x normal-erase-is-backspace-mode</kbd>.  This toggles
between the two modes that Emacs supports for handling <kbd class="key">DEL</kbd>, so
if Emacs starts in the wrong mode, this should switch to the right
mode.  On a text terminal, if you want to ask for help when <kbd class="key">BS</kbd>
is treated as <kbd class="key">DEL</kbd>, use <kbd class="key">F1</kbd> instead of <kbd class="kbd">C-h</kbd>; <kbd class="kbd">C-?</kbd>
may also work, if it sends character code 127.
</p>
<p>To fix the problem in every Emacs session, put one of the following
lines into your initialization file (see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>).  For the
first case above, where <kbd class="key">BACKSPACE</kbd> deletes forwards instead of
backwards, use this line to make <kbd class="key">BACKSPACE</kbd> act as <kbd class="key">DEL</kbd>:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(normal-erase-is-backspace-mode 0)
</pre></div>

<p>For the other two cases, use this line:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(normal-erase-is-backspace-mode 1)
</pre></div>

<a class="index-entry-id" id="index-normal_002derase_002dis_002dbackspace"></a>
<p>Another way to fix the problem for every Emacs session is to
customize the variable <code class="code">normal-erase-is-backspace</code>: the value
<code class="code">t</code> specifies the mode where <kbd class="key">BS</kbd> or <kbd class="key">BACKSPACE</kbd> is
<kbd class="key">DEL</kbd>, and <code class="code">nil</code> specifies the other mode.  See <a class="xref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>.
</p>
</div>
</div>



</body>
</html>
