<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>19 File Handling (GNU Emacs Manual)</title>

<meta name="description" content="19 File Handling (GNU Emacs Manual)"/>
<meta name="keywords" content="19 File Handling (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Buffers.xhtml#Buffers" rel="next" title="20 Using Multiple Buffers"/>
<link href="Keyboard-Macros.xhtml#Keyboard-Macros" rel="prev" title="18 Keyboard Macros"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Files">

<h2 class="chapter" id="File-Handling">19 File Handling</h2>
<a class="index-entry-id" id="index-files"></a>

<p>The operating system stores data permanently in named <em class="dfn">files</em>, so
most of the text you edit with Emacs comes from a file and is ultimately
stored in a file.
</p>
<p>To edit a file, you must tell Emacs to read the file and prepare a
buffer containing a copy of the file&#8217;s text.  This is called
<em class="dfn">visiting</em> the file.  Editing commands apply directly to text in the
buffer; that is, to the copy inside Emacs.  Your changes appear in the
file itself only when you <em class="dfn">save</em> the buffer back into the file.
</p>
<p>In addition to visiting and saving files, Emacs can delete, copy,
rename, and append to files, keep multiple versions of them, and operate
on file directories.
</p>

<div class="section-level-extent" id="File-Names">
<h3 class="section" id="File-Names-1">19.1 File Names</h3>
<a class="index-entry-id" id="index-file-names"></a>

<a class="index-entry-id" id="index-default-file-name"></a>
<p>Many Emacs commands that operate on a file require you to specify
the file name, using the minibuffer (see <a class="pxref" href="Minibuffer.xhtml#Minibuffer-File">Minibuffers for File Names</a>).
</p>
<p>While in the minibuffer, you can use the usual completion and
history commands (see <a class="pxref" href="Minibuffer.xhtml#Minibuffer">The Minibuffer</a>).  Note that file name completion
ignores file names whose extensions appear in the variable
<code class="code">completion-ignored-extensions</code> (see <a class="pxref" href="Minibuffer.xhtml#Completion-Options">Completion Options</a>).
Note also that most commands use permissive completion with
confirmation for reading file names: you are allowed to submit a
nonexistent file name, but if you type <kbd class="key">RET</kbd> immediately after
completing up to a nonexistent file name, Emacs prints
&#8216;<samp class="samp">[Confirm]</samp>&#8217; and you must type a second <kbd class="key">RET</kbd> to confirm.
See <a class="xref" href="Minibuffer.xhtml#Completion-Exit">Completion Exit</a>, for details.
</p>
<p>Minibuffer history commands offer some special features for reading
file names, see <a class="ref" href="Minibuffer.xhtml#Minibuffer-History">Minibuffer History</a>.
</p>
<a class="index-entry-id" id="index-default-directory_002c-of-a-buffer"></a>
<a class="index-entry-id" id="index-default_002ddirectory"></a>
<p>Each buffer has a <em class="dfn">default directory</em>, stored in the
buffer-local variable <code class="code">default-directory</code>.  Whenever Emacs reads
a file name using the minibuffer, it usually inserts the default
directory into the minibuffer as the initial contents.  You can
inhibit this insertion by changing the variable
<code class="code">insert-default-directory</code> to <code class="code">nil</code> (see <a class="pxref" href="Minibuffer.xhtml#Minibuffer-File">Minibuffers for File Names</a>).  Regardless, Emacs always assumes that any relative file name
is relative to the default directory, e.g., entering a file name
without a directory specifies a file in the default directory.
</p>
<a class="index-entry-id" id="index-cd"></a>
<a class="index-entry-id" id="index-pwd"></a>
<p>When you visit a file, Emacs sets <code class="code">default-directory</code> in the
visiting buffer to the directory of its file.  When you create a new
buffer that is not visiting a file, via a command like <kbd class="kbd">C-x b</kbd>,
its default directory is usually copied from the buffer that was
current at the time (see <a class="pxref" href="Buffers.xhtml#Select-Buffer">Creating and Selecting Buffers</a>).  You can use the command
<kbd class="kbd">M-x pwd</kbd> to see the value of <code class="code">default-directory</code> in the
current buffer.  The command <kbd class="kbd">M-x cd</kbd> prompts for a directory&#8217;s
name, and sets the buffer&#8217;s <code class="code">default-directory</code> to that directory
(doing this does not change the buffer&#8217;s file name, if any).
</p>
<p>As an example, when you visit the file <samp class="file">/u/rms/gnu/gnu.tasks</samp>,
the default directory is set to <samp class="file">/u/rms/gnu/</samp>.  If you invoke a
command that reads a file name, entering just &#8216;<samp class="samp">foo</samp>&#8217; in the
minibuffer, with a directory omitted, specifies the file
<samp class="file">/u/rms/gnu/foo</samp>; entering &#8216;<samp class="samp">../.login</samp>&#8217; specifies
<samp class="file">/u/rms/.login</samp>; and entering &#8216;<samp class="samp">new/foo</samp>&#8217; specifies
<samp class="file">/u/rms/gnu/new/foo</samp>.
</p>
<p>When typing a file name into the minibuffer, you can make use of a
couple of shortcuts: a double slash ignores everything before the
second slash in the pair, and &#8216;<samp class="samp">~/</samp>&#8217; is your home directory.
See <a class="xref" href="Minibuffer.xhtml#Minibuffer-File">Minibuffers for File Names</a>.
</p>
<a class="index-entry-id" id="index-environment-variables-in-file-names"></a>
<a class="index-entry-id" id="index-expansion-of-environment-variables"></a>
<a class="index-entry-id" id="index-_0024-in-file-names"></a>
<a class="anchor" id="File-Names-with-_0024"></a><p>The character &#8216;<samp class="samp">$</samp>&#8217; is used to
substitute an environment variable into a file name.  The name of the
environment variable consists of all the alphanumeric characters after
the &#8216;<samp class="samp">$</samp>&#8217;; alternatively, it can be enclosed in braces after the
&#8216;<samp class="samp">$</samp>&#8217;.  For example, if you have used the shell command
<code class="command">export FOO=rms/hacks</code> to set up an environment variable named
<code class="env">FOO</code>, then both <samp class="file">/u/$FOO/test.c</samp> and
<samp class="file">/u/${FOO}/test.c</samp> are abbreviations for
<samp class="file">/u/rms/hacks/test.c</samp>.  If the environment variable is not
defined, no substitution occurs, so that the character &#8216;<samp class="samp">$</samp>&#8217; stands
for itself.  Note that environment variables set outside Emacs affect
Emacs only if they are applied before Emacs is started.
</p>
<p>To access a file with &#8216;<samp class="samp">$</samp>&#8217; in its name, if the &#8216;<samp class="samp">$</samp>&#8217; causes
expansion, type &#8216;<samp class="samp">$$</samp>&#8217;.  This pair is converted to a single
&#8216;<samp class="samp">$</samp>&#8217; at the same time that variable substitution is performed for
a single &#8216;<samp class="samp">$</samp>&#8217;.  Alternatively, quote the whole file name with
&#8216;<samp class="samp">/:</samp>&#8217; (see <a class="pxref" href="#Quoted-File-Names">Quoted File Names</a>).  File names which begin with a
literal &#8216;<samp class="samp">~</samp>&#8217; should also be quoted with &#8216;<samp class="samp">/:</samp>&#8217;.
</p>
<p>You can include non-<abbr class="acronym">ASCII</abbr> characters in file names.
See <a class="xref" href="International.xhtml#File-Name-Coding">Coding Systems for File Names</a>.
</p>
</div>
<div class="section-level-extent" id="Visiting">
<h3 class="section" id="Visiting-Files">19.2 Visiting Files</h3>
<a class="index-entry-id" id="index-visiting-files"></a>
<a class="index-entry-id" id="index-open-file"></a>

<dl class="table">
<dt><kbd class="kbd">C-x C-f</kbd></dt>
<dd><p>Visit a file (<code class="code">find-file</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-r</kbd></dt>
<dd><p>Visit a file for viewing, without allowing changes to it
(<code class="code">find-file-read-only</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-v</kbd></dt>
<dd><p>Visit a different file instead of the one visited last
(<code class="code">find-alternate-file</code>).
</p></dd>
<dt><kbd class="kbd">C-x 4 f</kbd></dt>
<dd><p>Visit a file, in another window (<code class="code">find-file-other-window</code>).  Don&#8217;t
alter what is displayed in the selected window.
</p></dd>
<dt><kbd class="kbd">C-x 5 f</kbd></dt>
<dd><p>Visit a file, in a new frame (<code class="code">find-file-other-frame</code>).  Don&#8217;t
alter what is displayed in the selected frame.
</p></dd>
<dt><kbd class="kbd">M-x find-file-literally</kbd></dt>
<dd><p>Visit a file with no conversion of the contents.
</p></dd>
</dl>

<a class="index-entry-id" id="index-files_002c-visiting-and-saving"></a>
<a class="index-entry-id" id="index-saving-files"></a>
<p><em class="dfn">Visiting</em> a file means reading its contents into an Emacs
buffer so you can edit them.  Emacs makes a new buffer for each file
that you visit.
</p>
<a class="index-entry-id" id="index-C_002dx-C_002df"></a>
<a class="index-entry-id" id="index-find_002dfile"></a>
<p>To visit a file, type <kbd class="kbd">C-x C-f</kbd> (<code class="code">find-file</code>) and use the
minibuffer to enter the name of the desired file.  While in the
minibuffer, you can abort the command by typing <kbd class="kbd">C-g</kbd>.  See <a class="xref" href="#File-Names">File Names</a>, for details about entering file names into minibuffers.
</p>
<p>If the specified file exists but the system does not allow you to
read it, an error message is displayed in the echo area (on GNU and
Unix systems you might be able to visit such a file using the
&#8216;<samp class="samp">su</samp>&#8217; or &#8216;<samp class="samp">sudo</samp>&#8217; methods; see <a class="pxref" href="#Remote-Files">Remote Files</a>).  Otherwise,
you can tell that <kbd class="kbd">C-x C-f</kbd> has completed successfully by the
appearance of new text on the screen, and by the buffer name shown in
the mode line (see <a class="pxref" href="Screen.xhtml#Mode-Line">The Mode Line</a>).  Emacs normally constructs the
buffer name from the file name, omitting the directory name.  For
example, a file named <samp class="file">/usr/rms/emacs.tex</samp> is visited in a buffer
named &#8216;<samp class="samp">emacs.tex</samp>&#8217;.  If there is already a buffer with that name,
Emacs constructs a unique name; the normal method is to add a suffix
based on the directory name (e.g., &#8216;<samp class="samp">&lt;rms&gt;</samp>&#8217;, &#8216;<samp class="samp">&lt;tmp&gt;</samp>&#8217;,
and so on), but you can select other methods.  See <a class="xref" href="Buffers.xhtml#Uniquify">Making Buffer Names Unique</a>.
</p>
<a class="index-entry-id" id="index-creating-files"></a>
<p>To create a new file, just visit it using the same command, <kbd class="kbd">C-x
C-f</kbd>.  Emacs displays &#8216;<samp class="samp">(New file)</samp>&#8217; in the echo area, but in other
respects behaves as if you had visited an existing empty file.
</p>
<a class="index-entry-id" id="index-modified-_0028buffer_0029"></a>
<p>After visiting a file, the changes you make with editing commands are
made in the Emacs buffer.  They do not take effect in the visited
file, until you <em class="dfn">save</em> the buffer (see <a class="pxref" href="#Saving">Saving Files</a>).  If a buffer
contains changes that have not been saved, we say the buffer is
<em class="dfn">modified</em>.  This implies that some changes will be lost if the
buffer is not saved.  The mode line displays two stars near the left
margin to indicate that the buffer is modified.
</p>
<p>If you visit a file that is already in Emacs, <kbd class="kbd">C-x C-f</kbd> switches
to the existing buffer instead of making another copy.  Before doing
so, it checks whether the file has changed since you last visited or
saved it.  If the file has changed, Emacs offers to reread it.
</p>
<a class="index-entry-id" id="index-large_002dfile_002dwarning_002dthreshold"></a>
<a class="index-entry-id" id="index-file_002c-warning-when-size-is-large"></a>
<a class="index-entry-id" id="index-size-of-file_002c-warning-when-visiting"></a>
<a class="index-entry-id" id="index-maximum-buffer-size-exceeded_002c-error-message"></a>
<p>If you try to visit a file larger than
<code class="code">large-file-warning-threshold</code> (the default is 10000000, which is
about 10 megabytes), Emacs asks you for confirmation first.  You can
answer <kbd class="kbd">y</kbd> to proceed with visiting the file or <kbd class="kbd">l</kbd> to visit
the file literally (see below).  Visiting large files literally speeds
up navigation and editing of such files, because various
potentially-expensive features are turned off.  Note, however, that
Emacs cannot visit files that are larger than the maximum Emacs buffer
size, which is limited by the amount of memory Emacs can allocate and
by the integers that Emacs can represent (see <a class="pxref" href="Buffers.xhtml#Buffers">Using Multiple Buffers</a>).  If you
try, Emacs displays an error message saying that the maximum buffer
size has been exceeded.
</p>
<a class="index-entry-id" id="index-treesit_002dmax_002dbuffer_002dsize"></a>
<p>If you try to visit a file whose major mode (see <a class="pxref" href="Modes.xhtml#Major-Modes">Major Modes</a>)
uses the tree-sitter parsing library, Emacs will display a warning if
the file&#8217;s size in bytes is larger than the value of the variable
<code class="code">treesit-max-buffer-size</code>.  The default value is 40 megabytes for
64-bit Emacs and 15 megabytes for 32-bit Emacs.  This avoids the
danger of having Emacs run out of memory by preventing the activation
of major modes based on tree-sitter in such large buffers, because a
typical tree-sitter parser needs about 10 times as much memory as the
text it parses.
</p>
<a class="index-entry-id" id="index-wildcard-characters-in-file-names"></a>
<a class="index-entry-id" id="index-find_002dfile_002dwildcards"></a>
<p>If the file name you specify contains shell-style wildcard
characters, Emacs visits all the files that match it.  (On
case-insensitive filesystems, Emacs matches the wildcards disregarding
the letter case.)  Wildcards include &#8216;<samp class="samp">?</samp>&#8217;, &#8216;<samp class="samp">*</samp>&#8217;, and
&#8216;<samp class="samp">[&#8230;]</samp>&#8217; sequences.  To enter the wild card &#8216;<samp class="samp">?</samp>&#8217; in a file
name in the minibuffer, you need to type <kbd class="kbd">C-q ?</kbd>.  See <a class="xref" href="#Quoted-File-Names">Quoted File Names</a>, for information on how to visit a file whose name
actually contains wildcard characters.  You can disable the wildcard
feature by customizing <code class="code">find-file-wildcards</code>.
</p>
<a class="index-entry-id" id="index-query_002dabout_002dchanged_002dfile"></a>
<p>If you&#8217;re asking to visit a file that&#8217;s already visited in a buffer,
but the file has changed externally, Emacs normally asks you whether
you want to re-read the file from disk.  But if you set
<code class="code">query-about-changed-file</code> to <code class="code">nil</code>, Emacs won&#8217;t query you,
but will instead just display the buffer&#8217;s contents before the
changes, and show an echo-area message telling you how to revert the
buffer from the file.
</p>
<a class="index-entry-id" id="index-C_002dx-C_002dv"></a>
<a class="index-entry-id" id="index-find_002dalternate_002dfile"></a>
<p>If you visit the wrong file unintentionally by typing its name
incorrectly, type <kbd class="kbd">C-x C-v</kbd> (<code class="code">find-alternate-file</code>) to visit
the file you really wanted.  <kbd class="kbd">C-x C-v</kbd> is similar to <kbd class="kbd">C-x
C-f</kbd>, but it kills the current buffer (after first offering to save it
if it is modified).  When <kbd class="kbd">C-x C-v</kbd> reads the file name to visit,
it inserts the entire default file name in the buffer, with point just
after the directory part; this is convenient if you made a slight
error in typing the name.
</p>
<a class="index-entry-id" id="index-find_002dfile_002drun_002ddired"></a>
<p>If you visit a file that is actually a directory, Emacs invokes
Dired, the Emacs directory browser.  See <a class="xref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>.  You can disable
this behavior by setting the variable <code class="code">find-file-run-dired</code> to
<code class="code">nil</code>; in that case, it is an error to try to visit a directory.
</p>
<p>Files which are actually collections of other files, or <em class="dfn">file
archives</em>, are visited in special modes which invoke a Dired-like
environment to allow operations on archive members.  See <a class="xref" href="#File-Archives">File Archives</a>, for more about these features.
</p>
<p>If you visit a file that the operating system won&#8217;t let you modify,
or that is marked read-only, Emacs makes the buffer read-only too, so
that you won&#8217;t go ahead and make changes that you&#8217;ll have trouble
saving afterward.  You can make the buffer writable with <kbd class="kbd">C-x C-q</kbd>
(<code class="code">read-only-mode</code>).  See <a class="xref" href="Buffers.xhtml#Misc-Buffer">Miscellaneous Buffer Operations</a>.
</p>
<a class="index-entry-id" id="index-C_002dx-C_002dr"></a>
<a class="index-entry-id" id="index-find_002dfile_002dread_002donly"></a>
<p>If you want to visit a file as read-only in order to protect
yourself from entering changes accidentally, visit it with the command
<kbd class="kbd">C-x C-r</kbd> (<code class="code">find-file-read-only</code>) instead of <kbd class="kbd">C-x C-f</kbd>.
</p>
<a class="index-entry-id" id="index-C_002dx-4-f"></a>
<a class="index-entry-id" id="index-find_002dfile_002dother_002dwindow"></a>
<p><kbd class="kbd">C-x 4 f</kbd> (<code class="code">find-file-other-window</code>) is like <kbd class="kbd">C-x C-f</kbd>
except that the buffer containing the specified file is selected in another
window.  The window that was selected before <kbd class="kbd">C-x 4 f</kbd> continues to
show the same buffer it was already showing.  If this command is used when
only one window is being displayed, that window is split in two, with one
window showing the same buffer as before, and the other one showing the
newly requested file.  See <a class="xref" href="Windows.xhtml#Windows">Multiple Windows</a>.
</p>
<a class="index-entry-id" id="index-C_002dx-5-f"></a>
<a class="index-entry-id" id="index-find_002dfile_002dother_002dframe"></a>
<p><kbd class="kbd">C-x 5 f</kbd> (<code class="code">find-file-other-frame</code>) is similar, but opens a
new frame, or selects any existing frame showing the specified file.
See <a class="xref" href="Frames.xhtml#Frames">Frames and Graphical Displays</a>.
</p>
<a class="index-entry-id" id="index-file-selection-dialog"></a>
<p>On graphical displays, there are two additional methods for visiting
files.  Firstly, when Emacs is built with a suitable GUI toolkit,
commands invoked with the mouse (by clicking on the menu bar or tool
bar) use the toolkit&#8217;s standard file selection dialog instead of
prompting for the file name in the minibuffer.  On GNU/Linux and Unix
platforms, Emacs does this when built with GTK+, LessTif, and Motif
toolkits; on MS-Windows and Mac, the GUI version does that by default.
For information on how to customize this, see <a class="ref" href="Frames.xhtml#Dialog-Boxes">Using Dialog Boxes</a>.
</p>
<p>Secondly, Emacs supports drag and drop: dropping a file into an
ordinary Emacs window visits the file using that window.  As an
exception, dropping a file into a window displaying a Dired buffer
moves or copies the file into the displayed directory.  For details,
see <a class="ref" href="Frames.xhtml#Drag-and-Drop">Drag and Drop</a>, and <a class="ref" href="Dired.xhtml#Misc-Dired-Features">Other Dired Features</a>.
</p>
<p>On text-mode terminals and on graphical displays when Emacs was
built without a GUI toolkit, you can visit files via the menu-bar
&#8216;<samp class="samp">File</samp>&#8217; menu, which has the &#8216;<samp class="samp">Visit New File</samp>&#8217; and the
&#8216;<samp class="samp">Open File</samp>&#8217; items.
</p>
<p>Each time you visit a file, Emacs automatically scans its contents
to detect what character encoding and end-of-line convention it uses,
and converts these to Emacs&#8217;s internal encoding and end-of-line
convention within the buffer.  When you save the buffer, Emacs
performs the inverse conversion, writing the file to disk with its
original encoding and end-of-line convention.  See <a class="xref" href="International.xhtml#Coding-Systems">Coding Systems</a>.
</p>
<a class="index-entry-id" id="index-find_002dfile_002dliterally"></a>
<p>If you wish to edit a file as a sequence of <abbr class="acronym">ASCII</abbr>
characters with no special encoding or conversion, use the <kbd class="kbd">M-x
find-file-literally</kbd> command.  This visits a file, like <kbd class="kbd">C-x C-f</kbd>,
but does not do format conversion (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Format-Conversion.html#Format-Conversion">Format
Conversion</a> in <cite class="cite">the Emacs Lisp Reference Manual</cite>), character code
conversion (see <a class="pxref" href="International.xhtml#Coding-Systems">Coding Systems</a>), or automatic uncompression
(see <a class="pxref" href="#Compressed-Files">Accessing Compressed Files</a>), and does not add a final newline because
of <code class="code">require-final-newline</code> (see <a class="pxref" href="#Customize-Save">Customizing Saving of Files</a>).  If you have
already visited the same file in the usual (non-literal) manner, this
command asks you whether to visit it literally instead.
</p>
<a class="index-entry-id" id="index-find_002dsibling_002dfile"></a>
<a class="index-entry-id" id="index-find_002dsibling_002drules"></a>
<p>Files are sometimes (loosely) tied to other files, and you could call
these files <em class="dfn">sibling files</em>.  For instance, when editing C files,
if you have a file called &#8216;<samp class="samp">&quot;foo.c&quot;</samp>&#8217;, you often also have a file
called &#8216;<samp class="samp">&quot;foo.h&quot;</samp>&#8217;, and that could be its sibling file.  Or you may
have different versions of a file, for instance
&#8216;<samp class="samp">&quot;src/emacs/emacs-27/lisp/allout.el&quot;</samp>&#8217; and
&#8216;<samp class="samp">&quot;src/emacs/emacs-28/lisp/allout.el&quot;</samp>&#8217; might be considered
siblings.  Emacs provides the <code class="code">find-sibling-file</code> command to jump
between sibling files, but it&#8217;s impossible to guess at which files a
user might want to be considered siblings, so Emacs lets you configure
this freely by altering the <code class="code">find-sibling-rules</code> user option.
This is a list of match/expansion elements.
</p>
<p>For instance, to do the &#8216;<samp class="samp">&quot;.c&quot;</samp>&#8217; to &#8216;<samp class="samp">&quot;.h&quot;</samp>&#8217; mapping, you could
say:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(setq find-sibling-rules
      '((&quot;\\([^/]+\\)\\.c\\'&quot; &quot;\\1.h&quot;)))
</pre></div>

<p>(<code class="code">ff-find-related-file</code> offers similar functionality especially
geared towards C files, see <a class="pxref" href="Programs.xhtml#Other-C-Commands">Other Commands for C Mode</a>.)
</p>
<p>Or, if you want to consider all files under
&#8216;<samp class="samp">&quot;src/emacs/DIR/file-name&quot;</samp>&#8217; to be siblings of other <var class="var">dir</var>s,
you could say:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(setq find-sibling-rules
      '((&quot;src/emacs/[^/]+/\\(.*\\)\\'&quot; &quot;src/emacs/.*/\\1&quot;)))
</pre></div>

<p>As you can see, this is a list of <var class="var">(MATCH EXPANSION...)</var> elements.
The <var class="var">match</var> is a regular expression that matches the visited file
name, and each <var class="var">expansion</var> may refer to match groups by using
&#8216;<samp class="samp">\\1</samp>&#8217; and so on.  The resulting expansion string is then applied
to the file system to see if any files match this expansion
(interpreted as a regexp).
</p>
<a class="index-entry-id" id="index-find_002dfile_002dhook"></a>
<a class="index-entry-id" id="index-find_002dfile_002dnot_002dfound_002dfunctions"></a>
<p>Two special hook variables allow extensions to modify the operation
of visiting files.  Visiting a file that does not exist runs the
functions in <code class="code">find-file-not-found-functions</code>; this variable holds
a list of functions, which are called one by one (with no arguments)
until one of them returns non-<code class="code">nil</code>.  This is not a normal hook,
and the name ends in &#8216;<samp class="samp">-functions</samp>&#8217; rather than &#8216;<samp class="samp">-hook</samp>&#8217; to
indicate that fact.
</p>
<p>Successful visiting of any file, whether existing or not, calls the
functions in <code class="code">find-file-hook</code>, with no arguments.  This variable
is a normal hook.  In the case of a nonexistent file, the
<code class="code">find-file-not-found-functions</code> are run first.  See <a class="xref" href="Customization.xhtml#Hooks">Hooks</a>.
</p>
<p>There are several ways to specify automatically the major mode for
editing the file (see <a class="pxref" href="Modes.xhtml#Choosing-Modes">Choosing File Modes</a>), and to specify local
variables defined for that file (see <a class="pxref" href="Customization.xhtml#File-Variables">Local Variables in Files</a>).
</p>
</div>
<div class="section-level-extent" id="Saving">
<h3 class="section" id="Saving-Files">19.3 Saving Files</h3>

<p><em class="dfn">Saving</em> a buffer in Emacs means writing its contents back into the file
that was visited in the buffer.
</p>

<div class="subsection-level-extent" id="Save-Commands">
<h4 class="subsection" id="Commands-for-Saving-Files">19.3.1 Commands for Saving Files</h4>

<p>These are the commands that relate to saving and writing files.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x C-s</kbd></dt>
<dd><p>Save the current buffer to its file (<code class="code">save-buffer</code>).
</p></dd>
<dt><kbd class="kbd">C-x s</kbd></dt>
<dd><p>Save any or all buffers to their files (<code class="code">save-some-buffers</code>).
</p></dd>
<dt><kbd class="kbd">M-~</kbd></dt>
<dd><p>Forget that the current buffer has been changed (<code class="code">not-modified</code>).
With prefix argument (<kbd class="kbd">C-u</kbd>), mark the current buffer as changed.
</p></dd>
<dt><kbd class="kbd">C-x C-w</kbd></dt>
<dd><p>Save the current buffer with a specified file name (<code class="code">write-file</code>).
</p></dd>
<dt><kbd class="kbd">M-x set-visited-file-name</kbd></dt>
<dd><p>Change the file name under which the current buffer will be saved.
</p></dd>
<dt><kbd class="kbd">M-x rename-visited-file</kbd></dt>
<dd><p>The same as <kbd class="kbd">M-x set-visited-file-name</kbd>, but also rename the file
the buffer is visiting (if any).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-C_002ds"></a>
<a class="index-entry-id" id="index-save_002dbuffer"></a>
<p>When you wish to save the file and make your changes permanent, type
<kbd class="kbd">C-x C-s</kbd> (<code class="code">save-buffer</code>).  After saving is finished, <kbd class="kbd">C-x C-s</kbd>
displays a message like this:
</p>
<div class="example">
<pre class="example-preformatted">Wrote /u/rms/gnu/gnu.tasks
</pre></div>

<p>If the current buffer is not modified (no changes have been made in it
since the buffer was created or last saved), saving is not really
done, because it would have no effect.  Instead, <kbd class="kbd">C-x C-s</kbd>
displays a message like this in the echo area:
</p>
<div class="example">
<pre class="example-preformatted">(No changes need to be saved)
</pre></div>

<p>With a prefix argument, <kbd class="kbd">C-u C-x C-s</kbd>, Emacs also marks the buffer
to be backed up when the next save is done.  See <a class="xref" href="#Backup">Backup Files</a>.
</p>
<a class="index-entry-id" id="index-C_002dx-s"></a>
<a class="index-entry-id" id="index-save_002dsome_002dbuffers"></a>
<p>The command <kbd class="kbd">C-x s</kbd> (<code class="code">save-some-buffers</code>) offers to save any
or all modified buffers.  It asks you what to do with each buffer.  The
possible responses are analogous to those of <code class="code">query-replace</code>:
</p>
<dl class="table">
<dt><kbd class="kbd">y</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">SPC</kbd></kbd></dt>
<dd><p>Save this buffer and ask about the rest of the buffers.
</p></dd>
<dt><kbd class="kbd">n</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">DEL</kbd></kbd></dt>
<dd><p>Don&#8217;t save this buffer, but ask about the rest of the buffers.
</p></dd>
<dt><kbd class="kbd">!</kbd></dt>
<dd><p>Save this buffer and all the rest with no more questions.
</p></dd>
<dt><kbd class="kbd">q</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">RET</kbd></kbd></dt>
<dd><p>Terminate <code class="code">save-some-buffers</code> without any more saving.
</p></dd>
<dt><kbd class="kbd">.</kbd></dt>
<dd><p>Save this buffer, then exit <code class="code">save-some-buffers</code> without even asking
about other buffers.
</p></dd>
<dt><kbd class="kbd">C-r</kbd></dt>
<dd><p>View the buffer that you are currently being asked about.  When you exit
View mode, you get back to <code class="code">save-some-buffers</code>, which asks the
question again.
</p></dd>
<dt><kbd class="kbd">C-f</kbd></dt>
<dd><p>Exit <code class="code">save-some-buffers</code> and visit the buffer that you are
currently being asked about.
</p></dd>
<dt><kbd class="kbd">d</kbd></dt>
<dd><p>Diff the buffer against its corresponding file, so you can see what
changes you would be saving.  This calls the command
<code class="code">diff-buffer-with-file</code> (see <a class="pxref" href="#Comparing-Files">Comparing Files</a>).
</p></dd>
<dt><kbd class="kbd">C-h</kbd></dt>
<dd><p>Display a help message about these options.
</p></dd>
</dl>

<a class="index-entry-id" id="index-save_002dsome_002dbuffers_002ddefault_002dpredicate"></a>
<p>You can customize the value of
<code class="code">save-some-buffers-default-predicate</code> to control which buffers
Emacs will ask about.
</p>
<p><kbd class="kbd">C-x C-c</kbd>, the key sequence to exit Emacs, invokes
<code class="code">save-some-buffers</code> and therefore asks the same questions.
</p>
<a class="index-entry-id" id="index-M_002d_007e"></a>
<a class="index-entry-id" id="index-not_002dmodified"></a>
<p>If you have changed a buffer but do not wish to save the changes,
you should take some action to prevent it.  Otherwise, each time you
use <kbd class="kbd">C-x s</kbd> or <kbd class="kbd">C-x C-c</kbd>, you are liable to save this buffer
by mistake.  One thing you can do is type <kbd class="kbd">M-~</kbd>
(<code class="code">not-modified</code>), which clears out the indication that the buffer
is modified.  If you do this, none of the save commands will believe
that the buffer needs to be saved.  (&#8216;<samp class="samp">~</samp>&#8217; is often used as a
mathematical symbol for &#8220;not&#8221;; thus <kbd class="kbd">M-~</kbd> is &#8220;not&#8221;, metafied.)
Alternatively, you can cancel all the changes made since the file was
visited or saved, by reading the text from the file again.  This is
called <em class="dfn">reverting</em>.  See <a class="xref" href="#Reverting">Reverting a Buffer</a>.  (You could also undo all
the changes by repeating the undo command <kbd class="kbd">C-x u</kbd> until you have
undone all the changes; but reverting is easier.)
</p>
<a class="index-entry-id" id="index-set_002dvisited_002dfile_002dname"></a>
<p><kbd class="kbd">M-x set-visited-file-name</kbd> alters the name of the file that the
current buffer is visiting.  It reads the new file name using the
minibuffer.  Then it marks the buffer as visiting that file name, and
changes the buffer name correspondingly.  <code class="code">set-visited-file-name</code>
does not save the buffer in the newly visited file; it just alters the
records inside Emacs in case you do save later.  It also marks the
buffer as modified so that <kbd class="kbd">C-x C-s</kbd> in that buffer
<em class="emph">will</em> save.
</p>
<a class="index-entry-id" id="index-C_002dx-C_002dw"></a>
<a class="index-entry-id" id="index-write_002dfile"></a>
<p>If you wish to mark the buffer as visiting a different file and save
it right away, use <kbd class="kbd">C-x C-w</kbd> (<code class="code">write-file</code>).  This is
equivalent to <code class="code">set-visited-file-name</code> followed by <kbd class="kbd">C-x C-s</kbd>,
except that <kbd class="kbd">C-x C-w</kbd> asks for confirmation if the file exists.
<kbd class="kbd">C-x C-s</kbd> used on a buffer that is not visiting a file has the
same effect as <kbd class="kbd">C-x C-w</kbd>; that is, it reads a file name, marks the
buffer as visiting that file, and saves it there.  The default file
name in a buffer that is not visiting a file is made by combining the
buffer name with the buffer&#8217;s default directory (see <a class="pxref" href="#File-Names">File Names</a>).
</p>
<p>If the new file name implies a major mode, then <kbd class="kbd">C-x C-w</kbd> switches
to that major mode, in most cases.  The command
<code class="code">set-visited-file-name</code> also does this.  See <a class="xref" href="Modes.xhtml#Choosing-Modes">Choosing File Modes</a>.
</p>
<p>If you wish to save the current buffer to a different file without
visiting that file, use <code class="code">mark-whole-buffer</code> (<kbd class="kbd">C-x h</kbd>), then
<kbd class="kbd">M-x&#160;write-region</kbd><!-- /@w --> (see <a class="pxref" href="#Misc-File-Ops">Miscellaneous File Operations</a>).
</p>
<p>If Emacs is about to save a file and sees that the date of the latest
version on disk does not match what Emacs last read or wrote, Emacs
notifies you of this fact, because it probably indicates a problem caused
by simultaneous editing and requires your immediate attention.
See <a class="xref" href="#Interlocking">Simultaneous Editing</a>.
</p>
</div>
<div class="subsection-level-extent" id="Backup">
<h4 class="subsection" id="Backup-Files">19.3.2 Backup Files</h4>
<a class="index-entry-id" id="index-backup-file"></a>
<a class="index-entry-id" id="index-make_002dbackup_002dfiles"></a>

<p>On most operating systems, rewriting a file automatically destroys all
record of what the file used to contain.  Thus, saving a file from Emacs
throws away the old contents of the file&#8212;or it would, except that
Emacs carefully copies the old contents to another file, called the
<em class="dfn">backup</em> file, before actually saving.
</p>
<p>Emacs makes a backup for a file only the first time the file is
saved from a buffer.  No matter how many times you subsequently save
the file, its backup remains unchanged.  However, if you kill the
buffer and then visit the file again, a new backup file will be made.
</p>
<p>For most files, the variable <code class="code">make-backup-files</code> determines
whether to make backup files.  On most operating systems, its default
value is <code class="code">t</code>, so that Emacs does write backup files.
</p>
<p>For files managed by a version control system (see <a class="pxref" href="Maintaining.xhtml#Version-Control">Version Control</a>), the variable <code class="code">vc-make-backup-files</code> determines whether
to make backup files.  By default it is <code class="code">nil</code>, since backup files
are redundant when you store all the previous versions in a version
control system.
See <a class="xref" href="Maintaining.xhtml#General-VC-Options">General Options</a>.
</p>
<p>At your option, Emacs can keep either a single backup for each file,
or make a series of numbered backup files for each file that you edit.
See <a class="xref" href="#Backup-Names">Single or Numbered Backups</a>.
</p>
<a class="index-entry-id" id="index-backup_002denable_002dpredicate"></a>
<a class="index-entry-id" id="index-temporary_002dfile_002ddirectory"></a>
<a class="index-entry-id" id="index-small_002dtemporary_002dfile_002ddirectory"></a>
<p>The default value of the <code class="code">backup-enable-predicate</code> variable
prevents backup files being written for files in the directories used
for temporary files, specified by <code class="code">temporary-file-directory</code> or
<code class="code">small-temporary-file-directory</code>.
</p>
<p>You can explicitly tell Emacs to make another backup file from a
buffer, even though that buffer has been saved before.  If you save
the buffer with <kbd class="kbd">C-u C-x C-s</kbd>, the version thus saved will be made
into a backup file if you save the buffer again.  <kbd class="kbd">C-u C-u C-x
C-s</kbd> saves the buffer, but first makes the previous file contents into
a new backup file.  <kbd class="kbd">C-u C-u C-u C-x C-s</kbd> does both things: it
makes a backup from the previous contents, and arranges to make
another from the newly saved contents if you save again.
</p>
<a class="index-entry-id" id="index-backup_002ddirectory_002dalist"></a>
<p>You can customize the variable <code class="code">backup-directory-alist</code> to
specify that files matching certain patterns should be backed up in
specific directories.  A typical use is to add an element <code class="code">(&quot;.&quot;
. <var class="var">dir</var>)</code> to make all backups in the directory with absolute name
<var class="var">dir</var>.  Emacs modifies the backup file names to avoid clashes
between files with the same names originating in different
directories.  Alternatively, adding, <code class="code">(&quot;.&quot; . &quot;.~&quot;)</code> would make
backups in the invisible subdirectory <samp class="file">.~</samp> of the original file&#8217;s
directory.  Emacs creates the directory, if necessary, to make the
backup.
</p>

<div class="subsubsection-level-extent" id="Backup-Names">
<h4 class="subsubsection" id="Single-or-Numbered-Backups">19.3.2.1 Single or Numbered Backups</h4>
<a class="index-entry-id" id="index-backup-file-names"></a>
<a class="index-entry-id" id="index-names-of-backup-files"></a>

<a class="index-entry-id" id="index-_007e_002c-in-names-of-backup-files"></a>
<a class="index-entry-id" id="index-tilde-_0028_007e_0029-at-end-of-backup-file-name"></a>
<p>When Emacs makes a backup file, its name is normally constructed by
appending &#8216;<samp class="samp">~</samp>&#8217; to the file name being edited; thus, the backup
file for <samp class="file">eval.c</samp> would be <samp class="file">eval.c~</samp>.
</p>
<a class="index-entry-id" id="index-_007e_002f_002eemacs_002ed_002f_0025backup_0025_007e"></a>
<p>If access control stops Emacs from writing backup files under the
usual names, it writes the backup file as <samp class="file">~/.emacs.d/%backup%~</samp>.
Only one such file can exist, so only the most recently made such
backup is available.
</p>
<p>Emacs can also make <em class="dfn">numbered backup files</em>.  Numbered backup
file names contain &#8216;<samp class="samp">.~</samp>&#8217;, the number, and another &#8216;<samp class="samp">~</samp>&#8217; after
the original file name.  Thus, the backup files of <samp class="file">eval.c</samp> would
be called <samp class="file">eval.c.~1~</samp>, <samp class="file">eval.c.~2~</samp>, and so on, all the way
through names like <samp class="file">eval.c.~259~</samp> and beyond.
</p>
<a class="index-entry-id" id="index-version_002dcontrol"></a>
<p>The variable <code class="code">version-control</code> determines whether to make
single backup files or multiple numbered backup files.  Its possible
values are:
</p>
<dl class="table">
<dt><code class="code">nil</code></dt>
<dd><p>Make numbered backups for files that have numbered backups already.
Otherwise, make single backups.  This is the default.
</p></dd>
<dt><code class="code">t</code></dt>
<dd><p>Make numbered backups.
</p></dd>
<dt><code class="code">never</code></dt>
<dd><p>Never make numbered backups; always make single backups.
</p></dd>
</dl>

<p>The usual way to set this variable is globally, through your init file
or the customization buffer.  However, you can set
<code class="code">version-control</code> locally in an individual buffer to control the
making of backups for that buffer&#8217;s file (see <a class="pxref" href="Customization.xhtml#Locals">Local Variables</a>).  Some
modes, such as Rmail mode, set this variable.  You can also have Emacs
set <code class="code">version-control</code> locally whenever you visit a given file
(see <a class="pxref" href="Customization.xhtml#File-Variables">Local Variables in Files</a>).
</p>
<a class="index-entry-id" id="index-VERSION_005fCONTROL-environment-variable"></a>
<p>If you set the environment variable <code class="env">VERSION_CONTROL</code>, to tell
various GNU utilities what to do with backup files, Emacs also obeys the
environment variable by setting the Lisp variable <code class="code">version-control</code>
accordingly at startup.  If the environment variable&#8217;s value is &#8216;<samp class="samp">t</samp>&#8217;
or &#8216;<samp class="samp">numbered</samp>&#8217;, then <code class="code">version-control</code> becomes <code class="code">t</code>; if the
value is &#8216;<samp class="samp">nil</samp>&#8217; or &#8216;<samp class="samp">existing</samp>&#8217;, then <code class="code">version-control</code>
becomes <code class="code">nil</code>; if it is &#8216;<samp class="samp">never</samp>&#8217; or &#8216;<samp class="samp">simple</samp>&#8217;, then
<code class="code">version-control</code> becomes <code class="code">never</code>.
</p>
<a class="index-entry-id" id="index-make_002dbackup_002dfile_002dname_002dfunction"></a>
<p>If you set the variable <code class="code">make-backup-file-name-function</code> to
a suitable Lisp function, you can override the usual way Emacs
constructs backup file names.
</p>
</div>
<div class="subsubsection-level-extent" id="Backup-Deletion">
<h4 class="subsubsection" id="Automatic-Deletion-of-Backups">19.3.2.2 Automatic Deletion of Backups</h4>

<p>To prevent excessive consumption of disk space, Emacs can delete numbered
backup versions automatically.  Generally Emacs keeps the first few backups
and the latest few backups, deleting any in between.  This happens every
time a new backup is made.
</p>
<a class="index-entry-id" id="index-kept_002dold_002dversions"></a>
<a class="index-entry-id" id="index-kept_002dnew_002dversions"></a>
<p>The two variables <code class="code">kept-old-versions</code> and
<code class="code">kept-new-versions</code> control this deletion.  Their values are,
respectively, the number of oldest (lowest-numbered) backups to keep
and the number of newest (highest-numbered) ones to keep, each time a
new backup is made.  The backups in the middle (excluding those oldest
and newest) are the excess middle versions&#8212;those backups are
deleted.  These variables&#8217; values are used when it is time to delete
excess versions, just after a new backup version is made; the newly
made backup is included in the count in <code class="code">kept-new-versions</code>.  By
default, both variables are 2.
</p>
<a class="index-entry-id" id="index-delete_002dold_002dversions"></a>
<p>If <code class="code">delete-old-versions</code> is <code class="code">t</code>, Emacs deletes the excess
backup files silently.  If it is <code class="code">nil</code>, the default, Emacs asks
you whether it should delete the excess backup versions.  If it has
any other value, then Emacs never automatically deletes backups.
</p>
<p>Dired&#8217;s <kbd class="kbd">.</kbd> (Period) command can also be used to delete old versions.
See <a class="xref" href="Dired.xhtml#Flagging-Many-Files">Flagging Many Files at Once</a>.
</p>
</div>
<div class="subsubsection-level-extent" id="Backup-Copying">
<h4 class="subsubsection" id="Copying-vs_002e-Renaming">19.3.2.3 Copying vs. Renaming</h4>

<p>Backup files can be made by copying the old file or by renaming it.
This makes a difference when the old file has multiple names (hard
links).  If the old file is renamed into the backup file, then the
alternate names become names for the backup file.  If the old file is
copied instead, then the alternate names remain names for the file
that you are editing, and the contents accessed by those names will be
the new contents.
</p>
<p>The method of making a backup file may also affect the file&#8217;s owner
and group.  If copying is used, these do not change.  If renaming is used,
you become the file&#8217;s owner, and the file&#8217;s group becomes the default
(different operating systems have different defaults for the group).
</p>
<a class="index-entry-id" id="index-backup_002dby_002dcopying"></a>
<a class="index-entry-id" id="index-backup_002dby_002dcopying_002dwhen_002dlinked"></a>
<a class="index-entry-id" id="index-backup_002dby_002dcopying_002dwhen_002dmismatch"></a>
<a class="index-entry-id" id="index-backup_002dby_002dcopying_002dwhen_002dprivileged_002dmismatch"></a>
<a class="index-entry-id" id="index-file-ownership_002c-and-backup"></a>
<a class="index-entry-id" id="index-backup_002c-and-user_002did"></a>
<p>The choice of renaming or copying is made as follows:
</p>
<ul class="itemize mark-bullet">
<li>If the variable <code class="code">backup-by-copying</code> is non-<code class="code">nil</code> (the
default is <code class="code">nil</code>), use copying.

</li><li>Otherwise, if the variable <code class="code">backup-by-copying-when-linked</code> is
non-<code class="code">nil</code> (the default is <code class="code">nil</code>), and the file has multiple
names, use copying.

</li><li>Otherwise, if the variable <code class="code">backup-by-copying-when-mismatch</code> is
non-<code class="code">nil</code> (the default is <code class="code">t</code>), and renaming would change
the file&#8217;s owner or group, use copying.

<p>If you change <code class="code">backup-by-copying-when-mismatch</code> to <code class="code">nil</code>,
Emacs checks the numeric user-id of the file&#8217;s owner and the numeric
group-id of the file&#8217;s group.  If either is
no greater than <code class="code">backup-by-copying-when-privileged-mismatch</code>, then it
behaves as though <code class="code">backup-by-copying-when-mismatch</code> is
non-<code class="code">nil</code> anyway.
</p>
</li><li>Otherwise, renaming is the default choice.
</li></ul>

<p>When a file is managed with a version control system (see <a class="pxref" href="Maintaining.xhtml#Version-Control">Version Control</a>), Emacs does not normally make backups in the usual way for
that file.  But <em class="dfn">committing</em> (a.k.a. <em class="dfn">checking in</em>,
see <a class="pxref" href="Maintaining.xhtml#VCS-Concepts">Concepts of Version Control</a>) new versions of files is similar in some ways
to making backups.  One unfortunate similarity is that these
operations typically break hard links, disconnecting the file name you
visited from any alternate names for the same file.  This has nothing
to do with Emacs&#8212;the version control system does it.
</p>
</div>
</div>
<div class="subsection-level-extent" id="Customize-Save">
<h4 class="subsection" id="Customizing-Saving-of-Files">19.3.3 Customizing Saving of Files</h4>

<a class="index-entry-id" id="index-require_002dfinal_002dnewline"></a>
<p>If the value of the variable <code class="code">require-final-newline</code> is
<code class="code">t</code>, saving or writing a file silently puts a newline at the end
if there isn&#8217;t already one there.  If the value is <code class="code">visit</code>, Emacs
adds a newline at the end of any file that doesn&#8217;t have one, just
after it visits the file.  (This marks the buffer as modified, and you
can undo it.)  If the value is <code class="code">visit-save</code>, Emacs adds such
newlines both on visiting and on saving.  If the value is <code class="code">nil</code>,
Emacs leaves the end of the file unchanged; any other non-<code class="code">nil</code>
value means Emacs asks you whether to add a newline.  The default is
<code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-mode_002drequire_002dfinal_002dnewline"></a>
<p>Some major modes are designed for specific kinds of files that are
always supposed to end in newlines.  Such major modes set the variable
<code class="code">require-final-newline</code> to the value of
<code class="code">mode-require-final-newline</code>, which defaults to <code class="code">t</code>.  By
setting the latter variable, you can control how these modes handle
final newlines.
</p>
<a class="index-entry-id" id="index-file_002dpreserve_002dsymlinks_002don_002dsave"></a>
<p>If this option is non-<code class="code">nil</code> and you&#8217;re visiting a file via a
symbolic link, Emacs will break the symbolic link upon saving the
buffer, and will write the buffer to a file with the same name as the
symbolic link, if the value of <code class="code">file-precious-flag</code> is
non-<code class="code">nil</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Buffers.html#Saving-Buffers">file-precious-flag</a> in <cite class="cite">The
Emacs Lisp Reference Manual</cite>).  If you want Emacs to save the buffer
to the file the symbolic link points to (thereby preserving the link)
in these cases, customize the variable
<code class="code">file-preserve-symlinks-on-save</code> to <code class="code">t</code>.
</p>
<a class="index-entry-id" id="index-write_002dregion_002dinhibit_002dfsync"></a>
<p>Normally, when a program writes a file, the operating system briefly
caches the file&#8217;s data in main memory before committing the data to
disk.  This can greatly improve performance; for example, when running
on laptops, it can avoid a disk spin-up each time a file is written.
However, it risks data loss if the operating system crashes before
committing the cache to disk.
</p>
<p>To lessen this risk, Emacs can invoke the <code class="code">fsync</code> system call
after saving a file.  Using <code class="code">fsync</code> does not eliminate the risk
of data loss, partly because many systems do not implement
<code class="code">fsync</code> properly, and partly because Emacs&#8217;s file-saving
procedure typically relies also on directory updates that might not
survive a crash even if <code class="code">fsync</code> works properly.
</p>
<p>The <code class="code">write-region-inhibit-fsync</code> variable controls whether
Emacs invokes <code class="code">fsync</code> after saving a file.  The variable&#8217;s
default value is <code class="code">nil</code> when Emacs is interactive, and <code class="code">t</code>
when Emacs runs in batch mode (see <a class="pxref" href="Emacs-Invocation.xhtml#Initial-Options">Batch Mode</a>).
</p>
<p>Emacs never uses <code class="code">fsync</code> when writing auto-save files, as these
files might lose data anyway.
</p>
</div>
<div class="subsection-level-extent" id="Interlocking">
<h4 class="subsection" id="Protection-against-Simultaneous-Editing">19.3.4 Protection against Simultaneous Editing</h4>

<a class="index-entry-id" id="index-file-dates"></a>
<a class="index-entry-id" id="index-simultaneous-editing"></a>
<p>Simultaneous editing occurs when two users visit the same file, both
make changes, and then both save them.  If nobody is informed that
this is happening, whichever user saves first would later find that
their changes were lost.
</p>
<p>On some systems, Emacs notices immediately when the second user starts
to change the file, and issues an immediate warning.  On all systems,
Emacs checks when you save the file, and warns if you are about to
overwrite another user&#8217;s changes.  You can prevent loss of the other
user&#8217;s work by taking the proper corrective action instead of saving the
file.
</p>
<a class="index-entry-id" id="index-ask_002duser_002dabout_002dlock"></a>
<a class="index-entry-id" id="index-locking-files"></a>
<a class="index-entry-id" id="index-_002e_0023_002c-lock-file-names"></a>
<a class="index-entry-id" id="index-file-locking"></a>
<p>When you make the first modification in an Emacs buffer that is
visiting a file, Emacs records that the file is <em class="dfn">locked</em> by you.
(It does this by creating a specially-named symbolic link<a class="footnote" id="DOCF6" href="#FOOT6"><sup>6</sup></a> with special contents in the same directory.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html#File-Locks">(elisp)File
Locks</a>, for more details.)  Emacs removes the lock when you
save the changes.  The idea is that the file is locked whenever an
Emacs buffer visiting it has unsaved changes.
</p>
<a class="index-entry-id" id="index-create_002dlockfiles"></a>
<p>You can prevent the creation of lock files by setting the variable
<code class="code">create-lockfiles</code> to <code class="code">nil</code>.  <strong class="strong">Caution:</strong> by
doing so you will lose the benefits that this feature provides.  You
can also control where lock files are written by using the
<code class="code">lock-file-name-transforms</code> variable.
</p>
<a class="index-entry-id" id="index-collision"></a>
<p>If you begin to modify the buffer while the visited file is locked by
someone else, this constitutes a <em class="dfn">collision</em>.  When Emacs detects a
collision, it asks you what to do, by calling the Lisp function
<code class="code">ask-user-about-lock</code>.  You can redefine this function for the sake
of customization.  The standard definition of this function asks you a
question and accepts three possible answers:
</p>
<dl class="table">
<dt><kbd class="kbd">s</kbd></dt>
<dd><p>Steal the lock.  Whoever was already changing the file loses the lock,
and you gain the lock.
</p></dd>
<dt><kbd class="kbd">p</kbd></dt>
<dd><p>Proceed.  Go ahead and edit the file despite its being locked by someone else.
</p></dd>
<dt><kbd class="kbd">q</kbd></dt>
<dd><p>Quit.  This causes an error (<code class="code">file-locked</code>), and the buffer
contents remain unchanged&#8212;the modification you were trying to make
does not actually take place.
</p></dd>
</dl>

<p>If Emacs or the operating system crashes, this may leave behind lock
files which are stale, so you may occasionally get warnings about
spurious collisions.  When you determine that the collision is
spurious, just use <kbd class="kbd">p</kbd> to tell Emacs to go ahead anyway.
</p>
<p>Note that locking works on the basis of a file name; if a file has
multiple names, Emacs does not prevent two users from editing it
simultaneously under different names.
</p>
<p>A lock file cannot be written in some circumstances, e.g., if Emacs
lacks the system permissions or cannot create lock files for some
other reason.  In these cases, Emacs can still detect the collision
when you try to save a file, by checking the file&#8217;s last-modification
date.  If the file has changed since the last time Emacs visited or
saved it, that implies that changes have been made in some other way,
and will be lost if Emacs proceeds with saving.  Emacs then displays a
warning message and asks for confirmation before saving; answer
<kbd class="kbd">yes</kbd> to save, and <kbd class="kbd">no</kbd> or <kbd class="kbd">C-g</kbd> cancel the save.
</p>
<p>If you are notified that simultaneous editing has already taken
place, one way to compare the buffer to its file is the <kbd class="kbd">M-x
diff-buffer-with-file</kbd> command.  See <a class="xref" href="#Comparing-Files">Comparing Files</a>.
</p>
<a class="index-entry-id" id="index-remote_002dfile_002dname_002dinhibit_002dlocks"></a>
<p>You can prevent the creation of remote lock files by setting the
variable <code class="code">remote-file-name-inhibit-locks</code> to <code class="code">t</code>.
</p>
<a class="index-entry-id" id="index-lock_002dfile_002dmode"></a>
<p>The minor mode <code class="code">lock-file-mode</code>, called interactively, toggles
the local value of <code class="code">create-lockfiles</code> in the current buffer.
</p>
</div>
<div class="subsection-level-extent" id="File-Shadowing">
<h4 class="subsection" id="Shadowing-Files">19.3.5 Shadowing Files</h4>
<a class="index-entry-id" id="index-shadow-files"></a>
<a class="index-entry-id" id="index-file-shadows"></a>
<a class="index-entry-id" id="index-shadow_002dinitialize"></a>

<p>You can arrange to keep identical <em class="dfn">shadow</em> copies of certain
files in more than one place&#8212;possibly on different machines.  To do
this, first you must set up a <em class="dfn">shadow file group</em>, which is a set
of identically-named files shared between a list of sites.  The file
group is permanent and applies to further Emacs sessions as well as
the current one.  Once the group is set up, every time you exit Emacs,
it will copy the file you edited to the other files in its group.  You
can also do the copying without exiting Emacs, by typing <kbd class="kbd">M-x&#160;shadow-copy-files</kbd><!-- /@w -->.
</p>
<a class="index-entry-id" id="index-shadow-cluster"></a>
<p>A <em class="dfn">shadow cluster</em> is a group of hosts that share directories, so
that copying to or from one of them is sufficient to update the file
on all of them.  Each shadow cluster has a name, and specifies the
network address of a primary host (the one we copy files to), and a
regular expression that matches the host names of all the other hosts
in the cluster.  You can define a shadow cluster with <kbd class="kbd">M-x&#160;shadow-define-cluster</kbd><!-- /@w -->.
</p>
<dl class="table">
<dt><kbd class="kbd">M-x shadow-initialize</kbd></dt>
<dd><p>Set up file shadowing.
</p></dd>
<dt><kbd class="kbd">M-x shadow-define-literal-group</kbd></dt>
<dd><p>Declare a single file to be shared between sites.
</p></dd>
<dt><kbd class="kbd">M-x shadow-define-regexp-group</kbd></dt>
<dd><p>Make all files that match each of a group of files be shared between hosts.
</p></dd>
<dt><kbd class="kbd">M-x shadow-define-cluster <kbd class="key">RET</kbd> <var class="var">name</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Define a shadow file cluster <var class="var">name</var>.
</p></dd>
<dt><kbd class="kbd">M-x shadow-copy-files</kbd></dt>
<dd><p>Copy all pending shadow files.
</p></dd>
<dt><kbd class="kbd">M-x shadow-cancel</kbd></dt>
<dd><p>Cancel the instruction to shadow some files.
</p></dd>
</dl>

<p>To set up a shadow file group, use <kbd class="kbd">M-x&#160;shadow-define-literal-group</kbd><!-- /@w --> or <kbd class="kbd">M-x&#160;shadow-define-regexp-group</kbd><!-- /@w -->.  See their documentation strings for
further information.
</p>
<p>Before copying a file to its shadows, Emacs asks for confirmation.
You can answer &#8220;no&#8221; to bypass copying of this file, this time.  If
you want to cancel the shadowing permanently for a certain file, use
<kbd class="kbd">M-x&#160;shadow-cancel</kbd><!-- /@w --> to eliminate or change the shadow file group.
</p>
<p>File Shadowing is not available on MS Windows.
</p>
</div>
<div class="subsection-level-extent" id="Time-Stamps">
<h4 class="subsection" id="Updating-Time-Stamps-Automatically">19.3.6 Updating Time Stamps Automatically</h4>
<a class="index-entry-id" id="index-time-stamps"></a>
<a class="index-entry-id" id="index-modification-dates"></a>
<a class="index-entry-id" id="index-locale_002c-date-format"></a>

<p>You can arrange to put a time stamp in a file, so that it is updated
automatically each time you edit and save the file.  The time stamp
must be in the first eight lines of the file, and you should insert it
like this:
</p>
<div class="example">
<pre class="example-preformatted">Time-stamp: &lt;&gt;
</pre></div>

<p>or like this:
</p>
<div class="example">
<pre class="example-preformatted">Time-stamp: &quot; &quot;
</pre></div>

<a class="index-entry-id" id="index-time_002dstamp"></a>
<p>Then add the function <code class="code">time-stamp</code> to the hook
<code class="code">before-save-hook</code> (see <a class="pxref" href="Customization.xhtml#Hooks">Hooks</a>).  When you save the file, this
function then automatically updates the time stamp with the current
date and time.  You can also use the command <kbd class="kbd">M-x time-stamp</kbd> to
update the time stamp manually.  By default the time stamp is
formatted according to your locale setting (see <a class="pxref" href="Emacs-Invocation.xhtml#Environment">Environment Variables</a>) and
time zone (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-of-Day.html#Time-of-Day">Time of Day</a> in <cite class="cite">The Emacs Lisp Reference
Manual</cite>).  For customizations, see the Custom group <code class="code">time-stamp</code>.
</p>
</div>
</div>
<div class="section-level-extent" id="Reverting">
<h3 class="section" id="Reverting-a-Buffer">19.4 Reverting a Buffer</h3>
<a class="index-entry-id" id="index-revert_002dbuffer"></a>
<a class="index-entry-id" id="index-revert_002dbuffer_002dwith_002dfine_002dgrain"></a>
<a class="index-entry-id" id="index-drastic-changes"></a>
<a class="index-entry-id" id="index-reread-a-file"></a>

<p>If you have made extensive changes to a file-visiting buffer and
then change your mind, you can <em class="dfn">revert</em> the changes and go back to
the saved version of the file.  To do this, type <kbd class="kbd">C-x x g</kbd>.  Since
reverting unintentionally could lose a lot of work, Emacs asks for
confirmation first if the buffer is modified.
</p>
<p>The <code class="code">revert-buffer</code> command tries to position point in such a
way that, if the file was edited only slightly, you will be at
approximately the same part of the text as before.  But if you have
made major changes, point may end up in a totally different location.
</p>
<p>Reverting marks the buffer as not modified.  However, it adds the
reverted changes as a single modification to the buffer&#8217;s undo history
(see <a class="pxref" href="Fixit.xhtml#Undo">Undo</a>).  Thus, after reverting, you can type <kbd class="kbd">C-/</kbd> or its
aliases to bring the reverted changes back, if you happen to change
your mind.
</p>
<a class="index-entry-id" id="index-revert_002dbuffer_002dwith_002dfine_002dgrain_002dmax_002dseconds"></a>
<p>To revert a buffer more conservatively, you can use the command
<code class="code">revert-buffer-with-fine-grain</code>.  This command acts like
<code class="code">revert-buffer</code>, but it tries to be as non-destructive as
possible, making an effort to preserve all markers, properties and
overlays in the buffer.  Since reverting this way can be very slow
when you have made a large number of changes, you can modify the
variable <code class="code">revert-buffer-with-fine-grain-max-seconds</code> to
specify a maximum amount of seconds that replacing the buffer
contents this way should take.  Note that it is not ensured that the
whole execution of <code class="code">revert-buffer-with-fine-grain</code> won&#8217;t take
longer than this.
</p>
<p>Some kinds of buffers that are not associated with files, such as
Dired buffers, can also be reverted.  For them, reverting means
recalculating their contents.  Buffers created explicitly with
<kbd class="kbd">C-x b</kbd> cannot be reverted; <code class="code">revert-buffer</code> reports an error
if you try.
</p>
<a class="index-entry-id" id="index-revert_002dwithout_002dquery"></a>
<p>When you edit a file that changes automatically and frequently&#8212;for
example, a log of output from a process that continues to run&#8212;it may
be useful for Emacs to revert the file without querying you.  To
request this behavior, set the variable <code class="code">revert-without-query</code> to
a list of regular expressions.  When a file name matches one of these
regular expressions, <code class="code">find-file</code> and <code class="code">revert-buffer</code> will
revert it automatically if it has changed&#8212;provided the buffer itself
is not modified.  (If you have edited the text, it would be wrong to
discard your changes.)
</p>
<a class="index-entry-id" id="index-C_002dx-x-g"></a>
<a class="index-entry-id" id="index-revert_002dbuffer_002dquick_002dshort_002danswers"></a>
<a class="index-entry-id" id="index-revert_002dbuffer_002dquick"></a>
<p>The <kbd class="kbd">C-x x g</kbd> keystroke is bound to the
<code class="code">revert-buffer-quick</code> command.  This is like the
<code class="code">revert-buffer</code> command, but prompts less.  Unlike
<code class="code">revert-buffer</code>, it will not prompt if the current buffer visits
a file, and the buffer is not modified.  It also respects the
<code class="code">revert-buffer-quick-short-answers</code> user option.  If this option
is non-<code class="code">nil</code>, use a shorter <kbd class="kbd">y/n</kbd> query instead of a longer
<kbd class="kbd">yes/no</kbd> query.
</p>
<p>You can also tell Emacs to revert buffers automatically when their
visited files change on disk; see <a class="pxref" href="#Auto-Revert">Auto Revert: Keeping buffers automatically up-to-date</a>.
</p>
</div>
<div class="section-level-extent" id="Auto-Revert">
<h3 class="section" id="Auto-Revert_003a-Keeping-buffers-automatically-up_002dto_002ddate">19.5 Auto Revert: Keeping buffers automatically up-to-date</h3>
<a class="index-entry-id" id="index-Global-Auto-Revert-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Global-Auto-Revert"></a>
<a class="index-entry-id" id="index-Auto-Revert-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Auto-Revert"></a>
<a class="index-entry-id" id="index-global_002dauto_002drevert_002dmode"></a>
<a class="index-entry-id" id="index-auto_002drevert_002dmode"></a>
<a class="index-entry-id" id="index-auto_002drevert_002dtail_002dmode"></a>

<p>A buffer can get out of sync with respect to its visited file on
disk if that file is changed by another program.  To keep it up to
date, you can enable Auto Revert mode by typing <kbd class="kbd">M-x auto-revert-mode</kbd>.
This automatically reverts the buffer when its visited file changes on
disk.  To do the same for all file buffers, type
<kbd class="kbd">M-x global-auto-revert-mode</kbd> to enable Global Auto Revert mode.
</p>
<p>Auto Revert will not revert a buffer if it has unsaved changes, or if
its file on disk is deleted or renamed.
</p>
<p>One use of Auto Revert mode is to &#8220;tail&#8221; a file such as a system
log, so that changes made to that file by other programs are
continuously displayed.  To do this, just move the point to the end of
the buffer, and it will stay there as the file contents change.
However, if you are sure that the file will only change by growing at
the end, use Auto Revert Tail mode instead
(<code class="code">auto-revert-tail-mode</code>).  It is more efficient for this.
Auto Revert Tail mode also works for remote files.
</p>
<a class="index-entry-id" id="index-auto_002drevert_002dverbose"></a>
<p>When a buffer is auto-reverted, a message is generated.  This can be
suppressed by setting <code class="code">auto-revert-verbose</code> to <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-auto_002drevert_002dremote_002dfiles"></a>
<p>The Auto Revert modes do not check or revert remote files, because
that is usually too slow.  This behavior can be changed by setting the
variable <code class="code">auto-revert-remote-files</code> to non-<code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-file-notifications"></a>
<a class="index-entry-id" id="index-auto_002drevert_002duse_002dnotify"></a>
<a class="index-entry-id" id="index-auto_002drevert_002dinterval"></a>
<p>By default, Auto Revert mode works using <em class="dfn">file notifications</em>,
whereby changes in the filesystem are reported to Emacs by the OS.
You can disable use of file notifications by customizing the variable
<code class="code">auto-revert-use-notify</code> to a <code class="code">nil</code> value, then Emacs will
check for file changes by polling every five seconds.  You can change
the polling interval through the variable <code class="code">auto-revert-interval</code>.
</p>
<p>Not all systems support file notifications; where they are not
supported, <code class="code">auto-revert-use-notify</code> will be <code class="code">nil</code> by
default.
</p>
<a class="index-entry-id" id="index-auto_002drevert_002davoid_002dpolling"></a>
<a class="index-entry-id" id="index-auto_002drevert_002dnotify_002dexclude_002ddir_002dregexp"></a>
<p>By default, Auto Revert mode will poll files for changes
periodically even when file notifications are used.  Polling is
unnecessary in many cases, and turning it off may save power by
relying on notifications only.  To do so, set the variable
<code class="code">auto-revert-avoid-polling</code> to non-<code class="code">nil</code>.  However,
notification is ineffective on certain file systems; mainly network
file system on Unix-like machines, where files can be altered from
other machines.  For such file systems, polling may be necessary.
To force polling when
<code class="code">auto-revert-avoid-polling</code> is non-<code class="code">nil</code>, set
<code class="code">auto-revert-notify-exclude-dir-regexp</code> to match files that
should be excluded from using notification.
</p>
<p>In Dired buffers (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>), Auto Revert mode refreshes the
buffer when a file is created or deleted in the buffer&#8217;s directory.
</p>
<p>See <a class="xref" href="Maintaining.xhtml#VC-Undo">Undoing Version Control Actions</a>, for commands to revert to earlier versions of files
under version control.  See <a class="xref" href="Maintaining.xhtml#VC-Mode-Line">Version Control and the Mode Line</a>, for Auto Revert
peculiarities when visiting files under version control.
</p>

<div class="subsection-level-extent" id="Non_002dFile-Buffers">
<h4 class="subsection" id="Auto-Reverting-Non_002dFile-Buffers">19.5.1 Auto Reverting Non-File Buffers</h4>

<p>Global Auto Revert Mode normally only reverts file buffers.  There are
two ways to auto-revert certain non-file buffers: by enabling Auto
Revert Mode in those buffers (using <kbd class="kbd">M-x auto-revert-mode</kbd>); and
by setting <code class="code">global-auto-revert-non-file-buffers</code> to a
non-<code class="code">nil</code> value.  The latter enables Auto Reverting for all types
of buffers for which it is implemented (listed in the menu below).
</p>
<p>Like file buffers, non-file buffers should normally not revert while
you are working on them, or while they contain information that might
get lost after reverting.  Therefore, they do not revert if they are
modified.  This can get tricky, because deciding when a non-file
buffer should be marked modified is usually more difficult than for
file buffers.
</p>
<p>Another tricky detail is that, for efficiency reasons, Auto Revert
often does not try to detect all possible changes in the buffer, only
changes that are major or easy to detect.  Hence, enabling
auto-reverting for a non-file buffer does not always guarantee that
all information in the buffer is up-to-date, and does not necessarily
make manual reverts useless.
</p>
<p>At the other extreme, certain buffers automatically revert every
<code class="code">auto-revert-interval</code> seconds.  (This currently only applies to
the Buffer Menu.)  In this case, Auto Revert does not print any
messages while reverting, even when <code class="code">auto-revert-verbose</code> is
non-<code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-buffer_002dauto_002drevert_002dby_002dnotification"></a>
<p>Some non-file buffers can be updated reliably by file notification on
their default directory; Dired buffers is an example.  The major mode
can indicate this by setting <code class="code">buffer-auto-revert-by-notification</code>
to a non-<code class="code">nil</code> value in that buffer, allowing Auto Revert to
avoid periodic polling.  Such notification does not include changes to
files in that directory, only to the directory itself.
</p>
<p>The details depend on the particular types of buffers and are
explained in the corresponding sections.
</p>

<div class="subsubsection-level-extent" id="Auto-Reverting-the-Buffer-Menu">
<h4 class="subsubsection" id="Auto-Reverting-the-Buffer-Menu-1">19.5.1.1 Auto Reverting the Buffer Menu</h4>

<p>If auto-reverting of non-file buffers is enabled, the Buffer Menu
(see <a class="pxref" href="Buffers.xhtml#Several-Buffers">Operating on Several Buffers</a>)
automatically reverts every
<code class="code">auto-revert-interval</code> seconds, whether there is a need for it or
not.  (It would probably take longer to check whether there is a need
than to actually revert.)
</p>
<p>If the Buffer Menu inappropriately gets marked modified, just revert
it manually using <kbd class="kbd">g</kbd> and auto-reverting will resume.  However, if
you marked certain buffers to get deleted or to be displayed, you have
to be careful, because reverting erases all marks.  The fact that
adding marks sets the buffer&#8217;s modified flag prevents Auto Revert from
automatically erasing the marks.
</p>
</div>
<div class="subsubsection-level-extent" id="Auto-Reverting-Dired">
<h4 class="subsubsection" id="Auto-Reverting-Dired-buffers">19.5.1.2 Auto Reverting Dired buffers</h4>

<p>Dired buffers only auto-revert when the file list of the buffer&#8217;s main
directory changes (e.g., when a new file is added or deleted).  They
do not auto-revert when information about a particular file changes
(e.g., when the size changes) or when inserted subdirectories change.
To be sure that <em class="emph">all</em> listed information is up to date, you have
to manually revert using <kbd class="kbd">g</kbd>, <em class="emph">even</em> if auto-reverting is
enabled in the Dired buffer.  Sometimes, you might get the impression
that modifying or saving files listed in the main directory actually
does cause auto-reverting.  This is because making changes to a file,
or saving it, very often causes changes in the directory itself; for
instance, through backup files or auto-save files.  However, this is
not guaranteed.
</p>
<p>If the Dired buffer is marked modified and there are no changes you
want to protect, then most of the time you can make auto-reverting
resume by manually reverting the buffer using <kbd class="kbd">g</kbd>.  There is one
exception.  If you flag or mark files, you can safely revert the
buffer.  This will not erase the flags or marks (unless the marked
file has been deleted, of course).  However, the buffer will stay
modified, even after reverting, and auto-reverting will not resume.
This is because, if you flag or mark files, you may be working on the
buffer and you might not want the buffer to change without warning.
If you want auto-reverting to resume in the presence of marks and
flags, mark the buffer non-modified using <kbd class="kbd">M-~</kbd>.  However, adding,
deleting or changing marks or flags will mark it modified again.
</p>
<p>Remote Dired buffers are currently not auto-reverted.  Neither are
Dired buffers for which you used shell wildcards or file arguments to
list only some of the files.  <samp class="file">*Find*</samp> and <samp class="file">*Locate*</samp>
buffers do not auto-revert either.
</p>
<p>Note that auto-reverting Dired buffers may not work satisfactorily on
some systems.
</p>
</div>
</div>
</div>
<div class="section-level-extent" id="Auto-Save">
<h3 class="section" id="Auto_002dSaving_003a-Protection-Against-Disasters">19.6 Auto-Saving: Protection Against Disasters</h3>
<a class="index-entry-id" id="index-Auto-Save-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Auto-Save"></a>
<a class="index-entry-id" id="index-crashes"></a>

<p>From time to time, Emacs automatically saves each visited file in a
separate file, without altering the file you actually use.  This is
called <em class="dfn">auto-saving</em>.  It prevents you from losing more than a
limited amount of work if the system crashes.
</p>
<a class="index-entry-id" id="index-auto_002dsave_002dno_002dmessage"></a>
<p>When Emacs determines that it is time for auto-saving, it considers
each buffer, and each is auto-saved if auto-saving is enabled for it
and it has been changed since the last time it was auto-saved.  When
the <code class="code">auto-save-no-message</code> variable is set to <code class="code">nil</code> (the
default), the message &#8216;<samp class="samp">Auto-saving...</samp>&#8217; is displayed in the echo
area during auto-saving, if any files are actually auto-saved; to
disable these messages, customize the variable to a non-<code class="code">nil</code>
value.  Errors occurring during auto-saving are caught so that they do
not interfere with the execution of commands you have been typing.
</p>

<div class="subsection-level-extent" id="Auto-Save-Files">
<h4 class="subsection" id="Auto_002dSave-Files">19.6.1 Auto-Save Files</h4>

<p>Auto-saving does not normally save in the files that you visited,
because it can be very undesirable to save a change that you did not
want to make permanent.  Instead, auto-saving is done in a different
file called the <em class="dfn">auto-save file</em>, and the visited file is changed
only when you request saving explicitly (such as with <kbd class="kbd">C-x C-s</kbd>).
</p>
<a class="index-entry-id" id="index-_0023_002c-in-auto_002dsave-file-names"></a>
<p>Normally, the auto-save file name is made by appending &#8216;<samp class="samp">#</samp>&#8217; to the
front and rear of the visited file name.  Thus, a buffer visiting file
<samp class="file">foo.c</samp> is auto-saved in a file <samp class="file">#foo.c#</samp>.  Most buffers that
are not visiting files are auto-saved only if you request it explicitly;
when they are auto-saved, the auto-save file name is made by appending
&#8216;<samp class="samp">#</samp>&#8217; to the front and rear of buffer name, then
adding digits and letters at the end for uniqueness.  For
example, the <samp class="file">*mail*</samp> buffer in which you compose messages to be
sent might be auto-saved in a file named <samp class="file">#*mail*#704juu</samp>.  Auto-save file
names are made this way unless you reprogram parts of Emacs to do
something different (the functions <code class="code">make-auto-save-file-name</code> and
<code class="code">auto-save-file-name-p</code>).  The file name to be used for auto-saving
in a buffer is calculated when auto-saving is turned on in that buffer.
</p>
<a class="index-entry-id" id="index-auto_002dsave-for-remote-files"></a>
<a class="index-entry-id" id="index-auto_002dsave_002dfile_002dname_002dtransforms"></a>
<p>The variable <code class="code">auto-save-file-name-transforms</code> allows a degree
of control over the auto-save file name.  It lets you specify a series
of regular expressions and replacements to transform the auto save
file name.  The default value puts the auto-save files for remote
files (see <a class="pxref" href="#Remote-Files">Remote Files</a>) into the temporary file directory on the
local machine.
</p>
<p>When you delete a substantial part of the text in a large buffer, auto
save turns off temporarily in that buffer.  This is because if you
deleted the text unintentionally, you might find the auto-save file more
useful if it contains the deleted text.  To reenable auto-saving after
this happens, save the buffer with <kbd class="kbd">C-x C-s</kbd>, or use <kbd class="kbd">C-u 1 M-x
auto-save-mode</kbd>.
</p>
<a class="index-entry-id" id="index-auto_002dsave_002dvisited_002dmode"></a>
<p>If you want auto-saving to be done in the visited file rather than
in a separate auto-save file, enable the global minor mode
<code class="code">auto-save-visited-mode</code>.  In this mode, auto-saving is identical
to explicit saving.  Note that this mode is orthogonal to the
<code class="code">auto-save</code> mode described above; you can enable both at the same
time.  However, if <code class="code">auto-save</code> mode is active in some buffer and
the obsolete <code class="code">auto-save-visited-file-name</code> variable is set to a
non-<code class="code">nil</code> value, that buffer won&#8217;t be affected by
<code class="code">auto-save-visited-mode</code>.
</p>
<p>You can use the variable <code class="code">auto-save-visited-interval</code> to
customize the interval between auto-save operations in
<code class="code">auto-save-visited-mode</code>; by default it&#8217;s five seconds.
<code class="code">auto-save-interval</code> and <code class="code">auto-save-timeout</code> have no effect
on <code class="code">auto-save-visited-mode</code>.  See <a class="xref" href="#Auto-Save-Control">Controlling Auto-Saving</a>, for
details on these variables.
</p>
<a class="index-entry-id" id="index-delete_002dauto_002dsave_002dfiles"></a>
<p>A buffer&#8217;s auto-save file is deleted when you save the buffer in its
visited file.  (You can inhibit this by setting the variable
<code class="code">delete-auto-save-files</code> to <code class="code">nil</code>.)  Changing the visited
file name with <kbd class="kbd">C-x C-w</kbd> or <code class="code">set-visited-file-name</code> renames
any auto-save file to go with the new visited name.
</p>
<a class="index-entry-id" id="index-kill_002dbuffer_002ddelete_002dauto_002dsave_002dfiles"></a>
<p>Killing a buffer, by default, doesn&#8217;t remove the buffer&#8217;s auto-save
file.  If <code class="code">kill-buffer-delete-auto-save-files</code> is non-<code class="code">nil</code>,
killing a buffer that has an auto-save file will make Emacs prompt the
user for whether the auto-save file should be deleted.  (This is
inhibited if <code class="code">delete-auto-save-files</code> is <code class="code">nil</code>.)
</p>
</div>
<div class="subsection-level-extent" id="Auto-Save-Control">
<h4 class="subsection" id="Controlling-Auto_002dSaving">19.6.2 Controlling Auto-Saving</h4>

<a class="index-entry-id" id="index-auto_002dsave_002ddefault"></a>
<a class="index-entry-id" id="index-auto_002dsave_002dmode"></a>
<p>Each time you visit a file, auto-saving is turned on for that file&#8217;s
buffer if the variable <code class="code">auto-save-default</code> is non-<code class="code">nil</code> (but
not in batch mode; see <a class="pxref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>).  The default for this
variable is <code class="code">t</code>, so auto-saving is the usual practice for
file-visiting buffers.  To toggle auto-saving in the current buffer,
type <kbd class="kbd">M-x auto-save-mode</kbd>.  Auto Save mode acts as a buffer-local
minor mode (see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).
</p>
<a class="index-entry-id" id="index-auto_002dsave_002dinterval"></a>
<p>Emacs auto-saves periodically based on how many characters you have
typed since the last auto-save.  The variable
<code class="code">auto-save-interval</code> specifies how many characters there are
between auto-saves.  By default, it is 300.  Emacs doesn&#8217;t accept
values that are too small: if you customize <code class="code">auto-save-interval</code>
to a value less than 20, Emacs will behave as if the value is 20.
</p>
<a class="index-entry-id" id="index-auto_002dsave_002dtimeout"></a>
<p>Auto-saving also takes place when you stop typing for a while.  By
default, it does this after 30 seconds of idleness (at this time,
Emacs may also perform garbage collection; see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html#Garbage-Collection">Garbage
Collection</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).  To change
this interval, customize the variable <code class="code">auto-save-timeout</code>.  The
actual time period is longer if the current buffer is long; this is a
heuristic which aims to keep out of your way when you are editing long
buffers, in which auto-save takes an appreciable amount of time.
Auto-saving during idle periods accomplishes two things: first, it
makes sure all your work is saved if you go away from the terminal for
a while; second, it may avoid some auto-saving while you are actually
typing.
</p>
<a class="index-entry-id" id="index-auto_002dsave_002dvisited_002dinterval"></a>
<p>When <code class="code">auto-save-visited-mode</code> is enabled, Emacs will auto-save
file-visiting buffers after five seconds of idle time.  You can
customize the variable <code class="code">auto-save-visited-interval</code> to change the
idle time interval.
</p>
<p>Emacs also does auto-saving whenever it gets a fatal error.  This
includes killing the Emacs job with a shell command such as &#8216;<samp class="samp">kill
%emacs</samp>&#8217;, or disconnecting a phone line or network connection.
</p>
<a class="index-entry-id" id="index-do_002dauto_002dsave"></a>
<p>You can perform an auto-save explicitly with the command <kbd class="kbd">M-x
do-auto-save</kbd>.
</p>
</div>
<div class="subsection-level-extent" id="Recover">
<h4 class="subsection" id="Recovering-Data-from-Auto_002dSaves">19.6.3 Recovering Data from Auto-Saves</h4>

<a class="index-entry-id" id="index-recover_002dfile"></a>
<p>You can use the contents of an auto-save file to recover from a loss
of data with the command <kbd class="kbd">M-x recover-file <kbd class="key">RET</kbd> <var class="var">file</var>
<kbd class="key">RET</kbd></kbd>.  This visits <var class="var">file</var> and then (after your confirmation)
restores the contents from its auto-save file <samp class="file">#<var class="var">file</var>#</samp>.
You can then save with <kbd class="kbd">C-x C-s</kbd> to put the recovered text into
<var class="var">file</var> itself.  For example, to recover file <samp class="file">foo.c</samp> from its
auto-save file <samp class="file">#foo.c#</samp>, do:
</p>
<div class="example">
<pre class="example-preformatted">M-x recover-file <kbd class="key">RET</kbd> foo.c <kbd class="key">RET</kbd>
yes <kbd class="key">RET</kbd>
C-x C-s
</pre></div>

<p>Before asking for confirmation, <kbd class="kbd">M-x recover-file</kbd> displays a
directory listing describing the specified file and the auto-save file,
so you can compare their sizes and dates.  If the auto-save file
is older, <kbd class="kbd">M-x recover-file</kbd> does not offer to read it.
</p>
<a class="index-entry-id" id="index-recover_002dsession"></a>
<p>If Emacs or the computer crashes, you can recover all the files you
were editing from their auto save files with the command <kbd class="kbd">M-x
recover-session</kbd>.  This first shows you a list of recorded interrupted
sessions.  Move point to the one you choose, and type <kbd class="kbd">C-c C-c</kbd>.
</p>
<p>Then <code class="code">recover-session</code> asks about each of the files that were
being edited during that session, asking whether to recover that file.
If you answer <kbd class="kbd">y</kbd>, it calls <code class="code">recover-file</code>, which works in its
normal fashion.  It shows the dates of the original file and its
auto-save file, and asks once again whether to recover that file.
</p>
<p>When <code class="code">recover-session</code> is done, the files you&#8217;ve chosen to
recover are present in Emacs buffers.  You should then save them.  Only
this&#8212;saving them&#8212;updates the files themselves.
</p>
<a class="index-entry-id" id="index-auto_002dsave_002dlist_002dfile_002dprefix"></a>
<p>Emacs records information about interrupted sessions in files named
<samp class="file">.saves-<var class="var">pid</var>-<var class="var">hostname</var>~</samp> in the directory
<samp class="file">~/.emacs.d/auto-save-list/</samp>.  This directory is determined by
the variable <code class="code">auto-save-list-file-prefix</code>.  If you set
<code class="code">auto-save-list-file-prefix</code> to <code class="code">nil</code>, sessions are not
recorded for recovery.
</p>
</div>
</div>
<div class="section-level-extent" id="File-Aliases">
<h3 class="section" id="File-Name-Aliases">19.7 File Name Aliases</h3>
<a class="index-entry-id" id="index-symbolic-links-_0028visiting_0029"></a>
<a class="index-entry-id" id="index-hard-links-_0028visiting_0029"></a>

<p>Symbolic links and hard links both make it possible for several file
names to refer to the same file.  Hard links are alternate names that
refer directly to the file; all the names are equally valid, and no one
of them is preferred.  By contrast, a symbolic link is a kind of defined
alias: when <samp class="file">foo</samp> is a symbolic link to <samp class="file">bar</samp>, you can use
either name to refer to the file, but <samp class="file">bar</samp> is the real name, while
<samp class="file">foo</samp> is just an alias.  More complex cases occur when symbolic
links point to directories.
</p>
<a class="index-entry-id" id="index-find_002dfile_002dexisting_002dother_002dname"></a>
<a class="index-entry-id" id="index-find_002dfile_002dsuppress_002dsame_002dfile_002dwarnings"></a>
<p>Normally, if you visit a file which Emacs is already visiting under
a different name, Emacs displays a message in the echo area and uses
the existing buffer visiting that file.  This can happen on systems
that support hard or symbolic links, or if you use a long file name on
a system that truncates long file names, or on a case-insensitive file
system.  You can suppress the message by setting the variable
<code class="code">find-file-suppress-same-file-warnings</code> to a non-<code class="code">nil</code>
value.  You can disable this feature entirely by setting the variable
<code class="code">find-file-existing-other-name</code> to <code class="code">nil</code>: then if you visit
the same file under two different names, you get a separate buffer for
each file name.
</p>
<a class="index-entry-id" id="index-find_002dfile_002dvisit_002dtruename"></a>
<a class="index-entry-id" id="index-truenames-of-files"></a>
<a class="index-entry-id" id="index-file-truenames"></a>
<p>If the variable <code class="code">find-file-visit-truename</code> is non-<code class="code">nil</code>,
then the file name recorded for a buffer is the file&#8217;s <em class="dfn">truename</em>
(made by replacing all symbolic links with their target names), rather
than the name you specify.  Setting <code class="code">find-file-visit-truename</code> also
implies the effect of <code class="code">find-file-existing-other-name</code>.
</p>
<a class="index-entry-id" id="index-directory-name-abbreviation"></a>
<a class="index-entry-id" id="index-directory_002dabbrev_002dalist"></a>
<p>Sometimes, a directory is ordinarily accessed through a symbolic
link, and you may want Emacs to preferentially show its linked
name.  To do this, customize <code class="code">directory-abbrev-alist</code>.  Each
element in this list should have the form <code class="code">(<var class="var">from</var>
. <var class="var">to</var>)</code>, which means to replace <var class="var">from</var> with <var class="var">to</var> whenever
<var class="var">from</var> appears in a directory name.  The <var class="var">from</var> string is a
regular expression (see <a class="pxref" href="Search.xhtml#Regexps">Syntax of Regular Expressions</a>).  It is matched against directory
names anchored at the first character, and should start with &#8216;<samp class="samp">\`</samp>&#8217;
(to support directory names with embedded newlines, which would defeat
&#8216;<samp class="samp">^</samp>&#8217;).  The <var class="var">to</var> string should be an ordinary absolute
directory name pointing to the same directory.  Do not use &#8216;<samp class="samp">~</samp>&#8217; to
stand for a home directory in the <var class="var">to</var> string; Emacs performs
these substitutions separately.  Here&#8217;s an example, from a system on
which <samp class="file">/home/fsf</samp> is normally accessed through a symbolic link
named <samp class="file">/fsf</samp>:
</p>
<div class="example">
<pre class="example-preformatted">((&quot;\\`/home/fsf&quot; . &quot;/fsf&quot;))
</pre></div>

</div>
<div class="section-level-extent" id="Directories">
<h3 class="section" id="File-Directories">19.8 File Directories</h3>

<a class="index-entry-id" id="index-file-directory"></a>
<a class="index-entry-id" id="index-directory-listing"></a>
<p>The file system groups files into <em class="dfn">directories</em>.  A <em class="dfn">directory
listing</em> is a list of all the files in a directory.  Emacs provides
commands to create and delete directories, and to make directory
listings in brief format (file names only) and verbose format (sizes,
dates, and other attributes included).  Emacs also includes a
directory browser feature called Dired, which you can invoke with
<kbd class="kbd">C-x d</kbd>; see <a class="ref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x C-d <var class="var">dir-or-pattern</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Display a brief directory listing (<code class="code">list-directory</code>).
</p></dd>
<dt><kbd class="kbd">C-u C-x C-d <var class="var">dir-or-pattern</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Display a verbose directory listing.
</p></dd>
<dt><kbd class="kbd">M-x make-directory <kbd class="key">RET</kbd> <var class="var">dirname</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Create a new directory named <var class="var">dirname</var>.
</p></dd>
<dt><kbd class="kbd">M-x delete-directory <kbd class="key">RET</kbd> <var class="var">dirname</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Delete the directory named <var class="var">dirname</var>.  If it isn&#8217;t empty,
you will be asked whether you want to delete it recursively.
</p></dd>
</dl>

<a class="index-entry-id" id="index-list_002ddirectory"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dd"></a>
<p>The command to display a directory listing is <kbd class="kbd">C-x C-d</kbd>
(<code class="code">list-directory</code>).  It reads using the minibuffer a file name
which is either a directory to be listed or a wildcard-containing
pattern for the files to be listed.  For example,
</p>
<div class="example">
<pre class="example-preformatted">C-x C-d /u2/emacs/etc <kbd class="key">RET</kbd>
</pre></div>

<p>lists all the files in directory <samp class="file">/u2/emacs/etc</samp>.  Here is an
example of specifying a file name pattern:
</p>
<div class="example">
<pre class="example-preformatted">C-x C-d /u2/emacs/src/*.c <kbd class="key">RET</kbd>
</pre></div>

<p>Normally, <kbd class="kbd">C-x C-d</kbd> displays a brief directory listing containing
just file names.  A numeric argument (regardless of value) tells it to
make a verbose listing including sizes, dates, and owners (like
&#8216;<samp class="samp">ls -l</samp>&#8217;).
</p>
<a class="index-entry-id" id="index-list_002ddirectory_002dbrief_002dswitches"></a>
<a class="index-entry-id" id="index-list_002ddirectory_002dverbose_002dswitches"></a>
<p>The text of a directory listing is mostly obtained by running
<code class="code">ls</code> in an inferior process.  Two Emacs variables control the
switches passed to <code class="code">ls</code>: <code class="code">list-directory-brief-switches</code> is
a string giving the switches to use in brief listings (<code class="code">&quot;-CF&quot;</code> by
default), and <code class="code">list-directory-verbose-switches</code> is a string
giving the switches to use in a verbose listing (<code class="code">&quot;-l&quot;</code> by
default).
</p>
<p>In verbose directory listings, Emacs adds information about the
amount of free space on the disk that contains the directory.
</p>
<p>The command <kbd class="kbd">M-x delete-directory</kbd> prompts for a directory&#8217;s name
using the minibuffer, and deletes the directory if it is empty.  If
the directory is not empty, you will be asked whether you want to
delete it recursively.  On systems that have a &#8220;Trash&#8221; (or &#8220;Recycle
Bin&#8221;) feature, you can make this command move the specified directory
to the Trash instead of deleting it outright, by changing the variable
<code class="code">delete-by-moving-to-trash</code> to <code class="code">t</code>.  See <a class="xref" href="#Misc-File-Ops">Miscellaneous File Operations</a>,
for more information about using the Trash.
</p>
</div>
<div class="section-level-extent" id="Comparing-Files">
<h3 class="section" id="Comparing-Files-1">19.9 Comparing Files</h3>
<a class="index-entry-id" id="index-comparing-files"></a>

<a class="index-entry-id" id="index-diff"></a>
<a class="index-entry-id" id="index-diff_002dswitches"></a>
<p>The command <kbd class="kbd">M-x diff</kbd> prompts for two file names, using the
minibuffer, and displays the differences between the two files in a
buffer named <samp class="file">*diff*</samp>.  This works by running the <code class="command">diff</code>
program, using options taken from the variable <code class="code">diff-switches</code>.
The value of <code class="code">diff-switches</code> should be a string; the default is
<code class="code">&quot;-u&quot;</code> to specify a unified context diff.
See <a href="https://www.gnu.org/software/diffutils/manual/html_node/index.html#Top">Diff</a> in <cite class="cite">Comparing and Merging Files</cite>, for more
information about the <code class="command">diff</code> program.
</p>
<p>The output of the <code class="code">diff</code> command is shown using a major mode
called Diff mode.  See <a class="xref" href="#Diff-Mode">Diff Mode</a>.
</p>
<p>A (much more sophisticated) alternative is <kbd class="kbd">M-x ediff</kbd>
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/ediff/index.html#Top">Ediff</a> in <cite class="cite">The Ediff Manual</cite>).
</p>
<a class="index-entry-id" id="index-diff_002dbackup"></a>
<p>The command <kbd class="kbd">M-x diff-backup</kbd> compares a specified file with its
most recent backup.  If you specify the name of a backup file,
<code class="code">diff-backup</code> compares it with the source file that it is a
backup of.  In all other respects, this behaves like <kbd class="kbd">M-x diff</kbd>.
</p>
<a class="index-entry-id" id="index-diff_002dbuffer_002dwith_002dfile"></a>
<p>The command <kbd class="kbd">M-x diff-buffer-with-file</kbd> compares a specified
buffer with its corresponding file.  This shows you what changes you
would make to the file if you save the buffer.
</p>
<a class="index-entry-id" id="index-diff_002dbuffers"></a>
<p>The command <kbd class="kbd">M-x diff-buffers</kbd> compares the contents of two
specified buffers.
</p>
<a class="index-entry-id" id="index-compare_002dwindows"></a>
<p>The command <kbd class="kbd">M-x compare-windows</kbd> compares the text in the
current window with that in the window that was the selected window
before you selected the current one.  (For more information about
windows in Emacs, see <a class="pxref" href="Windows.xhtml#Windows">Multiple Windows</a>.)  Comparison starts at point in
each window, after pushing each initial point value on the mark ring
(see <a class="pxref" href="Mark.xhtml#Mark-Ring">The Mark Ring</a>) in its respective buffer.  Then it moves point
forward in each window, one character at a time, until it reaches
characters that don&#8217;t match.  Then the command exits.
</p>
<p>If point in the two windows is followed by non-matching text when
the command starts, <kbd class="kbd">M-x compare-windows</kbd> tries heuristically to
advance up to matching text in the two windows, and then exits.  So if
you use <kbd class="kbd">M-x compare-windows</kbd> repeatedly (see <a class="pxref" href="Basic.xhtml#Repeating">Repeating a Command</a>), each
time it either skips one matching range or finds the start of another.
</p>
<a class="index-entry-id" id="index-compare_002dignore_002dcase"></a>
<a class="index-entry-id" id="index-compare_002dignore_002dwhitespace"></a>
<p>With a numeric argument, <code class="code">compare-windows</code> ignores changes in
whitespace.  If the variable <code class="code">compare-ignore-case</code> is
non-<code class="code">nil</code>, the comparison ignores differences in case as well.
If the variable <code class="code">compare-ignore-whitespace</code> is non-<code class="code">nil</code>,
<code class="code">compare-windows</code> by default ignores changes in whitespace, but a
prefix argument turns that off for that single invocation of the
command.
</p>
<a class="index-entry-id" id="index-Smerge-mode"></a>
<a class="index-entry-id" id="index-smerge_002dmode"></a>
<a class="index-entry-id" id="index-failed-merges"></a>
<a class="index-entry-id" id="index-merges_002c-failed"></a>
<a class="index-entry-id" id="index-comparing-3-files-_0028diff3_0029"></a>
<p>You can use <kbd class="kbd">M-x smerge-mode</kbd> to turn on Smerge mode, a minor
mode for editing output from the <code class="command">diff3</code> program.  This is
typically the result of a failed merge from a version control system
update outside VC, due to conflicting changes to a file.  Smerge
mode provides commands to resolve conflicts by selecting specific
changes.
</p>
<p>See <a class="xref" href="Maintaining.xhtml#Emerge">Merging Files with Emerge</a>,
for the Emerge facility, which provides a powerful interface for
merging files.
</p>
</div>
<div class="section-level-extent" id="Diff-Mode">
<h3 class="section" id="Diff-Mode-1">19.10 Diff Mode</h3>
<a class="index-entry-id" id="index-Diff-mode"></a>
<a class="index-entry-id" id="index-diff_002dmode"></a>
<a class="index-entry-id" id="index-patches_002c-editing"></a>

<p>Diff mode is a major mode used for the output of <kbd class="kbd">M-x diff</kbd> and
other similar commands.  This kind of output is called a <em class="dfn">patch</em>,
because it can be passed to the <code class="command">patch</code> command to
automatically apply the specified changes.  To select Diff mode
manually, type <kbd class="kbd">M-x diff-mode</kbd>.
</p>
<a class="index-entry-id" id="index-hunk_002c-diff"></a>
<p>The changes specified in a patch are grouped into <em class="dfn">hunks</em>, which
are contiguous chunks of text that contain one or more changed lines.
Hunks usually also include unchanged lines to provide context for the
changes.  Each hunk is preceded by a <em class="dfn">hunk header</em>, which
specifies the old and new line numbers where the hunk&#8217;s changes occur.
Diff mode highlights each hunk header, to distinguish it from the
actual contents of the hunk.
</p>
<p>The first hunk in a patch is preceded by a file header, which shows
the names of the new and the old versions of the file, and their time
stamps.  If a patch shows changes for more than one file, each file
has such a header before the first hunk of that file&#8217;s changes.
</p>
<a class="index-entry-id" id="index-diff_002dupdate_002don_002dthe_002dfly"></a>
<p>You can edit a Diff mode buffer like any other buffer.  (If it is
read-only, you need to make it writable first; see <a class="ref" href="Buffers.xhtml#Misc-Buffer">Miscellaneous Buffer Operations</a>.)
Whenever you edit a hunk, Diff mode attempts to automatically correct
the line numbers in the hunk headers, to ensure that the patch remains
correct, and could still be applied by <code class="command">patch</code>.  To disable
automatic line number correction, change the variable
<code class="code">diff-update-on-the-fly</code> to <code class="code">nil</code>.
</p>
<p>Diff mode arranges for hunks to be treated as compiler error
messages by <kbd class="kbd">M-g M-n</kbd> and other commands that handle error messages
(see <a class="pxref" href="Building.xhtml#Compilation-Mode">Compilation Mode</a>).  Thus, you can use the compilation-mode
commands to visit the corresponding source locations.
</p>
<p>In addition, Diff mode provides the following commands to navigate,
manipulate and apply parts of patches:
</p>
<dl class="table">
<dt><a id="index-diff_002dhunk_002dnext"></a><kbd class="kbd">M-n</kbd></dt>
<dd><p>Move to the next hunk-start (<code class="code">diff-hunk-next</code>).  With prefix
argument <var class="var">n</var>, move forward to the <var class="var">n</var>th next hunk.
</p>
<a class="index-entry-id" id="index-diff_002drefine"></a>
<p>By default, Diff mode <em class="dfn">refines</em> hunks as Emacs displays them,
highlighting their changes with better granularity.  Alternatively, if
you set <code class="code">diff-refine</code> to the symbol <code class="code">navigation</code>, Diff mode
only refines the hunk you move to with this command or with
<code class="code">diff-hunk-prev</code>.
</p>
</dd>
<dt><a id="index-diff_002dhunk_002dprev"></a><kbd class="kbd">M-p</kbd></dt>
<dd><p>Move to the previous hunk-start (<code class="code">diff-hunk-prev</code>).  With prefix
argument <var class="var">n</var>, move back to the <var class="var">n</var>th previous hunk.  Like
<kbd class="kbd">M-n</kbd>, this command refines the hunk you move to if you set
<code class="code">diff-refine</code> to the symbol <code class="code">navigation</code>.
</p>
</dd>
<dt><a id="index-diff_002dfile_002dnext"></a><kbd class="kbd">M-}</kbd></dt>
<dd><p>Move to the next file-start, in a multi-file patch
(<code class="code">diff-file-next</code>).  With prefix argument <var class="var">n</var>, move forward
to the start of the <var class="var">n</var>th next file.
</p>
</dd>
<dt><a id="index-diff_002dfile_002dprev"></a><kbd class="kbd">M-{</kbd></dt>
<dd><p>Move to the previous file-start, in a multi-file patch
(<code class="code">diff-file-prev</code>).  With prefix argument <var class="var">n</var>, move back to
the start of the <var class="var">n</var>th previous file.
</p>
</dd>
<dt><a id="index-diff_002dhunk_002dkill"></a><kbd class="kbd">M-k</kbd></dt>
<dd><p>Kill the hunk at point (<code class="code">diff-hunk-kill</code>).
</p>
</dd>
<dt><a id="index-diff_002dfile_002dkill"></a><kbd class="kbd">M-K</kbd></dt>
<dd><p>In a multi-file patch, kill the current file part.
(<code class="code">diff-file-kill</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-patches_002c-applying"></a>
<a id="index-diff_002dapply_002dhunk"></a><kbd class="kbd">C-c C-a</kbd></dt>
<dd><p>Apply this hunk to its target file (<code class="code">diff-apply-hunk</code>).  With a
prefix argument of <kbd class="kbd">C-u</kbd>, revert this hunk, i.e. apply the
reverse of the hunk, which changes the &#8220;new&#8221; version into the &#8220;old&#8221;
version.  If <code class="code">diff-jump-to-old-file</code> is non-<code class="code">nil</code>, apply the
hunk to the &#8220;old&#8221; version of the file instead.
</p>
</dd>
<dt><a id="index-diff_002drefine_002dhunk"></a><kbd class="kbd">C-c C-b</kbd></dt>
<dd><p>Highlight the changes of the hunk at point with a finer granularity
(<code class="code">diff-refine-hunk</code>).  This allows you to see exactly which parts
of each changed line were actually changed.
</p>
<a class="index-entry-id" id="index-diff_002drefine-1"></a>
<p>By default, Diff mode refines hunks as Emacs displays them, so you may
find this command useful if you customize <code class="code">diff-refine</code> to a
non-default value.
</p>
</dd>
<dt><a class="index-entry-id" id="index-diff_002djump_002dto_002dold_002dfile"></a>
<a id="index-diff_002dgoto_002dsource"></a><kbd class="kbd">C-c C-c</kbd></dt>
<dd><p>Go to the source file and line corresponding to this hunk
(<code class="code">diff-goto-source</code>).  By default, this jumps to the &#8220;new&#8221;
version of the file, the one shown first on the file header.
With a prefix argument, jump to the &#8220;old&#8221; version instead.  If
<code class="code">diff-jump-to-old-file</code> is non-<code class="code">nil</code>, this command by
default jumps to the &#8220;old&#8221; file, and the meaning of the prefix
argument is reversed.  If the prefix argument is a number greater than
8 (e.g., if you type <kbd class="kbd">C-u C-u C-c C-c</kbd>), then this command also
sets <code class="code">diff-jump-to-old-file</code> for the next invocation.
If the source file is under version control (see <a class="pxref" href="Maintaining.xhtml#Version-Control">Version Control</a>),
this jumps to the work file by default.  With a prefix argument, jump
to the &#8220;old&#8221; revision of the file (see <a class="pxref" href="Maintaining.xhtml#Old-Revisions">Examining And Comparing Old Revisions</a>), when
point is on the old line, or otherwise jump to the &#8220;new&#8221; revision.
</p>
</dd>
<dt><a id="index-diff_002dediff_002dpatch"></a><kbd class="kbd">C-c C-e</kbd></dt>
<dd><p>Start an Ediff session with the patch (<code class="code">diff-ediff-patch</code>).
See <a href="https://www.gnu.org/software/emacs/manual/html_node/ediff/index.html#Top">Ediff</a> in <cite class="cite">The Ediff Manual</cite>.
</p>
</dd>
<dt><a id="index-diff_002drestrict_002dview"></a><kbd class="kbd">C-c C-n</kbd></dt>
<dd><p>Restrict the view to the current hunk (<code class="code">diff-restrict-view</code>).
See <a class="xref" href="Display.xhtml#Narrowing">Narrowing</a>.  With a prefix argument, restrict the
view to the current file of a multiple-file patch.  To widen again,
use <kbd class="kbd">C-x n w</kbd> (<code class="code">widen</code>).
</p>
</dd>
<dt><a id="index-diff_002dreverse_002ddirection"></a><kbd class="kbd">C-c C-r</kbd></dt>
<dd><p>Reverse the direction of comparison for the entire buffer
(<code class="code">diff-reverse-direction</code>).  With a prefix argument, reverse the
direction only inside the current region (see <a class="pxref" href="Mark.xhtml#Mark">The Mark and the Region</a>).  Reversing
the direction means changing the hunks and the file-start headers to
produce a patch that would change the &#8220;new&#8221; version into the &#8220;old&#8221;
one.
</p>
</dd>
<dt><a id="index-diff_002dsplit_002dhunk"></a><kbd class="kbd">C-c C-s</kbd></dt>
<dd><p>Split the hunk at point (<code class="code">diff-split-hunk</code>) into two separate
hunks.  This inserts a hunk header and modifies the header of the
current hunk.  This command is useful for manually editing patches,
and only works with the <em class="dfn">unified diff format</em> produced by the
<samp class="option">-u</samp> or <samp class="option">--unified</samp> options to the <code class="command">diff</code>
program.  If you need to split a hunk in the <em class="dfn">context diff format</em>
produced by the <samp class="option">-c</samp> or <samp class="option">--context</samp> options to
<code class="command">diff</code>, first convert the buffer to the unified diff format
with <kbd class="kbd">C-c C-u</kbd>.
</p>
</dd>
<dt><a id="index-diff_002dunified_002d_003econtext"></a><kbd class="kbd">C-c C-d</kbd></dt>
<dd><p>Convert the entire buffer to the <em class="dfn">context diff format</em>
(<code class="code">diff-unified-&gt;context</code>).  With a prefix argument, convert only
the hunks within the region.
</p>
</dd>
<dt><a id="index-diff_002dcontext_002d_003eunified"></a><kbd class="kbd">C-c C-u</kbd></dt>
<dd><p>Convert the entire buffer to unified diff format
(<code class="code">diff-context-&gt;unified</code>).  With a prefix argument, convert
unified format to context format.  When the mark is active, convert
only the hunks within the region.
</p>
</dd>
<dt><a id="index-diff_002drefresh_002dhunk"></a><kbd class="kbd">C-c C-l</kbd></dt>
<dd><p>Re-generate the current hunk (<code class="code">diff-refresh-hunk</code>).
</p>
</dd>
<dt><a id="index-diff_002dignore_002dwhitespace_002dhunk"></a><kbd class="kbd">C-c C-w</kbd></dt>
<dd><p>Re-generate the current hunk, disregarding changes in whitespace
(<code class="code">diff-ignore-whitespace-hunk</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-add_002dchange_002dlog_002dentry_002dother_002dwindow_002c-in-Diff-mode"></a>
<a id="index-diff_002dadd_002dchange_002dlog_002dentries_002dother_002dwindow"></a><kbd class="kbd">C-x 4 A</kbd></dt>
<dd><p>Generate a ChangeLog entry, like <kbd class="kbd">C-x 4 a</kbd> does (see <a class="pxref" href="Maintaining.xhtml#Change-Log">Change Logs</a>), for each one of the hunks
(<code class="code">diff-add-change-log-entries-other-window</code>).  This creates a
skeleton of the log of changes that you can later fill with the actual
descriptions of the changes.  <kbd class="kbd">C-x 4 a</kbd> itself in Diff mode
operates on behalf of the current hunk&#8217;s file, but gets the function
name from the patch itself.  This is useful for making log entries for
functions that are deleted by the patch.
</p></dd>
</dl>

<a class="index-entry-id" id="index-trailing-whitespace_002c-in-patches"></a>
<a class="index-entry-id" id="index-diff_002ddelete_002dtrailing_002dwhitespace"></a>
<p>Patches sometimes include trailing whitespace on modified lines, as
an unintentional and undesired change.  There are two ways to deal
with this problem.  Firstly, if you enable Whitespace mode in a Diff
buffer (see <a class="pxref" href="Display.xhtml#Useless-Whitespace">Useless Whitespace</a>), it automatically highlights
trailing whitespace in modified lines.  Secondly, you can use the
command <kbd class="kbd">M-x diff-delete-trailing-whitespace</kbd>, which searches for
trailing whitespace in the lines modified by the patch, and removes
that whitespace in both the patch and the patched source file(s).
This command does not save the modifications that it makes, so you can
decide whether to save the changes (the list of modified files is
displayed in the echo area).  With a prefix argument, it tries to
modify the original (&#8220;old&#8221;) source files rather than the patched
(&#8220;new&#8221;) source files.
</p>
<a class="index-entry-id" id="index-diff_002dfont_002dlock_002dsyntax"></a>
<p>If <code class="code">diff-font-lock-syntax</code> is non-<code class="code">nil</code>, fragments of
source in hunks are highlighted according to the appropriate major
mode.
</p>
</div>
<div class="section-level-extent" id="Copying-and-Naming">
<h3 class="section" id="Copying_002c-Naming-and-Renaming-Files">19.11 Copying, Naming and Renaming Files</h3>

<p>Emacs has several commands for copying, naming, and renaming files.
All of them read two file names, <var class="var">old</var> (or <var class="var">target</var>) and
<var class="var">new</var>, using the minibuffer, and then copy or adjust a file&#8217;s name
accordingly; they do not accept wildcard file names.
</p>
<p>In all these commands, if the argument <var class="var">new</var> is just a directory
name (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Names.html#Directory-Names">Directory Names</a> in <cite class="cite">the Emacs Lisp Reference
Manual</cite>), the real new name is in that directory, with the same
non-directory component as <var class="var">old</var>.  For example, the command
<kbd class="kbd">M-x&#160;rename-file&#160;<kbd class="key">RET</kbd>&#160;~/foo&#160;<kbd class="key">RET</kbd>&#160;/tmp/&#160;<kbd class="key">RET</kbd></kbd><!-- /@w -->
renames <samp class="file">~/foo</samp> to <samp class="file">/tmp/foo</samp>.  On GNU and other POSIX-like
systems, directory names end in &#8216;<samp class="samp">/</samp>&#8217;.
</p>
<p>All these commands ask for confirmation when the new file name already
exists.
</p>
<a class="index-entry-id" id="index-copy_002dfile"></a>
<a class="index-entry-id" id="index-copying-files"></a>
<p><kbd class="kbd">M-x copy-file</kbd> copies the contents of the file <var class="var">old</var> to the
file <var class="var">new</var>.
</p>
<a class="index-entry-id" id="index-copy_002ddirectory_002dcreate_002dsymlink"></a>
<a class="index-entry-id" id="index-copy_002ddirectory"></a>
<p><kbd class="kbd">M-x copy-directory</kbd> copies directories, similar to the
<code class="command">cp -r</code> shell command.  If <var class="var">new</var> is a directory name, it
creates a copy of the <var class="var">old</var> directory and puts it in <var class="var">new</var>.
Otherwise it copies all the contents of <var class="var">old</var> into a new directory
named <var class="var">new</var>.  If <code class="code">copy-directory-create-symlink</code> is
non-<code class="code">nil</code> and <var class="var">old</var> is a symbolic link, this command will
copy the symbolic link.  If <code class="code">nil</code>, this command will follow the
link and copy the contents instead.  (This is the default.)
</p>
<a class="index-entry-id" id="index-renaming-files"></a>
<a class="index-entry-id" id="index-rename_002dfile"></a>
<p><kbd class="kbd">M-x rename-file</kbd> renames file <var class="var">old</var> as <var class="var">new</var>.  If the
file name <var class="var">new</var> already exists, you must confirm with <kbd class="kbd">yes</kbd> or
renaming is not done; this is because renaming causes the old meaning
of the name <var class="var">new</var> to be lost.  If <var class="var">old</var> and <var class="var">new</var> are on
different file systems, the file <var class="var">old</var> is copied and deleted.
</p>
<p>If a file is under version control (see <a class="pxref" href="Maintaining.xhtml#Version-Control">Version Control</a>), you
should rename it using <kbd class="kbd">M-x&#160;vc-rename-file</kbd><!-- /@w --> instead of
<kbd class="kbd">M-x&#160;rename-file</kbd><!-- /@w -->.  See <a class="xref" href="Maintaining.xhtml#VC-Delete_002fRename">Deleting and Renaming Version-Controlled Files</a>.
</p>
<a class="index-entry-id" id="index-add_002dname_002dto_002dfile"></a>
<a class="index-entry-id" id="index-hard-links-_0028creation_0029"></a>
<p><kbd class="kbd">M-x add-name-to-file</kbd> adds an additional name to an existing
file without removing the old name.  The new name is created as a hard
link to the existing file.  The new name must belong on the same file
system that the file is on.  On MS-Windows, this command works only if
the file resides in an NTFS file system.  On MS-DOS, and some remote
system types, it works by copying the file.
</p>
<a class="index-entry-id" id="index-make_002dsymbolic_002dlink"></a>
<a class="index-entry-id" id="index-symbolic-links-_0028creation_0029"></a>
<p><kbd class="kbd">M-x make-symbolic-link</kbd> creates a symbolic link named
<var class="var">new</var>, which points at <var class="var">target</var>.  The effect is that future
attempts to open file <var class="var">new</var> will refer to whatever file is named
<var class="var">target</var> at the time the opening is done, or will get an error if
the name <var class="var">target</var> is nonexistent at that time.  This command does
not expand the argument <var class="var">target</var>, so that it allows you to specify
a relative name as the target of the link.  However, this command
does expand leading &#8216;<samp class="samp">~</samp>&#8217; in <var class="var">target</var> so that you can easily
specify home directories, and strips leading &#8216;<samp class="samp">/:</samp>&#8217; so that you can
specify relative names beginning with literal &#8216;<samp class="samp">~</samp>&#8217; or &#8216;<samp class="samp">/:</samp>&#8217;.
See <a class="xref" href="#Quoted-File-Names">Quoted File Names</a>.  On MS-Windows, this command works only on
MS Windows Vista and later.  When <var class="var">new</var> is remote,
it works depending on the system type.
</p>
</div>
<div class="section-level-extent" id="Misc-File-Ops">
<h3 class="section" id="Miscellaneous-File-Operations">19.12 Miscellaneous File Operations</h3>

<p>Emacs has commands for performing many other operations on files.
All operate on one file; they do not accept wildcard file names.
</p>
<a class="index-entry-id" id="index-delete_002dfile"></a>
<a class="index-entry-id" id="index-deletion-_0028of-files_0029"></a>
<p><kbd class="kbd">M-x delete-file</kbd> prompts for a file and deletes it.  If you are
deleting many files in one directory, it may be more convenient to use
Dired rather than <code class="code">delete-file</code>.  See <a class="xref" href="Dired.xhtml#Dired-Deletion">Deleting Files with Dired</a>.
</p>
<a class="index-entry-id" id="index-trash"></a>
<a class="index-entry-id" id="index-recycle-bin"></a>
<a class="index-entry-id" id="index-move_002dfile_002dto_002dtrash"></a>
<p><kbd class="kbd">M-x move-file-to-trash</kbd> moves a file into the system
<em class="dfn">Trash</em> (or <em class="dfn">Recycle Bin</em>).  This is a facility available on
most operating systems; files that are moved into the Trash can be
brought back later if you change your mind.  (The way to restore
trashed files is system-dependent.)
</p>
<a class="index-entry-id" id="index-delete_002dby_002dmoving_002dto_002dtrash"></a>
<p>By default, Emacs deletion commands do <em class="emph">not</em> use the Trash.  To
use the Trash (when it is available) for common deletion commands,
change the variable <code class="code">delete-by-moving-to-trash</code> to <code class="code">t</code>.
This affects the commands <kbd class="kbd">M-x delete-file</kbd> and <kbd class="kbd">M-x
delete-directory</kbd> (see <a class="pxref" href="#Directories">File Directories</a>), as well as the deletion
commands in Dired (see <a class="pxref" href="Dired.xhtml#Dired-Deletion">Deleting Files with Dired</a>).  Supplying a prefix
argument to <kbd class="kbd">M-x delete-file</kbd> or <kbd class="kbd">M-x delete-directory</kbd> makes
them delete outright, instead of using the Trash, regardless of
<code class="code">delete-by-moving-to-trash</code>.
</p>
<p>If you have <code class="code">delete-by-moving-to-trash</code> set, and you want to
delete files manually in Emacs from the Trash directory, using
commands like <kbd class="kbd">D</kbd> (<code class="code">dired-do-delete</code>) doesn&#8217;t work well in
the Trash directory (it&#8217;ll just give the file a new name, but won&#8217;t
delete anything).  If you want to be able to do this, you should
create a <code class="code">.dir-locals.el</code> file containing something like the
following in the Trash directory:
</p>
<div class="example">
<pre class="example-preformatted">((dired-mode . ((delete-by-moving-to-trash . nil))))
</pre></div>

<p>Note, however, if you use the system &#8220;empty trash&#8221; command, it&#8217;s
liable to also delete this <code class="code">.dir-locals.el</code> file, so this should
only be done if you delete files from the Trash directory manually.
</p>
<p>If a file is under version control (see <a class="pxref" href="Maintaining.xhtml#Version-Control">Version Control</a>), you
should delete it using <kbd class="kbd">M-x vc-delete-file</kbd> instead of <kbd class="kbd">M-x
delete-file</kbd>.  See <a class="xref" href="Maintaining.xhtml#VC-Delete_002fRename">Deleting and Renaming Version-Controlled Files</a>.
</p>
<a class="index-entry-id" id="index-C_002dx-i"></a>
<a class="index-entry-id" id="index-insert_002dfile"></a>
<p><kbd class="kbd">M-x insert-file</kbd> (also <kbd class="kbd">C-x i</kbd>) inserts a copy of the
contents of the specified file into the current buffer at point,
leaving point unchanged before the contents.  The position after the
inserted contents is added to the mark ring, without activating the
mark (see <a class="pxref" href="Mark.xhtml#Mark-Ring">The Mark Ring</a>).
</p>
<a class="index-entry-id" id="index-insert_002dfile_002dliterally"></a>
<p><kbd class="kbd">M-x insert-file-literally</kbd> is like <kbd class="kbd">M-x insert-file</kbd>,
except the file is inserted literally: it is treated as a sequence
of <abbr class="acronym">ASCII</abbr> characters with no special encoding or conversion,
similar to the <kbd class="kbd">M-x find-file-literally</kbd> command
(see <a class="pxref" href="#Visiting">Visiting Files</a>).
</p>
<a class="index-entry-id" id="index-write_002dregion"></a>
<p><kbd class="kbd">M-x write-region</kbd> is the inverse of <kbd class="kbd">M-x insert-file</kbd>; it
copies the contents of the region into the specified file.  <kbd class="kbd">M-x
append-to-file</kbd> adds the text of the region to the end of the
specified file.  See <a class="xref" href="Killing.xhtml#Accumulating-Text">Accumulating Text</a>.  The variable
<code class="code">write-region-inhibit-fsync</code> applies to these commands, as well
as saving files; see <a class="ref" href="#Customize-Save">Customizing Saving of Files</a>.
</p>
<a class="index-entry-id" id="index-set_002dfile_002dmodes"></a>
<a class="index-entry-id" id="index-file-modes"></a>
<a class="index-entry-id" id="index-file-permissions"></a>
<p><kbd class="kbd">M-x set-file-modes</kbd> reads a file name followed by a <em class="dfn">file
mode</em>, and applies that file mode to the specified file.  File modes,
also called <em class="dfn">file permissions</em>, determine whether a file can be
read, written to, or executed, and by whom.  This command reads file
modes using the same symbolic or octal format accepted by the
<code class="command">chmod</code> command; for instance, &#8216;<samp class="samp">u+x</samp>&#8217; means to add
execution permission for the user who owns the file.  It has no effect
on operating systems that do not support file modes.  <code class="code">chmod</code> is a
convenience alias for this function.
</p>
</div>
<div class="section-level-extent" id="Compressed-Files">
<h3 class="section" id="Accessing-Compressed-Files">19.13 Accessing Compressed Files</h3>
<a class="index-entry-id" id="index-compression"></a>
<a class="index-entry-id" id="index-uncompression"></a>
<a class="index-entry-id" id="index-Auto-Compression-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Auto-Compression"></a>
<a class="index-entry-id" id="index-gzip"></a>

<p>Emacs automatically uncompresses compressed files when you visit
them, and automatically recompresses them if you alter them and save
them.  Emacs recognizes compressed files by their file names.  File
names ending in &#8216;<samp class="samp">.gz</samp>&#8217; indicate a file compressed with
<code class="code">gzip</code>.  Other endings indicate other compression programs.
</p>
<p>Automatic uncompression and compression apply to all the operations in
which Emacs uses the contents of a file.  This includes visiting it,
saving it, inserting its contents into a buffer, loading it, and byte
compiling it.
</p>
<a class="index-entry-id" id="index-auto_002dcompression_002dmode"></a>
<a class="index-entry-id" id="index-auto_002dcompression_002dmode-1"></a>
<p>To disable this feature, type the command <kbd class="kbd">M-x
auto-compression-mode</kbd>.  You can disable it permanently by
customizing the variable <code class="code">auto-compression-mode</code>.
</p>
</div>
<div class="section-level-extent" id="File-Archives">
<h3 class="section" id="File-Archives-1">19.14 File Archives</h3>
<a class="index-entry-id" id="index-mode_002c-tar"></a>
<a class="index-entry-id" id="index-Tar-mode"></a>
<a class="index-entry-id" id="index-file-archives"></a>

<p>A file whose name ends in &#8216;<samp class="samp">.tar</samp>&#8217; is normally an <em class="dfn">archive</em>
made by the <code class="code">tar</code> program.  Emacs views these files in a special
mode called Tar mode which provides a Dired-like list of the contents
(see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>).  You can move around through the list just as you
would in Dired, and visit the subfiles contained in the archive.
However, not all Dired commands are available in Tar mode.
</p>
<p>If Auto Compression mode is enabled (see <a class="pxref" href="#Compressed-Files">Accessing Compressed Files</a>), then
Tar mode is used also for compressed archives&#8212;files with extensions
&#8216;<samp class="samp">.tgz</samp>&#8217;, <code class="code">.tar.Z</code> and <code class="code">.tar.gz</code>.
</p>
<p>The keys <kbd class="kbd">e</kbd>, <kbd class="kbd">f</kbd> and <kbd class="key">RET</kbd> all extract a component file
into its own buffer.  You can edit it there, and if you save the
buffer, the edited version will replace the version in the Tar buffer.
Clicking with the mouse on the file name in the Tar buffer does
likewise.  <kbd class="kbd">v</kbd> extracts a file into a buffer in View mode
(see <a class="pxref" href="Display.xhtml#View-Mode">View Mode</a>).  <kbd class="kbd">o</kbd> extracts the file and displays it in
another window, so you could edit the file and operate on the archive
simultaneously.
</p>
<p>The <kbd class="kbd">I</kbd> key adds a new (regular) file to the archive.  The file
is initially empty, but can readily be edited using the commands
above.  The command inserts the new file before the current one, so
that using it on the topmost line of the Tar buffer makes the new file
the first one in the archive, and using it at the end of the buffer
makes it the last one.
</p>
<p><kbd class="kbd">d</kbd> marks a file for deletion when you later use <kbd class="kbd">x</kbd>, and
<kbd class="kbd">u</kbd> unmarks a file, as in Dired.  <kbd class="kbd">C</kbd> copies a file from the
archive to disk and <kbd class="kbd">R</kbd> renames a file within the archive.
<kbd class="kbd">g</kbd> reverts the buffer from the archive on disk.  The keys
<kbd class="kbd">M</kbd>, <kbd class="kbd">G</kbd>, and <kbd class="kbd">O</kbd> change the file&#8217;s permission bits,
group, and owner, respectively.
</p>
<p>Saving the Tar buffer writes a new version of the archive to disk with
the changes you made to the components.
</p>
<p>You don&#8217;t need the <code class="code">tar</code> program to use Tar mode&#8212;Emacs reads
the archives directly.  However, accessing compressed archives
requires the appropriate uncompression program.
</p>
<a class="index-entry-id" id="index-Archive-mode"></a>
<a class="index-entry-id" id="index-mode_002c-archive"></a>
<a class="index-entry-id" id="index-arc"></a>
<a class="index-entry-id" id="index-jar"></a>
<a class="index-entry-id" id="index-zip"></a>
<a class="index-entry-id" id="index-rar"></a>
<a class="index-entry-id" id="index-lzh"></a>
<a class="index-entry-id" id="index-zoo"></a>
<a class="index-entry-id" id="index-7z"></a>
<a class="index-entry-id" id="index-Java-class-archives"></a>
<a class="index-entry-id" id="index-unzip-archives"></a>
<p>A separate but similar Archive mode is used for <code class="code">arc</code>,
<code class="code">jar</code>, <code class="code">lzh</code>, <code class="code">zip</code>, <code class="code">rar</code>, <code class="code">7z</code>, and
<code class="code">zoo</code> archives, as well as <code class="code">exe</code> files that are
self-extracting executables.
</p>
<p>The key bindings of Archive mode are similar to those in Tar mode,
with the addition of the <kbd class="kbd">m</kbd> key which marks a file for subsequent
operations, and <kbd class="kbd">M-<kbd class="key">DEL</kbd></kbd> which unmarks all the marked files.
Also, the <kbd class="kbd">a</kbd> key toggles the display of detailed file
information, for those archive types where it won&#8217;t fit in a single
line.  Operations such as renaming a subfile, or changing its mode or
owner, are supported only for some of the archive formats.
</p>
<p>Unlike Tar mode, Archive mode runs the archiving programs to unpack
and repack archives.  However, you don&#8217;t need these programs to look
at the archive table of contents, only to extract or manipulate the
subfiles in the archive.  Details of the program names and their
options can be set in the &#8216;<samp class="samp">Archive</samp>&#8217; Customize group
(see <a class="pxref" href="Customization.xhtml#Customization-Groups">Customization Groups</a>).
</p>
</div>
<div class="section-level-extent" id="Remote-Files">
<h3 class="section" id="Remote-Files-1">19.15 Remote Files</h3>

<a class="index-entry-id" id="index-Tramp"></a>
<a class="index-entry-id" id="index-FTP"></a>
<a class="index-entry-id" id="index-remote-file-access"></a>
<p>You can refer to files on other machines using a special file name
syntax:
</p>
<div class="example">
<div class="group"><pre class="example-preformatted">/<var class="var">method</var>:<var class="var">host</var>:<var class="var">filename</var>
/<var class="var">method</var>:<var class="var">user</var>@<var class="var">host</var>:<var class="var">filename</var>
/<var class="var">method</var>:<var class="var">user</var>@<var class="var">host</var>#<var class="var">port</var>:<var class="var">filename</var>
</pre></div></div>

<p>To carry out this request, Emacs uses a remote-login program such as
<code class="command">ssh</code>.
You must always specify in the file name which method to use&#8212;for
example, <samp class="file">/ssh:<var class="var">user</var>@<var class="var">host</var>:<var class="var">filename</var></samp> uses
<code class="command">ssh</code>.  When you specify the pseudo method &#8216;<samp class="samp">-</samp>&#8217; in the
file name, Emacs chooses the method as follows:
</p>
<ol class="enumerate">
<li> If the host name starts with &#8216;<samp class="samp">ftp.</samp>&#8217; (with dot), Emacs uses FTP.
</li><li> If the user name is &#8216;<samp class="samp">ftp</samp>&#8217; or &#8216;<samp class="samp">anonymous</samp>&#8217;, Emacs uses FTP.
</li><li> If the variable <code class="code">tramp-default-method</code> is set to &#8216;<samp class="samp">ftp</samp>&#8217;,
Emacs uses FTP.
</li><li> If <code class="command">ssh-agent</code> is running, Emacs uses <code class="command">scp</code>.
</li><li> Otherwise, Emacs uses <code class="command">ssh</code>.
</li></ol>

<a class="index-entry-id" id="index-disabling-remote-files"></a>
<p>You can entirely turn off the remote file name feature by setting the
variable <code class="code">tramp-mode</code> to <code class="code">nil</code>.  You can turn off the
feature in individual cases by quoting the file name with &#8216;<samp class="samp">/:</samp>&#8217;
(see <a class="pxref" href="#Quoted-File-Names">Quoted File Names</a>).
</p>
<a class="index-entry-id" id="index-ange_002dftp"></a>
<p>Remote file access through FTP is handled by the Ange-FTP package, which
is documented in the following.  Remote file access through the other
methods is handled by the Tramp package, which has its own manual.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/tramp/index.html#Top">The Tramp Manual</a> in <cite class="cite">The Tramp Manual</cite>.
</p>
<a class="index-entry-id" id="index-ange_002dftp_002ddefault_002duser"></a>
<a class="index-entry-id" id="index-user-name-for-remote-file-access"></a>
<p>When the Ange-FTP package is used, Emacs logs in through FTP using
the name <var class="var">user</var>, if that is specified in the remote file name.  If
<var class="var">user</var> is unspecified, Emacs logs in using your user name on the
local system; but if you set the variable <code class="code">ange-ftp-default-user</code>
to a string, that string is used instead.  When logging in, Emacs may
also ask for a password.
</p>
<a class="index-entry-id" id="index-backups-for-remote-files"></a>
<a class="index-entry-id" id="index-ange_002dftp_002dmake_002dbackup_002dfiles"></a>
<p>For performance reasons, Emacs does not make backup files for files
accessed via FTP by default.  To make it do so, change the variable
<code class="code">ange-ftp-make-backup-files</code> to a non-<code class="code">nil</code> value.
</p>
<p>By default, auto-save files for remote files are made in the
temporary file directory on the local machine, as specified by the
variable <code class="code">auto-save-file-name-transforms</code>.  See <a class="xref" href="#Auto-Save-Files">Auto-Save Files</a>.
</p>
<a class="index-entry-id" id="index-anonymous-FTP"></a>
<a class="index-entry-id" id="index-ange_002dftp_002dgenerate_002danonymous_002dpassword"></a>
<p>To visit files accessible by anonymous FTP, you use special user
names &#8216;<samp class="samp">anonymous</samp>&#8217; or &#8216;<samp class="samp">ftp</samp>&#8217;.  Passwords for these user names
are handled specially.  The variable
<code class="code">ange-ftp-generate-anonymous-password</code> controls what happens: if
the value of this variable is a string, then that string is used as
the password; if non-<code class="code">nil</code> (the default), then the value of
<code class="code">user-mail-address</code> is used; if <code class="code">nil</code>, then Emacs prompts
you for a password as usual (see <a class="pxref" href="Minibuffer.xhtml#Passwords">Entering passwords</a>).
</p>
<a class="index-entry-id" id="index-firewall_002c-and-accessing-remote-files"></a>
<a class="index-entry-id" id="index-gateway_002c-and-remote-file-access-with-ange_002dftp"></a>
<a class="index-entry-id" id="index-ange_002dftp_002dsmart_002dgateway"></a>
<a class="index-entry-id" id="index-ange_002dftp_002dgateway_002dhost"></a>
<p>Sometimes you may be unable to access files on a remote machine
because a <em class="dfn">firewall</em> in between blocks the connection for security
reasons.  If you can log in on a <em class="dfn">gateway</em> machine from which the
target files <em class="emph">are</em> accessible, and whose FTP server supports
gatewaying features, you can still use remote file names; all you have
to do is specify the name of the gateway machine by setting the
variable <code class="code">ange-ftp-gateway-host</code>, and set
<code class="code">ange-ftp-smart-gateway</code> to <code class="code">t</code>.  Otherwise you may be able
to make remote file names work, but the procedure is complex.  You can
read the instructions by typing <kbd class="kbd">M-x finder-commentary <kbd class="key">RET</kbd>
ange-ftp <kbd class="key">RET</kbd></kbd>.
</p>
</div>
<div class="section-level-extent" id="Quoted-File-Names">
<h3 class="section" id="Quoted-File-Names-1">19.16 Quoted File Names</h3>

<a class="index-entry-id" id="index-quoting-file-names"></a>
<a class="index-entry-id" id="index-file-names_002c-quote-special-characters"></a>
<p>You can <em class="dfn">quote</em> an absolute file name to prevent special
characters and syntax in it from having their special effects.
The way to do this is to add &#8216;<samp class="samp">/:</samp>&#8217; at the beginning.
</p>
<p>For example, you can quote a local file name which appears remote, to
prevent it from being treated as a remote file name.  Thus, if you have
a directory named <samp class="file">/foo:</samp> and a file named <samp class="file">bar</samp> in it, you
can refer to that file in Emacs as &#8216;<samp class="samp">/:/foo:/bar</samp>&#8217;.
</p>
<p>If you want to quote only special characters in the local part of a
remote file name, you can quote just the local part.
&#8216;<samp class="samp">/ssh:baz:/:/foo:/bar</samp>&#8217; refers to the file <samp class="file">bar</samp> of directory
<samp class="file">/foo:</samp> on the host <samp class="file">baz</samp>.
</p>
<p>&#8216;<samp class="samp">/:</samp>&#8217; can also prevent &#8216;<samp class="samp">~</samp>&#8217; from being treated as a special
character for a user&#8217;s home directory.  For example, <samp class="file">/:/tmp/~hack</samp>
refers to a file whose name is <samp class="file">~hack</samp> in directory <samp class="file">/tmp</samp>.
</p>
<p>Quoting with &#8216;<samp class="samp">/:</samp>&#8217; is also a way to enter in the minibuffer a
file name that contains &#8216;<samp class="samp">$</samp>&#8217;.  In order for this to work, the
&#8216;<samp class="samp">/:</samp>&#8217; must be at the beginning of the minibuffer contents.  (You
can also double each &#8216;<samp class="samp">$</samp>&#8217;; see <a class="ref" href="#File-Names-with-_0024">File Names with $</a>.)
</p>
<p>You can also quote wildcard characters with &#8216;<samp class="samp">/:</samp>&#8217;, for visiting.
For example, <samp class="file">/:/tmp/foo*bar</samp> visits the file
<samp class="file">/tmp/foo*bar</samp>.
</p>
<p>Another method of getting the same result is to enter
<samp class="file">/tmp/foo[*]bar</samp>, which is a wildcard specification that matches
only <samp class="file">/tmp/foo*bar</samp>.  However, in many cases there is no need to
quote the wildcard characters because even unquoted they give the
right result.  For example, if the only file name in <samp class="file">/tmp</samp> that
starts with &#8216;<samp class="samp">foo</samp>&#8217; and ends with &#8216;<samp class="samp">bar</samp>&#8217; is <samp class="file">foo*bar</samp>,
then specifying <samp class="file">/tmp/foo*bar</samp> will visit only
<samp class="file">/tmp/foo*bar</samp>.
</p>
</div>
<div class="section-level-extent" id="File-Name-Cache">
<h3 class="section" id="File-Name-Cache-1">19.17 File Name Cache</h3>

<a class="index-entry-id" id="index-file-name-caching"></a>
<a class="index-entry-id" id="index-cache-of-file-names"></a>
<a class="index-entry-id" id="index-find"></a>
<a class="index-entry-id" id="index-C_002dTAB"></a>
<a class="index-entry-id" id="index-file_002dcache_002dminibuffer_002dcomplete"></a>
<p>You can use the <em class="dfn">file name cache</em> to make it easy to locate a
file by name, without having to remember exactly where it is located.
When typing a file name in the minibuffer, <kbd class="kbd">C-<kbd class="key">TAB</kbd></kbd>
(<code class="code">file-cache-minibuffer-complete</code>) completes it using the file
name cache.  If you repeat <kbd class="kbd">C-<kbd class="key">TAB</kbd></kbd>, that cycles through the
possible completions of what you had originally typed.  (However, note
that the <kbd class="kbd">C-<kbd class="key">TAB</kbd></kbd> character cannot be typed on most text
terminals.)
</p>
<p>The file name cache does not fill up automatically.  Instead, you
load file names into the cache using these commands:
</p>
<a class="index-entry-id" id="index-file_002dcache_002dadd_002ddirectory"></a>
<dl class="table">
<dt><kbd class="kbd">M-x file-cache-add-directory <kbd class="key">RET</kbd> <var class="var">directory</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Add each file name in <var class="var">directory</var> to the file name cache.
</p></dd>
<dt><kbd class="kbd">M-x file-cache-add-directory-using-find <kbd class="key">RET</kbd> <var class="var">directory</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Add each file name in <var class="var">directory</var> and all of its nested
subdirectories to the file name cache.
</p></dd>
<dt><kbd class="kbd">M-x file-cache-add-directory-using-locate <kbd class="key">RET</kbd> <var class="var">directory</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Add each file name in <var class="var">directory</var> and all of its nested
subdirectories to the file name cache, using <code class="command">locate</code> to find
them all.
</p></dd>
<dt><kbd class="kbd">M-x file-cache-add-directory-list <kbd class="key">RET</kbd> <var class="var">variable</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Add each file name in each directory listed in <var class="var">variable</var> to the
file name cache.  <var class="var">variable</var> should be a Lisp variable whose value
is a list of directories, like <code class="code">load-path</code>.
</p></dd>
<dt><kbd class="kbd">M-x file-cache-clear-cache <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Clear the cache; that is, remove all file names from it.
</p></dd>
</dl>

<p>The file name cache is not persistent: it is kept and maintained
only for the duration of the Emacs session.  You can view the contents
of the cache with the <code class="code">file-cache-display</code> command.
</p>
</div>
<div class="section-level-extent" id="File-Conveniences">
<h3 class="section" id="Convenience-Features-for-Finding-Files">19.18 Convenience Features for Finding Files</h3>

<p>In this section, we introduce some convenient facilities for finding
recently-opened files, reading file names from a buffer.
</p>
<a class="index-entry-id" id="index-recentf_002dmode"></a>
<a class="index-entry-id" id="index-recentf_002dmode-1"></a>
<a class="index-entry-id" id="index-recentf_002dopen"></a>
<a class="index-entry-id" id="index-recentf_002dsave_002dlist"></a>
<a class="index-entry-id" id="index-recentf_002dedit_002dlist"></a>
<p>If you enable Recentf mode, with <kbd class="kbd">M-x recentf-mode</kbd>, Emacs
maintains a list of recently opened files.  To open a file from this
list, use the <kbd class="kbd">M-x recentf-open</kbd> command.  When this mode is
enabled, the &#8216;<samp class="samp">File</samp>&#8217; menu will include a submenu that you can use
to visit one of these files.  <kbd class="kbd">M-x recentf-save-list</kbd> saves the
current <code class="code">recentf-list</code> to a file, and <kbd class="kbd">M-x recentf-edit-list</kbd>
edits it.
</p>
<p>The <kbd class="kbd">M-x ffap</kbd> command generalizes <code class="code">find-file</code> with more
powerful heuristic defaults (see <a class="pxref" href="Hyperlinking.xhtml#FFAP">Finding Files and URLs at Point</a>), often based on the text at
point.  Partial Completion mode offers other features extending
<code class="code">find-file</code>, which can be used with <code class="code">ffap</code>.
See <a class="xref" href="Minibuffer.xhtml#Completion-Options">Completion Options</a>.
</p>
</div>
<div class="section-level-extent" id="Image-Mode">
<h3 class="section" id="Viewing-Image-Files">19.19 Viewing Image Files</h3>

<a class="index-entry-id" id="index-image_002dmode"></a>
<a class="index-entry-id" id="index-image_002dtoggle_002ddisplay"></a>
<a class="index-entry-id" id="index-images_002c-viewing"></a>
<p>Visiting image files automatically selects Image mode.  In this
major mode, you can type <kbd class="kbd">C-c C-c</kbd> (<code class="code">image-toggle-display</code>)
to toggle between displaying the file as an image in the Emacs buffer,
and displaying its underlying text (or raw byte) representation.
Additionally you can type <kbd class="kbd">C-c C-x</kbd> (<code class="code">image-toggle-hex-display</code>)
to toggle between displaying the file as an image in the Emacs buffer,
and displaying it in hex representation.  Displaying the file as an
image works only if Emacs is compiled with support for displaying
such images.
</p>
<a class="index-entry-id" id="index-image_002dauto_002dresize"></a>
<a class="index-entry-id" id="index-image_002dauto_002dresize_002don_002dwindow_002dresize"></a>
<p>If the displayed image is wider or taller than the window in which it
is displayed, the usual point motion keys (<kbd class="kbd">C-f</kbd>, <kbd class="kbd">C-p</kbd>, and
so forth) cause different parts of the image to be displayed.
However, by default images are resized automatically to fit the
window, so this is only necessary if you customize the default
behavior by using the options <code class="code">image-auto-resize</code> and
<code class="code">image-auto-resize-on-window-resize</code>.
</p>
<a class="index-entry-id" id="index-image_002dtransform_002dfit_002dto_002dwindow"></a>
<a class="index-entry-id" id="index-s-w-_0028Image-mode_0029"></a>
<a class="index-entry-id" id="index-image_002dtransform_002dset_002dpercent"></a>
<a class="index-entry-id" id="index-s-p-_0028Image-mode_0029"></a>
<a class="index-entry-id" id="index-image_002dtransform_002dset_002dscale"></a>
<a class="index-entry-id" id="index-s-s-_0028Image-mode_0029"></a>
<a class="index-entry-id" id="index-image_002dtransform_002dreset_002dto_002dinitial"></a>
<a class="index-entry-id" id="index-s-0-_0028Image-mode_0029"></a>
<a class="index-entry-id" id="index-image_002dtransform_002dreset_002dto_002doriginal"></a>
<a class="index-entry-id" id="index-s-o-_0028Image-mode_0029"></a>
<p>To resize the image manually you can use the command
<code class="code">image-transform-fit-to-window</code> bound to <kbd class="kbd">s w</kbd> that fits the
image to both the window height and width.  To scale the image to a
percentage of its original size, use the command
<code class="code">image-transform-set-percent</code> bound to <kbd class="kbd">s p</kbd>.  To scale the
image specifying a scale factor, use the command
<code class="code">image-transform-set-scale</code> bound to <kbd class="kbd">s s</kbd>.  To reset all
transformations to the initial state, use
<code class="code">image-transform-reset-to-initial</code> bound to <kbd class="kbd">s 0</kbd>, or
<code class="code">image-transform-reset-to-original</code> bound to <kbd class="kbd">s o</kbd>.
</p>
<a class="index-entry-id" id="index-image_002dnext_002dfile"></a>
<a class="index-entry-id" id="index-image_002dprevious_002dfile"></a>
<p>You can press <kbd class="kbd">n</kbd> (<code class="code">image-next-file</code>) and <kbd class="kbd">p</kbd>
(<code class="code">image-previous-file</code>) to visit the next image file and the
previous image file in the same directory, respectively.  These
commands will consult the &#8220;parent&#8221; dired buffer to determine what
the next/previous image file is.  These commands also work when
opening a file from archive files (like zip or tar files), and will
then instead consult the archive mode buffer.  If neither an archive
nor a dired &#8220;parent&#8221; buffer can be found, a dired buffer is opened.
</p>
<a class="index-entry-id" id="index-image_002dmode_002dmark_002dfile"></a>
<a class="index-entry-id" id="index-image_002dmode_002dunmark_002dfile"></a>
<a class="index-entry-id" id="index-image_002dmode_002dcopy_002dfile_002dname_002das_002dkill"></a>
<p>When looking through images, it&#8217;s sometimes convenient to be able to
mark the files for later processing (for instance, if you want to
select a group of images to copy somewhere else).  The <kbd class="kbd">m</kbd>
(<code class="code">image-mode-mark-file</code>) command will mark the current file in
any Dired buffer(s) that display the current file&#8217;s directory.  If no
such buffer is open, the directory is opened in a new buffer.  To
unmark files, use the <kbd class="kbd">u</kbd> (<code class="code">image-mode-mark-file</code>) command.
Finally, if you just want to copy the current buffers file name to the
kill ring, you can use the <kbd class="kbd">w</kbd>
(<code class="code">image-mode-copy-file-name-as-kill</code>) command.
</p>
<a class="index-entry-id" id="index-image_002dtoggle_002danimation"></a>
<a class="index-entry-id" id="index-image_002dnext_002dframe"></a>
<a class="index-entry-id" id="index-image_002dprevious_002dframe"></a>
<a class="index-entry-id" id="index-image_002dgoto_002dframe"></a>
<a class="index-entry-id" id="index-image_002dincrease_002dspeed"></a>
<a class="index-entry-id" id="index-image_002ddecrease_002dspeed"></a>
<a class="index-entry-id" id="index-image_002dreset_002dspeed"></a>
<a class="index-entry-id" id="index-image_002dreverse_002dspeed"></a>
<a class="index-entry-id" id="index-image_002danimate_002dloop"></a>
<a class="index-entry-id" id="index-image-animation"></a>
<a class="index-entry-id" id="index-animated-images"></a>
<p>If the image can be animated, the command <kbd class="key">RET</kbd>
(<code class="code">image-toggle-animation</code>) starts or stops the animation.
Animation plays once, unless the option <code class="code">image-animate-loop</code> is
non-<code class="code">nil</code>.  With <kbd class="kbd">f</kbd> (<code class="code">image-next-frame</code>) and <kbd class="kbd">b</kbd>
(<code class="code">image-previous-frame</code>) you can step through the individual
frames.  Both commands accept a numeric prefix to step through several
frames at once.  You can go to a specific frame with <kbd class="kbd">F</kbd>
(<code class="code">image-goto-frame</code>).  Frames are indexed from 1.  Typing <kbd class="kbd">a
+</kbd> (<code class="code">image-increase-speed</code>) increases the speed of the animation,
<kbd class="kbd">a -</kbd> (<code class="code">image-decrease-speed</code>) decreases it, and <kbd class="kbd">a r</kbd>
(<code class="code">image-reverse-speed</code>) reverses it.  The command <kbd class="kbd">a 0</kbd>
(<code class="code">image-reset-speed</code>) resets the speed to the original value.
</p>
<p>In addition to the above key bindings, which are specific to Image
mode, images shown in any Emacs buffer have special key bindings when
point is at or inside the image:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-image-resize"></a>
<a class="index-entry-id" id="index-image_002dincrease_002dsize"></a>
<a class="index-entry-id" id="index-i-_002b-_0028Image-mode_0029"></a>
<a id="index-resize-images"></a><kbd class="kbd">i +</kbd></dt>
<dd><p>Increase the image size (<code class="code">image-increase-size</code>) by 20%.  Prefix
numeric argument controls the increment; the value of <var class="var">n</var> means to
multiply the size by the factor of <code class="code">1&#160;+&#160;<var class="var">n</var>&#160;/&#160;10</code><!-- /@w -->, so
<kbd class="kbd">C-u&#160;5&#160;i&#160;+</kbd><!-- /@w --> means to increase the size by 50%.
</p>
</dd>
<dt><a class="index-entry-id" id="index-i-_002d-_0028Image-mode_0029"></a>
<a id="index-image_002ddecrease_002dsize"></a><kbd class="kbd">i -</kbd></dt>
<dd><p>Decrease the image size (<code class="code">image-increase-size</code>) by 20%.  Prefix
numeric argument controls the decrement; the value of <var class="var">n</var> means to
multiply the size by the factor of <code class="code">1&#160;-&#160;<var class="var">n</var>&#160;/&#160;10</code><!-- /@w -->, so
<kbd class="kbd">C-u&#160;3&#160;i&#160;-</kbd><!-- /@w --> means to decrease the size by 30%.
</p>
</dd>
<dt><a class="index-entry-id" id="index-image-rotation"></a>
<a class="index-entry-id" id="index-image_002drotate"></a>
<a class="index-entry-id" id="index-i-r-_0028Image-mode_0029"></a>
<a id="index-rotating-images"></a><kbd class="kbd">i r</kbd></dt>
<dd><p>Rotate the image by 90 degrees clockwise (<code class="code">image-rotate</code>).
With the prefix argument, rotate by 90 degrees counter-clockwise instead.
Note that this command is not available for sliced images.
</p>
</dd>
<dt><a class="index-entry-id" id="index-i-h-_0028Image-mode_0029"></a>
<a id="index-image_002dflip_002dhorizontally"></a><kbd class="kbd">i h</kbd></dt>
<dd><p>Flip the image horizontally (<code class="code">image-flip-horizontally</code>).  This
presents the image as if reflected in a vertical mirror.
Note that this command is not available for sliced images.
</p>
</dd>
<dt><a class="index-entry-id" id="index-i-v-_0028Image-mode_0029"></a>
<a id="index-image_002dflip_002dvertically"></a><kbd class="kbd">i v</kbd></dt>
<dd><p>Flip the image vertically (<code class="code">image-flip-vertically</code>).  This
presents the image as if reflected in a horizontal mirror.
Note that this command is not available for sliced images.
</p>
</dd>
<dt><a class="index-entry-id" id="index-i-o-_0028Image-mode_0029"></a>
<a id="index-image_002dsave"></a><kbd class="kbd">i o</kbd></dt>
<dd><p>Save the image to a file (<code class="code">image-save</code>).  This command prompts
you for the name of the file to save the image.
</p>
</dd>
<dt><a class="index-entry-id" id="index-image_002dcrop_002dcrop_002dcommand"></a>
<a class="index-entry-id" id="index-image_002dcrop"></a>
<a class="index-entry-id" id="index-i-c-_0028Image-mode_0029"></a>
<a id="index-cropping-images"></a><kbd class="kbd">i c</kbd></dt>
<dd><p>Crop the image (<code class="code">image-crop</code>).  This command is available only if
your system has an external program installed that can be used for
cropping and cutting of images; the user option
<code class="code">image-crop-crop-command</code> determines what program to use, and
defaults to the ImageMagick&#8217;s <code class="command">convert</code> program.  The command
displays the image with a rectangular frame superimposed on it, and
lets you use the mouse to move and resize the frame.  Type <kbd class="kbd">m</kbd> to
cause mouse movements to move the frame instead of resizing it; type
<kbd class="kbd">s</kbd> to move a square frame instead.  When you are satisfied with
the position and size of the cropping frame, type <kbd class="kbd"><kbd class="key">RET</kbd></kbd> to
actually crop the part under the frame; or type <kbd class="kbd">q</kbd> to exit
without cropping.  You can then save the cropped image using <kbd class="kbd">i&#160;o</kbd><!-- /@w --> or <kbd class="kbd">M-x&#160;image-save</kbd><!-- /@w -->.
</p>
</dd>
<dt><a class="index-entry-id" id="index-i-x-_0028Image-mode_0029"></a>
<a class="index-entry-id" id="index-image_002dcut_002dcolor"></a>
<a class="index-entry-id" id="index-image_002dcrop_002dcut_002dcommand"></a>
<a id="index-image_002dcut"></a><kbd class="kbd">i x</kbd></dt>
<dd><p>Cut a rectangle from the image (<code class="code">image-cut</code>).  This works the
same as <code class="code">image-crop</code> (and also requires an external program,
defined by the variable <code class="code">image-crop-cut-command</code>, to perform the
image cut), but instead of cropping the image, it removes the part
inside the frame and fills that part with the color specified by
<code class="code">image-cut-color</code>.  With prefix argument, the command prompts for
the color to use.
</p></dd>
</dl>

<p>The size and rotation commands are &#8220;repeating&#8221;, which means that you
can continue adjusting the image without using the <kbd class="kbd">i</kbd> prefix.
</p>
<a class="index-entry-id" id="index-ImageMagick-support"></a>
<a class="index-entry-id" id="index-imagemagick_002denabled_002dtypes"></a>
<a class="index-entry-id" id="index-imagemagick_002dtypes_002dinhibit"></a>
<p>If Emacs was compiled with support for the ImageMagick library, it
can use ImageMagick to render a wide variety of images.  The variable
<code class="code">imagemagick-enabled-types</code> lists the image types that Emacs may
render using ImageMagick; each element in the list should be an
internal ImageMagick name for an image type, as a symbol or an
equivalent string (e.g., <code class="code">BMP</code> for <samp class="file">.bmp</samp> images).  To
enable ImageMagick for all possible image types, change
<code class="code">imagemagick-enabled-types</code> to <code class="code">t</code>.  The variable
<code class="code">imagemagick-types-inhibit</code> lists the image types which should
never be rendered using ImageMagick, regardless of the value of
<code class="code">imagemagick-enabled-types</code> (the default list includes types like
<code class="code">C</code> and <code class="code">HTML</code>, which ImageMagick can render as an image
but Emacs should not).  To disable ImageMagick entirely, change
<code class="code">imagemagick-types-inhibit</code> to <code class="code">t</code>.
</p>
<a class="index-entry-id" id="index-image_002duse_002dexternal_002dconverter"></a>
<p>If Emacs doesn&#8217;t have native support for the image format in
question, and <code class="code">image-use-external-converter</code> is non-<code class="code">nil</code>,
Emacs will try to determine whether there are external utilities that
can be used to transform the image in question to <abbr class="acronym">PNG</abbr> before
displaying.  GraphicsMagick, ImageMagick and <code class="command">ffmpeg</code> are
currently supported for image conversions.
</p>
<a class="index-entry-id" id="index-image_002dconverter_002dadd_002dhandler"></a>
<p>In addition, you may wish to add special handlers for certain image
formats.  These can be added with the
<code class="code">image-converter-add-handler</code> function.  For instance, to allow
viewing Krita files as simple images, you could say something like:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(image-converter-add-handler
 &quot;kra&quot;
 (lambda (file data-p)
   (if data-p
       (error &quot;Can't decode non-files&quot;)
     (call-process &quot;unzip&quot; nil t nil
                   &quot;-qq&quot; &quot;-c&quot; &quot;-x&quot; file &quot;mergedimage.png&quot;))))
</pre></div>

<p>The function takes two parameters, where the first is a file name
suffix, and the second is a function to do the &#8220;conversion&#8221;.  This
function takes two parameters, where the first is the file name or a
string with the data, and the second says whether the first parameter
is data or not, and should output an image in
<code class="code">image-convert-to-format</code> format in the current buffer.
</p>
<a class="index-entry-id" id="index-thumbs_002dmode"></a>
<a class="index-entry-id" id="index-mode_002c-Thumbs"></a>
<p>The Image-Dired package can also be used to view images as
thumbnails.  See <a class="xref" href="Dired.xhtml#Image_002dDired">Viewing Image Thumbnails in Dired</a>.
</p>
</div>
<div class="section-level-extent" id="Filesets">
<h3 class="section" id="Filesets-1">19.20 Filesets</h3>
<a class="index-entry-id" id="index-filesets"></a>
<a class="index-entry-id" id="index-sets-of-files"></a>

<a class="index-entry-id" id="index-filesets_002dinit"></a>
<p>If you regularly edit a certain group of files, you can define them
as a <em class="dfn">fileset</em>.  This lets you perform certain operations, such as
visiting, <code class="code">query-replace</code>, and shell commands on all the files at
once.  To make use of filesets, you must first add the expression
<code class="code">(filesets-init)</code> to your init file (see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>).  This
adds a &#8216;<samp class="samp">Filesets</samp>&#8217; sub-menu to the menu bar&#8217;s &#8216;<samp class="samp">File</samp>&#8217; menu.
</p>
<a class="index-entry-id" id="index-filesets_002dadd_002dbuffer"></a>
<a class="index-entry-id" id="index-filesets_002dremove_002dbuffer"></a>
<p>The simplest way to define a fileset is by adding files to it one at
a time.  To add a file to fileset <var class="var">name</var>, visit the file and type
<kbd class="kbd">M-x filesets-add-buffer <kbd class="key">RET</kbd> <var class="var">name</var> <kbd class="key">RET</kbd></kbd>.  If
there is no fileset <var class="var">name</var>, this creates a new one, which
initially contains only the current file.  The command <kbd class="kbd">M-x
filesets-remove-buffer</kbd> removes the current file from a fileset.
</p>
<p>You can also edit the list of filesets directly, with <kbd class="kbd">M-x
filesets-edit</kbd> (or by choosing &#8216;<samp class="samp">Edit Filesets</samp>&#8217; from the
&#8216;<samp class="samp">Filesets</samp>&#8217; menu).  The editing is performed in a Customize buffer
(see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>).  Normally, a fileset is a simple list of
files, but you can also define a fileset as a regular expression
matching file names.  Some examples of these more complicated filesets
are shown in the Customize buffer.  Remember to select &#8216;<samp class="samp">Save for
future sessions</samp>&#8217; if you want to use the same filesets in future Emacs
sessions.
</p>
<p>You can use the command <kbd class="kbd">M-x filesets-open</kbd> to visit all the
files in a fileset, and <kbd class="kbd">M-x filesets-close</kbd> to close them.  Use
<kbd class="kbd">M-x filesets-run-cmd</kbd> to run a shell command on all the files in
a fileset.  These commands are also available from the &#8216;<samp class="samp">Filesets</samp>&#8217;
menu, where each existing fileset is represented by a submenu.
</p>
<p>See <a class="xref" href="Maintaining.xhtml#Version-Control">Version Control</a>, for a different concept of filesets:
groups of files bundled together for version control operations.
Filesets of that type are unnamed, and do not persist across Emacs
sessions.
</p></div>
</div>
<div class="footnotes-segment">
<h4 class="footnotes-heading">Footnotes</h4>

<h5 class="footnote-body-heading"><a id="FOOT6" href="#DOCF6">(6)</a></h5>
<p>If
your file system does not support symbolic links, a regular file is
used.</p>
</div>



</body>
</html>
