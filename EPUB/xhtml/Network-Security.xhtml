<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>37 Network Security (GNU Emacs Manual)</title>

<meta name="description" content="37 Network Security (GNU Emacs Manual)"/>
<meta name="keywords" content="37 Network Security (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Document-View.xhtml#Document-View" rel="next" title="38 Document Viewing"/>
<link href="Host-Security.xhtml" rel="prev" title="36 Host Security"/>
<style type="text/css">
<!--
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Network-Security">

<h2 class="chapter section-level-set-chapter" id="Network-Security-1">37 Network Security</h2>
<a class="index-entry-id" id="index-network-security-manager"></a>
<a class="index-entry-id" id="index-NSM"></a>
<a class="index-entry-id" id="index-encryption"></a>
<a class="index-entry-id" id="index-SSL"></a>
<a class="index-entry-id" id="index-TLS"></a>
<a class="index-entry-id" id="index-Transport-Layer-Security"></a>
<a class="index-entry-id" id="index-STARTTLS"></a>

<p>Whenever Emacs establishes any network connection, it passes the
established connection to the <em class="dfn">Network Security Manager</em>
(<abbr class="acronym">NSM</abbr>).  <abbr class="acronym">NSM</abbr> is responsible for enforcing the
network security under your control.  Currently, this works by using
the Transport Layer Security (<abbr class="acronym">TLS</abbr>) features.
</p>
<a class="index-entry-id" id="index-network_002dsecurity_002dlevel"></a>
<p>The <code class="code">network-security-level</code> variable determines the security
level that <abbr class="acronym">NSM</abbr> enforces.  If its value is <code class="code">low</code>, no
security checks are performed.  This is not recommended, and will
basically mean that your network connections can&#8217;t be trusted.
However, the setting can be useful in limited circumstances, as when
testing network issues.
</p>
<p>If this variable is <code class="code">medium</code> (which is the default), a number of
checks will be performed.  If as result <abbr class="acronym">NSM</abbr> determines that
the network connection might not be trustworthy, it will make you
aware of that, and will ask you what to do about the network
connection.
</p>
<p>You can decide to register a permanent security exception for an
unverified connection, a temporary exception, or refuse the connection
entirely.
</p>
<a class="index-entry-id" id="index-network_002dsecurity_002dprotocol_002dchecks"></a>
<p>In addition to the basic certificate correctness checks, several
<abbr class="acronym">TLS</abbr> algorithm checks are available.  Some encryption
technologies that were previously thought to be secure have shown
themselves to be fragile, so Emacs (by default) warns you about some
of these problems.
</p>
<p>The protocol network checks is controlled via the
<code class="code">network-security-protocol-checks</code> variable.
</p>
<p>It&#8217;s an alist where the first element of each association is the name
of the check, and the second element is the security level where the
check should be used.
</p>
<p>An element like <code class="code">(rc4 medium)</code> will result in the function
<code class="code">nsm-protocol-check--rc4</code> being called like thus:
<code class="code">(nsm-protocol-check--rc4&#160;host&#160;port&#160;status&#160;settings)</code><!-- /@w -->.
The function should return non-<code class="code">nil</code> if the connection should
proceed and <code class="code">nil</code> otherwise.
</p>
<p>Below is a list of the checks done on the default <code class="code">medium</code> level.
</p>
<dl class="table">
<dt>unable to verify a <abbr class="acronym">TLS</abbr> certificate</dt>
<dd><p>If the connection is a <abbr class="acronym">TLS</abbr>, <abbr class="acronym">SSL</abbr> or
<abbr class="acronym">STARTTLS</abbr> connection, <abbr class="acronym">NSM</abbr> will check whether
the certificate used to establish the identity of the server we&#8217;re
connecting to can be verified.
</p>
<p>While an invalid certificate is often the cause for concern (there
could be a Man-in-the-Middle hijacking your network connection and
stealing your password), there may be valid reasons for going ahead
with the connection anyway.  For instance, the server may be using a
self-signed certificate, or the certificate may have expired.  It&#8217;s up
to you to determine whether it&#8217;s acceptable to continue with the
connection.
</p>
</dd>
<dt>a self-signed certificate has changed</dt>
<dd><p>If you&#8217;ve previously accepted a self-signed certificate, but it has
now changed, that could mean that the server has just changed the
certificate, but it might also mean that the network connection has
been hijacked.
</p>
</dd>
<dt>previously encrypted connection now unencrypted</dt>
<dd><p>If the connection is unencrypted, but it was encrypted in previous
sessions, this might mean that there is a proxy between you and the
server that strips away <abbr class="acronym">STARTTLS</abbr> announcements, leaving the
connection unencrypted.  This is usually very suspicious.
</p>
</dd>
<dt>talking to an unencrypted service when sending a password</dt>
<dd><p>When connecting to an <abbr class="acronym">IMAP</abbr> or <abbr class="acronym">POP3</abbr> server, these
should usually be encrypted, because it&#8217;s common to send passwords
over these connections.  Similarly, if you&#8217;re sending email via
<abbr class="acronym">SMTP</abbr> that requires a password, you usually want that
connection to be encrypted.  If the connection isn&#8217;t encrypted,
<abbr class="acronym">NSM</abbr> will warn you.
</p>
</dd>
<dt>Diffie-Hellman low prime bits</dt>
<dd><p>When doing the public key exchange, the number of prime bits should be
high enough to ensure that the channel can&#8217;t be eavesdropped on by third
parties.  If this number is too low, Emacs will warn you.  (This is the
<code class="code">diffie-hellman-prime-bits</code> check in
<code class="code">network-security-protocol-checks</code>).
</p>
</dd>
<dt><abbr class="acronym">RC4</abbr> stream cipher</dt>
<dd><p>The <abbr class="acronym">RC4</abbr> stream cipher is believed to be of low quality and
may allow eavesdropping by third parties.  (This is the <code class="code">rc4</code>
check in <code class="code">network-security-protocol-checks</code>).
</p>
</dd>
<dt><abbr class="acronym">SHA1</abbr> in the host certificate or in intermediate certificates</dt>
<dd><p>It is believed that if an intermediate certificate uses the
<abbr class="acronym">SHA1</abbr> hashing algorithm, then third parties can issue
certificates pretending to be that issuing instance.  These
connections are therefore vulnerable to man-in-the-middle attacks.
(These are the <code class="code">signature-sha1</code> and <code class="code">intermediate-sha1</code>
checks in <code class="code">network-security-protocol-checks</code>).
</p>
</dd>
<dt><abbr class="acronym">SSL1</abbr>, <abbr class="acronym">SSL2</abbr> and <abbr class="acronym">SSL3</abbr></dt>
<dd><p>The protocols older than <abbr class="acronym">TLS1.0</abbr> are believed to be
vulnerable to a variety of attacks, and you may want to avoid using
these if what you&#8217;re doing requires higher security.  (This is the
<code class="code">ssl</code> check in <code class="code">network-security-protocol-checks</code>).
</p>
</dd>
</dl>

<p>If <code class="code">network-security-level</code> is <code class="code">high</code>, the following checks
will be made, in addition to the above:
</p>
<dl class="table">
<dt><abbr class="acronym">3DES</abbr> cipher</dt>
<dd><p>The <abbr class="acronym">3DES</abbr> stream cipher provides at most 112 bits of
effective security, which is considered to be towards the low end.
(This is the <code class="code">3des</code> check in
<code class="code">network-security-protocol-checks</code>).
</p>
</dd>
<dt>a validated certificate changes the public key</dt>
<dd><p>Servers change their keys occasionally, and that is normally nothing
to be concerned about.  However, if you are worried that your network
connections are being hijacked by agencies who have access to pliable
Certificate Authorities which issue new certificates for third-party
services, you may want to keep track of these changes.
</p>
</dd>
</dl>

<p>Finally, if <code class="code">network-security-level</code> is <code class="code">paranoid</code>, you will
also be notified the first time <abbr class="acronym">NSM</abbr> sees any new
certificate.  This will allow you to inspect all the certificates from
all the connections that Emacs makes.
</p>
<p>The following additional variables can be used to control details of
<abbr class="acronym">NSM</abbr> operation:
</p>
<dl class="table">
<dt><a id="index-nsm_002dsettings_002dfile"></a><code class="code">nsm-settings-file</code></dt>
<dd><p>This is the file where <abbr class="acronym">NSM</abbr> stores details about connections.
It defaults to <samp class="file">~/.emacs.d/network-security.data</samp>.
</p>
</dd>
<dt><a id="index-nsm_002dsave_002dhost_002dnames"></a><code class="code">nsm-save-host-names</code></dt>
<dd><p>By default, host names will not be saved for non-<code class="code">STARTTLS</code>
connections.  Instead a host/port hash is used to identify connections.
This means that one can&#8217;t casually read the settings file to see what
servers the user has connected to.  If this variable is <code class="code">t</code>,
<abbr class="acronym">NSM</abbr> will also save host names in the
<code class="code">nsm-settings-file</code>.
</p>
</dd>
</dl>


</div>



</body>
</html>
