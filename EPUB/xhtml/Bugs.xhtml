<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>53 Reporting Bugs (GNU Emacs Manual)</title>

<meta name="description" content="53 Reporting Bugs (GNU Emacs Manual)"/>
<meta name="keywords" content="53 Reporting Bugs (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Contributing.xhtml#Contributing" rel="next" title="54 Contributing to Emacs Development"/>
<link href="Lossage.xhtml#Lossage" rel="prev" title="52 Dealing with Emacs Trouble"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
ul.mark-minus {list-style-type: "\2212"}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Bugs">

<h2 class="chapter section-level-set-chapter" id="Reporting-Bugs">53 Reporting Bugs</h2>

<a class="index-entry-id" id="index-bugs"></a>
<p>If you think you have found a bug in Emacs, please report it.  We
cannot promise to fix it, or always to agree that it is a bug, but we
certainly want to hear about it.  The same applies for new features
you would like to see added.  This section will help you to determine
whether you found a bug, and if so, construct an effective bug report.
</p>
<p>The general procedure when you find something that could be a bug is
as follows:
</p>
<ul class="itemize mark-bullet">
<li>See if what you found is a known problem or a bug that was already
reported and/or fixed.  See <a class="xref" href="#Known-Problems">Reading Existing Bug Reports and Known Problems</a>, where you will find how
to look for known problems and bugs.

</li><li>If you are unsure whether the behavior you see is a bug, see <a class="ref" href="#Bug-Criteria">When Is There a Bug</a>, which tells what we consider as clear bugs in Emacs.

</li><li>Once you decide you found a bug, see <a class="ref" href="#Understanding-Bug-Reporting">Understanding Bug Reporting</a>, which helps you in describing what you see in the most
efficient manner, making our job of reproducing the issue and
investigating it easier.

</li><li>Next, see <a class="ref" href="#Checklist">Checklist for Bug Reports</a>, where we
describe in detail how to submit a bug report and what information to
include in it.  In a nutshell, you submit a bug report via electronic
mail using the Emacs command <code class="code">report-emacs-bug</code>, which assists
you in doing so.  Submitting a bug report starts the process of
investigating and fixing the bug, where you will receive copies of
email messages discussing the bug, in which we might ask you to
provide more information, test possible fixes, etc.

</li><li>Finally, if you want to propose specific changes to Emacs, whether to
fix a bug, add a new feature, or improve our documentation, please see
<a class="ref" href="#Sending-Patches">Sending Patches for GNU Emacs</a>, for details about submitting such changes.
</li></ul>


<div class="section-level-extent" id="Known-Problems">
<h3 class="section subsection-level-set-section" id="Reading-Existing-Bug-Reports-and-Known-Problems">53.1 Reading Existing Bug Reports and Known Problems</h3>
<a class="index-entry-id" id="index-known-bugs-and-problems"></a>

<p>Before reporting a bug, if at all possible, please check to see if
we already know about it.  Indeed, it may already have been fixed in a
later release of Emacs, or in the development version.  Here is a list
of the main places you can read about known issues:
</p>
<ul class="itemize mark-bullet">
<li>The <samp class="file">etc/PROBLEMS</samp> file; type <kbd class="kbd">C-h C-p</kbd> to read it.  This
file contains a list of particularly well-known issues that have been
encountered in compiling, installing and running Emacs, with special
emphasis on issues caused by other software that cannot be easily
solved in Emacs.  Often, you will find there suggestions for
workarounds and solutions.

</li><li><a class="index-entry-id" id="index-bug-tracker"></a>
<a class="index-entry-id" id="index-issue-tracker"></a>
<a class="index-entry-id" id="index-search-known-bugs"></a>
The GNU Bug Tracker at <a class="url" href="https://debbugs.gnu.org">https://debbugs.gnu.org</a>.  Emacs bugs and
issues are filed in the tracker under the &#8216;<samp class="samp">emacs</samp>&#8217; package.  The
tracker records information about the status of each bug, the initial
bug report, and the follow-up messages by the bug reporter and Emacs
developers who participate in discussing and fixing the bug.  You can
search for bugs by subject, severity, and other criteria.  For more
complex search criteria, use
<a class="url" href="https://debbugs.gnu.org/cgi/search.cgi">https://debbugs.gnu.org/cgi/search.cgi</a>.

<a class="index-entry-id" id="index-debbugs-package"></a>
<p>Instead of browsing the bug tracker as a web page, you can browse it
from Emacs using the <code class="code">debbugs</code> package, which can be downloaded
via the Package Menu (see <a class="pxref" href="Packages.xhtml#Packages">Emacs Lisp Packages</a>).  This package provides the
command <kbd class="kbd">M-x debbugs-gnu</kbd> to list bugs, and <kbd class="kbd">M-x
debbugs-gnu-search</kbd> to search for a specific bug.  User tags, applied
by the Emacs maintainers, are shown by <kbd class="kbd">M-x debbugs-gnu-usertags</kbd>.
</p>
</li><li>The &#8216;<samp class="samp">bug-gnu-emacs</samp>&#8217; mailing list (also available as the newsgroup
&#8216;<samp class="samp">gnu.emacs.bug</samp>&#8217;).  You can read the list archives at
<a class="url" href="https://lists.gnu.org/mailman/listinfo/bug-gnu-emacs">https://lists.gnu.org/mailman/listinfo/bug-gnu-emacs</a>.  This list
works as a mirror of the Emacs bug reports and follow-up messages
which are sent to the bug tracker.  It also contains old bug reports
from before the bug tracker was introduced (in early 2008).

<p>If you like, you can subscribe to the list.  Be aware that its purpose
is to provide the Emacs maintainers with information about bugs and
feature requests, so reports may contain fairly large amounts of data;
spectators should not complain about this.
</p>
</li><li>The &#8216;<samp class="samp">emacs-pretest-bug</samp>&#8217; mailing list.  This list is no longer
used, and is mainly of historical interest.  At one time, it was used
for bug reports in development (i.e., not yet released) versions of
Emacs.  You can read the archives for 2003 to mid 2007 at
<a class="url" href="https://lists.gnu.org/r/emacs-pretest-bug/">https://lists.gnu.org/r/emacs-pretest-bug/</a>.  Nowadays,
email messages sent to this list are redirected to
&#8216;<samp class="samp">bug-gnu-emacs</samp>&#8217;.

</li><li>The &#8216;<samp class="samp">emacs-devel</samp>&#8217; mailing list.  Sometimes people report bugs to
this mailing list.  This is not the main purpose of the list, however,
and it is much better to send bug reports to the bug list.  You should
not feel obliged to read this list before reporting a bug.
</li></ul>


</div>
<div class="section-level-extent" id="Bug-Criteria">
<h3 class="section subsection-level-set-section" id="When-Is-There-a-Bug">53.2 When Is There a Bug</h3>
<a class="index-entry-id" id="index-bug-criteria"></a>
<a class="index-entry-id" id="index-what-constitutes-an-Emacs-bug"></a>

<p>If Emacs accesses an invalid memory location (a.k.a.
&#8220;segmentation fault&#8221;) or exits with an operating system error
message that indicates a problem in the program (as opposed to
something like &#8220;disk full&#8221;), then it is certainly a bug.
</p>
<p>If the Emacs display does not correspond properly to the contents of
the buffer, then it is a bug.  But you should check that features like
buffer narrowing (see <a class="pxref" href="Display.xhtml#Narrowing">Narrowing</a>), which can hide parts of the
buffer or change how it is displayed, are not responsible.
</p>
<p>Taking forever to complete a command can be a bug, but you must make
sure that it is really Emacs&#8217;s fault.  Some commands simply take a
long time.  Type <kbd class="kbd">C-g</kbd> (<kbd class="kbd">C-<kbd class="key">Break</kbd></kbd> on MS-DOS) and then
<kbd class="kbd">C-h l</kbd> to see whether the input Emacs received was what you
intended to type; if the input was such that you <em class="emph">know</em> it should
have been processed quickly, report a bug.  If you don&#8217;t know whether
the command should take a long time, find out by looking in the manual
or by asking for assistance.
</p>
<p>If a command you are familiar with causes an Emacs error message in a
case where its usual definition ought to be reasonable, it is probably a
bug.
</p>
<p>If a command does the wrong thing, that is a bug.  But be sure you
know for certain what it ought to have done.  If you aren&#8217;t familiar
with the command, it might actually be working right.  If in doubt,
read the command&#8217;s documentation (see <a class="pxref" href="Help.xhtml#Name-Help">Help by Command or Variable Name</a>).
</p>
<p>A command&#8217;s intended definition may not be the best possible
definition for editing with.  This is a very important sort of
problem, but it is also a matter of judgment.  Also, it is easy to
come to such a conclusion out of ignorance of some of the existing
features.  It is probably best not to complain about such a problem
until you have checked the documentation in the usual ways, feel
confident that you understand it, and know for certain that what you
want is not available.  Ask other Emacs users, too.  If you are not
sure what the command is supposed to do after a careful reading of the
manual, check the index and glossary for any terms that may be
unclear.
</p>
<p>If after careful rereading of the manual you still do not understand
what the command should do, that indicates a bug in the manual, which
you should report.  The manual&#8217;s job is to make everything clear to
people who are not Emacs experts&#8212;including you.  It is just as
important to report documentation bugs as program bugs.
</p>
<p>If the built-in documentation for a function or variable disagrees
with the manual, one of them must be wrong; that is a bug.
</p>
<p>For problems with packages that are not part of Emacs, it is better
to begin by reporting them to the package developers.
</p>
</div>
<div class="section-level-extent" id="Understanding-Bug-Reporting">
<h3 class="section subsection-level-set-section" id="Understanding-Bug-Reporting-1">53.3 Understanding Bug Reporting</h3>
<a class="index-entry-id" id="index-bug-reporting_002c-principles"></a>
<a class="index-entry-id" id="index-report-an-Emacs-bug_002c-how-to"></a>

<p>When you decide that there is a bug, it is important to report it,
and to report it in a way which is useful.  What is most useful is an
exact description of what commands you type, starting with the shell
command to run Emacs, until the problem happens, and the effects
produced by typing those commands.
</p>
<p>The most important principle in reporting a bug is to report
<em class="emph">facts</em>.  Hypotheses and verbal descriptions are no substitute
for the detailed raw data.  Reporting the facts is straightforward,
but many people strain to posit explanations and report them instead
of the facts.  If the explanations are based on guesses about how
Emacs is implemented, they might not be useful; meanwhile, lacking the
facts, we will have no real information about the bug.  If you want to
actually <em class="emph">debug</em> the problem, and report explanations that are
more than guesses, that is useful&#8212;but please include the raw facts
as well.
</p>
<p>For example, suppose that you type <kbd class="kbd">C-x C-f /glorp/baz.ugh
<kbd class="key">RET</kbd></kbd>, visiting a file which (you know) happens to be rather
large, and Emacs displays &#8216;<samp class="samp">I feel pretty today</samp>&#8217;.  The bug report
would need to provide all that information.  You should not assume
that the problem is due to the size of the file and say, &#8220;I visited a
large file, and Emacs displayed &#8216;<samp class="samp">I feel pretty today</samp>&#8217;.&#8221;  This is
what we mean by &#8220;guessing explanations&#8221;.  The problem might be due
to the fact that there is a &#8216;<samp class="samp">z</samp>&#8217; in the file name.  If this is so,
then when we got your report, we would try out the problem with some
large file, probably with no &#8216;<samp class="samp">z</samp>&#8217; in its name, and not see any
problem.  There is no way we could guess that we should try visiting a
file with a &#8216;<samp class="samp">z</samp>&#8217; in its name.
</p>
<p>You should not even say &#8220;visit a file&#8221; instead of <kbd class="kbd">C-x C-f</kbd>.
That&#8217;s because a file can be visited in more than one way, and there&#8217;s
no certainty that all of them reproduce the problem.  Similarly,
rather than saying &#8220;if I have three characters on the line&#8221;, say
&#8220;after I type <kbd class="kbd"><kbd class="key">RET</kbd> A B C <kbd class="key">RET</kbd> C-p</kbd>&#8221;, if that is the
way you entered the text&#8212;that is, tell us about the text which in
your case produced the problem.
</p>
<p>If possible, try quickly to reproduce the bug by invoking Emacs with
<code class="command">emacs -Q</code> (so that Emacs starts with no initial
customizations; see <a class="pxref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>), and repeating the steps that
you took to trigger the bug.  If you can reproduce the bug this way,
that rules out bugs in your personal customizations and makes the bug
much easier to reproduce.  Then your bug report should begin by
stating that you started Emacs with <code class="command">emacs -Q</code>, followed by
the exact sequence of steps for reproducing the bug.  If possible,
inform us of the exact contents of any file that is needed to
reproduce the bug.
</p>
<p>Some bugs are not reproducible from <code class="command">emacs -Q</code>; some are not
easily reproducible at all.  In that case, you should report what you
have&#8212;but, as before, please stick to the raw facts about what you
did to trigger the bug the first time.
</p>
<p>If you have multiple issues that you want to report, please make a
separate bug report for each.
</p>
</div>
<div class="section-level-extent" id="Checklist">
<h3 class="section subsection-level-set-section" id="Checklist-for-Bug-Reports">53.4 Checklist for Bug Reports</h3>
<a class="index-entry-id" id="index-checklist-before-reporting-a-bug"></a>
<a class="index-entry-id" id="index-bug-reporting_002c-checklist"></a>
<a class="index-entry-id" id="index-report-bugs-in-Emacs"></a>

<p>Before reporting a bug, first try to see if the problem has already
been reported (see <a class="pxref" href="#Known-Problems">Reading Existing Bug Reports and Known Problems</a>).
</p>
<p>If you are able to, try the latest release of Emacs to see if the
problem has already been fixed.  Even better is to try the latest
development version.  We recognize that this is not easy for some
people, so do not feel that you absolutely must do this before making
a report.
</p>
<a class="index-entry-id" id="index-report_002demacs_002dbug"></a>
<p>The best way to write a bug report for Emacs is to use the command
<kbd class="kbd">M-x report-emacs-bug</kbd>.  This sets up a mail buffer
(see <a class="pxref" href="Sending-Mail.xhtml#Sending-Mail">Sending Mail</a>) and automatically inserts <em class="emph">some</em> of the
essential information.  However, it cannot supply all the necessary
information; you should still read and follow the guidelines below, so
you can enter the other crucial information by hand before you send
the message.  You may feel that some of the information inserted by
<kbd class="kbd">M-x report-emacs-bug</kbd> is not relevant, but unless you are
absolutely sure, it is best to leave it, so that the developers can
decide for themselves.
</p>
<p>When you have finished writing your report, type <kbd class="kbd">C-c C-c</kbd> and it
will be sent to the Emacs maintainers at
<a class="url" href="https://lists.gnu.org/mailman/listinfo/bug-gnu-emacs">bug-gnu-emacs</a>.
If you cannot send mail from inside Emacs, you can copy the
text of your report to your normal mail client (if your system
supports it, you can type <kbd class="kbd">C-c M-i</kbd> to have Emacs do this for you)
and send it to that address.  Or you can simply send an email to that
address describing the problem, including the necessary information
mentioned below.
</p>
<p>If you want to submit code to Emacs (to fix a problem or implement a
new feature), the easiest way to do this is to send a patch to the
Emacs issue tracker.  Use the <kbd class="kbd">M-x submit-emacs-patch</kbd> command for
that, which works much the same as when reporting bugs; see <a class="pxref" href="#Sending-Patches">Sending Patches for GNU Emacs</a>.
</p>
<p>In any case, your report will be sent to the &#8216;<samp class="samp">bug-gnu-emacs</samp>&#8217;
mailing list, and stored in the GNU Bug Tracker at
<a class="url" href="https://debbugs.gnu.org">https://debbugs.gnu.org</a>.  Please include a valid reply email
address, in case we need to ask you for more information about your
report.  Submissions are moderated, so there may be a delay before
your report actually appears on the tracker.
</p>
<p>You do not need to know how the GNU Bug Tracker works in order to
report a bug, but if you want to, you can read the tracker&#8217;s
<a class="uref" href="https://debbugs.gnu.org/Advanced.html">online documentation</a> to
see the various features you can use.
</p>
<p>All mail sent to the &#8216;<samp class="samp">bug-gnu-emacs</samp>&#8217; mailing list is also
gatewayed to the &#8216;<samp class="samp">gnu.emacs.bug</samp>&#8217; newsgroup.  The reverse is also
true, but we ask you not to post bug reports (or replies) via the
newsgroup.  It can make it much harder to contact you if we need to ask
for more information, and it does not integrate well with the bug
tracker.
</p>
<p>If your data is more than 500,000 bytes, please don&#8217;t include it
directly in the bug report; instead, offer to send it on request, or
make it available online and say where.  Large attachments are best
sent compressed.
</p>
<p>The GNU Bug Tracker will assign a bug number to your report; please
use it in the following discussions, keeping the bug address in the
list of recipients, so that the bug discussion is recorded by the
tracker.  The bug address will look like
&#8216;<samp class="samp"><var class="var">nnnnn</var>@debbugs.gnu.org</samp>&#8217;, where <var class="var">nnnnn</var> is the bug
number.
</p>
<p>To enable maintainers to investigate a bug, your report
should include all these things:
</p>
<ul class="itemize mark-bullet">
<li>A description of what behavior you observe that you believe is
incorrect.  For example, &#8220;The Emacs process gets a fatal signal&#8221;, or,
&#8220;The resulting text is as follows, which I think is wrong.&#8221;

<p>Of course, if the bug is that Emacs gets a fatal signal, then one can&#8217;t
miss it.  But if the bug is incorrect text, the maintainer might fail to
notice what is wrong.  Why leave it to chance?
</p>
<p>Even if the problem you experience is a fatal signal, you should still
say so explicitly.  Suppose something strange is going on, such as, your
copy of the source is out of sync, or you have encountered a bug in the
C library on your system.  (This has happened!)  Your copy might crash
and the copy here might not.  If you <em class="emph">said</em> to expect a crash, then
when Emacs here fails to crash, we would know that the bug was not
happening.  If you don&#8217;t say to expect a crash, then we would not know
whether the bug was happening&#8212;we would not be able to draw any
conclusion from our observations.
</p>
<p>Usually, description of the behavior and of the way to reproduce the
problem needs to specify one or more of the following aspects:
</p>
<ul class="itemize mark-minus">
<li>The complete text of any files needed to reproduce the bug.

<p>If you can tell us a way to cause the problem without visiting any files,
please do so.  This makes it much easier to debug.  If you do need files,
make sure you arrange for us to see their exact contents.  For example, it
can matter whether there are spaces at the ends of lines, or a
newline after the last line in the buffer (nothing ought to care whether
the last line is terminated, but try telling the bugs that).
</p>
</li><li>The precise commands we need to type to reproduce the bug.  If at all
possible, give a full recipe for an Emacs started with the &#8216;<samp class="samp">-Q</samp>&#8217;
option (see <a class="pxref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>).  This bypasses your personal
customizations.

<a class="index-entry-id" id="index-open_002ddribble_002dfile"></a>
<a class="index-entry-id" id="index-dribble-file"></a>
<a class="index-entry-id" id="index-logging-keystrokes"></a>
<p>One way to record the input to Emacs precisely is to write a dribble
file.  To start the file, use the command <kbd class="kbd">M-x&#160;open-dribble-file</kbd><!-- /@w -->.
From then on, Emacs copies all your input to the specified dribble
file until the Emacs process is killed.  Be aware that sensitive
information (such as passwords) may end up recorded in the dribble
file.
</p>
</li><li>If the bug is that the Emacs Manual or the Emacs Lisp Reference Manual
fails to describe the actual behavior of Emacs, or that the text is
confusing, copy in the text from the manual which you think is
at fault.  If the section is small, just the section name is enough.

</li><li>If the manifestation of the bug is an Emacs error message, it is
important to report the precise text of the error message, and a
backtrace showing how the Lisp program in Emacs arrived at the error.

<p>To get the error message text accurately, copy it from the
<samp class="file">*Messages*</samp> buffer into the bug report.  Copy all of it, not just
part.
</p>
</li><li>Check whether any programs you have loaded into the Lisp world,
including your initialization file, set any variables that may affect
the functioning of Emacs.  Also, see whether the problem happens in a
freshly started Emacs without loading your initialization file (start
Emacs with the <code class="code">-Q</code> switch to prevent loading the init files).
If the problem does <em class="emph">not</em> occur then, you must report the precise
contents of any programs that you must load into the Lisp world in
order to cause the problem to occur.

</li><li>If the problem does depend on an init file or other Lisp programs that
are not part of the standard Emacs system, then you should make sure it
is not a bug in those programs by complaining to their maintainers
first.  After they verify that they are using Emacs in a way that is
supposed to work, they should report the bug.

</li><li>If you wish to mention something in the GNU Emacs source, show the line
of code with a few lines of context.  Don&#8217;t just give a line number.

<p>The line numbers in the development sources don&#8217;t match those in your
sources.  It would take extra work for the maintainers to determine what
code is in your version at a given line number, and we could not be
certain.
</p>
</li><li><a class="index-entry-id" id="index-open_002dtermscript"></a>
<a class="index-entry-id" id="index-termscript-file"></a>
<a class="index-entry-id" id="index-TERM_002c-environment-variable_002c-and-display-bugs"></a>
For possible display bugs on text-mode terminals, the terminal type
(the value of environment variable <code class="env">TERM</code>), the complete termcap
entry for the terminal from <samp class="file">/etc/termcap</samp> (since that file is
not identical on all machines), and the output that Emacs actually
sent to the terminal.

<p>The way to collect the terminal output is to invoke the command
<kbd class="kbd">M-x open-termscript</kbd> just after starting Emacs; it will prompt
you for the name of the file where to record all terminal output until
the Emacs process is killed.  If the problem happens when Emacs starts
up, put the Lisp expression
</p>
<div class="example">
<pre class="example-preformatted">(open-termscript &quot;~/termscript&quot;)
</pre></div>

<p>into your Emacs initialization file so that the termscript file will
be open when Emacs displays the screen for the first time.
</p>
<p>Be warned: it is often difficult, and sometimes impossible, to fix a
terminal-dependent bug without access to a terminal of the type that
stimulates the bug.
</p></li></ul>

</li><li>The version number of Emacs.  Without this, we won&#8217;t know whether there is any
point in looking for the bug in the current version of GNU Emacs.

<a class="index-entry-id" id="index-emacs_002dversion"></a>
<p><kbd class="kbd">M-x report-emacs-bug</kbd> includes this information automatically,
but if you are not using that command for your report you can get the
version number by typing <kbd class="kbd">M-x emacs-version <kbd class="key">RET</kbd></kbd>.  If that
command does not work, you probably have something other than GNU
Emacs, so you will have to report the bug somewhere else.
</p>
</li><li>The type of machine you are using, and the operating system name and
version number (again, automatically included by <kbd class="kbd">M-x&#160;report-emacs-bug</kbd><!-- /@w -->).  <kbd class="kbd">M-x&#160;emacs-version&#160;<kbd class="key">RET</kbd></kbd><!-- /@w --> provides
this information too.  Copy its output from the <samp class="file">*Messages*</samp>
buffer, so that you get it all and get it accurately, or use
<kbd class="kbd">C-u&#160;M-x&#160;emacs-version&#160;<kbd class="key">RET</kbd></kbd><!-- /@w --> to insert the version
information into the current buffer.

</li><li>The command-line arguments given to the <code class="code">configure</code> command when
Emacs was built (automatically included by <kbd class="kbd">M-x
report-emacs-bug</kbd>).

</li><li>A complete list of any modifications you have made to the Emacs source.
(We may not have time to investigate the bug unless it happens in an
unmodified Emacs.  But if you&#8217;ve made modifications and you don&#8217;t tell
us, you are sending us on a wild goose chase.)

<p>Be precise about these changes.  A description in English is not
enough&#8212;send a unified context diff for them.
</p>
<p>Adding files of your own, or porting to another machine, is a
modification of the source.
</p>
</li><li>Details of any other deviations from the standard procedure for installing
GNU Emacs.

</li><li>If non-<abbr class="acronym">ASCII</abbr> text or internationalization is relevant, the locale that
was current when you started Emacs.   This is automatically included by <kbd class="kbd">M-x
report-emacs-bug</kbd>; alternatively, on GNU/Linux and Unix systems, or
if you use a POSIX-style shell such as Bash, you can use this shell
command to view the relevant values:

<div class="example smallexample">
<pre class="example-preformatted">echo LC_ALL=$LC_ALL LC_COLLATE=$LC_COLLATE LC_CTYPE=$LC_CTYPE \
  LC_MESSAGES=$LC_MESSAGES LC_TIME=$LC_TIME LANG=$LANG
</pre></div>

<p>You can also use the <code class="command">locale</code> command, if your system has it,
to display your locale settings.
</p></li></ul>

<p>Here are some things that are not necessary in a bug report:
</p>
<ul class="itemize mark-bullet">
<li>A description of the envelope of the bug&#8212;this is not necessary for a
reproducible bug.

<p>Often people who encounter a bug spend a lot of time investigating
which changes to the input file will make the bug go away and which
changes will not affect it.
</p>
<p>This is often time-consuming and not very useful, because the way we
will find the bug is by running a single example under the debugger
with breakpoints, not by pure deduction from a series of examples.
You might as well save time by not searching for additional examples.
It is better to send the bug report right away, go back to editing,
and find another bug to report.
</p>
<p>Of course, if you can find a simpler example to report <em class="emph">instead</em> of
the original one, that is a convenience.  Errors in the output will be
easier to spot, running under the debugger will take less time, etc.
</p>
<p>However, simplification is not vital; if you can&#8217;t do this or don&#8217;t have
time to try, please report the bug with your original test case.
</p>
</li><li>A core dump file.

<p>Debugging the core dump might be useful, but it can only be done on
your machine, with your Emacs executable.  Therefore, sending the core
dump file to the Emacs maintainers won&#8217;t be useful.  Above all, don&#8217;t
include the core file in an email bug report!  Such a large message
can be extremely inconvenient.
</p>
</li><li>A system-call trace of Emacs execution.

<p>System-call traces are very useful for certain special kinds of
debugging, but in most cases they give little useful information.  It is
therefore strange that many people seem to think that <em class="emph">the</em> way to
report information about a crash is to send a system-call trace.  Perhaps
this is a habit formed from experience debugging programs that don&#8217;t
have source code or debugging symbols.
</p>
<p>In most programs, a backtrace is normally far, far more informative than
a system-call trace.  Even in Emacs, a simple backtrace is generally
more informative, though to give full information you should supplement
the backtrace by displaying variable values and printing them as Lisp
objects with <code class="code">pr</code> (see above).
</p>
</li><li>A patch for the bug.

<p>A patch for the bug is useful if it is a good one.  But don&#8217;t omit the
other information that a bug report needs, such as the test case, on
the assumption that a patch is sufficient.  We might see problems with
your patch and decide to fix the problem another way, or we might not
understand it at all.  And if we can&#8217;t understand what bug you are
trying to fix, or why your patch should be an improvement, we mustn&#8217;t
install it.  See <a class="xref" href="#Sending-Patches">Sending Patches for GNU Emacs</a>, for guidelines on how to make it
easy for us to understand and install your patches.
</p>
</li><li>A guess about what the bug is or what it depends on.

<p>Such guesses are usually wrong.  Even experts can&#8217;t guess right about
such things without first using the debugger to find the facts.
</p></li></ul>

<p>If you are willing to debug Emacs and provide additional information
about the bug, here is some useful advice:
</p>
<a class="index-entry-id" id="index-toggle_002ddebug_002don_002derror"></a>
<a class="index-entry-id" id="index-Edebug"></a>
<ul class="itemize mark-bullet">
<li>If the bug manifests itself as an error message, try providing a Lisp
backtrace for the error.  To make a backtrace for the error, use
<kbd class="kbd">M-x toggle-debug-on-error</kbd> before the error happens (that is to
say, you must give that command and then make the bug happen).  This
causes the error to start the Lisp debugger, which shows you a
backtrace.  Copy the text of the debugger&#8217;s backtrace into the bug
report.  (The backtrace is more detailed if you load the relevant Lisp
<samp class="file">*.el</samp> source files before triggering the error, so do that if
you know how to find and load those files.)

<p>To debug the error, we suggest using Edebug.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug">Edebug</a> in <cite class="cite">the Emacs Lisp Reference Manual</cite>, for information on debugging
Emacs Lisp programs with the Edebug package.
</p>
<p>This use of the debugger is possible only if you know how to make the
bug happen again.  If you can&#8217;t make it happen again, at least copy
the whole error message.
</p>
</li><li><a class="index-entry-id" id="index-debug_002don_002dquit"></a>
If Emacs appears to be stuck in an infinite loop or in a very long
operation, typing <kbd class="kbd">C-g</kbd> with the variable <code class="code">debug-on-quit</code>
non-<code class="code">nil</code> will start the Lisp debugger and show a backtrace.
This backtrace is useful for debugging such long loops, so if you can
produce it, copy it into the bug report.

<a class="index-entry-id" id="index-debug_002don_002devent"></a>
<p>If you cannot get Emacs to respond to <kbd class="kbd">C-g</kbd> (e.g., because
<code class="code">inhibit-quit</code> is set), then you can try sending the signal
specified by <code class="code">debug-on-event</code> (default SIGUSR2) from outside
Emacs to cause it to enter the debugger.
</p>
</li><li>Additional information from a C debugger such as GDB might enable
someone to find a problem on a machine which he does not have available.
If you don&#8217;t know how to use GDB, please read the GDB manual&#8212;it is not
very long, and using GDB is easy.  You can find the GDB distribution,
including the GDB manual in online form, in most of the same places you
can find the Emacs distribution.  To run Emacs under GDB, you should
switch to the <samp class="file">src</samp> subdirectory in which Emacs was compiled, then
type <kbd class="kbd">gdb ./emacs</kbd>.  It is important for the directory <samp class="file">src</samp> to be
current so that GDB will read the <samp class="file">.gdbinit</samp> file in this
directory.  (You can also tell GDB to read that file from inside GDB,
by typing <kbd class="kbd">source ./.gdbinit</kbd>.)

<p>However, you need to think when you collect the additional information
if you want it to show what causes the bug.
</p>
<a class="index-entry-id" id="index-backtrace-for-bug-reports"></a>
<p>For example, many people send just a C-level backtrace, but that is
not very useful by itself.  A simple backtrace with arguments often
conveys little about what is happening inside GNU Emacs, because most
of the arguments listed in the backtrace are pointers to Lisp objects.
The numeric values of these pointers have no significance whatever;
all that matters is the contents of the objects they point to (and
most of the contents are themselves pointers).
</p>
<a class="index-entry-id" id="index-debug_005fprint"></a>
<p>To provide useful information, you need to show the values of Lisp
objects in Lisp notation.  Do this for each variable which is a Lisp
object, in several stack frames near the bottom of the stack.  Look at
the source to see which variables are Lisp objects, because the debugger
thinks of them as integers.
</p>
<p>To show a variable&#8217;s value in Lisp syntax, first print its value, then
use the user-defined GDB command <code class="code">pr</code> to print the Lisp object in
Lisp syntax.  (If you must use another debugger, call the function
<code class="code">debug_print</code> with the object as an argument.)  The <code class="code">pr</code>
command is defined by the file <samp class="file">.gdbinit</samp>, and it works only if you
are debugging a running process (not with a core dump).
</p>
<p>To make Lisp errors stop Emacs and return to GDB, put a breakpoint at
<code class="code">Fsignal</code>.
</p>
<p>For a backtrace of Lisp functions running, type the GDB command
<code class="code">xbacktrace</code>.
</p>
<p>The file <samp class="file">.gdbinit</samp> defines several other commands that are useful
for examining the data types and contents of Lisp objects.  Their names
begin with &#8216;<samp class="samp">x</samp>&#8217;.  These commands work at a lower level than
<code class="code">pr</code>, and are less convenient, but they may work even when
<code class="code">pr</code> does not, such as when debugging a core dump or when Emacs has
had a fatal signal.
</p>
<a class="index-entry-id" id="index-debugging-Emacs_002c-tricks-and-techniques"></a>
<p>More detailed advice and other useful techniques for debugging Emacs
are available in the file <samp class="file">etc/DEBUG</samp> in the Emacs distribution.
That file also includes instructions for investigating problems
whereby Emacs stops responding (many people assume that Emacs is
&#8220;hung&#8221;, whereas in fact it might be in an infinite loop).
</p>
<p>To find the file <samp class="file">etc/DEBUG</samp> in your Emacs installation, use the
directory name stored in the variable <code class="code">data-directory</code>.
</p></li></ul>

</div>
<div class="section-level-extent" id="Sending-Patches">
<h3 class="section subsection-level-set-section" id="Sending-Patches-for-GNU-Emacs">53.5 Sending Patches for GNU Emacs</h3>

<a class="index-entry-id" id="index-sending-patches-for-GNU-Emacs"></a>
<a class="index-entry-id" id="index-patches_002c-sending"></a>
<p>If you would like to write bug fixes or improvements for GNU Emacs,
that is very helpful.  When you send your changes, please follow these
guidelines to make it easy for the maintainers to use them.  If you
don&#8217;t follow these guidelines, your information might still be useful,
but using it will take extra work.  Maintaining GNU Emacs is a lot of
work in the best of circumstances, and we can&#8217;t keep up unless you do
your best to help.
</p>
<p>Every patch must have several pieces of information before we
can properly evaluate it.  They are described below.
</p>
<p>When you have all these pieces, use the <kbd class="kbd">M-x submit-emacs-patch</kbd>
command to send the patch.  The command will prompt you for the
Subject of the patch and a patch file.  It will then create and
display a Message mode buffer with the patch file as an attachment,
display the buffer, and let you explain more about the patch and add
any other information as requested below.  When you are done, type
<kbd class="kbd">C-c C-c</kbd> to send the patch via email to the developers.  It will
be sent to the GNU Bug Tracker at <a class="url" href="https://debbugs.gnu.org">https://debbugs.gnu.org</a>.  The
tracker will assign a number to your submission, just like it does
with bug reports.  The developers will usually respond, perhaps asking
you for more details or any additional information, so be sure to
include a valid reply email address.
</p>
<p>Here&#8217;s what we ask you to provide as part of your patch submissions:
</p>
<ul class="itemize mark-bullet">
<li>An explanation of what problem you are fixing or what improvement will
the patches bring about:

<ul class="itemize mark-minus">
<li>For a fix for an existing bug, it is
best to reply to the relevant discussion on the &#8216;<samp class="samp">bug-gnu-emacs</samp>&#8217;
list, or the bug entry in the GNU Bug Tracker at
<a class="url" href="https://debbugs.gnu.org">https://debbugs.gnu.org</a>.  Explain why your change fixes the bug.

</li><li>For a new feature, include a description of the feature and your
implementation.

</li><li>For a new bug, include a proper bug report for the problem you think
you have fixed; see <a class="pxref" href="#Checklist">Checklist for Bug Reports</a>.  We need
to convince ourselves that the change is right before installing it.
Even if it is correct, we might have trouble understanding it if we
don&#8217;t have a way to reproduce the problem it tries to fix.
</li></ul>

</li><li>Include in your code changes all the comments that are appropriate to
help people reading the source in the future understand why this
change was needed.

</li><li>Don&#8217;t mix together changes made for different reasons.
Send them <em class="emph">individually</em>.

<p>If you make two changes for separate reasons, then we might not want
to install them both.  We might want to install just one, or install
each one in a different versions of Emacs.  If you send them all
jumbled together in a single set of diffs, we have to do extra work to
disentangle them&#8212;to figure out which parts of the change serve which
purpose.  If we don&#8217;t have time for this, we might have to postpone
inclusion of your patches for a long time.
</p>
<p>If you send each change as soon as you have written it, with its own
explanation, then two changes never get tangled up, and we can consider
each one properly without any extra work to disentangle them.
</p>
</li><li>Send each change as soon as that change is finished.  Sometimes people
think they are helping us by accumulating many changes to send them all
together.  As explained above, this is absolutely the worst thing you
could do.

<p>Since you should send each change separately, you might as well send it
right away.  That gives us the option of installing it immediately if it
is important.
</p>
</li><li>The patch itself.  This can be produced in one of the following ways:

<ul class="itemize mark-minus">
<li>If you are using the Emacs repository, make sure your copy is
up-to-date (e.g., with <code class="code">git pull</code>).  You can commit your changes
to a private branch and generate a patch from the master version by
using <code class="code">git format-patch master</code>.  (This is the preferred method,
as it makes our job of applying the patch easier.)  Or you can leave
your changes uncommitted and use <code class="code">git diff</code>, as described below.

</li><li>Use <kbd class="kbd">diff -u</kbd> to make your diffs.  If you have GNU diff, use
<kbd class="kbd">diff&#160;-u&#160;-F'^[_a-zA-Z0-9$]\+&#160;*('</kbd><!-- /@w --> when making diffs of C code.
This shows the name of the function that each change occurs in.

<p>When producing the diffs, avoid any ambiguity as to which is the old
version and which is the new.  Please make the old version the first
argument to diff, and the new version the second argument.  And please
give one version or the other a name that indicates whether it is the
old version or your new changed one.
</p></li></ul>

</li><li>Write the commit log entries for your changes.  This is both to save us
the extra work of writing them, and to help explain your changes so we
can understand them.

<p>The purpose of the commit log is to explain the rationale of the
changes, the way the modified code solves whatever problems your patch
is trying to fix, and also show people where to find what was changed.
So you need to be specific about what functions you changed and why.
For the details about our style and requirements for good commit log
messages, please see the &#8220;Commit messages&#8221; section of the file
<samp class="file">CONTRIBUTE</samp> in the Emacs source tree.
</p>
<p>Please also look at the commit log entries of recent commits to see
what sorts of information to put in, and to learn the style that we
use.  Note that, unlike some other projects, we do require commit logs
for documentation, i.e., Texinfo files.  See <a class="xref" href="Maintaining.xhtml#Change-Log">Change Logs</a>,
See <a href="https://www.gnu.org/prep/standards/html_node/Change-Log-Concepts.html#Change-Log-Concepts">Change Log Concepts</a> in <cite class="cite">GNU Coding Standards</cite>.
</p>
</li><li>When you write the fix, keep in mind that we can&#8217;t install a change that
would break other systems.  Please think about what effect your change
will have if compiled and/or used on another type of system.

<p>Sometimes people send fixes that <em class="emph">might</em> be an improvement in
general&#8212;but it is hard to be sure of this.  It&#8217;s hard to install
such changes because we have to study them very carefully.  Of course,
a good explanation of the reasoning by which you concluded the change
was correct can help convince us.
</p>
<p>The safest changes are changes to the files or portions of files that
are only used for a particular machine or a particular system.  These
are safe because they can&#8217;t create new bugs on other machines or
systems.
</p>
<p>Please help us keep up with the workload by designing the patch in a
form that is clearly safe to install.
</p></li></ul>

</div>
</div>



</body>
</html>
