<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>24 Major and Minor Modes (GNU Emacs Manual)</title>

<meta name="description" content="24 Major and Minor Modes (GNU Emacs Manual)"/>
<meta name="keywords" content="24 Major and Minor Modes (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Indentation.xhtml#Indentation" rel="next" title="25 Indentation"/>
<link href="International.xhtml#International" rel="prev" title="23 International Character Set Support"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Modes">

<h2 class="chapter" id="Major-and-Minor-Modes">24 Major and Minor Modes</h2>

<p>Emacs contains many <em class="dfn">editing modes</em> that alter its basic
behavior in useful ways.  These are divided into <em class="dfn">major modes</em> and
<em class="dfn">minor modes</em>.
</p>
<p>Major modes provide specialized facilities for working on a
particular file type, such as a C source file (see <a class="pxref" href="Programs.xhtml#Programs">Editing Programs</a>), or a
particular type of non-file buffer, such as a shell buffer
(see <a class="pxref" href="Shell.xhtml#Shell">Running Shell Commands from Emacs</a>).  Major modes are mutually exclusive; each buffer has
one and only one major mode at any time.
</p>
<p>Minor modes are optional features which you can turn on or off, not
necessarily specific to a type of file or buffer.  For example, Auto
Fill mode is a minor mode in which <kbd class="key">SPC</kbd> breaks lines between
words as you type (see <a class="pxref" href="Text.xhtml#Auto-Fill">Auto Fill Mode</a>).  Minor modes are independent of
one another, and of the selected major mode.
</p>

<div class="section-level-extent" id="Major-Modes">
<h3 class="section" id="Major-Modes-1">24.1 Major Modes</h3>
<a class="index-entry-id" id="index-major-modes"></a>
<a class="index-entry-id" id="index-mode_002c-major"></a>
<a class="index-entry-id" id="index-TAB-_0028and-major-modes_0029"></a>
<a class="index-entry-id" id="index-DEL-_0028and-major-modes_0029"></a>
<a class="index-entry-id" id="index-C_002dj-_0028and-major-modes_0029"></a>

<p>Every buffer possesses a major mode, which determines the editing
behavior of Emacs while that buffer is current.  The mode line
normally shows the name of the current major mode, in parentheses
(see <a class="pxref" href="Screen.xhtml#Mode-Line">The Mode Line</a>).
</p>
<p>The least specialized major mode is called <em class="dfn">Fundamental mode</em>.
This mode has no mode-specific redefinitions or variable settings, so
that each Emacs command behaves in its most general manner, and each
user option variable is in its default state.
</p>
<p>For editing text of a specific type that Emacs knows about, such as
Lisp code or English text, you typically use a more specialized major
mode, such as Lisp mode or Text mode.  Most major modes fall into
three major groups.  The first group contains modes for normal text,
either plain or with mark-up.  It includes Text mode, HTML mode, SGML
mode, TeX mode and Outline mode.  The second group contains modes
for specific programming languages.  These include Lisp mode (which
has several variants), C mode, Fortran mode, and others.  The third
group consists of major modes that are not associated directly with
files; they are used in buffers created for specific purposes by
Emacs.  Examples include Dired mode for buffers made by Dired
(see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>), Message mode for buffers made by <kbd class="kbd">C-x m</kbd>
(see <a class="pxref" href="Sending-Mail.xhtml#Sending-Mail">Sending Mail</a>), and Shell mode for buffers used to communicate
with an inferior shell process (see <a class="pxref" href="Shell.xhtml#Interactive-Shell">Interactive Subshell</a>).
</p>
<p>Usually, the major mode is automatically set by Emacs, when you
first visit a file or create a buffer (see <a class="pxref" href="#Choosing-Modes">Choosing File Modes</a>).  You
can explicitly select a new major mode by using an <kbd class="kbd">M-x</kbd> command.
Take the name of the mode and add <code class="code">-mode</code> to get the name of the
command to select that mode (e.g., <kbd class="kbd">M-x lisp-mode</kbd> enters Lisp
mode).  Since every buffer has exactly one major mode, there is no way
to &#8220;turn off&#8221; a major mode; instead you must switch to a different
one.
</p>
<a class="index-entry-id" id="index-major_002dmode"></a>
<p>The value of the buffer-local variable <code class="code">major-mode</code> is a symbol
with the same name as the major mode command (e.g., <code class="code">lisp-mode</code>).
This variable is set automatically; you should not change it yourself.
</p>
<p>The default value of <code class="code">major-mode</code> determines the major mode to
use for files that do not specify a major mode, and for new buffers
created with <kbd class="kbd">C-x b</kbd>.  Normally, this default value is the symbol
<code class="code">fundamental-mode</code>, which specifies Fundamental mode.  You can
change this default value via the Customization interface (see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>), or by adding a line like this to your init file
(see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>):
</p>
<div class="example">
<pre class="example-preformatted">(setq-default major-mode 'text-mode)
</pre></div>

<p>If the default value of <code class="code">major-mode</code> is <code class="code">nil</code>, the major
mode is taken from the previously current buffer.
</p>
<p>Specialized major modes often change the meanings of certain keys to
do something more suitable for the mode.  For instance, programming
language modes bind <kbd class="key">TAB</kbd> to indent the current line according to
the rules of the language (see <a class="pxref" href="Indentation.xhtml#Indentation">Indentation</a>).  The keys that are
commonly changed are <kbd class="key">TAB</kbd>, <kbd class="key">DEL</kbd>, and <kbd class="kbd">C-j</kbd>.  Many modes
also define special commands of their own, usually bound to key
sequences whose prefix key is <kbd class="kbd">C-c</kbd> (see <a class="pxref" href="Keys.xhtml">Keys</a>).  Major modes
can also alter user options and variables; for instance, programming
language modes typically set a buffer-local value for the variable
<code class="code">comment-start</code>, which determines how source code comments are
delimited (see <a class="pxref" href="Programs.xhtml#Comments">Manipulating Comments</a>).
</p>
<p>To view the documentation for the current major mode, including a
list of its key bindings, type <kbd class="kbd">C-h m</kbd> (<code class="code">describe-mode</code>).
See <a class="xref" href="Help.xhtml#Misc-Help">Other Help Commands</a>.
</p>
<a class="index-entry-id" id="index-mode-hook"></a>
<a class="index-entry-id" id="index-prog_002dmode_002dhook"></a>
<p>Every major mode, apart from Fundamental mode, defines a <em class="dfn">mode
hook</em>, a customizable list of Lisp functions to run each time the mode
is enabled in a buffer.  See <a class="xref" href="Customization.xhtml#Hooks">Hooks</a>, for more information about
hooks.  Each mode hook is named after its major mode, e.g., Fortran
mode has <code class="code">fortran-mode-hook</code>.  Furthermore, all text-based major
modes run <code class="code">text-mode-hook</code>, and many programming language modes
<a class="footnote" id="DOCF10" href="#FOOT10"><sup>10</sup></a> (including all those distributed with Emacs) run
<code class="code">prog-mode-hook</code>, prior to running their own mode hooks.  Hook
functions can look at the value of the variable <code class="code">major-mode</code> to
see which mode is actually being entered.
</p>
<p>Mode hooks are commonly used to enable minor modes (see <a class="pxref" href="#Minor-Modes">Minor Modes</a>).  For example, you can put the following lines in your init
file to enable Flyspell minor mode in all text-based major modes
(see <a class="pxref" href="Fixit.xhtml#Spelling">Checking and Correcting Spelling</a>), and ElDoc minor mode in Emacs Lisp mode
(see <a class="pxref" href="Programs.xhtml#Programming-Language-Doc">Programming Language Documentation Lookup</a>):
</p>
<div class="example">
<pre class="example-preformatted">(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
</pre></div>

</div>
<div class="section-level-extent" id="Minor-Modes">
<h3 class="section" id="Minor-Modes-1">24.2 Minor Modes</h3>
<a class="index-entry-id" id="index-minor-modes"></a>
<a class="index-entry-id" id="index-mode_002c-minor"></a>

<p>A minor mode is an optional editing mode that alters the behavior of
Emacs in some well-defined way.  Unlike major modes, any number of
minor modes can be in effect at any time.  Some minor modes are
<em class="dfn">buffer-local</em>, and can be turned on (enabled) in certain buffers
and off (disabled) in others.  Other minor modes are <em class="dfn">global</em>:
while enabled, they affect everything you do in the Emacs session, in
all buffers.  Most minor modes are disabled by default, but a few are
enabled by default.
</p>
<p>Most buffer-local minor modes say in the mode line when they are
enabled, just after the major mode indicator.  For example,
&#8216;<samp class="samp">Fill</samp>&#8217; in the mode line means that Auto Fill mode is enabled.
See <a class="xref" href="Screen.xhtml#Mode-Line">The Mode Line</a>.
</p>
<a class="index-entry-id" id="index-mode-commands-for-minor-modes"></a>
<p>Like major modes, each minor mode is associated with a <em class="dfn">mode
command</em>, whose name consists of the mode name followed by
&#8216;<samp class="samp">-mode</samp>&#8217;.  For instance, the mode command for Auto Fill mode is
<code class="code">auto-fill-mode</code>.  But unlike a major mode command, which simply
enables the mode, the mode command for a minor mode can either enable
or disable it:
</p>
<ul class="itemize mark-bullet">
<li>If you invoke the mode command directly with no prefix argument
(either via <kbd class="kbd">M-x</kbd>, or by binding it to a key and typing that key;
see <a class="pxref" href="Customization.xhtml#Key-Bindings">Customizing Key Bindings</a>), that <em class="dfn">toggles</em> the minor mode.  The minor
mode is turned on if it was off, and turned off if it was on.

</li><li>If you invoke the mode command with a prefix argument, the minor mode
is unconditionally turned off if that argument is zero or negative;
otherwise, it is unconditionally turned on.

</li><li>If the mode command is called via Lisp, the minor mode is
unconditionally turned on if the argument is omitted or <code class="code">nil</code>.
This makes it easy to turn on a minor mode from a major mode&#8217;s mode
hook (see <a class="pxref" href="#Major-Modes">Major Modes</a>).  A non-<code class="code">nil</code> argument is handled like
an interactive prefix argument, as described above.
</li></ul>

<p>Most minor modes also have a <em class="dfn">mode variable</em>, with the same name
as the mode command.  Its value is non-<code class="code">nil</code> if the mode is
enabled, and <code class="code">nil</code> if it is disabled.  In general, you should not
try to enable or disable the mode by changing the value of the mode
variable directly in Lisp; you should run the mode command instead.
However, setting the mode variable through the Customize interface
(see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>) will always properly enable or disable
the mode, since Customize automatically runs the mode command for you.
</p>
<p>The following is a list of some buffer-local minor modes:
</p>
<ul class="itemize mark-bullet">
<li>Abbrev mode automatically expands text based on pre-defined
abbreviation definitions.  See <a class="xref" href="Abbrevs.xhtml#Abbrevs">Abbrevs</a>.

</li><li>Auto Fill mode inserts newlines as you type to prevent lines from
becoming too long.  See <a class="xref" href="Text.xhtml#Filling">Filling Text</a>.

</li><li>Auto Save mode saves the buffer contents periodically to reduce the
amount of work you can lose in case of a crash.  See <a class="xref" href="Files.xhtml#Auto-Save">Auto-Saving: Protection Against Disasters</a>.

</li><li>Electric Quote mode automatically converts quotation marks.  For
example, it requotes text typed <kbd class="kbd">`like this'</kbd> to text <code class="t">‘like
this’</code>.  You can control what kind of text it operates in, and you can
disable it entirely in individual buffers.  See <a class="xref" href="Text.xhtml#Quotation-Marks">Quotation Marks</a>.

</li><li>Enriched mode enables editing and saving of formatted text.
See <a class="xref" href="Text.xhtml#Enriched-Text">Enriched Text</a>.

</li><li>Flyspell mode automatically highlights misspelled words.
See <a class="xref" href="Fixit.xhtml#Spelling">Checking and Correcting Spelling</a>.

</li><li>Font-Lock mode automatically highlights certain textual units found in
programs.  It is enabled globally by default, but you can disable it
in individual buffers.  See <a class="xref" href="Display.xhtml#Faces">Text Faces</a>.

</li><li>Display Line Numbers mode is a convenience wrapper around
<code class="code">display-line-numbers</code>, setting it using the value of
<code class="code">display-line-numbers-type</code>.  See <a class="xref" href="Display.xhtml#Display-Custom">Customization of Display</a>.

</li><li>Outline minor mode provides similar facilities to the major mode
called Outline mode.  See <a class="xref" href="Text.xhtml#Outline-Mode">Outline Mode</a>.

</li><li><a class="index-entry-id" id="index-Overwrite-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Overwrite"></a>
<a class="index-entry-id" id="index-overwrite_002dmode"></a>
<a class="index-entry-id" id="index-INSERT"></a>
Overwrite mode causes ordinary printing characters to replace existing
text instead of shoving it to the right.  For example, if point is in
front of the &#8216;<samp class="samp">B</samp>&#8217; in &#8216;<samp class="samp">FOOBAR</samp>&#8217;, then in Overwrite mode typing
a <kbd class="kbd">G</kbd> changes it to &#8216;<samp class="samp">FOOGAR</samp>&#8217;, instead of producing
&#8216;<samp class="samp">FOOGBAR</samp>&#8217; as usual.  In Overwrite mode, the command <kbd class="kbd">C-q</kbd>
inserts the next character whatever it may be, even if it is a
digit&#8212;this gives you a way to insert a character instead of
replacing an existing character.  The mode command,
<code class="code">overwrite-mode</code>, is bound to the <kbd class="key">Insert</kbd> key.

</li><li><a class="index-entry-id" id="index-binary_002doverwrite_002dmode"></a>
Binary Overwrite mode is a variant of Overwrite mode for editing
binary files; it treats newlines and tabs like other characters, so
that they overwrite other characters and can be overwritten by them.
In Binary Overwrite mode, digits after <kbd class="kbd">C-q</kbd> specify an octal
character code, as usual.

</li><li>Visual Line mode performs word wrapping, causing long lines to be
wrapped at word boundaries.  See <a class="xref" href="Display.xhtml#Visual-Line-Mode">Visual Line Mode</a>.
</li></ul>

<p>And here are some useful global minor modes:
</p>
<ul class="itemize mark-bullet">
<li>Column Number mode enables display of the current column number in the
mode line.  See <a class="xref" href="Screen.xhtml#Mode-Line">The Mode Line</a>.

</li><li>Delete Selection mode causes text insertion to first delete the text
in the region, if the region is active.  See <a class="xref" href="Mark.xhtml#Using-Region">Operating on the Region</a>.

</li><li>Icomplete mode displays an indication of available completions when
you are in the minibuffer and completion is active.  See <a class="xref" href="Buffers.xhtml#Icomplete">Fast minibuffer selection</a>.

</li><li>Line Number mode enables display of the current line number in the
mode line.  It is enabled by default.  See <a class="xref" href="Screen.xhtml#Mode-Line">The Mode Line</a>.

</li><li>Menu Bar mode gives each frame a menu bar.  It is enabled by default.
See <a class="xref" href="Frames.xhtml#Menu-Bars">Menu Bars</a>.

</li><li>Scroll Bar mode gives each window a scroll bar.  It is enabled by
default, but the scroll bar is only displayed on graphical terminals.
See <a class="xref" href="Frames.xhtml#Scroll-Bars">Scroll Bars</a>.

</li><li>Tool Bar mode gives each frame a tool bar.  It is enabled by default,
but the tool bar is only displayed on graphical terminals.  See <a class="xref" href="Frames.xhtml#Tool-Bars">Tool Bars</a>.

</li><li>Tab Bar mode gives each frame a tab bar.  See <a class="xref" href="Frames.xhtml#Tab-Bars">Tab Bars</a>.

</li><li>Tab Line mode gives each window a tab line.  See <a class="xref" href="Windows.xhtml#Tab-Line">Window Tab Line</a>.

</li><li>Transient Mark mode highlights the region, and makes many Emacs
commands operate on the region when the mark is active.  It is enabled
by default.  See <a class="xref" href="Mark.xhtml#Mark">The Mark and the Region</a>.
</li></ul>

</div>
<div class="section-level-extent" id="Choosing-Modes">
<h3 class="section" id="Choosing-File-Modes">24.3 Choosing File Modes</h3>

<a class="index-entry-id" id="index-choosing-a-major-mode"></a>
<a class="index-entry-id" id="index-choosing-a-minor-mode"></a>
<a class="index-entry-id" id="index-auto_002dmode_002dalist"></a>
<p>When you visit a file, Emacs chooses a major mode automatically.
Normally, it makes the choice based on the file name&#8212;for example,
files whose names end in &#8216;<samp class="samp">.c</samp>&#8217; are normally edited in C mode&#8212;but
sometimes it chooses the major mode based on special text in the file.
This special text can also be used to enable buffer-local minor modes.
</p>
<p>Here is the exact procedure:
</p>
<p>First, Emacs checks whether the file contains file-local mode
variables.  See <a class="xref" href="Customization.xhtml#File-Variables">Local Variables in Files</a>.  If there is a file-local variable
that specifies a major mode, then Emacs uses that major mode, ignoring
all other criteria.  There are several methods to specify a major mode
using a file-local variable; the simplest is to put the mode name in
the first nonblank line, preceded and followed by &#8216;<samp class="samp">-*-</samp>&#8217;.  Other
text may appear on the line as well.  For example,
</p>
<div class="example">
<pre class="example-preformatted">; -*-Lisp-*-
</pre></div>

<p>tells Emacs to use Lisp mode.  Note how the semicolon is used to make
Lisp treat this line as a comment.  You could equivalently write
</p>
<div class="example">
<pre class="example-preformatted">; -*- mode: Lisp;-*-
</pre></div>

<p>You can also use file-local variables to specify buffer-local minor
modes, by using <code class="code">eval</code> specifications.  For example, this first
nonblank line puts the buffer in Lisp mode and enables Auto-Fill mode:
</p>
<div class="example">
<pre class="example-preformatted">; -*- mode: Lisp; eval: (auto-fill-mode 1); -*-
</pre></div>

<p>Note, however, that it is usually inappropriate to enable minor modes
this way, since most minor modes represent individual user
preferences.  If you personally want to use a minor mode for a
particular file type, it is better to enable the minor mode via a
major mode hook (see <a class="pxref" href="#Major-Modes">Major Modes</a>).
</p>
<p>Second, Emacs checks whether the file&#8217;s extension matches an entry
in any directory-local <code class="code">auto-mode-alist</code>.  These are found using
the <samp class="file">.dir-locals.el</samp> facility (see <a class="pxref" href="Customization.xhtml#Directory-Variables">Per-Directory Local Variables</a>).
</p>
<a class="index-entry-id" id="index-interpreter_002dmode_002dalist"></a>
<p>Third, if there is no file variable specifying a major mode, Emacs
checks whether the file&#8217;s contents begin with &#8216;<samp class="samp">#!</samp>&#8217;.  If so, that
indicates that the file can serve as an executable shell command,
which works by running an interpreter named on the file&#8217;s first line
(the rest of the file is used as input to the interpreter).
Therefore, Emacs tries to use the interpreter name to choose a mode.
For instance, a file that begins with &#8216;<samp class="samp">#!/usr/bin/perl</samp>&#8217; is opened
in Perl mode.  The variable <code class="code">interpreter-mode-alist</code> specifies
the correspondence between interpreter program names and major modes.
</p>
<p>When the first line starts with &#8216;<samp class="samp">#!</samp>&#8217;, you usually cannot use
the &#8216;<samp class="samp">-*-</samp>&#8217; feature on the first line, because the system would get
confused when running the interpreter.  So Emacs looks for &#8216;<samp class="samp">-*-</samp>&#8217;
on the second line in such files as well as on the first line.  The
same is true for man pages which start with the magic string
&#8216;<samp class="samp">'\&quot;</samp>&#8217; to specify a list of troff preprocessors.
</p>
<a class="index-entry-id" id="index-magic_002dmode_002dalist"></a>
<p>Fourth, Emacs tries to determine the major mode by looking at the
text at the start of the buffer, based on the variable
<code class="code">magic-mode-alist</code>.  By default, this variable is <code class="code">nil</code> (an
empty list), so Emacs skips this step; however, you can customize it
in your init file (see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>).  The value should be a list of
elements of the form
</p>
<div class="example">
<pre class="example-preformatted">(<var class="var">regexp</var> . <var class="var">mode-function</var>)
</pre></div>

<p>where <var class="var">regexp</var> is a regular expression (see <a class="pxref" href="Search.xhtml#Regexps">Syntax of Regular Expressions</a>), and
<var class="var">mode-function</var> is a major mode command.  If the text at the
beginning of the file matches <var class="var">regexp</var>, Emacs chooses the major
mode specified by <var class="var">mode-function</var>.
</p>
<p>Alternatively, an element of <code class="code">magic-mode-alist</code> may have the form
</p>
<div class="example">
<pre class="example-preformatted">(<var class="var">match-function</var> . <var class="var">mode-function</var>)
</pre></div>

<p>where <var class="var">match-function</var> is a Lisp function that is called at the
beginning of the buffer; if the function returns non-<code class="code">nil</code>, Emacs
set the major mode with <var class="var">mode-function</var>.
</p>
<p>Fifth&#8212;if Emacs still hasn&#8217;t found a suitable major mode&#8212;it
looks at the file&#8217;s name.  The correspondence between file names and
major modes is controlled by the variable <code class="code">auto-mode-alist</code>.  Its
value is a list in which each element has this form,
</p>
<div class="example">
<pre class="example-preformatted">(<var class="var">regexp</var> . <var class="var">mode-function</var>)
</pre></div>

<p>or this form,
</p>
<div class="example">
<pre class="example-preformatted">(<var class="var">regexp</var> <var class="var">mode-function</var> <var class="var">flag</var>)
</pre></div>

<p>For example, one element normally found in the list has the form
<code class="code">(<code class="t">&quot;\\.c\\'&quot;</code> . c-mode)</code>, and it is responsible for selecting C
mode for files whose names end in <samp class="file">.c</samp>.  (Note that &#8216;<samp class="samp">\\</samp>&#8217; is
needed in Lisp syntax to include a &#8216;<samp class="samp">\</samp>&#8217; in the string, which must
be used to suppress the special meaning of &#8216;<samp class="samp">.</samp>&#8217; in regexps.)
</p>
<a class="index-entry-id" id="index-backup-files_002c-choosing-a-major-mode"></a>
<a class="index-entry-id" id="index-encrypted-files_002c-choosing-a-major-mode"></a>
<p>If the element has the form <code class="code">(<var class="var">regexp</var>&#160;<var class="var">mode-function</var>&#160;<var class="var">flag</var>)</code><!-- /@w --> and <var class="var">flag</var> is non-<code class="code">nil</code>, then after calling
<var class="var">mode-function</var> (if it is non-<code class="code">nil</code>), Emacs discards the
suffix that matched <var class="var">regexp</var> and searches the list again for
another match.  This &#8220;recursive extension stripping&#8221; is used for
files which have multiple extensions, and the &#8220;outer&#8221; extension
hides the &#8220;inner&#8221; one that actually specifies the right mode.  For
example, backup files and GPG-encrypted files with <samp class="file">.gpg</samp>
extension use this feature.
</p>
<a class="index-entry-id" id="index-auto_002dmode_002dcase_002dfold"></a>
<p>On GNU/Linux and other systems with case-sensitive file names, Emacs
performs a case-sensitive search through <code class="code">auto-mode-alist</code>; if
this search fails, it performs a second case-insensitive search
through the alist.  To suppress the second search, change the variable
<code class="code">auto-mode-case-fold</code> to <code class="code">nil</code>.  On systems with
case-insensitive file names, such as Microsoft Windows, Emacs performs
a single case-insensitive search through <code class="code">auto-mode-alist</code>.
</p>
<a class="index-entry-id" id="index-magic_002dfallback_002dmode_002dalist"></a>
<p>Finally, if Emacs <em class="emph">still</em> hasn&#8217;t found a major mode to use, it
compares the text at the start of the buffer to the variable
<code class="code">magic-fallback-mode-alist</code>.  This variable works like
<code class="code">magic-mode-alist</code>, described above, except that it is consulted
only <em class="emph">after</em> <code class="code">auto-mode-alist</code>.  By default,
<code class="code">magic-fallback-mode-alist</code> contains forms that check for image
files, HTML/XML/SGML files, PostScript files, and Unix style Conf
files.
</p>
<a class="index-entry-id" id="index-major_002dmode_002dremap_002dalist"></a>
<p>Once a major mode is found, Emacs does a final check to see if the
mode has been remapped by <code class="code">major-mode-remap-alist</code>, in which case
it uses the remapped mode instead.  This is used when several
different major modes can be used for the same file type, so you can
specify which mode you prefer.
</p>
<a class="index-entry-id" id="index-normal_002dmode"></a>
<p>If you have changed the major mode of a buffer, you can return to
the major mode Emacs would have chosen automatically, by typing
<kbd class="kbd">M-x normal-mode</kbd>.  This is the same function that
<code class="code">find-file</code> calls to choose the major mode.  If the buffer is
visiting a file, this command also processes the file&#8217;s &#8216;<samp class="samp">-*-</samp>&#8217;
line and file-local variables list (if any).  See <a class="xref" href="Customization.xhtml#File-Variables">Local Variables in Files</a>.
If the buffer doesn&#8217;t visit a file, the command processes only the
major mode specification, if any, in the &#8216;<samp class="samp">-*-</samp>&#8217; line and in the
file-local variables list.
</p>
<a class="index-entry-id" id="index-change_002dmajor_002dmode_002dwith_002dfile_002dname"></a>
<p>The commands <kbd class="kbd">C-x C-w</kbd> and <code class="code">set-visited-file-name</code> change to
a new major mode if the new file name implies a mode (see <a class="pxref" href="Files.xhtml#Saving">Saving Files</a>).
(<kbd class="kbd">C-x C-s</kbd> does this too, if the buffer wasn&#8217;t visiting a file.)
However, this does not happen if the buffer contents specify a major
mode, and certain special major modes do not allow the mode to
change.  You can turn off this mode-changing feature by setting
<code class="code">change-major-mode-with-file-name</code> to <code class="code">nil</code>.
</p></div>
</div>
<div class="footnotes-segment">
<h4 class="footnotes-heading">Footnotes</h4>

<h5 class="footnote-body-heading"><a id="FOOT10" href="#DOCF10">(10)</a></h5>
<p>More specifically, the modes which are &#8220;derived&#8221; from
<code class="code">prog-mode</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html#Derived-Modes">Derived Modes</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>).</p>
</div>



</body>
</html>
