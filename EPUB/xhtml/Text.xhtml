<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>26 Commands for Human Languages (GNU Emacs Manual)</title>

<meta name="description" content="26 Commands for Human Languages (GNU Emacs Manual)"/>
<meta name="keywords" content="26 Commands for Human Languages (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Programs.xhtml#Programs" rel="next" title="27 Editing Programs"/>
<link href="Indentation.xhtml#Indentation" rel="prev" title="25 Indentation"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
ul.mark-none {list-style-type: none}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Text">

<h2 class="chapter" id="Commands-for-Human-Languages">26 Commands for Human Languages</h2>
<a class="index-entry-id" id="index-text"></a>
<a class="index-entry-id" id="index-manipulating-text"></a>

<p>This chapter describes Emacs commands that act on <em class="dfn">text</em>, by
which we mean sequences of characters in a human language (as opposed
to, say, a computer programming language).  These commands act in ways
that take into account the syntactic and stylistic conventions of
human languages: conventions involving words, sentences, paragraphs,
and capital letters.  There are also commands for <em class="dfn">filling</em>, which
means rearranging the lines of a paragraph to be approximately equal
in length.  These commands, while intended primarily for editing text,
are also often useful for editing programs.
</p>
<p>Emacs has several major modes for editing human-language text.  If
the file contains ordinary text, use Text mode, which customizes Emacs
in small ways for the syntactic conventions of text.  Outline mode
provides special commands for operating on text with an outline
structure.  See <a class="xref" href="#Outline-Mode">Outline Mode</a>.
</p>
<p>Org mode extends Outline mode and turns Emacs into a full-fledged
organizer: you can manage TODO lists, store notes and publish them in
many formats.
See the Org Info manual, which is distributed with Emacs.
</p>
<p>Emacs has other major modes for text which contains embedded
commands, such as TeX and LaTeX (see <a class="pxref" href="#TeX-Mode">TeX Mode</a>); HTML and
SGML (see <a class="pxref" href="#HTML-Mode">SGML and HTML Modes</a>); XML
(see the nXML mode Info manual, which is distributed with Emacs);
and Groff and Nroff (see <a class="pxref" href="#Nroff-Mode">Nroff Mode</a>).
</p>
<a class="index-entry-id" id="index-ASCII-art"></a>
<p>If you need to edit ASCII art pictures made out of text characters,
use Picture mode, a special major mode for editing such pictures.
See <a class="xref" href="Picture-Mode.xhtml#Picture-Mode">Editing Pictures</a>.
</p>


<div class="section-level-extent" id="Words">
<h3 class="section" id="Words-1">26.1 Words</h3>
<a class="index-entry-id" id="index-words"></a>
<a class="index-entry-id" id="index-Meta-commands-and-words"></a>

<p>Emacs defines several commands for moving over or operating on
words:
</p>
<dl class="table">
<dt><kbd class="kbd">M-f</kbd></dt>
<dd><p>Move forward over a word (<code class="code">forward-word</code>).
</p></dd>
<dt><kbd class="kbd">M-b</kbd></dt>
<dd><p>Move backward over a word (<code class="code">backward-word</code>).
</p></dd>
<dt><kbd class="kbd">M-d</kbd></dt>
<dd><p>Kill up to the end of a word (<code class="code">kill-word</code>).
</p></dd>
<dt><kbd class="kbd">M-<kbd class="key">DEL</kbd></kbd></dt>
<dd><p>Kill back to the beginning of a word (<code class="code">backward-kill-word</code>).
</p></dd>
<dt><kbd class="kbd">M-@</kbd></dt>
<dd><p>Set mark at the end of the next word (<code class="code">mark-word</code>).
</p></dd>
<dt><kbd class="kbd">M-t</kbd></dt>
<dd><p>Transpose two words or drag a word across others
(<code class="code">transpose-words</code>).
</p></dd>
</dl>

<p>Notice how these keys form a series that parallels the character-based
<kbd class="kbd">C-f</kbd>, <kbd class="kbd">C-b</kbd>, <kbd class="kbd">C-d</kbd>, <kbd class="key">DEL</kbd> and <kbd class="kbd">C-t</kbd>.  <kbd class="kbd">M-@</kbd> is
cognate to <kbd class="kbd">C-@</kbd>, which is an alias for <kbd class="kbd">C-<kbd class="key">SPC</kbd></kbd>.
</p>
<a class="index-entry-id" id="index-M_002df"></a>
<a class="index-entry-id" id="index-M_002db"></a>
<a class="index-entry-id" id="index-forward_002dword"></a>
<a class="index-entry-id" id="index-backward_002dword"></a>
<p>The commands <kbd class="kbd">M-f</kbd> (<code class="code">forward-word</code>) and <kbd class="kbd">M-b</kbd>
(<code class="code">backward-word</code>) move forward and backward over words.  These
<kbd class="key">Meta</kbd>-based key sequences are analogous to the key sequences
<kbd class="kbd">C-f</kbd> and <kbd class="kbd">C-b</kbd>, which move over single characters.  The
analogy extends to numeric arguments, which serve as repeat counts.
<kbd class="kbd">M-f</kbd> with a negative argument moves backward, and <kbd class="kbd">M-b</kbd> with
a negative argument moves forward.  Forward motion stops right after
the last letter of the word, while backward motion stops right before
the first letter.
</p>
<a class="index-entry-id" id="index-M_002dd"></a>
<a class="index-entry-id" id="index-kill_002dword"></a>
<p><kbd class="kbd">M-d</kbd> (<code class="code">kill-word</code>) kills the word after point.  To be
precise, it kills everything from point to the place <kbd class="kbd">M-f</kbd> would
move to.  Thus, if point is in the middle of a word, <kbd class="kbd">M-d</kbd> kills
just the part after point.  If some punctuation comes between point
and the next word, it is killed along with the word.  (If you wish to
kill only the next word but not the punctuation before it, simply do
<kbd class="kbd">M-f</kbd> to get the end, and kill the word backwards with
<kbd class="kbd">M-<kbd class="key">DEL</kbd></kbd>.)  <kbd class="kbd">M-d</kbd> takes arguments just like <kbd class="kbd">M-f</kbd>.
</p>
<a class="index-entry-id" id="index-backward_002dkill_002dword"></a>
<a class="index-entry-id" id="index-M_002dDEL"></a>
<p><kbd class="kbd">M-<kbd class="key">DEL</kbd></kbd> (<code class="code">backward-kill-word</code>) kills the word before
point.  It kills everything from point back to where <kbd class="kbd">M-b</kbd> would
move to.  For instance, if point is after the space in &#8216;<samp class="samp">FOO,&#160;BAR</samp>&#8217;<!-- /@w -->, it kills &#8216;<samp class="samp">FOO,&#160;</samp>&#8217;<!-- /@w -->.  If you wish to kill just
&#8216;<samp class="samp">FOO</samp>&#8217;, and not the comma and the space, use <kbd class="kbd">M-b M-d</kbd> instead
of <kbd class="kbd">M-<kbd class="key">DEL</kbd></kbd>.
</p>
<p><kbd class="kbd">M-t</kbd> (<code class="code">transpose-words</code>) exchanges the word before or
containing point with the following word.  The delimiter characters between
the words do not move.  For example, &#8216;<samp class="samp">FOO,&#160;BAR</samp>&#8217;<!-- /@w --> transposes into
&#8216;<samp class="samp">BAR,&#160;FOO</samp>&#8217;<!-- /@w --> rather than &#8216;<samp class="samp">BAR&#160;FOO,<!-- /@w --></samp>&#8217;.  See <a class="xref" href="Fixit.xhtml#Transpose">Transposing Text</a>, for
more on transposition.
</p>
<a class="index-entry-id" id="index-M_002d_0040-1"></a>
<p>To operate on words with an operation which acts on the region, use
the command <kbd class="kbd">M-@</kbd> (<code class="code">mark-word</code>).  This command sets the mark
where <kbd class="kbd">M-f</kbd> would move to.  See <a class="xref" href="Mark.xhtml#Marking-Objects">Commands to Mark Textual Objects</a>, for more
information about this command.
</p>
<p>The word commands&#8217; understanding of word boundaries is controlled by
the syntax table.  Any character can, for example, be declared to be a
word delimiter.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Tables.html#Syntax-Tables">Syntax Tables</a> in <cite class="cite">The Emacs
Lisp Reference Manual</cite>.
</p>
<p>In addition, see <a class="ref" href="Basic.xhtml#Position-Info">Cursor Position Information</a> for the <kbd class="kbd">M-=</kbd>
(<code class="code">count-words-region</code>) and <kbd class="kbd">M-x count-words</kbd> commands, which
count and report the number of words in the region or buffer.
</p>
</div>
<div class="section-level-extent" id="Sentences">
<h3 class="section" id="Sentences-1">26.2 Sentences</h3>
<a class="index-entry-id" id="index-sentences"></a>
<a class="index-entry-id" id="index-manipulating-sentences"></a>

<p>The Emacs commands for manipulating sentences and paragraphs are
mostly on Meta keys, like the word-handling commands.
</p>
<dl class="table">
<dt><kbd class="kbd">M-a</kbd></dt>
<dd><p>Move back to the beginning of the sentence (<code class="code">backward-sentence</code>).
</p></dd>
<dt><kbd class="kbd">M-e</kbd></dt>
<dd><p>Move forward to the end of the sentence (<code class="code">forward-sentence</code>).
</p></dd>
<dt><kbd class="kbd">M-k</kbd></dt>
<dd><p>Kill forward to the end of the sentence (<code class="code">kill-sentence</code>).
</p></dd>
<dt><kbd class="kbd">C-x <kbd class="key">DEL</kbd></kbd></dt>
<dd><p>Kill back to the beginning of the sentence (<code class="code">backward-kill-sentence</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002da"></a>
<a class="index-entry-id" id="index-M_002de"></a>
<a class="index-entry-id" id="index-backward_002dsentence"></a>
<a class="index-entry-id" id="index-forward_002dsentence"></a>
<p>The commands <kbd class="kbd">M-a</kbd> (<code class="code">backward-sentence</code>) and <kbd class="kbd">M-e</kbd>
(<code class="code">forward-sentence</code>) move to the beginning and end of the current
sentence, respectively.  Their bindings were chosen to resemble
<kbd class="kbd">C-a</kbd> and <kbd class="kbd">C-e</kbd>, which move to the beginning and end of a
line.  Unlike them, <kbd class="kbd">M-a</kbd> and <kbd class="kbd">M-e</kbd> move over successive
sentences if repeated.
</p>
<p>Moving backward over a sentence places point just before the first
character of the sentence; moving forward places point right after the
punctuation that ends the sentence.  Neither one moves over the
whitespace at the sentence boundary.
</p>
<a class="index-entry-id" id="index-M_002dk"></a>
<a class="index-entry-id" id="index-kill_002dsentence"></a>
<p>Just as <kbd class="kbd">C-a</kbd> and <kbd class="kbd">C-e</kbd> have a kill command, <kbd class="kbd">C-k</kbd>, to
go with them, <kbd class="kbd">M-a</kbd> and <kbd class="kbd">M-e</kbd> have a corresponding kill
command: <kbd class="kbd">M-k</kbd> (<code class="code">kill-sentence</code>) kills from point to the end
of the sentence.  With a positive numeric argument <var class="var">n</var>, it kills
the next <var class="var">n</var> sentences; with a negative argument &#8722;<var class="var">n</var>,
it kills back to the beginning of the <var class="var">n</var>th preceding sentence.
</p>
<a class="index-entry-id" id="index-C_002dx-DEL"></a>
<a class="index-entry-id" id="index-backward_002dkill_002dsentence"></a>
<p>The <kbd class="kbd">C-x <kbd class="key">DEL</kbd></kbd> (<code class="code">backward-kill-sentence</code>) kills back
to the beginning of a sentence.
</p>
<p>The sentence commands assume that you follow the American typist&#8217;s
convention of putting two spaces at the end of a sentence.  That is, a
sentence ends wherever there is a &#8216;<samp class="samp">.</samp>&#8217;, &#8216;<samp class="samp">?</samp>&#8217; or &#8216;<samp class="samp">!</samp>&#8217;
followed by the end of a line or two spaces, with any number of
&#8216;<samp class="samp">)</samp>&#8217;, &#8216;<samp class="samp">]</samp>&#8217;, &#8216;<samp class="samp">'</samp>&#8217;, or &#8216;<samp class="samp">&quot;</samp>&#8217; characters allowed in
between.  A sentence also begins or ends wherever a paragraph begins
or ends.  It is useful to follow this convention, because it allows
the Emacs sentence commands to distinguish between periods that end a
sentence and periods that indicate abbreviations.
</p>
<a class="index-entry-id" id="index-sentence_002dend_002ddouble_002dspace"></a>
<p>If you want to use just one space between sentences, you can set the
variable <code class="code">sentence-end-double-space</code> to <code class="code">nil</code> to make the
sentence commands stop for single spaces.  However, this has a
drawback: there is no way to distinguish between periods that end
sentences and those that indicate abbreviations.  For convenient and
reliable editing, we therefore recommend you follow the two-space
convention.  The variable <code class="code">sentence-end-double-space</code> also
affects filling (see <a class="pxref" href="#Fill-Commands">Explicit Fill Commands</a>).
</p>
<a class="index-entry-id" id="index-sentence_002dend"></a>
<p>The variable <code class="code">sentence-end</code> controls how to recognize the end
of a sentence.  If non-<code class="code">nil</code>, its value should be a regular
expression, which is used to match the last few characters of a
sentence, together with the whitespace following the sentence
(see <a class="pxref" href="Search.xhtml#Regexps">Syntax of Regular Expressions</a>).  If the value is <code class="code">nil</code>, the default, then
Emacs computes sentence ends according to various criteria such as the
value of <code class="code">sentence-end-double-space</code>.
</p>
<a class="index-entry-id" id="index-sentence_002dend_002dwithout_002dperiod"></a>
<p>Some languages, such as Thai, do not use periods to indicate the end
of a sentence.  Set the variable <code class="code">sentence-end-without-period</code> to
<code class="code">t</code> in such cases.
</p>
</div>
<div class="section-level-extent" id="Paragraphs">
<h3 class="section" id="Paragraphs-1">26.3 Paragraphs</h3>
<a class="index-entry-id" id="index-paragraphs"></a>
<a class="index-entry-id" id="index-manipulating-paragraphs"></a>

<p>The Emacs commands for manipulating paragraphs are also on Meta keys.
</p>
<dl class="table">
<dt><kbd class="kbd">M-{</kbd></dt>
<dd><p>Move back to previous paragraph beginning (<code class="code">backward-paragraph</code>).
</p></dd>
<dt><kbd class="kbd">M-}</kbd></dt>
<dd><p>Move forward to next paragraph end (<code class="code">forward-paragraph</code>).
</p></dd>
<dt><kbd class="kbd">M-h</kbd></dt>
<dd><p>Put point and mark around this or next paragraph (<code class="code">mark-paragraph</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002d_007b"></a>
<a class="index-entry-id" id="index-M_002d_007d"></a>
<a class="index-entry-id" id="index-backward_002dparagraph"></a>
<a class="index-entry-id" id="index-forward_002dparagraph"></a>
<p><kbd class="kbd">M-{</kbd> (<code class="code">backward-paragraph</code>) moves to the beginning of the
current or previous paragraph, depending on where point is when the
command is invoked (see below for the definition of a paragraph).
<kbd class="kbd">M-}</kbd> (<code class="code">forward-paragraph</code>) similarly moves to the end of
the current or next paragraph.  If there is a blank line before the
paragraph, <kbd class="kbd">M-{</kbd> moves to the blank line.
</p>
<a class="index-entry-id" id="index-M_002dh"></a>
<a class="index-entry-id" id="index-mark_002dparagraph"></a>
<p>When you wish to operate on a paragraph, type <kbd class="kbd">M-h</kbd>
(<code class="code">mark-paragraph</code>) to set the region around it.  For example,
<kbd class="kbd">M-h C-w</kbd> kills the paragraph around or after point.  <kbd class="kbd">M-h</kbd>
puts point at the beginning and mark at the end of the paragraph point
was in.  If point is between paragraphs (in a run of blank lines, or
at a boundary), <kbd class="kbd">M-h</kbd> sets the region around the paragraph
following point.  If there are blank lines preceding the first line of
the paragraph, one of these blank lines is included in the region.  If
the region is already active, the command sets the mark without
changing point, and each subsequent <kbd class="kbd">M-h</kbd> further advances the
mark by one paragraph.
</p>
<p>The definition of a paragraph depends on the major mode.  In
Fundamental mode, as well as Text mode and related modes, a paragraph
is separated from neighboring paragraphs by one or more
<em class="dfn">blank lines</em>&#8212;lines that are either empty, or consist solely of
space, tab and/or formfeed characters.  In programming language modes,
paragraphs are usually defined in a similar way, so that you can use
the paragraph commands even though there are no paragraphs as such in
a program.
</p>
<p>Note that an indented line is <em class="emph">not</em> itself a paragraph break in
Text mode.  If you want indented lines to separate paragraphs, use
Paragraph-Indent Text mode instead.  See <a class="xref" href="#Text-Mode">Text Mode</a>.
</p>
<p>If you set a fill prefix, then paragraphs are delimited by all lines
which don&#8217;t start with the fill prefix.  See <a class="xref" href="#Filling">Filling Text</a>.
</p>
<a class="index-entry-id" id="index-paragraph_002dstart"></a>
<a class="index-entry-id" id="index-paragraph_002dseparate"></a>
<p>The precise definition of a paragraph boundary is controlled by the
variables <code class="code">paragraph-separate</code> and <code class="code">paragraph-start</code>.  The
value of <code class="code">paragraph-start</code> is a regular expression that should
match lines that either start or separate paragraphs
(see <a class="pxref" href="Search.xhtml#Regexps">Syntax of Regular Expressions</a>).  The value of <code class="code">paragraph-separate</code> is another
regular expression that should match lines that separate paragraphs
without being part of any paragraph (for example, blank lines).  Lines
that start a new paragraph and are contained in it must match only
<code class="code">paragraph-start</code>, not <code class="code">paragraph-separate</code>.  For example,
in Fundamental mode, <code class="code">paragraph-start</code> is <code class="code">&quot;\f\\|[&#160;\t]*$&quot;</code><!-- /@w -->, and <code class="code">paragraph-separate</code> is <code class="code">&quot;[&#160;\t\f]*$&quot;</code><!-- /@w -->.
</p>
<p>Note that <code class="code">paragraph-start</code> and <code class="code">paragraph-separate</code> are
matched against the text at the left margin, which is not necessarily
the beginning of the line, so these regexps should not use &#8216;<samp class="samp">^</samp>&#8217; as
an anchor, to ensure that the paragraph functions will work equally
within a region of text indented by a margin setting.
</p>
</div>
<div class="section-level-extent" id="Pages">
<h3 class="section" id="Pages-1">26.4 Pages</h3>

<a class="index-entry-id" id="index-pages"></a>
<a class="index-entry-id" id="index-formfeed-character"></a>
<p>Within some text files, text is divided into <em class="dfn">pages</em> delimited
by the <em class="dfn">formfeed character</em> (<abbr class="acronym">ASCII</abbr> code 12, also denoted
as &#8216;<samp class="samp">control-L</samp>&#8217;), which is displayed in Emacs as the escape
sequence &#8216;<samp class="samp">^L</samp>&#8217; (see <a class="pxref" href="Display.xhtml#Text-Display">How Text Is Displayed</a>).  Traditionally, when such
text files are printed to hardcopy, each formfeed character forces a
page break.  Most Emacs commands treat it just like any other
character, so you can insert it with <kbd class="kbd">C-q C-l</kbd>, delete it with
<kbd class="key">DEL</kbd>, etc.  In addition, Emacs provides commands to move over
pages and operate on them.
</p>
<dl class="table">
<dt><kbd class="kbd">M-x what-page</kbd></dt>
<dd><p>Display the page number of point, and the line number within that page.
</p></dd>
<dt><kbd class="kbd">C-x [</kbd></dt>
<dd><p>Move point to previous page boundary (<code class="code">backward-page</code>).
</p></dd>
<dt><kbd class="kbd">C-x ]</kbd></dt>
<dd><p>Move point to next page boundary (<code class="code">forward-page</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-p</kbd></dt>
<dd><p>Put point and mark around this page (or another page) (<code class="code">mark-page</code>).
</p></dd>
<dt><kbd class="kbd">C-x l</kbd></dt>
<dd><p>Count the lines in this page (<code class="code">count-lines-page</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-what_002dpage"></a>
<p><kbd class="kbd">M-x what-page</kbd> counts pages from the beginning of the file, and
counts lines within the page, showing both numbers in the echo area.
</p>
<a class="index-entry-id" id="index-C_002dx-_005b"></a>
<a class="index-entry-id" id="index-C_002dx-_005d"></a>
<a class="index-entry-id" id="index-forward_002dpage"></a>
<a class="index-entry-id" id="index-backward_002dpage"></a>
<p>The <kbd class="kbd">C-x [</kbd> (<code class="code">backward-page</code>) command moves point to immediately
after the previous page delimiter.  If point is already right after a page
delimiter, it skips that one and stops at the previous one.  A numeric
argument serves as a repeat count.  The <kbd class="kbd">C-x ]</kbd> (<code class="code">forward-page</code>)
command moves forward past the next page delimiter.
</p>
<a class="index-entry-id" id="index-C_002dx-C_002dp"></a>
<a class="index-entry-id" id="index-mark_002dpage"></a>
<p>The <kbd class="kbd">C-x C-p</kbd> command (<code class="code">mark-page</code>) puts point at the
beginning of the current page (after that page delimiter at the
front), and the mark at the end of the page (after the page delimiter
at the end).
</p>
<p><kbd class="kbd">C-x C-p C-w</kbd> is a handy way to kill a page to move it
elsewhere.  If you move to another page delimiter with <kbd class="kbd">C-x [</kbd> and
<kbd class="kbd">C-x ]</kbd>, then yank the killed page, all the pages will be properly
delimited once again.  Making sure this works as expected is the
reason <kbd class="kbd">C-x C-p</kbd> includes only the following page delimiter in the
region.
</p>
<p>A numeric argument to <kbd class="kbd">C-x C-p</kbd> specifies which page to go to,
relative to the current one.  Zero means the current page, one means
the next page, and &#8722;1 means the previous one.
</p>
<a class="index-entry-id" id="index-C_002dx-l"></a>
<a class="index-entry-id" id="index-count_002dlines_002dpage"></a>
<p>The <kbd class="kbd">C-x l</kbd> command (<code class="code">count-lines-page</code>) is good for deciding
where to break a page in two.  It displays in the echo area the total number
of lines in the current page, and then divides it up into those preceding
the current line and those following, as in
</p>
<div class="example">
<pre class="example-preformatted">Page has 96 (72+25) lines
</pre></div>

<p>Notice that the sum is off by one; this is correct if point is not at the
beginning of a line.
</p>
<a class="index-entry-id" id="index-page_002ddelimiter"></a>
<p>The variable <code class="code">page-delimiter</code> controls where pages begin.  Its
value is a regular expression that matches the beginning of a line
that separates pages (see <a class="pxref" href="Search.xhtml#Regexps">Syntax of Regular Expressions</a>).  The normal value of this
variable is <code class="code">&quot;^\f&quot;</code>, which matches a formfeed character at the
beginning of a line.
</p>
</div>
<div class="section-level-extent" id="Quotation-Marks">
<h3 class="section" id="Quotation-Marks-1">26.5 Quotation Marks</h3>
<a class="index-entry-id" id="index-Quotation-marks"></a>
<a class="index-entry-id" id="index-Electric-Quote-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Electric-Quote"></a>
<a class="index-entry-id" id="index-curly-quotes"></a>
<a class="index-entry-id" id="index-curved-quotes"></a>
<a class="index-entry-id" id="index-guillemets"></a>
<a class="index-entry-id" id="index-electric_002dquote_002dmode"></a>

<p>One common way to quote is the typewriter convention, which quotes
using straight apostrophes &#8216;<samp class="samp">'like this'</samp>&#8217; or double-quotes &#8216;<samp class="samp">&quot;like
this&quot;</samp>&#8217;.  Another common way is the curved quote convention, which uses
left and right single or double quotation marks <code class="t">‘like this’</code> or
<code class="t">“like this”</code><a class="footnote" id="DOCF11" href="#FOOT11"><sup>11</sup></a>.  In text files, typewriter quotes are simple and
portable; curved quotes are less ambiguous and typically look nicer.
</p>
<a class="index-entry-id" id="index-electric_002dquote_002dchars"></a>
<p>Electric Quote mode makes it easier to type curved quotes.  As you
type characters it optionally converts <kbd class="kbd">`</kbd> to <code class="t">‘</code>, <kbd class="kbd">'</kbd> to <code class="t">’</code>,
<kbd class="kbd">``</kbd> to <code class="t">“</code>, and <kbd class="kbd">''</kbd> to <code class="t">”</code>.  It&#8217;s possible to change the
default quotes listed above, by customizing the variable
<code class="code">electric-quote-chars</code>, a list of four characters, where the
items correspond to the left single quote, the right single quote, the
left double quote and the right double quote, respectively, whose
default value is <code class="code">'(?<!-- /@w -->‘&#160;?’&#160;?“&#160;?”)</code><!-- /@w -->.
</p>
<a class="index-entry-id" id="index-electric_002dquote_002dparagraph"></a>
<a class="index-entry-id" id="index-electric_002dquote_002dcomment"></a>
<a class="index-entry-id" id="index-electric_002dquote_002dstring"></a>
<p>You can customize the behavior of Electric Quote mode by customizing
variables that control where it is active.  It is active in text
paragraphs if <code class="code">electric-quote-paragraph</code> is non-<code class="code">nil</code>, in
programming-language comments if <code class="code">electric-quote-comment</code> is
non-<code class="code">nil</code>, and in programming-language strings if
<code class="code">electric-quote-string</code> is non-<code class="code">nil</code>.  The default is
<code class="code">nil</code> for <code class="code">electric-quote-string</code> and <code class="code">t</code> for the other
variables.
</p>
<a class="index-entry-id" id="index-electric_002dquote_002dreplace_002ddouble"></a>
<p>You can also set the option <code class="code">electric-quote-replace-double</code> to
a non-<code class="code">nil</code> value.  Then, typing <kbd class="kbd">&quot;</kbd> inserts an appropriate
curved double quote depending on context: <code class="t">“</code> at the beginning of
the buffer or after a line break, whitespace, opening parenthesis, or
quote character, and <code class="t">”</code> otherwise.
</p>
<p>Electric Quote mode is disabled by default.  To toggle it in a
single buffer, use <kbd class="kbd">M-x electric-quote-local-mode</kbd>.
To toggle it globally, type
<kbd class="kbd">M-x electric-quote-mode</kbd>.  To suppress it for a single use,
type <kbd class="kbd">C-q `</kbd> or <kbd class="kbd">C-q '</kbd> instead of <kbd class="kbd">`</kbd> or <kbd class="kbd">'</kbd>.  To
insert a curved quote even when Electric Quote is disabled or
inactive, you can type <kbd class="kbd">C-x 8 [</kbd> for <code class="t">‘</code>, <kbd class="kbd">C-x 8 ]</kbd> for
<code class="t">’</code>, <kbd class="kbd">C-x 8 {</kbd> for <code class="t">“</code>, and <kbd class="kbd">C-x 8 }</kbd> for <code class="t">”</code>.
See <a class="xref" href="Basic.xhtml#Inserting-Text">Inserting Text</a>.  Note that the value of
<code class="code">electric-quote-chars</code> does not affect these key bindings, they
are not key bindings of <code class="code">electric-quote-mode</code> but bound in
<code class="code">global-map</code>.
</p>
</div>
<div class="section-level-extent" id="Filling">
<h3 class="section" id="Filling-Text">26.6 Filling Text</h3>
<a class="index-entry-id" id="index-filling-text"></a>

<p><em class="dfn">Filling</em> text means breaking it up into lines that fit a
specified width.  Emacs does filling in two ways.  In Auto Fill mode,
inserting text with self-inserting characters also automatically fills
it.  There are also explicit fill commands that you can use when editing
text.
</p>

<div class="subsection-level-extent" id="Auto-Fill">
<h4 class="subsection" id="Auto-Fill-Mode">26.6.1 Auto Fill Mode</h4>
<a class="index-entry-id" id="index-Auto-Fill-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Auto-Fill"></a>

<p><em class="dfn">Auto Fill</em> mode is a buffer-local minor mode (see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>) in which lines are broken automatically when the line becomes
too wide and you type <kbd class="kbd"><kbd class="key">SPC</kbd></kbd> or <kbd class="kbd"><kbd class="key">RET</kbd></kbd>.
</p>
<dl class="table">
<dt><kbd class="kbd">M-x auto-fill-mode</kbd></dt>
<dd><p>Enable or disable Auto Fill mode.
</p></dd>
<dt><kbd class="kbd"><kbd class="key">SPC</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">RET</kbd></kbd></dt>
<dd><p>In Auto Fill mode, break lines when appropriate.
</p></dd>
</dl>

<a class="index-entry-id" id="index-auto_002dfill_002dmode"></a>
<p>The mode command <kbd class="kbd">M-x auto-fill-mode</kbd> toggles Auto Fill mode in
the current buffer.  Like any other minor mode, with a positive
numeric argument, it enables Auto Fill mode, and with a negative
argument it disables it.  To enable Auto Fill mode automatically in
certain major modes, add <code class="code">auto-fill-mode</code> to the mode hooks
(see <a class="pxref" href="Modes.xhtml#Major-Modes">Major Modes</a>).  When Auto Fill mode is enabled, the mode
indicator &#8216;<samp class="samp">Fill</samp>&#8217; appears in the mode line (see <a class="pxref" href="Screen.xhtml#Mode-Line">The Mode Line</a>).
</p>
<p>Auto Fill mode breaks lines automatically at the appropriate places
whenever lines get longer than the desired width.  This line breaking
occurs only when you type <kbd class="kbd"><kbd class="key">SPC</kbd></kbd> or <kbd class="kbd"><kbd class="key">RET</kbd></kbd>.  If you
wish to insert a space or newline without permitting line-breaking,
type <kbd class="kbd">C-q <kbd class="key">SPC</kbd></kbd> or <kbd class="kbd">C-q C-j</kbd> respectively.  Also,
<kbd class="kbd">C-o</kbd> inserts a newline without line breaking.
</p>
<a class="index-entry-id" id="index-kinsoku-line_002dbreaking-rules"></a>
<p>The place where Auto Fill breaks a line depends on the line&#8217;s
characters.  For characters from <abbr class="acronym">ASCII</abbr>, Latin, and most
other scripts Emacs breaks a line on space characters, to keep the
words intact.  But for CJK scripts, a line can be broken between any
two characters.  (If you load the <samp class="file">kinsoku</samp> library, Emacs will
avoid breaking a line between certain pairs of CJK characters, where
special rules prohibit that.)
</p>
<p>When Auto Fill mode breaks a line, it tries to obey the
<em class="dfn">adaptive fill prefix</em>: if a fill prefix can be deduced from the
first and/or second line of the current paragraph, it is inserted into
the new line (see <a class="pxref" href="#Adaptive-Fill">Adaptive Filling</a>).  Otherwise the new line is
indented, as though you had typed <kbd class="key">TAB</kbd> on it
(see <a class="pxref" href="Indentation.xhtml#Indentation">Indentation</a>).  In a programming language mode, if a line is
broken in the middle of a comment, the comment is split by inserting
new comment delimiters as appropriate.
</p>
<p>Auto Fill mode does not refill entire paragraphs; it breaks lines
but does not merge lines.  Therefore, editing in the middle of a
paragraph can result in a paragraph that is not correctly filled.  To
fill it, call the explicit fill commands
(see <a class="pxref" href="#Fill-Commands">Explicit Fill Commands</a>).
</p>
<p>A similar feature that wraps long lines automatically at display
time is Visual Line Mode (see <a class="pxref" href="Display.xhtml#Visual-Line-Mode">Visual Line Mode</a>).
</p>
</div>
<div class="subsection-level-extent" id="Fill-Commands">
<h4 class="subsection" id="Explicit-Fill-Commands">26.6.2 Explicit Fill Commands</h4>

<dl class="table">
<dt><kbd class="kbd">M-q</kbd></dt>
<dd><p>Fill current paragraph (<code class="code">fill-paragraph</code>).
</p></dd>
<dt><kbd class="kbd">C-x f</kbd></dt>
<dd><p>Set the fill column (<code class="code">set-fill-column</code>).
</p></dd>
<dt><kbd class="kbd">M-x fill-region</kbd></dt>
<dd><p>Fill each paragraph in the region (<code class="code">fill-region</code>).
</p></dd>
<dt><kbd class="kbd">M-x fill-region-as-paragraph</kbd></dt>
<dd><p>Fill the region, considering it as one paragraph.
</p></dd>
<dt><kbd class="kbd">M-x center-line</kbd></dt>
<dd><p>Center a line.
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002dq"></a>
<a class="index-entry-id" id="index-fill_002dparagraph"></a>
<p>The command <kbd class="kbd">M-q</kbd> (<code class="code">fill-paragraph</code>) <em class="dfn">fills</em> the
current paragraph.  It redistributes the line breaks within the
paragraph, and deletes any excess space and tab characters occurring
within the paragraph, in such a way that the lines end up fitting
within a certain maximum width.  Like Auto Fill mode, this and other
filling commands usually break lines at space characters, but for CJK
characters these commands can break a line between almost any two
characters, and they can also obey the kinsoku rules.  See <a class="xref" href="#Auto-Fill">Auto Fill Mode</a>.
</p>
<a class="index-entry-id" id="index-fill_002dregion"></a>
<p>Normally, <kbd class="kbd">M-q</kbd> acts on the paragraph where point is, but if
point is between paragraphs, it acts on the paragraph after point.  If
the region is active, it acts instead on the text in the region.  You
can also call <kbd class="kbd">M-x fill-region</kbd> to specifically fill the text in
the region.
</p>
<a class="index-entry-id" id="index-fill_002dregion_002das_002dparagraph"></a>
<p><kbd class="kbd">M-q</kbd> and <code class="code">fill-region</code> use the usual Emacs criteria for
finding paragraph boundaries (see <a class="pxref" href="#Paragraphs">Paragraphs</a>).  For more control,
you can use <kbd class="kbd">M-x fill-region-as-paragraph</kbd>, which refills
everything between point and mark as a single paragraph.  This command
deletes any blank lines within the region, so separate blocks of text
end up combined into one block.
</p>
<a class="index-entry-id" id="index-justification"></a>
<p>A numeric argument to <kbd class="kbd">M-q</kbd> tells it to <em class="dfn">justify</em> the text
as well as filling it.  This means that extra spaces are inserted to
make the right margin line up exactly at the fill column.  To remove
the extra spaces, use <kbd class="kbd">M-q</kbd> with no argument.  (Likewise for
<code class="code">fill-region</code>.)
</p>
<a class="index-entry-id" id="index-fill_002dcolumn"></a>
<a class="index-entry-id" id="index-C_002dx-f"></a>
<a class="index-entry-id" id="index-set_002dfill_002dcolumn"></a>
<p>The maximum line width for filling is specified by the buffer-local
variable <code class="code">fill-column</code>.  The default value (see <a class="pxref" href="Customization.xhtml#Locals">Local Variables</a>) is
70.  The easiest way to set <code class="code">fill-column</code> in the current buffer
is to use the command <kbd class="kbd">C-x f</kbd> (<code class="code">set-fill-column</code>).  With a
numeric argument, it uses that as the new fill column.  With just
<kbd class="kbd">C-u</kbd> as argument, it sets <code class="code">fill-column</code> to the current
horizontal position of point.  Note that, by its very nature,
<code class="code">fill-column</code> is measured in column units; the actual position of
that column on a graphical display depends on the font being used.  In
particular, using variable-pitch fonts will cause the
<code class="code">fill-column</code> occupy different horizontal positions on display in
different lines.
</p>
<a class="index-entry-id" id="index-centering"></a>
<a class="index-entry-id" id="index-center_002dline"></a>
<p>The command <kbd class="kbd">M-x center-line</kbd> centers the current line
within the current fill column.  With an argument <var class="var">n</var>, it centers
<var class="var">n</var> lines individually and moves past them.  This binding is
made by Text mode and is available only in that and related modes
(see <a class="pxref" href="#Text-Mode">Text Mode</a>).
</p>
<p>By default, Emacs considers a period followed by two spaces or by a
newline as the end of a sentence; a period followed by just one space
indicates an abbreviation, not the end of a sentence.  Accordingly,
the fill commands will not break a line after a period followed by
just one space.  If you set the variable
<code class="code">sentence-end-double-space</code> to <code class="code">nil</code>, the fill commands will
break a line after a period followed by one space, and put just one
space after each period.  See <a class="xref" href="#Sentences">Sentences</a>, for other effects and
possible drawbacks of this.
</p>
<a class="index-entry-id" id="index-colon_002ddouble_002dspace"></a>
<p>If the variable <code class="code">colon-double-space</code> is non-<code class="code">nil</code>, the
fill commands put two spaces after a colon.
</p>
<a class="index-entry-id" id="index-fill_002dnobreak_002dpredicate"></a>
<p>To specify additional conditions where line-breaking is not allowed,
customize the abnormal hook variable <code class="code">fill-nobreak-predicate</code>
(see <a class="pxref" href="Customization.xhtml#Hooks">Hooks</a>).  Each function in this hook is called with no
arguments, with point positioned where Emacs is considering breaking a
line.  If a function returns a non-<code class="code">nil</code> value, Emacs will not
break the line there.  Functions you can use there include:
<code class="code">fill-single-word-nobreak-p</code> (don&#8217;t break after the first word of
a sentence or before the last); <code class="code">fill-single-char-nobreak-p</code>
(don&#8217;t break after a one-letter word preceded by a whitespace
character); <code class="code">fill-french-nobreak-p</code> (don&#8217;t break after &#8216;<samp class="samp">(</samp>&#8217;
or before &#8216;<samp class="samp">)</samp>&#8217;, &#8216;<samp class="samp">:</samp>&#8217; or &#8216;<samp class="samp">?</samp>&#8217;); and
<code class="code">fill-polish-nobreak-p</code> (don&#8217;t break after a one letter word,
even if preceded by a non-whitespace character).
</p>
<p>Emacs can display an indicator in the <code class="code">fill-column</code> position
using the Display fill column indicator mode (see <a class="pxref" href="Display.xhtml#Displaying-Boundaries">display-fill-column-indicator</a>).
</p>
</div>
<div class="subsection-level-extent" id="Fill-Prefix">
<h4 class="subsection" id="The-Fill-Prefix">26.6.3 The Fill Prefix</h4>

<a class="index-entry-id" id="index-fill-prefix"></a>
<p>The <em class="dfn">fill prefix</em> feature allows paragraphs to be filled so that
each line starts with a special string of characters (such as a
sequence of spaces, giving an indented paragraph).  You can specify a
fill prefix explicitly; otherwise, Emacs tries to deduce one
automatically (see <a class="pxref" href="#Adaptive-Fill">Adaptive Filling</a>).
</p>
<dl class="table">
<dt><kbd class="kbd">C-x .</kbd></dt>
<dd><p>Set the fill prefix (<code class="code">set-fill-prefix</code>).
</p></dd>
<dt><kbd class="kbd">M-q</kbd></dt>
<dd><p>Fill a paragraph using current fill prefix (<code class="code">fill-paragraph</code>).
</p></dd>
<dt><kbd class="kbd">M-x fill-individual-paragraphs</kbd></dt>
<dd><p>Fill the region, considering each change of indentation as starting a
new paragraph.
</p></dd>
<dt><kbd class="kbd">M-x fill-nonuniform-paragraphs</kbd></dt>
<dd><p>Fill the region, considering only paragraph-separator lines as starting
a new paragraph.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-_002e"></a>
<a class="index-entry-id" id="index-set_002dfill_002dprefix"></a>
<p>To specify a fill prefix for the current buffer, move to a line that
starts with the desired prefix, put point at the end of the prefix,
and type <kbd class="kbd">C-x&#160;.</kbd><!-- /@w --> (<code class="code">set-fill-prefix</code>).  (That&#8217;s a period
after the <kbd class="kbd">C-x</kbd>.)  To turn off the fill prefix, specify an empty
prefix: type <kbd class="kbd">C-x&#160;.</kbd><!-- /@w --> with point at the beginning of a line.
</p>
<p>When a fill prefix is in effect, the fill commands remove the fill
prefix from each line of the paragraph before filling, and insert it
on each line after filling.  (The beginning of the first line of the
paragraph is left unchanged, since often that is intentionally
different.)  Auto Fill mode also inserts the fill prefix automatically
when it makes a new line (see <a class="pxref" href="#Auto-Fill">Auto Fill Mode</a>).  The <kbd class="kbd">C-o</kbd> command
inserts the fill prefix on new lines it creates, when you use it at
the beginning of a line (see <a class="pxref" href="Basic.xhtml#Blank-Lines">Blank Lines</a>).  Conversely, the
command <kbd class="kbd">M-^</kbd> deletes the prefix (if it occurs) after the newline
that it deletes (see <a class="pxref" href="Indentation.xhtml#Indentation">Indentation</a>).
</p>
<p>For example, if <code class="code">fill-column</code> is 40 and you set the fill prefix
to &#8216;<samp class="samp">;; </samp>&#8217;, then <kbd class="kbd">M-q</kbd> in the following text
</p>
<div class="example">
<pre class="example-preformatted">;; This is an
;; example of a paragraph
;; inside a Lisp-style comment.
</pre></div>

<p>produces this:
</p>
<div class="example">
<pre class="example-preformatted">;; This is an example of a paragraph
;; inside a Lisp-style comment.
</pre></div>

<p>Lines that do not start with the fill prefix are considered to start
paragraphs, both in <kbd class="kbd">M-q</kbd> and the paragraph commands; this gives
good results for paragraphs with hanging indentation (every line
indented except the first one).  Lines which are blank or indented once
the prefix is removed also separate or start paragraphs; this is what
you want if you are writing multi-paragraph comments with a comment
delimiter on each line.
</p>
<a class="index-entry-id" id="index-fill_002dindividual_002dparagraphs"></a>
<p>You can use <kbd class="kbd">M-x fill-individual-paragraphs</kbd> to set the fill
prefix for each paragraph automatically.  This command divides the
region into paragraphs, treating every change in the amount of
indentation as the start of a new paragraph, and fills each of these
paragraphs.  Thus, all the lines in one paragraph have the same
amount of indentation.  That indentation serves as the fill prefix for
that paragraph.
</p>
<a class="index-entry-id" id="index-fill_002dnonuniform_002dparagraphs"></a>
<p><kbd class="kbd">M-x fill-nonuniform-paragraphs</kbd> is a similar command that divides
the region into paragraphs in a different way.  It considers only
paragraph-separating lines (as defined by <code class="code">paragraph-separate</code>) as
starting a new paragraph.  Since this means that the lines of one
paragraph may have different amounts of indentation, the fill prefix
used is the smallest amount of indentation of any of the lines of the
paragraph.  This gives good results with styles that indent a paragraph&#8217;s
first line more or less that the rest of the paragraph.
</p>
<a class="index-entry-id" id="index-fill_002dprefix"></a>
<p>The fill prefix is stored in the variable <code class="code">fill-prefix</code>.  Its value
is a string, or <code class="code">nil</code> when there is no fill prefix.  This is a
per-buffer variable; altering the variable affects only the current buffer,
but there is a default value which you can change as well.  See <a class="xref" href="Customization.xhtml#Locals">Local Variables</a>.
</p>
<p>The <code class="code">indentation</code> text property provides another way to control
the amount of indentation paragraphs receive.  See <a class="xref" href="#Enriched-Indentation">Indentation in Enriched Text</a>.
</p>
</div>
<div class="subsection-level-extent" id="Adaptive-Fill">
<h4 class="subsection" id="Adaptive-Filling">26.6.4 Adaptive Filling</h4>

<a class="index-entry-id" id="index-adaptive-filling"></a>
<p>The fill commands can deduce the proper fill prefix for a paragraph
automatically in certain cases: either whitespace or certain punctuation
characters at the beginning of a line are propagated to all lines of the
paragraph.
</p>
<p>If the paragraph has two or more lines, the fill prefix is taken from
the paragraph&#8217;s second line, but only if it appears on the first line as
well.
</p>
<p>If a paragraph has just one line, fill commands <em class="emph">may</em> take a
prefix from that line.  The decision is complicated because there are
three reasonable things to do in such a case:
</p>
<ul class="itemize mark-bullet">
<li>Use the first line&#8217;s prefix on all the lines of the paragraph.

</li><li>Indent subsequent lines with whitespace, so that they line up under the
text that follows the prefix on the first line, but don&#8217;t actually copy
the prefix from the first line.

</li><li>Don&#8217;t do anything special with the second and following lines.
</li></ul>

<p>All three of these styles of formatting are commonly used.  So the
fill commands try to determine what you would like, based on the prefix
that appears and on the major mode.  Here is how.
</p>
<a class="index-entry-id" id="index-adaptive_002dfill_002dfirst_002dline_002dregexp"></a>
<p>If the prefix found on the first line matches
<code class="code">adaptive-fill-first-line-regexp</code>, or if it appears to be a
comment-starting sequence (this depends on the major mode), then the
prefix found is used for filling the paragraph, provided it would not
act as a paragraph starter on subsequent lines.
</p>
<p>Otherwise, the prefix found is converted to an equivalent number of
spaces, and those spaces are used as the fill prefix for the rest of the
lines, provided they would not act as a paragraph starter on subsequent
lines.
</p>
<p>In Text mode, and other modes where only blank lines and page
delimiters separate paragraphs, the prefix chosen by adaptive filling
never acts as a paragraph starter, so it can always be used for filling.
</p>
<a class="index-entry-id" id="index-adaptive_002dfill_002dmode"></a>
<a class="index-entry-id" id="index-adaptive_002dfill_002dregexp"></a>
<p>The variable <code class="code">adaptive-fill-regexp</code> determines what kinds of line
beginnings can serve as a fill prefix: any characters at the start of
the line that match this regular expression are used.  If you set the
variable <code class="code">adaptive-fill-mode</code> to <code class="code">nil</code>, the fill prefix is
never chosen automatically.
</p>
<a class="index-entry-id" id="index-adaptive_002dfill_002dfunction"></a>
<p>You can specify more complex ways of choosing a fill prefix
automatically by setting the variable <code class="code">adaptive-fill-function</code> to a
function.  This function is called with point after the left margin of a
line, and it should return the appropriate fill prefix based on that
line.  If it returns <code class="code">nil</code>, <code class="code">adaptive-fill-regexp</code> gets
a chance to find a prefix.
</p>
</div>
</div>
<div class="section-level-extent" id="Case">
<h3 class="section" id="Case-Conversion-Commands">26.7 Case Conversion Commands</h3>
<a class="index-entry-id" id="index-case-conversion"></a>

<p>Emacs has commands for converting either a single word or any arbitrary
range of text to upper case or to lower case.
</p>
<dl class="table">
<dt><kbd class="kbd">M-l</kbd></dt>
<dd><p>Convert following word to lower case (<code class="code">downcase-word</code>).
</p></dd>
<dt><kbd class="kbd">M-u</kbd></dt>
<dd><p>Convert following word to upper case (<code class="code">upcase-word</code>).
</p></dd>
<dt><kbd class="kbd">M-c</kbd></dt>
<dd><p>Capitalize the following word (<code class="code">capitalize-word</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-l</kbd></dt>
<dd><p>Convert region to lower case (<code class="code">downcase-region</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-u</kbd></dt>
<dd><p>Convert region to upper case (<code class="code">upcase-region</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002dl"></a>
<a class="index-entry-id" id="index-M_002du"></a>
<a class="index-entry-id" id="index-M_002dc"></a>
<a class="index-entry-id" id="index-words_002c-case-conversion"></a>
<a class="index-entry-id" id="index-converting-text-to-upper-or-lower-case"></a>
<a class="index-entry-id" id="index-capitalizing-words"></a>
<a class="index-entry-id" id="index-downcase_002dword"></a>
<a class="index-entry-id" id="index-upcase_002dword"></a>
<a class="index-entry-id" id="index-capitalize_002dword"></a>
<p><kbd class="kbd">M-l</kbd> (<code class="code">downcase-word</code>) converts the word after point to
lower case, moving past it.  Thus, repeating <kbd class="kbd">M-l</kbd> converts
successive words.  <kbd class="kbd">M-u</kbd> (<code class="code">upcase-word</code>) converts to all
capitals instead, while <kbd class="kbd">M-c</kbd> (<code class="code">capitalize-word</code>) puts the
first letter of the word into upper case and the rest into lower case.
All these commands convert several words at once if given an argument.
They are especially convenient for converting a large amount of text
from all upper case to mixed case, because you can move through the
text using <kbd class="kbd">M-l</kbd>, <kbd class="kbd">M-u</kbd> or <kbd class="kbd">M-c</kbd> on each word as
appropriate, occasionally using <kbd class="kbd">M-f</kbd> instead to skip a word.
</p>
<p>When given a negative argument, the word case conversion commands apply
to the appropriate number of words before point, but do not move point.
This is convenient when you have just typed a word in the wrong case: you
can give the case conversion command and continue typing.
</p>
<p>If a word case conversion command is given in the middle of a word,
it applies only to the part of the word which follows point.  (This is
comparable to what <kbd class="kbd">M-d</kbd> (<code class="code">kill-word</code>) does.)  With a
negative argument, case conversion applies only to the part of the
word before point.
</p>
<a class="index-entry-id" id="index-C_002dx-C_002dl"></a>
<a class="index-entry-id" id="index-C_002dx-C_002du"></a>
<a class="index-entry-id" id="index-downcase_002dregion"></a>
<a class="index-entry-id" id="index-upcase_002dregion"></a>
<p>The other case conversion commands are <kbd class="kbd">C-x C-u</kbd>
(<code class="code">upcase-region</code>) and <kbd class="kbd">C-x C-l</kbd> (<code class="code">downcase-region</code>), which
convert everything between point and mark to the specified case.  Point and
mark do not move.
</p>
<p>The region case conversion commands <code class="code">upcase-region</code> and
<code class="code">downcase-region</code> are normally disabled.  This means that they ask
for confirmation if you try to use them.  When you confirm, you may
enable the command, which means it will not ask for confirmation again.
See <a class="xref" href="Customization.xhtml#Disabling">Disabling Commands</a>.
</p>
</div>
<div class="section-level-extent" id="Text-Mode">
<h3 class="section" id="Text-Mode-1">26.8 Text Mode</h3>
<a class="index-entry-id" id="index-Text-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Text"></a>
<a class="index-entry-id" id="index-text_002dmode"></a>

<p>Text mode is a major mode for editing files of text in a human
language.  Files which have names ending in the extension <samp class="file">.txt</samp>
are usually opened in Text mode (see <a class="pxref" href="Modes.xhtml#Choosing-Modes">Choosing File Modes</a>).  To
explicitly switch to Text mode, type <kbd class="kbd">M-x text-mode</kbd>.
</p>
<p>In Text mode, only blank lines and page delimiters separate
paragraphs.  As a result, paragraphs can be indented, and adaptive
filling determines what indentation to use when filling a paragraph.
See <a class="xref" href="#Adaptive-Fill">Adaptive Filling</a>.
</p>
<a class="index-entry-id" id="index-TAB-_0028Text-mode_0029"></a>
<p>In Text mode, the <kbd class="key">TAB</kbd> (<code class="code">indent-for-tab-command</code>) command
usually inserts whitespace up to the next tab stop, instead of
indenting the current line.  See <a class="xref" href="Indentation.xhtml#Indentation">Indentation</a>, for details.
</p>
<p>Text mode turns off the features concerned with comments except when
you explicitly invoke them.  It changes the syntax table so that
apostrophes are considered part of words (e.g., &#8216;<samp class="samp">don't</samp>&#8217; is
considered one word).  However, if a word starts with an apostrophe,
it is treated as a prefix for the purposes of capitalization
(e.g., <kbd class="kbd">M-c</kbd> converts &#8216;<samp class="samp">'hello'</samp>&#8217; into &#8216;<samp class="samp">'Hello'</samp>&#8217;, as
expected).
</p>
<a class="index-entry-id" id="index-Paragraph_002dIndent-Text-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Paragraph_002dIndent-Text"></a>
<a class="index-entry-id" id="index-paragraph_002dindent_002dtext_002dmode"></a>
<a class="index-entry-id" id="index-paragraph_002dindent_002dminor_002dmode"></a>
<p>If you indent the first lines of paragraphs, then you should use
Paragraph-Indent Text mode (<kbd class="kbd">M-x paragraph-indent-text-mode</kbd>)
rather than Text mode.  In that mode, you do not need to have blank
lines between paragraphs, because the first-line indentation is
sufficient to start a paragraph; however paragraphs in which every
line is indented are not supported.  Use <kbd class="kbd">M-x
paragraph-indent-minor-mode</kbd> to enable an equivalent minor mode for
situations where you shouldn&#8217;t change the major mode&#8212;in mail
composition, for instance.
</p>
<a class="index-entry-id" id="index-M_002dTAB-_0028Text-mode_0029"></a>
<p>Text mode binds <kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> to <code class="code">ispell-complete-word</code>.
This command performs completion of the partial word in the buffer
before point, using the spelling dictionary as the space of possible
words.  See <a class="xref" href="Fixit.xhtml#Spelling">Checking and Correcting Spelling</a>.  If your window manager defines
<kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> to switch windows, you can type <kbd class="kbd"><kbd class="key">ESC</kbd>
<kbd class="key">TAB</kbd></kbd> or <kbd class="kbd">C-M-i</kbd> instead.
</p>
<a class="index-entry-id" id="index-text_002dmode_002dhook"></a>
<p>Entering Text mode runs the mode hook <code class="code">text-mode-hook</code>
(see <a class="pxref" href="Modes.xhtml#Major-Modes">Major Modes</a>).
</p>
<p>The following sections describe several major modes that are
<em class="dfn">derived</em> from Text mode.  These derivatives share most of the
features of Text mode described above.  In particular, derivatives of
Text mode run <code class="code">text-mode-hook</code> prior to running their own mode
hooks.
</p>
</div>
<div class="section-level-extent" id="Outline-Mode">
<h3 class="section" id="Outline-Mode-1">26.9 Outline Mode</h3>
<a class="index-entry-id" id="index-Outline-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Outline"></a>
<a class="index-entry-id" id="index-invisible-lines"></a>

<a class="index-entry-id" id="index-outline_002dmode"></a>
<a class="index-entry-id" id="index-outline_002dmode_002dhook"></a>
<p>Outline mode is a major mode derived from Text mode, which is
specialized for editing outlines.  It provides commands to navigate
between entries in the outline structure, and commands to make parts
of a buffer temporarily invisible, so that the outline structure may
be more easily viewed.  Type <kbd class="kbd">M-x outline-mode</kbd> to switch to
Outline mode.  Entering Outline mode runs the hook
<code class="code">text-mode-hook</code> followed by the hook <code class="code">outline-mode-hook</code>
(see <a class="pxref" href="Customization.xhtml#Hooks">Hooks</a>).
</p>
<p>When you use an Outline mode command to make a line invisible
(see <a class="pxref" href="#Outline-Visibility">Outline Visibility Commands</a>), the line disappears from the screen.  An
ellipsis (three periods in a row) is displayed at the end of the
previous visible line, to indicate the hidden text.  Multiple
consecutive invisible lines produce just one ellipsis.
</p>
<p>Editing commands that operate on lines, such as <kbd class="kbd">C-n</kbd> and
<kbd class="kbd">C-p</kbd>, treat the text of the invisible line as part of the
previous visible line.  Killing the ellipsis at the end of a visible
line really kills all the following invisible text associated with the
ellipsis.
</p>

<div class="subsection-level-extent" id="Outline-Minor-Mode">
<h4 class="subsection" id="Outline-Minor-Mode-1">26.9.1 Outline Minor Mode</h4>

<a class="index-entry-id" id="index-outline_002dminor_002dmode"></a>
<p>Outline minor mode is a buffer-local minor mode which provides the
same commands as the major mode, Outline mode, but can be used in
conjunction with other major modes.  You can type <kbd class="kbd">M-x
outline-minor-mode</kbd> to toggle Outline minor mode in the current
buffer, or use a file-local variable setting to enable it in a
specific file (see <a class="pxref" href="Customization.xhtml#File-Variables">Local Variables in Files</a>).
</p>
<a class="index-entry-id" id="index-C_002dc-_0040-_0028Outline-minor-mode_0029"></a>
<a class="index-entry-id" id="index-outline_002dminor_002dmode_002dprefix"></a>
<p>The major mode, Outline mode, provides special key bindings on the
<kbd class="kbd">C-c</kbd> prefix.  Outline minor mode provides similar bindings with
<kbd class="kbd">C-c @</kbd> as the prefix; this is to reduce the conflicts with the
major mode&#8217;s special commands.  (The variable
<code class="code">outline-minor-mode-prefix</code> controls the prefix used.)
</p>
<a class="index-entry-id" id="index-outline_002dminor_002dmode_002duse_002dbuttons"></a>
<p>If <code class="code">outline-minor-mode-use-buttons</code> is non-<code class="code">nil</code>, Outline
minor mode will use buttons at the beginning of the heading lines, in
addition to ellipsis, to show that a section is hidden.  Clicking the
mouse on the button toggles display of the section.  If the value of
this variable is <code class="code">insert</code>, the buttons are inserted directly into
the buffer text, so <kbd class="key">RET</kbd> on the button will also toggle display
of the section, like a mouse click does.  Using the value <code class="code">insert</code>
is not recommended in editable buffers because it modifies them.
If the value is <code class="code">in-margins</code>, Outline minor mode will use the
window margins to indicate that a section is hidden.  The buttons are
customizable as icons (see <a class="pxref" href="Display.xhtml#Icons">Icons</a>).
</p>
<a class="index-entry-id" id="index-outline_002dminor_002dmode_002dcycle"></a>
<p>If the <code class="code">outline-minor-mode-cycle</code> user option is
non-<code class="code">nil</code>, the <kbd class="kbd">TAB</kbd> and <kbd class="kbd">S-<kbd class="key">TAB</kbd></kbd> keys that cycle
the visibility are enabled on the outline heading lines
(see <a class="pxref" href="#Outline-Visibility">outline-cycle</a>).  <kbd class="kbd">TAB</kbd> cycles hiding,
showing the sub-heading, and showing all for the current section.
<kbd class="kbd">S-<kbd class="key">TAB</kbd></kbd> does the same for the entire buffer.
</p>
</div>
<div class="subsection-level-extent" id="Outline-Format">
<h4 class="subsection" id="Format-of-Outlines">26.9.2 Format of Outlines</h4>

<a class="index-entry-id" id="index-heading-lines-_0028Outline-mode_0029"></a>
<a class="index-entry-id" id="index-body-lines-_0028Outline-mode_0029"></a>
<p>Outline mode assumes that the lines in the buffer are of two types:
<em class="dfn">heading lines</em> and <em class="dfn">body lines</em>.  A heading line represents a
topic in the outline.  Heading lines start with one or more asterisk
(&#8216;<samp class="samp">*</samp>&#8217;) characters; the number of asterisks determines the depth of
the heading in the outline structure.  Thus, a heading line with one
&#8216;<samp class="samp">*</samp>&#8217; is a major topic; all the heading lines with two &#8216;<samp class="samp">*</samp>&#8217;s
between it and the next one-&#8216;<samp class="samp">*</samp>&#8217; heading are its subtopics; and so
on.  Any line that is not a heading line is a body line.  Body lines
belong with the preceding heading line.  Here is an example:
</p>
<div class="example">
<pre class="example-preformatted">* Food
This is the body,
which says something about the topic of food.

** Delicious Food
This is the body of the second-level header.

** Distasteful Food
This could have
a body too, with
several lines.

*** Dormitory Food

* Shelter
Another first-level topic with its header line.
</pre></div>

<p>A heading line together with all following body lines is called
collectively an <em class="dfn">entry</em>.  A heading line together with all following
deeper heading lines and their body lines is called a <em class="dfn">subtree</em>.
</p>
<a class="index-entry-id" id="index-outline_002dregexp"></a>
<p>You can customize the criterion for distinguishing heading lines by
setting the variable <code class="code">outline-regexp</code>.  (The recommended ways to
do this are in a major mode function or with a file local variable.)
Any line whose beginning has a match for this regexp is considered a
heading line.  Matches that start within a line (not at the left
margin) do not count.
</p>
<p>The length of the matching text determines the level of the heading;
longer matches make a more deeply nested level.  Thus, for example, if
a text formatter has commands &#8216;<samp class="samp">@chapter</samp>&#8217;, &#8216;<samp class="samp">@section</samp>&#8217; and
&#8216;<samp class="samp">@subsection</samp>&#8217; to divide the document into chapters and sections,
you could make those lines count as heading lines by setting
<code class="code">outline-regexp</code> to &#8216;<samp class="samp">&quot;@chap\\|@\\(sub\\)*section&quot;</samp>&#8217;.  Note
the trick: the two words &#8216;<samp class="samp">chapter</samp>&#8217; and &#8216;<samp class="samp">section</samp>&#8217; are equally
long, but by defining the regexp to match only &#8216;<samp class="samp">chap</samp>&#8217; we ensure
that the length of the text matched on a chapter heading is shorter,
so that Outline mode will know that sections are contained in
chapters.  This works as long as no other command starts with
&#8216;<samp class="samp">@chap</samp>&#8217;.
</p>
<a class="index-entry-id" id="index-outline_002dlevel"></a>
<p>You can explicitly specify a rule for calculating the level of a
heading line by setting the variable <code class="code">outline-level</code>.  The value
of <code class="code">outline-level</code> should be a function that takes no arguments
and returns the level of the current heading.  The recommended ways to
set this variable are in a major mode command or with a file local
variable.
</p>
</div>
<div class="subsection-level-extent" id="Outline-Motion">
<h4 class="subsection" id="Outline-Motion-Commands">26.9.3 Outline Motion Commands</h4>

<p>Outline mode provides special motion commands that move backward and
forward to heading lines.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-C_002dc-C_002dn-_0028Outline-mode_0029"></a>
<a id="index-outline_002dnext_002dvisible_002dheading"></a><kbd class="kbd">C-c C-n</kbd></dt>
<dd><p>Move point to the next visible heading line
(<code class="code">outline-next-visible-heading</code>).
</p></dd>
<dt><a class="index-entry-id" id="index-C_002dc-C_002dp-_0028Outline-mode_0029"></a>
<a id="index-outline_002dprevious_002dvisible_002dheading"></a><kbd class="kbd">C-c C-p</kbd></dt>
<dd><p>Move point to the previous visible heading line
(<code class="code">outline-previous-visible-heading</code>).
</p></dd>
<dt><a class="index-entry-id" id="index-C_002dc-C_002df-_0028Outline-mode_0029"></a>
<a id="index-outline_002dforward_002dsame_002dlevel"></a><kbd class="kbd">C-c C-f</kbd></dt>
<dd><p>Move point to the next visible heading line at the same level
as the one point is on (<code class="code">outline-forward-same-level</code>).
</p></dd>
<dt><a class="index-entry-id" id="index-C_002dc-C_002db-_0028Outline-mode_0029"></a>
<a id="index-outline_002dbackward_002dsame_002dlevel"></a><kbd class="kbd">C-c C-b</kbd></dt>
<dd><p>Move point to the previous visible heading line at the same level
(<code class="code">outline-backward-same-level</code>).
</p></dd>
<dt><a class="index-entry-id" id="index-C_002dc-C_002du-_0028Outline-mode_0029"></a>
<a id="index-outline_002dup_002dheading"></a><kbd class="kbd">C-c C-u</kbd></dt>
<dd><p>Move point up to a lower-level (more inclusive) visible heading line
(<code class="code">outline-up-heading</code>).
</p></dd>
</dl>

<p>All of the above commands accept numeric arguments as repeat counts.
For example, <kbd class="kbd">C-c C-f</kbd>, when given an argument, moves forward that
many visible heading lines on the same level, and <kbd class="kbd">C-c C-u</kbd> with
an argument moves out of that many nested levels.
</p>
</div>
<div class="subsection-level-extent" id="Outline-Visibility">
<h4 class="subsection" id="Outline-Visibility-Commands">26.9.4 Outline Visibility Commands</h4>

<p>Outline mode provides several commands for temporarily hiding or
revealing parts of the buffer, based on the outline structure.  These
commands are not undoable; their effects are simply not recorded by
the undo mechanism, so you can undo right past them (see <a class="pxref" href="Fixit.xhtml#Undo">Undo</a>).
</p>
<p>Many of these commands act on the current heading line.  If
point is on a heading line, that is the current heading line; if point
is on a body line, the current heading line is the nearest preceding
header line.
</p>
<dl class="table">
<dt><kbd class="kbd">C-c C-c</kbd></dt>
<dd><p>Make the current heading line&#8217;s body invisible
(<code class="code">outline-hide-entry</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-e</kbd></dt>
<dd><p>Make the current heading line&#8217;s body visible
(<code class="code">outline-show-entry</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-d</kbd></dt>
<dd><p>Make everything under the current heading invisible, not including the
heading itself (<code class="code">outline-hide-subtree</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-s</kbd></dt>
<dd><p>Make everything under the current heading visible, including body,
subheadings, and their bodies (<code class="code">outline-show-subtree</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-l</kbd></dt>
<dd><p>Make the body of the current heading line, and of all its subheadings,
invisible (<code class="code">outline-hide-leaves</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-k</kbd></dt>
<dd><p>Make all subheadings of the current heading line, at all levels,
visible (<code class="code">outline-show-branches</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-i</kbd></dt>
<dd><p>Make immediate subheadings (one level down) of the current heading
line visible (<code class="code">outline-show-children</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-t</kbd></dt>
<dd><p>Make all body lines in the buffer invisible
(<code class="code">outline-hide-body</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-a</kbd></dt>
<dd><p>Make all lines in the buffer visible (<code class="code">outline-show-all</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-q</kbd></dt>
<dd><p>Hide everything except the top <var class="var">n</var> levels of heading lines
(<code class="code">outline-hide-sublevels</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-o</kbd></dt>
<dd><p>Hide everything except for the heading or body that point is in, plus
the headings leading up from there to the top level of the outline
(<code class="code">outline-hide-other</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-outline_002dhide_002dentry"></a>
<a class="index-entry-id" id="index-outline_002dshow_002dentry"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dc-_0028Outline-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002de-_0028Outline-mode_0029"></a>
<p>The simplest of these commands are <kbd class="kbd">C-c C-c</kbd>
(<code class="code">outline-hide-entry</code>), which hides the body lines directly
following the current heading line, and <kbd class="kbd">C-c C-e</kbd>
(<code class="code">outline-show-entry</code>), which reveals them.  Subheadings and
their bodies are not affected.
</p>
<a class="index-entry-id" id="index-outline_002dhide_002dsubtree"></a>
<a class="index-entry-id" id="index-outline_002dshow_002dsubtree"></a>
<a class="index-entry-id" id="index-C_002dc-C_002ds-_0028Outline-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dd-_0028Outline-mode_0029"></a>
<a class="index-entry-id" id="index-subtree-_0028Outline-mode_0029"></a>
<p>The commands <kbd class="kbd">C-c C-d</kbd> (<code class="code">outline-hide-subtree</code>) and
<kbd class="kbd">C-c C-s</kbd> (<code class="code">outline-show-subtree</code>) are more powerful.  They
apply to the current heading line&#8217;s <em class="dfn">subtree</em>: its body, all of
its subheadings, both direct and indirect, and all of their bodies.
</p>
<a class="index-entry-id" id="index-outline_002dhide_002dleaves"></a>
<a class="index-entry-id" id="index-outline_002dshow_002dbranches"></a>
<a class="index-entry-id" id="index-outline_002dshow_002dchildren"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dl-_0028Outline-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dk-_0028Outline-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002di-_0028Outline-mode_0029"></a>
<p>The command <kbd class="kbd">C-c C-l</kbd> (<code class="code">outline-hide-leaves</code>) hides the
body of the current heading line as well as all the bodies in its
subtree; the subheadings themselves are left visible.  The command
<kbd class="kbd">C-c C-k</kbd> (<code class="code">outline-show-branches</code>) reveals the subheadings,
if they had previously been hidden (e.g., by <kbd class="kbd">C-c C-d</kbd>).  The
command <kbd class="kbd">C-c C-i</kbd> (<code class="code">outline-show-children</code>) is a weaker
version of this; it reveals just the direct subheadings, i.e., those
one level down.
</p>
<a class="index-entry-id" id="index-outline_002dhide_002dother"></a>
<a class="index-entry-id" id="index-C_002dc-C_002do-_0028Outline-mode_0029"></a>
<p>The command <kbd class="kbd">C-c C-o</kbd> (<code class="code">outline-hide-other</code>) hides
everything except the entry that point is in, plus its parents (the
headers leading up from there to top level in the outline) and the top
level headings.  It also reveals body lines preceding the first
heading in the buffer.
</p>
<a class="index-entry-id" id="index-outline_002dhide_002dbody"></a>
<a class="index-entry-id" id="index-outline_002dshow_002dall"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dt-_0028Outline-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002da-_0028Outline-mode_0029"></a>
<a class="index-entry-id" id="index-hide_002dsublevels"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dq-_0028Outline-mode_0029"></a>
<p>The remaining commands affect the whole buffer.  <kbd class="kbd">C-c C-t</kbd>
(<code class="code">outline-hide-body</code>) makes all body lines invisible, so that you
see just the outline structure (as a special exception, it will not
hide lines at the top of the file, preceding the first header line,
even though these are technically body lines).  <kbd class="kbd">C-c C-a</kbd>
(<code class="code">outline-show-all</code>) makes all lines visible.  <kbd class="kbd">C-c C-q</kbd>
(<code class="code">outline-hide-sublevels</code>) hides all but the top level headings
at and above the level of the current heading line (defaulting to 1 if
point is not on a heading); with a numeric argument <var class="var">n</var>, it hides
everything except the top <var class="var">n</var> levels of heading lines.  Note that
it completely reveals all the <var class="var">n</var> top levels and the body lines
before the first heading.
</p>
<a class="index-entry-id" id="index-cycle-visibility_002c-in-Outline-mode"></a>
<a class="index-entry-id" id="index-outline_002dcycle"></a>
<a class="index-entry-id" id="index-outline_002dcycle_002dbuffer"></a>
<p>Outline also provides two convenience commands to cycle the
visibility of each section and the whole buffer.  Typing
<kbd class="kbd"><kbd class="key">TAB</kbd></kbd> (<code class="code">outline-cycle</code>) on a heading cycles the current
section between &#8220;hide all&#8221;, &#8220;subheadings&#8221;, and &#8220;show all&#8221;
states.  Typing <kbd class="kbd">S-<kbd class="key">TAB</kbd></kbd> (<code class="code">outline-cycle-buffer</code>) cycles
the whole buffer between &#8220;only top-level headings&#8221;, &#8220;all headings
and subheadings&#8221;, and &#8220;show all&#8221; states.
</p>
<a class="anchor" id="Outline-Search"></a><a class="index-entry-id" id="index-reveal_002dmode"></a>
<a class="index-entry-id" id="index-search_002dinvisible"></a>
<p>When incremental search finds text that is hidden by Outline mode,
it makes that part of the buffer visible.  If you exit the search at
that position, the text remains visible.  To toggle whether or not
an active incremental search can match hidden text, type <kbd class="kbd">M-s i</kbd>.
To change the default for future searches, customize the option
<code class="code">search-invisible</code>.  (This option also affects how <code class="code">query-replace</code>
and related functions treat hidden text, see <a class="pxref" href="Search.xhtml#Query-Replace">Query Replace</a>.)
You can also automatically make text visible as you navigate in it by
using Reveal mode (<kbd class="kbd">M-x reveal-mode</kbd>), a buffer-local minor mode.
</p>
<a class="index-entry-id" id="index-outline_002ddefault_002dstate"></a>
<p>The <code class="code">outline-default-state</code> variable controls what headings
will be visible after Outline mode is turned on.  If non-<code class="code">nil</code>,
some headings are initially outlined.  If equal to a number, show only
headings up to and including the corresponding level.  If equal to
<code class="code">outline-show-all</code>, all text of buffer is shown.  If equal to
<code class="code">outline-show-only-headings</code>, show only headings, whatever their
level is.  If equal to a lambda function or function name, this
function is expected to toggle headings visibility, and will be called
without arguments after the mode is enabled.
</p>
</div>
<div class="subsection-level-extent" id="Outline-Views">
<h4 class="subsection" id="Viewing-One-Outline-in-Multiple-Views">26.9.5 Viewing One Outline in Multiple Views</h4>

<a class="index-entry-id" id="index-multiple-views-of-outline"></a>
<a class="index-entry-id" id="index-views-of-an-outline"></a>
<a class="index-entry-id" id="index-outline-with-multiple-views"></a>
<a class="index-entry-id" id="index-indirect-buffers-and-outlines"></a>
<p>You can display two views of a single outline at the same time, in
different windows.  To do this, you must create an indirect buffer using
<kbd class="kbd">M-x make-indirect-buffer</kbd>.  The first argument of this command is
the existing outline buffer name, and its second argument is the name to
use for the new indirect buffer.  See <a class="xref" href="Buffers.xhtml#Indirect-Buffers">Indirect Buffers</a>.
</p>
<p>Once the indirect buffer exists, you can display it in a window in the
normal fashion, with <kbd class="kbd">C-x 4 b</kbd> or other Emacs commands.  The Outline
mode commands to show and hide parts of the text operate on each buffer
independently; as a result, each buffer can have its own view.  If you
want more than two views on the same outline, create additional indirect
buffers.
</p>
</div>
<div class="subsection-level-extent" id="Foldout">
<h4 class="subsection" id="Folding-Editing">26.9.6 Folding Editing</h4>

<a class="index-entry-id" id="index-folding-editing"></a>
<p>The Foldout package extends Outline mode and Outline minor mode with
folding commands.  The idea of folding is that you zoom in on a
nested portion of the outline, while hiding its relatives at higher
levels.
</p>
<p>Consider an Outline mode buffer with all the text and subheadings under
level-1 headings hidden.  To look at what is hidden under one of these
headings, you could use <kbd class="kbd">C-c C-e</kbd> (<kbd class="kbd">M-x outline-show-entry</kbd>)
to expose the body, or <kbd class="kbd">C-c C-i</kbd> to expose the child (level-2)
headings.
</p>
<a class="index-entry-id" id="index-C_002dc-C_002dz"></a>
<a class="index-entry-id" id="index-foldout_002dzoom_002dsubtree"></a>
<p>With Foldout, you use <kbd class="kbd">C-c C-z</kbd> (<kbd class="kbd">M-x foldout-zoom-subtree</kbd>).
This exposes the body and child subheadings, and narrows the buffer so
that only the level-1<!-- /@w --> heading, the body and the level-2 headings are
visible.  Now to look under one of the level-2 headings, position the
cursor on it and use <kbd class="kbd">C-c C-z</kbd> again.  This exposes the level-2 body
and its level-3 child subheadings and narrows the buffer again.  Zooming
in on successive subheadings can be done as much as you like.  A string
in the mode line shows how deep you&#8217;ve gone.
</p>
<p>When zooming in on a heading, to see only the child subheadings specify
a numeric argument: <kbd class="kbd">C-u C-c C-z</kbd>.  The number of levels of children
can be specified too (compare <kbd class="kbd">M-x outline-show-children</kbd>), e.g.,
<kbd class="kbd">M-2&#160;C-c&#160;C-z</kbd><!-- /@w --> exposes two levels of child subheadings.
Alternatively, the body can be specified with a negative argument:
<kbd class="kbd">M--&#160;C-c&#160;C-z</kbd><!-- /@w -->.  The whole subtree can be expanded, similarly to
<kbd class="kbd">C-c C-s</kbd> (<kbd class="kbd">M-x outline-show-subtree</kbd>), by specifying a zero
argument: <kbd class="kbd">M-0&#160;C-c&#160;C-z</kbd><!-- /@w -->.
</p>
<p>While you&#8217;re zoomed in, you can still use Outline mode&#8217;s exposure and
hiding functions without disturbing Foldout.  Also, since the buffer is
narrowed, global editing actions will only affect text under the
zoomed-in heading.  This is useful for restricting changes to a
particular chapter or section of your document.
</p>
<a class="index-entry-id" id="index-C_002dc-C_002dx"></a>
<a class="index-entry-id" id="index-foldout_002dexit_002dfold"></a>
<p>To unzoom (exit) a fold, use <kbd class="kbd">C-c C-x</kbd> (<kbd class="kbd">M-x foldout-exit-fold</kbd>).
This hides all the text and subheadings under the top-level heading and
returns you to the previous view of the buffer.  Specifying a numeric
argument exits that many levels of folds.  Specifying a zero argument
exits all folds.
</p>
<p>To cancel the narrowing of a fold without hiding the text and
subheadings, specify a negative argument.  For example, <kbd class="kbd">M--2&#160;C-c&#160;C-x</kbd><!-- /@w --> exits two folds and leaves the text and subheadings exposed.
</p>
<p>Foldout mode also provides mouse commands for entering and exiting
folds, and for showing and hiding text:
</p>
<dl class="table">
<dt><kbd class="kbd">C-M-mouse-1</kbd> zooms in on the heading clicked on</dt>
<dd><ul class="itemize mark-none">
<li>single click: expose body.
</li><li>double click: expose subheadings.
</li><li>triple click: expose body and subheadings.
</li><li>quad click: expose entire subtree.
</li></ul>
</dd>
<dt><kbd class="kbd">C-M-mouse-2</kbd> exposes text under the heading clicked on</dt>
<dd><ul class="itemize mark-none">
<li>single click: expose body.
</li><li>double click: expose subheadings.
</li><li>triple click: expose body and subheadings.
</li><li>quad click: expose entire subtree.
</li></ul>
</dd>
<dt><kbd class="kbd">C-M-mouse-3</kbd> hides text under the heading clicked on or exits fold</dt>
<dd><ul class="itemize mark-none">
<li>single click: hide subtree.
</li><li>double click: exit fold and hide text.
</li><li>triple click: exit fold without hiding text.
</li><li>quad click: exit all folds and hide text.
</li></ul>
</dd>
</dl>

<a class="index-entry-id" id="index-foldout_002dmouse_002dmodifiers"></a>
<p>You can specify different modifier keys (instead of
<kbd class="kbd"><kbd class="key">Ctrl</kbd>-<kbd class="key">Meta</kbd>-</kbd>) by setting <code class="code">foldout-mouse-modifiers</code>; but if
you have already loaded the <samp class="file">foldout.el</samp> library, you must reload
it in order for this to take effect.
</p>
<p>To use the Foldout package, you can type <kbd class="kbd">M-x load-library
<kbd class="key">RET</kbd> foldout <kbd class="key">RET</kbd></kbd>; or you can arrange for to do that
automatically by putting the following in your init file:
</p>
<div class="example">
<pre class="example-preformatted">(with-eval-after-load &quot;outline&quot;
  (require 'foldout))
</pre></div>

</div>
</div>
<div class="section-level-extent" id="Org-Mode">
<h3 class="section" id="Org-Mode-1">26.10 Org Mode</h3>
<a class="index-entry-id" id="index-organizer"></a>
<a class="index-entry-id" id="index-planner"></a>
<a class="index-entry-id" id="index-Org-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Org"></a>

<a class="index-entry-id" id="index-org_002dmode"></a>
<p>Org mode is a variant of Outline mode for using Emacs as an
organizer and/or authoring system.  Files with names ending in the
extension <samp class="file">.org</samp> are opened in Org mode (see <a class="pxref" href="Modes.xhtml#Choosing-Modes">Choosing File Modes</a>).
To explicitly switch to Org mode, type <kbd class="kbd">M-x org-mode</kbd>.
</p>
<p>In Org mode, as in Outline mode, each entry has a heading line that
starts with one or more &#8216;<samp class="samp">*</samp>&#8217; characters.  See <a class="xref" href="#Outline-Format">Format of Outlines</a>.
In addition, any line that begins with the &#8216;<samp class="samp">#</samp>&#8217; character is
treated as a comment.
</p>
<a class="index-entry-id" id="index-TAB-_0028Org-Mode_0029"></a>
<a class="index-entry-id" id="index-org_002dcycle"></a>
<p>Org mode provides commands for easily viewing and manipulating the
outline structure.  The simplest of these commands is <kbd class="key">TAB</kbd>
(<code class="code">org-cycle</code>).  If invoked on a heading line, it cycles through
the different visibility states of the subtree: (i) showing only that
heading line, (ii) showing only the heading line and the heading lines
of its direct children, if any, and (iii) showing the entire subtree.
If invoked in a body line, the global binding for <kbd class="key">TAB</kbd> is
executed.
</p>
<a class="index-entry-id" id="index-S_002dTAB-_0028Org-Mode_0029"></a>
<a class="index-entry-id" id="index-org_002dshifttab"></a>
<p>Typing <kbd class="kbd">S-<kbd class="key">TAB</kbd></kbd> (<code class="code">org-shifttab</code>) anywhere in an Org mode
buffer cycles the visibility of the entire outline structure, between
(i) showing only top-level heading lines, (ii) showing all heading
lines but no body lines, and (iii) showing everything.
</p>
<a class="index-entry-id" id="index-M_002dUP-_0028Org-Mode_0029"></a>
<a class="index-entry-id" id="index-M_002dDOWN-_0028Org-Mode_0029"></a>
<a class="index-entry-id" id="index-M_002dLEFT-_0028Org-Mode_0029"></a>
<a class="index-entry-id" id="index-M_002dRIGHT-_0028Org-Mode_0029"></a>
<a class="index-entry-id" id="index-org_002dmetaup"></a>
<a class="index-entry-id" id="index-org_002dmetadown"></a>
<a class="index-entry-id" id="index-org_002dmetaleft"></a>
<a class="index-entry-id" id="index-org_002dmetaright"></a>
<p>You can move an entire entry up or down in the buffer, including its
body lines and subtree (if any), by typing <kbd class="kbd">M-<kbd class="key">UP</kbd></kbd>
(<code class="code">org-metaup</code>) or <kbd class="kbd">M-<kbd class="key">DOWN</kbd></kbd> (<code class="code">org-metadown</code>) on the
heading line.  Similarly, you can promote or demote a heading line
with <kbd class="kbd">M-<kbd class="key">LEFT</kbd></kbd> (<code class="code">org-metaleft</code>) and <kbd class="kbd">M-<kbd class="key">RIGHT</kbd></kbd>
(<code class="code">org-metaright</code>).  These commands execute their global bindings
if invoked on a body line.
</p>
<p>The following subsections give basic instructions for using Org mode
as an organizer and as an authoring system.  For details, see <a href="https://www.gnu.org/software/emacs/manual/html_node/org/index.html#Top">Introduction</a> in <cite class="cite">The Org Manual</cite>.
</p>

<div class="subsection-level-extent" id="Org-Organizer">
<h4 class="subsection" id="Org-as-an-organizer">26.10.1 Org as an organizer</h4>
<a class="index-entry-id" id="index-TODO-item"></a>
<a class="index-entry-id" id="index-Org-agenda"></a>

<a class="index-entry-id" id="index-C_002dc-C_002dt-_0028Org-Mode_0029"></a>
<a class="index-entry-id" id="index-org_002dtodo"></a>
<a class="index-entry-id" id="index-org_002dtodo_002dkeywords"></a>
<p>You can tag an Org entry as a <em class="dfn">TODO</em> item by typing <kbd class="kbd">C-c
C-t</kbd> (<code class="code">org-todo</code>) anywhere in the entry.  This adds the keyword
&#8216;<samp class="samp">TODO</samp>&#8217; to the heading line.  Typing <kbd class="kbd">C-c C-t</kbd> again switches
the keyword to &#8216;<samp class="samp">DONE</samp>&#8217;; another <kbd class="kbd">C-c C-t</kbd> removes the keyword
entirely, and so forth.  You can customize the keywords used by
<kbd class="kbd">C-c C-t</kbd> via the variable <code class="code">org-todo-keywords</code>.
</p>
<a class="index-entry-id" id="index-C_002dc-C_002ds-_0028Org-Mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dd-_0028Org-Mode_0029"></a>
<a class="index-entry-id" id="index-org_002dschedule"></a>
<a class="index-entry-id" id="index-org_002ddeadline"></a>
<p>Apart from marking an entry as TODO, you can attach a date to it, by
typing <kbd class="kbd">C-c C-s</kbd> (<code class="code">org-schedule</code>) in the entry.  This prompts
for a date by popping up the Emacs Calendar (see <a class="pxref" href="Calendar_002fDiary.xhtml#Calendar_002fDiary">The Calendar and the Diary</a>),
and then adds the tag &#8216;<samp class="samp">SCHEDULED</samp>&#8217;, together with the selected
date, beneath the heading line.  The command <kbd class="kbd">C-c C-d</kbd>
(<code class="code">org-deadline</code>) has the same effect, except that it uses the tag
<code class="code">DEADLINE</code>.
</p>
<a class="index-entry-id" id="index-C_002dc-_005b-_0028Org-Mode_0029"></a>
<a class="index-entry-id" id="index-org_002dagenda_002dfile_002dto_002dfront"></a>
<a class="index-entry-id" id="index-org_002dagenda_002dfiles"></a>
<p>Once you have some TODO items planned in an Org file, you can add
that file to the list of <em class="dfn">agenda files</em> by typing <kbd class="kbd">C-c [</kbd>
(<code class="code">org-agenda-file-to-front</code>).  Org mode is designed to let you
easily maintain multiple agenda files, e.g., for organizing different
aspects of your life.  The list of agenda files is stored in the
variable <code class="code">org-agenda-files</code>.
</p>
<a class="index-entry-id" id="index-org_002dagenda"></a>
<p>To view items coming from your agenda files, type <kbd class="kbd">M-x
org-agenda</kbd>.  This command prompts for what you want to see: a list of
things to do this week, a list of TODO items with specific keywords,
etc.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/org/Agenda-Views.html#Agenda-Views">Agenda Views</a> in <cite class="cite">The Org Manual</cite>, for details.
</p>
</div>
<div class="subsection-level-extent" id="Org-Authoring">
<h4 class="subsection" id="Org-as-an-authoring-system">26.10.2 Org as an authoring system</h4>
<a class="index-entry-id" id="index-Org-exporting"></a>

<a class="index-entry-id" id="index-org_002dexport_002ddispatch"></a>
<a class="index-entry-id" id="index-C_002dc-C_002de-_0028Org-mode_0029"></a>
<p>You may want to format your Org notes nicely and to prepare them for
export and publication.  To export the current buffer, type <kbd class="kbd">C-c
C-e</kbd> (<code class="code">org-export-dispatch</code>) anywhere in an Org buffer.  This
command prompts for an export format; currently supported formats
include HTML, LaTeX, Texinfo, OpenDocument (<samp class="file">.odt</samp>),
iCalendar, Markdown, man-page, and PDF.  Some formats, such as PDF,
require certain system tools to be installed.
</p>
<a class="index-entry-id" id="index-org_002dpublish_002dproject_002dalist"></a>
<p>To export several files at once to a specific directory, either
locally or over the network, you must define a list of projects
through the variable <code class="code">org-publish-project-alist</code>.  See its
documentation for details.
</p>
<p>Org supports a simple markup scheme for applying text formatting to
exported documents:
</p>
<div class="example">
<pre class="example-preformatted">- This text is /emphasized/
- This text is *in bold*
- This text is _underlined_
- This text uses =a teletype font=

#+begin_quote
``This is a quote.''
#+end_quote

#+begin_example
This is an example.
#+end_example
</pre></div>

<p>For further details, <a href="https://www.gnu.org/software/emacs/manual/html_node/org/Exporting.html#Exporting">Exporting</a> in <cite class="cite">The Org Manual</cite>, and
<a href="https://www.gnu.org/software/emacs/manual/html_node/org/Publishing.html#Publishing">Publishing</a> in <cite class="cite">The Org Manual</cite>.
</p>
</div>
</div>
<div class="section-level-extent" id="TeX-Mode">
<h3 class="section" id="TeX-Mode-1">26.11 TeX Mode</h3>
<a class="index-entry-id" id="index-TeX-mode"></a>
<a class="index-entry-id" id="index-LaTeX-mode"></a>
<a class="index-entry-id" id="index-SliTeX-mode"></a>
<a class="index-entry-id" id="index-DocTeX-mode"></a>
<a class="index-entry-id" id="index-mode_002c-TeX"></a>
<a class="index-entry-id" id="index-mode_002c-LaTeX"></a>
<a class="index-entry-id" id="index-mode_002c-SliTeX"></a>
<a class="index-entry-id" id="index-mode_002c-DocTeX"></a>
<a class="index-entry-id" id="index-tex_002dmode"></a>
<a class="index-entry-id" id="index-plain_002dtex_002dmode"></a>
<a class="index-entry-id" id="index-latex_002dmode"></a>
<a class="index-entry-id" id="index-slitex_002dmode"></a>
<a class="index-entry-id" id="index-doctex_002dmode"></a>
<a class="index-entry-id" id="index-bibtex_002dmode"></a>

<p>TeX is a powerful text formatter written by Donald Knuth; like
GNU Emacs, it is free software.  The TeX format has several
variants, including LaTeX, a simplified input format for TeX;
DocTeX, a special file format in which the LaTeX sources are
written, combining sources with documentation; and SliTeX, an
obsolete special form of LaTeX<a class="footnote" id="DOCF12" href="#FOOT12"><sup>12</sup></a>.
</p>
<a class="index-entry-id" id="index-tex_002ddefault_002dmode"></a>
<p>Emacs provides a TeX major mode for each of these variants: Plain
TeX mode, LaTeX mode, DocTeX mode, and SliTeX mode.  Emacs
selects the appropriate mode by looking at the contents of the buffer.
(This is done by invoking the <code class="code">tex-mode</code> command, which is
normally called automatically when you visit a TeX-like file.
See <a class="xref" href="Modes.xhtml#Choosing-Modes">Choosing File Modes</a>.)  If the contents are insufficient to determine
this, Emacs chooses the mode specified by the variable
<code class="code">tex-default-mode</code>; its default value is <code class="code">latex-mode</code>.  If
Emacs does not guess right, you can select the correct variant of
TeX mode using the commands <code class="code">plain-tex-mode</code>,
<code class="code">latex-mode</code>, <code class="code">slitex-mode</code>, or <code class="code">doctex-mode</code>.
</p>
<p>The following sections document the features of TeX mode and its
variants.  There are several other TeX-related Emacs packages,
which are not documented in this manual:
</p>
<ul class="itemize mark-bullet">
<li>BibTeX mode is a major mode for BibTeX files, which are commonly
used for keeping bibliographic references for LaTeX documents.  For
more information, see the documentation string for the command
<code class="code">bibtex-mode</code>.

</li><li>The RefTeX package provides a minor mode which can be used with
LaTeX mode to manage bibliographic references.
For more information, see the RefTeX Info manual, which is
distributed with Emacs.

</li><li>The AUCTeX package provides more advanced features for editing
TeX and its related formats, including the ability to preview
TeX equations within Emacs buffers.  Unlike BibTeX mode and the
RefTeX package, AUCTeX is not distributed with Emacs by default.
It can be downloaded via the Package Menu (see <a class="pxref" href="Packages.xhtml#Packages">Emacs Lisp Packages</a>); once
installed, see
the AUCTeX manual, which is included with the package.
</li></ul>


<div class="subsection-level-extent" id="TeX-Editing">
<h4 class="subsection" id="TeX-Editing-Commands">26.11.1 TeX Editing Commands</h4>

<dl class="table">
<dt><kbd class="kbd">&quot;</kbd></dt>
<dd><p>Insert, according to context, either &#8216;<samp class="samp">``</samp>&#8217; or &#8216;<samp class="samp">&quot;</samp>&#8217; or
&#8216;<samp class="samp">''</samp>&#8217; (<code class="code">tex-insert-quote</code>).
</p></dd>
<dt><kbd class="kbd">C-j</kbd></dt>
<dd><p>Insert a paragraph break (two newlines) and check the previous
paragraph for unbalanced braces or dollar signs
(<code class="code">tex-terminate-paragraph</code>).
</p></dd>
<dt><kbd class="kbd">M-x tex-validate-region</kbd></dt>
<dd><p>Check each paragraph in the region for unbalanced braces or dollar signs.
</p></dd>
<dt><kbd class="kbd">C-c {</kbd></dt>
<dd><p>Insert &#8216;<samp class="samp">{}</samp>&#8217; and position point between them (<code class="code">tex-insert-braces</code>).
</p></dd>
<dt><kbd class="kbd">C-c }</kbd></dt>
<dd><p>Move forward past the next unmatched close brace (<code class="code">up-list</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-tex_002dinsert_002dquote"></a>
<a class="index-entry-id" id="index-_0022-_0028TeX-mode_0029"></a>
<p>In TeX, the character &#8216;<samp class="samp">&quot;</samp>&#8217; is not normally used; instead,
quotations begin with &#8216;<samp class="samp">``</samp>&#8217; and end with &#8216;<samp class="samp">''</samp>&#8217;.  TeX mode
therefore binds the <kbd class="kbd">&quot;</kbd> key to the <code class="code">tex-insert-quote</code>
command.  This inserts &#8216;<samp class="samp">``</samp>&#8217; after whitespace or an open brace,
&#8216;<samp class="samp">&quot;</samp>&#8217; after a backslash, and &#8216;<samp class="samp">''</samp>&#8217; after any other character.
</p>
<p>As a special exception, if you type <kbd class="kbd">&quot;</kbd> when the text before
point is either &#8216;<samp class="samp">``</samp>&#8217; or &#8216;<samp class="samp">''</samp>&#8217;, Emacs replaces that preceding
text with a single &#8216;<samp class="samp">&quot;</samp>&#8217; character.  You can therefore type
<kbd class="kbd">&quot;&quot;</kbd> to insert &#8216;<samp class="samp">&quot;</samp>&#8217;, should you ever need to do so.  (You can
also use <kbd class="kbd">C-q &quot;</kbd> to insert this character.)
</p>
<p>In TeX mode, &#8216;<samp class="samp">$</samp>&#8217; has a special syntax code which attempts to
understand the way TeX math mode delimiters match.  When you insert a
&#8216;<samp class="samp">$</samp>&#8217; that is meant to exit math mode, the position of the matching
&#8216;<samp class="samp">$</samp>&#8217; that entered math mode is displayed for a second.  This is the
same feature that displays the open brace that matches a close brace that
is inserted.  However, there is no way to tell whether a &#8216;<samp class="samp">$</samp>&#8217; enters
math mode or leaves it; so when you insert a &#8216;<samp class="samp">$</samp>&#8217; that enters math
mode, the previous &#8216;<samp class="samp">$</samp>&#8217; position is shown as if it were a match, even
though they are actually unrelated.
</p>
<a class="index-entry-id" id="index-tex_002dinsert_002dbraces"></a>
<a class="index-entry-id" id="index-C_002dc-_007b-_0028TeX-mode_0029"></a>
<a class="index-entry-id" id="index-up_002dlist"></a>
<a class="index-entry-id" id="index-C_002dc-_007d-_0028TeX-mode_0029"></a>
<p>TeX uses braces as delimiters that must match.  Some users prefer
to keep braces balanced at all times, rather than inserting them
singly.  Use <kbd class="kbd">C-c {</kbd> (<code class="code">tex-insert-braces</code>) to insert a pair of
braces.  It leaves point between the two braces so you can insert the
text that belongs inside.  Afterward, use the command <kbd class="kbd">C-c }</kbd>
(<code class="code">up-list</code>) to move forward past the close brace.  You can also
invoke <kbd class="kbd">C-c {</kbd> after marking some text: then the command encloses
the marked text in braces.
</p>
<a class="index-entry-id" id="index-tex_002dvalidate_002dregion"></a>
<a class="index-entry-id" id="index-tex_002dterminate_002dparagraph"></a>
<a class="index-entry-id" id="index-C_002dj-_0028TeX-mode_0029"></a>
<p>There are two commands for checking the matching of braces.
<kbd class="kbd">C-j</kbd> (<code class="code">tex-terminate-paragraph</code>) checks the paragraph before
point, and inserts two newlines to start a new paragraph.  It outputs
a message in the echo area if any mismatch is found.  <kbd class="kbd">M-x
tex-validate-region</kbd> checks a region, paragraph by paragraph.  The
errors are listed in an <samp class="file">*Occur*</samp> buffer; you can use the usual
Occur mode commands in that buffer, such as <kbd class="kbd">C-c C-c</kbd>, to visit a
particular mismatch (see <a class="pxref" href="Search.xhtml#Other-Repeating-Search">Other Search-and-Loop Commands</a>).
</p>
<p>Note that Emacs commands count square brackets and parentheses in
TeX mode, not just braces.  This is not strictly correct for the
purpose of checking TeX syntax.  However, parentheses and square
brackets are likely to be used in text as matching delimiters, and it
is useful for the various motion commands and automatic match display
to work with them.
</p>
</div>
<div class="subsection-level-extent" id="LaTeX-Editing">
<h4 class="subsection" id="LaTeX-Editing-Commands">26.11.2 LaTeX Editing Commands</h4>

<p>LaTeX mode provides a few extra features not applicable to plain
TeX:
</p>
<dl class="table">
<dt><kbd class="kbd">C-c C-o</kbd></dt>
<dd><p>Insert &#8216;<samp class="samp">\begin</samp>&#8217; and &#8216;<samp class="samp">\end</samp>&#8217; for LaTeX block and position
point on a line between them (<code class="code">latex-insert-block</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-e</kbd></dt>
<dd><p>Close the innermost LaTeX block not yet closed
(<code class="code">latex-close-block</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-latex_002dinsert_002dblock"></a>
<a class="index-entry-id" id="index-C_002dc-C_002do-_0028LaTeX-mode_0029"></a>
<p>In LaTeX input, &#8216;<samp class="samp">\begin</samp>&#8217; and &#8216;<samp class="samp">\end</samp>&#8217; tags are used to
group blocks of text.  To insert a block, type <kbd class="kbd">C-c C-o</kbd>
(<code class="code">latex-insert-block</code>).  This prompts for a block type, and inserts
the appropriate matching &#8216;<samp class="samp">\begin</samp>&#8217; and &#8216;<samp class="samp">\end</samp>&#8217; tags, leaving a
blank line between the two and moving point there.
</p>
<a class="index-entry-id" id="index-latex_002dblock_002dnames"></a>
<p>When entering the block type argument to <kbd class="kbd">C-c C-o</kbd>, you can use
the usual completion commands (see <a class="pxref" href="Minibuffer.xhtml#Completion">Completion</a>).  The default
completion list contains the standard LaTeX block types.  If you
want additional block types for completion, customize the list
variable <code class="code">latex-block-names</code>.
</p>
<a class="index-entry-id" id="index-latex_002dclose_002dblock"></a>
<a class="index-entry-id" id="index-C_002dc-C_002de-_0028LaTeX-mode_0029"></a>
<a class="index-entry-id" id="index-latex_002delectric_002denv_002dpair_002dmode"></a>
<p>In LaTeX input, &#8216;<samp class="samp">\begin</samp>&#8217; and &#8216;<samp class="samp">\end</samp>&#8217; tags must balance.
You can use <kbd class="kbd">C-c C-e</kbd> (<code class="code">latex-close-block</code>) to insert an
&#8216;<samp class="samp">\end</samp>&#8217; tag which matches the last unmatched &#8216;<samp class="samp">\begin</samp>&#8217;.  It
also indents the &#8216;<samp class="samp">\end</samp>&#8217; to match the corresponding &#8216;<samp class="samp">\begin</samp>&#8217;,
and inserts a newline after the &#8216;<samp class="samp">\end</samp>&#8217; tag if point is at the
beginning of a line.  The minor mode <code class="code">latex-electric-env-pair-mode</code>
automatically inserts an &#8216;<samp class="samp">\end</samp>&#8217; or &#8216;<samp class="samp">\begin</samp>&#8217; tag for you
when you type the corresponding one.
</p>
</div>
<div class="subsection-level-extent" id="TeX-Print">
<h4 class="subsection" id="TeX-Printing-Commands">26.11.3 TeX Printing Commands</h4>

<p>You can invoke TeX as a subprocess of Emacs, supplying either
the entire contents of the buffer or just part of it (e.g., one
chapter of a larger document).
</p>
<dl class="table">
<dt><kbd class="kbd">C-c C-b</kbd></dt>
<dd><p>Invoke TeX on the entire current buffer (<code class="code">tex-buffer</code>).
</p>
</dd>
<dt><kbd class="kbd">C-c C-r</kbd></dt>
<dd><p>Invoke TeX on the current region, together with the buffer&#8217;s header
(<code class="code">tex-region</code>).
</p>
</dd>
<dt><kbd class="kbd">C-c C-f</kbd></dt>
<dd><p>Invoke TeX on the current file (<code class="code">tex-file</code>).
</p>
</dd>
<dt><kbd class="kbd">C-c C-v</kbd></dt>
<dd><p>Preview the output from the last <kbd class="kbd">C-c C-b</kbd>, <kbd class="kbd">C-c C-r</kbd>, or <kbd class="kbd">C-c
C-f</kbd> command (<code class="code">tex-view</code>).
</p>
</dd>
<dt><kbd class="kbd">C-c C-p</kbd></dt>
<dd><p>Print the output from the last <kbd class="kbd">C-c C-b</kbd>, <kbd class="kbd">C-c C-r</kbd>, or
<kbd class="kbd">C-c C-f</kbd> command (<code class="code">tex-print</code>).
</p>
</dd>
<dt><kbd class="kbd">C-c <kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Invoke BibTeX on the current file (<code class="code">tex-bibtex-file</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-l</kbd></dt>
<dd><p>Recenter the window showing output from TeX so that the last line
can be seen (<code class="code">tex-recenter-output-buffer</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-k</kbd></dt>
<dd><p>Kill the TeX subprocess (<code class="code">tex-kill-job</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-c</kbd></dt>
<dd><p>Invoke some other compilation command on the entire current buffer
(<code class="code">tex-compile</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-tex_002dbuffer"></a>
<a class="index-entry-id" id="index-C_002dc-C_002db-_0028TeX-mode_0029"></a>
<a class="index-entry-id" id="index-tex_002dview"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dv-_0028TeX-mode_0029"></a>
<a class="index-entry-id" id="index-tex_002dprint"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dp-_0028TeX-mode_0029"></a>
<p>To pass the current buffer through TeX, type <kbd class="kbd">C-c C-b</kbd>
(<code class="code">tex-buffer</code>).  The formatted output goes in a temporary file,
normally a <samp class="file">.dvi</samp> file.  Afterwards, you can type <kbd class="kbd">C-c C-v</kbd>
(<code class="code">tex-view</code>) to launch an external program, such as
<code class="command">xdvi</code>, to view this output file.  You can also type <kbd class="kbd">C-c
C-p</kbd> (<code class="code">tex-print</code>) to print a hardcopy of the output file.
</p>
<a class="index-entry-id" id="index-TEXINPUTS-environment-variable"></a>
<a class="index-entry-id" id="index-tex_002ddirectory"></a>
<p>By default, <kbd class="kbd">C-c C-b</kbd> runs TeX in the current directory.  The
output of TeX is also created in this directory.  To run TeX in a
different directory, change the variable <code class="code">tex-directory</code> to
the desired directory.  If your environment variable <code class="env">TEXINPUTS</code>
contains relative names, or if your files contain
&#8216;<samp class="samp">\input</samp>&#8217; commands with relative file names, then
<code class="code">tex-directory</code> <em class="emph">must</em> be <code class="code">&quot;.&quot;</code> or you will get the
wrong results.  Otherwise, it is safe to specify some other directory,
such as <code class="code">&quot;/tmp&quot;</code>.
</p>
<a class="index-entry-id" id="index-tex_002drun_002dcommand"></a>
<a class="index-entry-id" id="index-latex_002drun_002dcommand"></a>
<a class="index-entry-id" id="index-tex_002ddvi_002dview_002dcommand"></a>
<a class="index-entry-id" id="index-tex_002ddvi_002dprint_002dcommand"></a>
<a class="index-entry-id" id="index-tex_002dprint_002dfile_002dextension"></a>
<p>The buffer&#8217;s TeX variant determines what shell command <kbd class="kbd">C-c
C-b</kbd> actually runs.  In Plain TeX mode, it is specified by the
variable <code class="code">tex-run-command</code>, which defaults to <code class="code">&quot;tex&quot;</code>.  In
LaTeX mode, it is specified by <code class="code">latex-run-command</code>, which
defaults to <code class="code">&quot;latex&quot;</code>.  The shell command that <kbd class="kbd">C-c C-v</kbd> runs
to view the <samp class="file">.dvi</samp> output is determined by the variable
<code class="code">tex-dvi-view-command</code>, regardless of the TeX variant.  The
shell command that <kbd class="kbd">C-c C-p</kbd> runs to print the output is
determined by the variable <code class="code">tex-dvi-print-command</code>.  The variable
<code class="code">tex-print-file-extension</code> can be set to the required file
extension for viewing and printing TeX-compiled files.  For
example, you can set it to <samp class="file">.pdf</samp>, and update
<code class="code">tex-dvi-view-command</code> and <code class="code">tex-dvi-print-command</code>
accordingly, as well as <code class="code">latex-run-command</code> or
<code class="code">tex-run-command</code>.
</p>
<p>Normally, Emacs automatically appends the output file name to the
shell command strings described in the preceding paragraph.  For
example, if <code class="code">tex-dvi-view-command</code> is <code class="code">&quot;xdvi&quot;</code>, <kbd class="kbd">C-c
C-v</kbd> runs <code class="command">xdvi <var class="var">output-file-name</var></code>.  In some cases,
however, the file name needs to be embedded in the command, e.g., if
you need to provide the file name as an argument to one command whose
output is piped to another.  You can specify where to put the file
name with &#8216;<samp class="samp">*</samp>&#8217; in the command string.  For example,
</p>
<div class="example">
<pre class="example-preformatted">(setq tex-dvi-print-command &quot;dvips -f * | lpr&quot;)
</pre></div>

<a class="index-entry-id" id="index-tex_002dkill_002djob"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dk-_0028TeX-mode_0029"></a>
<a class="index-entry-id" id="index-tex_002drecenter_002doutput_002dbuffer"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dl-_0028TeX-mode_0029"></a>
<p>The terminal output from TeX, including any error messages,
appears in a buffer called <samp class="file">*tex-shell*</samp>.  If TeX gets an
error, you can switch to this buffer and feed it input (this works as
in Shell mode; see <a class="pxref" href="Shell.xhtml#Interactive-Shell">Interactive Subshell</a>).  Without switching to this
buffer you can scroll it so that its last line is visible by typing
<kbd class="kbd">C-c C-l</kbd>.
</p>
<p>Type <kbd class="kbd">C-c C-k</kbd> (<code class="code">tex-kill-job</code>) to kill the TeX process if
you see that its output is no longer useful.  Using <kbd class="kbd">C-c C-b</kbd> or
<kbd class="kbd">C-c C-r</kbd> also kills any TeX process still running.
</p>
<a class="index-entry-id" id="index-tex_002dregion"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dr-_0028TeX-mode_0029"></a>
<p>You can also pass an arbitrary region through TeX by typing
<kbd class="kbd">C-c C-r</kbd> (<code class="code">tex-region</code>).  This is tricky, however, because
most files of TeX input contain commands at the beginning to set
parameters and define macros, without which no later part of the file
will format correctly.  To solve this problem, <kbd class="kbd">C-c C-r</kbd> allows
you to designate a part of the file as containing essential commands;
it is included before the specified region as part of the input to
TeX.  The designated part of the file is called the <em class="dfn">header</em>.
</p>
<a class="index-entry-id" id="index-header-_0028TeX-mode_0029"></a>
<p>To indicate the bounds of the header in Plain TeX mode, you insert two
special strings in the file.  Insert &#8216;<samp class="samp">%**start of header</samp>&#8217; before the
header, and &#8216;<samp class="samp">%**end of header</samp>&#8217; after it.  Each string must appear
entirely on one line, but there may be other text on the line before or
after.  The lines containing the two strings are included in the header.
If &#8216;<samp class="samp">%**start of header</samp>&#8217; does not appear within the first 100 lines of
the buffer, <kbd class="kbd">C-c C-r</kbd> assumes that there is no header.
</p>
<p>In LaTeX mode, the header begins with &#8216;<samp class="samp">\documentclass</samp>&#8217; or
&#8216;<samp class="samp">\documentstyle</samp>&#8217; and ends with &#8216;<samp class="samp">\begin{document}</samp>&#8217;.  These
are commands that LaTeX requires you to use in any case, so nothing
special needs to be done to identify the header.
</p>
<a class="index-entry-id" id="index-tex_002dfile"></a>
<a class="index-entry-id" id="index-C_002dc-C_002df-_0028TeX-mode_0029"></a>
<p>The commands (<code class="code">tex-buffer</code>) and (<code class="code">tex-region</code>) do all of their
work in a temporary directory, and do not have available any of the auxiliary
files needed by TeX for cross-references; these commands are generally
not suitable for running the final copy in which all of the cross-references
need to be correct.
</p>
<p>When you want the auxiliary files for cross references, use <kbd class="kbd">C-c
C-f</kbd> (<code class="code">tex-file</code>) which runs TeX on the current buffer&#8217;s file,
in that file&#8217;s directory.  Before running TeX, it offers to save any
modified buffers.  Generally, you need to use (<code class="code">tex-file</code>) twice to
get the cross-references right.
</p>
<a class="index-entry-id" id="index-tex_002dstart_002doptions"></a>
<p>The value of the variable <code class="code">tex-start-options</code> specifies
options for the TeX run.
</p>
<a class="index-entry-id" id="index-tex_002dstart_002dcommands"></a>
<p>The value of the variable <code class="code">tex-start-commands</code> specifies TeX
commands for starting TeX.  The default value causes TeX to run
in nonstop mode.  To run TeX interactively, set the variable to
<code class="code">&quot;&quot;</code>.
</p>
<a class="index-entry-id" id="index-tex_002dmain_002dfile"></a>
<p>Large TeX documents are often split into several files&#8212;one main
file, plus subfiles.  Running TeX on a subfile typically does not
work; you have to run it on the main file.  In order to make
<code class="code">tex-file</code> useful when you are editing a subfile, you can set the
variable <code class="code">tex-main-file</code> to the name of the main file.  Then
<code class="code">tex-file</code> runs TeX on that file.
</p>
<p>The most convenient way to use <code class="code">tex-main-file</code> is to specify it
in a local variable list in each of the subfiles.  See <a class="xref" href="Customization.xhtml#File-Variables">Local Variables in Files</a>.
</p>
<a class="index-entry-id" id="index-tex_002dbibtex_002dfile"></a>
<a class="index-entry-id" id="index-C_002dc-TAB-_0028TeX-mode_0029"></a>
<a class="index-entry-id" id="index-tex_002dbibtex_002dcommand"></a>
<p>For LaTeX files, you can use BibTeX to process the auxiliary
file for the current buffer&#8217;s file.  BibTeX looks up bibliographic
citations in a data base and prepares the cited references for the
bibliography section.  The command <kbd class="kbd">C-c <kbd class="key">TAB</kbd></kbd>
(<code class="code">tex-bibtex-file</code>) runs the shell command
(<code class="code">tex-bibtex-command</code>) to produce a &#8216;<samp class="samp">.bbl</samp>&#8217; file for the
current buffer&#8217;s file.  Generally, you need to do <kbd class="kbd">C-c C-f</kbd>
(<code class="code">tex-file</code>) once to generate the &#8216;<samp class="samp">.aux</samp>&#8217; file, then do
<kbd class="kbd">C-c <kbd class="key">TAB</kbd></kbd> (<code class="code">tex-bibtex-file</code>), and then repeat <kbd class="kbd">C-c C-f</kbd>
(<code class="code">tex-file</code>) twice more to get the cross-references correct.
</p>
<a class="index-entry-id" id="index-tex_002dcompile"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dc-_0028TeX-mode_0029"></a>
<p>To invoke some other compilation program on the current TeX
buffer, type <kbd class="kbd">C-c C-c</kbd> (<code class="code">tex-compile</code>).  This command knows
how to pass arguments to many common programs, including
<samp class="file">pdflatex</samp>, <samp class="file">yap</samp>, <samp class="file">xdvi</samp>, and <samp class="file">dvips</samp>.  You can
select your desired compilation program using the standard completion
keys (see <a class="pxref" href="Minibuffer.xhtml#Completion">Completion</a>).
</p>
</div>
<div class="subsection-level-extent" id="TeX-Misc">
<h4 class="subsection" id="TeX-Mode-Miscellany">26.11.4 TeX Mode Miscellany</h4>

<a class="index-entry-id" id="index-tex_002dshell_002dhook"></a>
<a class="index-entry-id" id="index-tex_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-doctex_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-latex_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-slitex_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-plain_002dtex_002dmode_002dhook"></a>
<p>Entering any variant of TeX mode runs the hooks
<code class="code">text-mode-hook</code> and <code class="code">tex-mode-hook</code>.  Then it runs either
<code class="code">plain-tex-mode-hook</code>, <code class="code">doctex-mode-hook</code>,
<code class="code">latex-mode-hook</code>, or <code class="code">slitex-mode-hook</code>, whichever is
appropriate.  Starting the TeX shell runs the hook
<code class="code">tex-shell-hook</code>.  See <a class="xref" href="Customization.xhtml#Hooks">Hooks</a>.
</p>
<a class="index-entry-id" id="index-iso_002diso2tex"></a>
<a class="index-entry-id" id="index-iso_002dtex2iso"></a>
<a class="index-entry-id" id="index-iso_002diso2gtex"></a>
<a class="index-entry-id" id="index-iso_002dgtex2iso"></a>
<a class="index-entry-id" id="index-Latin_002d1-TeX-encoding"></a>
<a class="index-entry-id" id="index-TeX-encoding"></a>
<p>The commands <kbd class="kbd">M-x iso-iso2tex</kbd>, <kbd class="kbd">M-x iso-tex2iso</kbd>, <kbd class="kbd">M-x
iso-iso2gtex</kbd> and <kbd class="kbd">M-x iso-gtex2iso</kbd> can be used to convert
between Latin-1 encoded files and TeX-encoded equivalents.
</p>
</div>
</div>
<div class="section-level-extent" id="HTML-Mode">
<h3 class="section" id="SGML-and-HTML-Modes">26.12 SGML and HTML Modes</h3>
<a class="index-entry-id" id="index-SGML-mode"></a>
<a class="index-entry-id" id="index-HTML-mode"></a>
<a class="index-entry-id" id="index-mode_002c-SGML"></a>
<a class="index-entry-id" id="index-mode_002c-HTML"></a>
<a class="index-entry-id" id="index-sgml_002dmode"></a>
<a class="index-entry-id" id="index-html_002dmode"></a>

<p>The major modes for SGML and HTML provide indentation support and
commands for operating on tags.
</p>
<p>HTML consists of two modes&#8212;one, a basic mode called
<code class="code">html-mode</code> is a slightly customized variant of SGML mode.  The
other, which is used by default for HTML files, is called
<code class="code">mhtml-mode</code>, and attempts to properly handle Javascript enclosed
in a <code class="code">&lt;script&gt;</code> element and CSS embedded in a <code class="code">&lt;style&gt;</code>
element.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-sgml_002dname_002dchar"></a>
<a id="index-C_002dc-C_002dn-_0028SGML-mode_0029"></a><kbd class="kbd">C-c C-n</kbd></dt>
<dd><p>Interactively specify a special character and insert the SGML
&#8216;<samp class="samp">&amp;</samp>&#8217;-command for that character (<code class="code">sgml-name-char</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-sgml_002dtag"></a>
<a id="index-C_002dc-C_002dt-_0028SGML-mode_0029"></a><kbd class="kbd">C-c C-t</kbd></dt>
<dd><p>Interactively specify a tag and its attributes (<code class="code">sgml-tag</code>).
This command asks you for a tag name and for the attribute values,
then inserts both the opening tag and the closing tag, leaving point
between them.
</p>
<p>With a prefix argument <var class="var">n</var>, the command puts the tag around the
<var class="var">n</var> words already present in the buffer after point.  Whenever a
region is active, it puts the tag around the region (when Transient
Mark mode is off, it does this when a numeric argument of &#8722;1 is
supplied.)
</p>
</dd>
<dt><a class="index-entry-id" id="index-sgml_002dattributes"></a>
<a id="index-C_002dc-C_002da-_0028SGML-mode_0029"></a><kbd class="kbd">C-c C-a</kbd></dt>
<dd><p>Interactively insert attribute values for the current tag
(<code class="code">sgml-attributes</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-sgml_002dskip_002dtag_002dforward"></a>
<a id="index-C_002dc-C_002df-_0028SGML-mode_0029"></a><kbd class="kbd">C-c C-f</kbd></dt>
<dd><p>Skip across a balanced tag group (which extends from an opening tag
through its corresponding closing tag) (<code class="code">sgml-skip-tag-forward</code>).
A numeric argument acts as a repeat count.
</p>
</dd>
<dt><a class="index-entry-id" id="index-sgml_002dskip_002dtag_002dbackward"></a>
<a id="index-C_002dc-C_002db-_0028SGML-mode_0029"></a><kbd class="kbd">C-c C-b</kbd></dt>
<dd><p>Skip backward across a balanced tag group (which extends from an
opening tag through its corresponding closing tag)
(<code class="code">sgml-skip-tag-backward</code>).  A numeric argument acts as a repeat
count.
</p>
</dd>
<dt><a class="index-entry-id" id="index-sgml_002ddelete_002dtag"></a>
<a id="index-C_002dc-C_002dd-_0028SGML-mode_0029"></a><kbd class="kbd">C-c C-d</kbd></dt>
<dd><p>Delete the tag at or after point, and delete the matching tag too
(<code class="code">sgml-delete-tag</code>).  If the tag at or after point is an opening
tag, delete the closing tag too; if it is a closing tag, delete the
opening tag too.
</p>
</dd>
<dt><a class="index-entry-id" id="index-sgml_002dtag_002dhelp"></a>
<a id="index-C_002dc-_003f-_0028SGML-mode_0029"></a><kbd class="kbd">C-c ? <var class="var">tag</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Display a description of the meaning of tag <var class="var">tag</var>
(<code class="code">sgml-tag-help</code>).  If the argument <var class="var">tag</var> is empty, describe
the tag at point.
</p>
</dd>
<dt><a class="index-entry-id" id="index-sgml_002dclose_002dtag"></a>
<a id="index-C_002dc-_002f-_0028SGML-mode_0029"></a><kbd class="kbd">C-c /</kbd></dt>
<dd><p>Insert a close tag for the innermost unterminated tag
(<code class="code">sgml-close-tag</code>).  If called within a tag or a comment,
close it instead of inserting a close tag.
</p>
</dd>
<dt><a class="index-entry-id" id="index-sgml_002dname_002d8bit_002dmode"></a>
<a id="index-C_002dc-8-_0028SGML-mode_0029"></a><kbd class="kbd">C-c 8</kbd></dt>
<dd><p>Toggle a minor mode in which Latin-1 characters insert the
corresponding SGML commands that stand for them, instead of the
characters themselves (<code class="code">sgml-name-8bit-mode</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-sgml_002dvalidate"></a>
<a id="index-C_002dc-C_002dv-_0028SGML-mode_0029"></a><kbd class="kbd">C-c C-v</kbd></dt>
<dd><p>Run a shell command (which you must specify) to validate the current
buffer as SGML (<code class="code">sgml-validate</code>).  (In HTML mode this key
sequence runs a different command.)
</p>
</dd>
<dt><a class="index-entry-id" id="index-sgml_002dtags_002dinvisible"></a>
<a id="index-C_002dc-TAB-_0028SGML-mode_0029"></a><kbd class="kbd">C-c <kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Toggle the visibility of existing tags in the buffer.  This can be
used as a cheap preview (<code class="code">sgml-tags-invisible</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-nXML-mode"></a>
<a class="index-entry-id" id="index-mode_002c-nXML"></a>
<a class="index-entry-id" id="index-mode_002c-XML"></a>
<a class="index-entry-id" id="index-nxml_002dmode"></a>
<a class="index-entry-id" id="index-XML-schema"></a>
<p>The major mode for editing XML documents is called nXML mode.  This
is a powerful major mode that can recognize many existing XML schemas
and use them to provide completion of XML elements via
<kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd>, as well as on-the-fly XML
validation with error highlighting.  To enable nXML mode in an
existing buffer, type <kbd class="kbd">M-x nxml-mode</kbd>, or, equivalently, <kbd class="kbd">M-x
xml-mode</kbd>.  Emacs uses nXML mode for files which have the extension
<samp class="file">.xml</samp>.  For XHTML files, which have the extension <samp class="file">.xhtml</samp>,
Emacs uses HTML mode by default; you can make it use nXML mode by
customizing the variable <code class="code">auto-mode-alist</code> (see <a class="pxref" href="Modes.xhtml#Choosing-Modes">Choosing File Modes</a>).
nXML mode is described in an Info manual, which is distributed with
Emacs.
</p>
<a class="index-entry-id" id="index-sgml_002dxml_002dmode"></a>
<p>You may choose to use the less powerful SGML mode for editing XML,
since XML is a strict subset of SGML.  To enable SGML mode in an
existing buffer, type <kbd class="kbd">M-x sgml-mode</kbd>.  On enabling SGML mode,
Emacs examines the buffer to determine whether it is XML; if so, it
sets the variable <code class="code">sgml-xml-mode</code> to a non-<code class="code">nil</code> value.
This causes SGML mode&#8217;s tag insertion commands, described above, to
always insert explicit closing tags as well.
</p>
</div>
<div class="section-level-extent" id="Nroff-Mode">
<h3 class="section" id="Nroff-Mode-1">26.13 Nroff Mode</h3>

<a class="index-entry-id" id="index-nroff"></a>
<a class="index-entry-id" id="index-nroff_002dmode"></a>
<a class="index-entry-id" id="index-nroff_002dmode_002dhook"></a>
<p>Nroff mode, a major mode derived from Text mode, is
specialized for editing nroff files (e.g., Unix man pages).  Type
<kbd class="kbd">M-x nroff-mode</kbd> to enter this mode.  Entering Nroff mode runs the
hook <code class="code">text-mode-hook</code>, then <code class="code">nroff-mode-hook</code>
(see <a class="pxref" href="Customization.xhtml#Hooks">Hooks</a>).
</p>
<p>In Nroff mode, nroff command lines are treated as paragraph
separators, pages are separated by &#8216;<samp class="samp">.bp</samp>&#8217; commands, and comments
start with backslash-doublequote.  It also defines these commands:
</p>
<a class="index-entry-id" id="index-nroff_002dforward_002dtext_002dline"></a>
<a class="index-entry-id" id="index-nroff_002dbackward_002dtext_002dline"></a>
<a class="index-entry-id" id="index-nroff_002dcount_002dtext_002dlines"></a>
<a class="index-entry-id" id="index-M_002dn-_0028Nroff-mode_0029"></a>
<a class="index-entry-id" id="index-M_002dp-_0028Nroff-mode_0029"></a>
<a class="index-entry-id" id="index-M_002d_003f-_0028Nroff-mode_0029"></a>
<dl class="table">
<dt><kbd class="kbd">M-n</kbd></dt>
<dd><p>Move to the beginning of the next line that isn&#8217;t an nroff command
(<code class="code">nroff-forward-text-line</code>).  An argument is a repeat count.
</p></dd>
<dt><kbd class="kbd">M-p</kbd></dt>
<dd><p>Like <kbd class="kbd">M-n</kbd> but move up (<code class="code">nroff-backward-text-line</code>).
</p></dd>
<dt><kbd class="kbd">M-?</kbd></dt>
<dd><p>Displays in the echo area the number of text lines (lines that are not
nroff commands) in the region (<code class="code">nroff-count-text-lines</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-nroff_002delectric_002dmode"></a>
<p>Electric Nroff mode is a buffer-local minor mode that can be used
with Nroff mode.  To toggle this minor mode, type <kbd class="kbd">M-x
nroff-electric-mode</kbd> (see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).  When the mode is on, each
time you type <kbd class="key">RET</kbd> to end a line containing an nroff command that
opens a kind of grouping, the nroff command to close that grouping is
automatically inserted on the following line.
</p>
<p>If you use Outline minor mode with Nroff mode (see <a class="pxref" href="#Outline-Mode">Outline Mode</a>), heading lines are lines of the form &#8216;<samp class="samp">.H</samp>&#8217; followed by a
number (the header level).
</p>
</div>
<div class="section-level-extent" id="Enriched-Text">
<h3 class="section" id="Enriched-Text-1">26.14 Enriched Text</h3>
<a class="index-entry-id" id="index-Enriched-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Enriched"></a>
<a class="index-entry-id" id="index-enriched-text"></a>
<a class="index-entry-id" id="index-WYSIWYG"></a>
<a class="index-entry-id" id="index-word-processing"></a>
<a class="index-entry-id" id="index-text_002fenriched-MIME-format"></a>

<p>Enriched mode is a minor mode for editing formatted text files in a
WYSIWYG (What You See Is What You Get) fashion.  When Enriched
mode is enabled, you can apply various formatting properties to the
text in the buffer, such as fonts and colors; upon saving the buffer,
those properties are saved together with the text, using the MIME
&#8216;<samp class="samp">text/enriched</samp>&#8217; file format.
</p>
<p>Enriched mode is typically used with Text mode (see <a class="pxref" href="#Text-Mode">Text Mode</a>).
It is <em class="emph">not</em> compatible with Font Lock mode, which is used by many
major modes, including most programming language modes, for syntax
highlighting (see <a class="pxref" href="Display.xhtml#Font-Lock">Font Lock mode</a>).  Unlike Enriched mode, Font Lock
mode assigns text properties automatically, based on the current
buffer contents; those properties are not saved to disk.
</p>
<p>The file <samp class="file">enriched.txt</samp> in Emacs&#8217;s <code class="code">data-directory</code>
serves as an example of the features of Enriched mode.
</p>

<div class="subsection-level-extent" id="Enriched-Mode">
<h4 class="subsection" id="Enriched-Mode-1">26.14.1 Enriched Mode</h4>

<p>Enriched mode is a buffer-local minor mode (see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).
When you visit a file that has been saved in the &#8216;<samp class="samp">text/enriched</samp>&#8217;
format, Emacs automatically enables Enriched mode, and applies the
formatting information in the file to the buffer text.  When you save
a buffer with Enriched mode enabled, it is saved using the
&#8216;<samp class="samp">text/enriched</samp>&#8217; format, including the formatting information.
</p>
<a class="index-entry-id" id="index-enriched_002dmode"></a>
<p>To create a new file of formatted text, visit the nonexistent file
and type <kbd class="kbd">M-x enriched-mode</kbd>.  This command actually toggles
Enriched mode.  With a prefix argument, it enables Enriched mode if
the argument is positive, and disables Enriched mode otherwise.  If
you disable Enriched mode, Emacs no longer saves the buffer using the
&#8216;<samp class="samp">text/enriched</samp>&#8217; format; any formatting properties that have been
added to the buffer remain in the buffer, but they are not saved to
disk.
</p>
<a class="index-entry-id" id="index-enriched_002dtranslations"></a>
<p>Enriched mode does not save all Emacs text properties, only those
specified in the variable <code class="code">enriched-translations</code>.  These include
properties for fonts, colors, indentation, and justification.
</p>
<a class="index-entry-id" id="index-format_002ddecode_002dbuffer"></a>
<p>If you visit a file and Emacs fails to recognize that it is in the
&#8216;<samp class="samp">text/enriched</samp>&#8217; format, type <kbd class="kbd">M-x format-decode-buffer</kbd>.
This command prompts for a file format, and re-reads the file in that
format.  Specifying the &#8216;<samp class="samp">text/enriched</samp>&#8217; format automatically
enables Enriched mode.
</p>
<p>To view a &#8216;<samp class="samp">text/enriched</samp>&#8217; file in raw form (as plain text with
markup tags rather than formatted text), use <kbd class="kbd">M-x
find-file-literally</kbd> (see <a class="pxref" href="Files.xhtml#Visiting">Visiting Files</a>).
</p>
<p>See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Format-Conversion.html#Format-Conversion">Format Conversion</a> in <cite class="cite">the Emacs Lisp
Reference Manual</cite>, for details of how Emacs recognizes and converts
file formats like &#8216;<samp class="samp">text/enriched</samp>&#8217;.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html#Text-Properties">Text Properties</a> in <cite class="cite">the Emacs Lisp Reference Manual</cite>, for more information about
text properties.
</p>
</div>
<div class="subsection-level-extent" id="Hard-and-Soft-Newlines">
<h4 class="subsection" id="Hard-and-Soft-Newlines-1">26.14.2 Hard and Soft Newlines</h4>
<a class="index-entry-id" id="index-hard-newline"></a>
<a class="index-entry-id" id="index-soft-newline"></a>
<a class="index-entry-id" id="index-newlines_002c-hard-and-soft"></a>

<a class="index-entry-id" id="index-use_002dhard_002dnewlines"></a>
<p>In Enriched mode, Emacs distinguishes between two different kinds of
newlines, <em class="dfn">hard</em> newlines and <em class="dfn">soft</em> newlines.  You can also
enable or disable this feature in other buffers, by typing <kbd class="kbd">M-x
use-hard-newlines</kbd>.
</p>
<p>Hard newlines are used to separate paragraphs, or anywhere there
needs to be a line break regardless of how the text is filled; soft
newlines are used for filling.  The <kbd class="key">RET</kbd> (<code class="code">newline</code>) and
<kbd class="kbd">C-o</kbd> (<code class="code">open-line</code>) commands insert hard newlines.  The fill
commands, including Auto Fill (see <a class="pxref" href="#Auto-Fill">Auto Fill Mode</a>), insert only soft
newlines and delete only soft newlines, leaving hard newlines alone.
</p>
<p>Thus, when editing with Enriched mode, you should not use <kbd class="key">RET</kbd>
or <kbd class="kbd">C-o</kbd> to break lines in the middle of filled paragraphs.  Use
Auto Fill mode or explicit fill commands (see <a class="pxref" href="#Fill-Commands">Explicit Fill Commands</a>)
instead.  Use <kbd class="key">RET</kbd> or <kbd class="kbd">C-o</kbd> where line breaks should always
remain, such as in tables and lists.  For such lines, you may also
want to set the justification style to <code class="code">unfilled</code>
(see <a class="pxref" href="#Enriched-Justification">Justification in Enriched Text</a>).
</p>
</div>
<div class="subsection-level-extent" id="Editing-Format-Info">
<h4 class="subsection" id="Editing-Format-Information">26.14.3 Editing Format Information</h4>

<p>The easiest way to alter properties is with the &#8216;<samp class="samp">Text
Properties</samp>&#8217; menu.  You can get to this menu from the &#8216;<samp class="samp">Edit</samp>&#8217; menu
in the menu bar (see <a class="pxref" href="Screen.xhtml#Menu-Bar">The Menu Bar</a>), or with <kbd class="kbd">C-mouse-2</kbd>
(see <a class="pxref" href="Frames.xhtml#Menu-Mouse-Clicks">Mouse Clicks for Menus</a>).  Some of the commands in the &#8216;<samp class="samp">Text
Properties</samp>&#8217; menu are listed below (you can also invoke them with
<kbd class="kbd">M-x</kbd>):
</p>
<dl class="table">
<dt><a id="index-facemenu_002dremove_002dface_002dprops"></a><code class="code">Remove Face Properties</code></dt>
<dd><p>Remove face properties from the region
(<code class="code">facemenu-remove-face-props</code>).
</p>
</dd>
<dt><a id="index-facemenu_002dremove_002dall"></a><code class="code">Remove Text Properties</code></dt>
<dd><p>Remove all text properties from the region, including face properties
(<code class="code">facemenu-remove-all</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-text-properties-of-characters"></a>
<a class="index-entry-id" id="index-overlays-at-character-position"></a>
<a class="index-entry-id" id="index-widgets-at-buffer-position"></a>
<a class="index-entry-id" id="index-buttons-at-buffer-position"></a>
<a id="index-describe_002dtext_002dproperties"></a><code class="code">Describe Properties</code></dt>
<dd><p>List all text properties and other information about the character
following point (<code class="code">describe-text-properties</code>).
</p>
</dd>
<dt><code class="code">Display Faces</code></dt>
<dd><p>Display a list of defined faces (<code class="code">list-faces-display</code>).
See <a class="xref" href="Display.xhtml#Faces">Text Faces</a>.
</p>
</dd>
<dt><code class="code">Display Colors</code></dt>
<dd><p>Display a list of defined colors (<code class="code">list-colors-display</code>).
See <a class="xref" href="Display.xhtml#Colors">Colors for Faces</a>.
</p></dd>
</dl>

<p>The other menu entries are described in the following sections.
</p>
</div>
<div class="subsection-level-extent" id="Enriched-Faces">
<h4 class="subsection" id="Faces-in-Enriched-Text">26.14.4 Faces in Enriched Text</h4>

<p>The following commands can be used to add or remove faces
(see <a class="pxref" href="Display.xhtml#Faces">Text Faces</a>).  Each applies to the text in the region if the mark
is active, and to the next self-inserting character if the mark is
inactive.  With a prefix argument, each command applies to the next
self-inserting character even if the region is active.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-facemenu_002dset_002ddefault"></a>
<a id="index-M_002do-d-_0028Enriched-mode_0029"></a><kbd class="kbd">M-o d</kbd></dt>
<dd><p>Remove all <code class="code">face</code> properties (<code class="code">facemenu-set-default</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-facemenu_002dset_002dbold"></a>
<a id="index-M_002do-b-_0028Enriched-mode_0029"></a><kbd class="kbd">M-o b</kbd></dt>
<dd><p>Apply the <code class="code">bold</code> face (<code class="code">facemenu-set-bold</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-facemenu_002dset_002ditalic"></a>
<a id="index-M_002do-i-_0028Enriched-mode_0029"></a><kbd class="kbd">M-o i</kbd></dt>
<dd><p>Apply the <code class="code">italic</code> face (<code class="code">facemenu-set-italic</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-facemenu_002dset_002dbold_002ditalic"></a>
<a id="index-M_002do-l-_0028Enriched-mode_0029"></a><kbd class="kbd">M-o l</kbd></dt>
<dd><p>Apply the <code class="code">bold-italic</code> face (<code class="code">facemenu-set-bold-italic</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-facemenu_002dset_002dunderline"></a>
<a id="index-M_002do-u-_0028Enriched-mode_0029"></a><kbd class="kbd">M-o u</kbd></dt>
<dd><p>Apply the <code class="code">underline</code> face (<code class="code">facemenu-set-underline</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-facemenu_002dset_002dface"></a>
<a id="index-M_002do-o-_0028Enriched-mode_0029"></a><kbd class="kbd">M-o o <var class="var">face</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Apply the face <var class="var">face</var> (<code class="code">facemenu-set-face</code>).
</p>
</dd>
<dt><a id="index-facemenu_002dset_002dforeground"></a><kbd class="kbd">M-x facemenu-set-foreground</kbd></dt>
<dd><p>Prompt for a color (see <a class="pxref" href="Display.xhtml#Colors">Colors for Faces</a>), and apply it as a foreground
color.
</p>
</dd>
<dt><a id="index-facemenu_002dset_002dbackground"></a><kbd class="kbd">M-x facemenu-set-background</kbd></dt>
<dd><p>Prompt for a color, and apply it as a background color.
</p></dd>
</dl>

<p>These commands are also available via the Text Properties menu.
</p>
<p>A self-inserting character normally inherits the face properties
(and most other text properties) from the preceding character in the
buffer.  If you use one of the above commands to specify the face for
the next self-inserting character, that character will not inherit the
faces properties from the preceding character, but it will still
inherit other text properties.
</p>
<p>Enriched mode defines two additional faces: <code class="code">excerpt</code> and
<code class="code">fixed</code>.  These correspond to codes used in the text/enriched
file format.  The <code class="code">excerpt</code> face is intended for quotations; by
default, it appears the same as <code class="code">italic</code>.  The <code class="code">fixed</code> face
specifies fixed-width text; by default, it appears the same as
<code class="code">bold</code>.
</p>
</div>
<div class="subsection-level-extent" id="Enriched-Indentation">
<h4 class="subsection" id="Indentation-in-Enriched-Text">26.14.5 Indentation in Enriched Text</h4>

<p>In Enriched mode, you can specify different amounts of indentation
for the right or left margin of a paragraph or a part of a paragraph.
These margins also affect fill commands such as <kbd class="kbd">M-q</kbd>
(see <a class="pxref" href="#Filling">Filling Text</a>).
</p>
<p>The Indentation submenu of Text Properties offers commands
for specifying indentation:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-increase_002dleft_002dmargin"></a>
<a id="index-C_002dx-TAB-_0028Enriched-mode_0029"></a><code class="code">Indent More</code></dt>
<dd><p>Indent the region by 4 columns (<code class="code">increase-left-margin</code>).  In
Enriched mode, this command is also available on <kbd class="kbd">C-x <kbd class="key">TAB</kbd></kbd>; if
you supply a numeric argument, that says how many columns to add to the
margin (a negative argument reduces the number of columns).
</p>
</dd>
<dt><code class="code">Indent Less</code></dt>
<dd><p>Remove 4 columns of indentation from the region.
</p>
</dd>
<dt><code class="code">Indent Right More</code></dt>
<dd><p>Make the text narrower by indenting 4 columns at the right margin.
</p>
</dd>
<dt><code class="code">Indent Right Less</code></dt>
<dd><p>Remove 4 columns of indentation from the right margin.
</p></dd>
</dl>

<a class="index-entry-id" id="index-standard_002dindent"></a>
<p>The variable <code class="code">standard-indent</code> specifies how many columns these
commands should add to or subtract from the indentation.  The default
value is 4.  The default right margin for Enriched mode is controlled
by the variable <code class="code">fill-column</code>, as usual.
</p>
<a class="index-entry-id" id="index-C_002dc-_005b-_0028Enriched-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-_005d-_0028Enriched-mode_0029"></a>
<a class="index-entry-id" id="index-set_002dleft_002dmargin"></a>
<a class="index-entry-id" id="index-set_002dright_002dmargin"></a>
<p>You can also type <kbd class="kbd">C-c [</kbd> (<code class="code">set-left-margin</code>) and <kbd class="kbd">C-c
]</kbd> (<code class="code">set-right-margin</code>) to set the left and right margins.  You
can specify the margin width with a numeric argument; otherwise these
commands prompt for a value via the minibuffer.
</p>
<p>The fill prefix, if any, works in addition to the specified paragraph
indentation: <kbd class="kbd">C-x .</kbd> does not include the specified indentation&#8217;s
whitespace in the new value for the fill prefix, and the fill commands
look for the fill prefix after the indentation on each line.  See <a class="xref" href="#Fill-Prefix">The Fill Prefix</a>.
</p>
</div>
<div class="subsection-level-extent" id="Enriched-Justification">
<h4 class="subsection" id="Justification-in-Enriched-Text">26.14.6 Justification in Enriched Text</h4>
<a class="index-entry-id" id="index-justification-style"></a>

<p>In Enriched mode, you can use the following commands to specify
various <em class="dfn">justification styles</em> for filling.  These commands apply
to the paragraph containing point, or, if the region is active, to all
paragraphs overlapping the region.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-set_002djustification_002dleft"></a>
<a id="index-M_002dj-l-_0028Enriched-mode_0029"></a><kbd class="kbd">M-j l</kbd></dt>
<dd><p>Align lines to the left margin (<code class="code">set-justification-left</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-set_002djustification_002dright"></a>
<a id="index-M_002dj-r-_0028Enriched-mode_0029"></a><kbd class="kbd">M-j r</kbd></dt>
<dd><p>Align lines to the right margin (<code class="code">set-justification-right</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-set_002djustification_002dfull"></a>
<a id="index-M_002dj-b-_0028Enriched-mode_0029"></a><kbd class="kbd">M-j b</kbd></dt>
<dd><p>Align lines to both margins, inserting spaces in the middle of the
line to achieve this (<code class="code">set-justification-full</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-M_002dS-_0028Enriched-mode_0029"></a>
<a class="index-entry-id" id="index-set_002djustification_002dcenter"></a>
<a id="index-M_002dj-c-_0028Enriched-mode_0029"></a><kbd class="kbd">M-j c</kbd></dt>
<dt><kbd class="kbd">M-S</kbd></dt>
<dd><p>Center lines between the margins (<code class="code">set-justification-center</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-set_002djustification_002dnone"></a>
<a id="index-M_002dj-u-_0028Enriched-mode_0029"></a><kbd class="kbd">M-j u</kbd></dt>
<dd><p>Turn off filling entirely (<code class="code">set-justification-none</code>).  The fill
commands do nothing on text with this setting.  You can, however,
still indent the left margin.
</p></dd>
</dl>

<a class="index-entry-id" id="index-default_002djustification"></a>
<p>You can also specify justification styles using the Justification
submenu in the Text Properties menu.  The default justification style
is specified by the per-buffer variable <code class="code">default-justification</code>.
Its value should be one of the symbols <code class="code">left</code>, <code class="code">right</code>,
<code class="code">full</code>, <code class="code">center</code>, or <code class="code">none</code>; their meanings correspond
to the commands above.
</p>
</div>
<div class="subsection-level-extent" id="Enriched-Properties">
<h4 class="subsection" id="Setting-Other-Text-Properties">26.14.7 Setting Other Text Properties</h4>

<p>The Special Properties submenu of Text Properties has entries for
adding or removing four other text properties: <code class="code">read-only</code>,
(which disallows alteration of the text), <code class="code">invisible</code> (which
hides text), <code class="code">intangible</code> (which disallows moving point within
the text), and <code class="code">charset</code> (which is important for selecting a
proper font to display a character).  The &#8216;<samp class="samp">Remove Special</samp>&#8217; menu
item removes all of these special properties from the text in the
region.
</p>
<p>The <code class="code">invisible</code> and <code class="code">intangible</code> properties are not saved.
</p>
<a class="index-entry-id" id="index-enriched_002dallow_002deval_002din_002ddisplay_002dprops"></a>
<a class="index-entry-id" id="index-security_002c-when-displaying-enriched-text"></a>
<p>Enriched mode also supports saving and restoring <code class="code">display</code>
properties (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Property.html#Display-Property">Display Property</a> in <cite class="cite">the Emacs Lisp Reference
Manual</cite>), which affect how text is displayed on the screen, and also
allow displaying images and strings that come from sources other than
buffer text.  The <code class="code">display</code> properties also support execution of
arbitrary Lisp forms as part of processing the property for display,
thus providing a means to dynamically tailor the display to some
conditions that can only be known at display time.  Since execution of
arbitrary Lisp opens Emacs to potential attacks, especially when the
source of enriched text is outside of Emacs or even outside of your
system (e.g., if it was received in an email message), such execution
is by default disabled in Enriched mode.  You can enable it by
customizing the variable <code class="code">enriched-allow-eval-in-display-props</code>
to a non-<code class="code">nil</code> value.
</p>
</div>
</div>
<div class="section-level-extent" id="Text-Based-Tables">
<h3 class="section" id="Editing-Text_002dbased-Tables">26.15 Editing Text-based Tables</h3>
<a class="index-entry-id" id="index-table-mode"></a>
<a class="index-entry-id" id="index-text_002dbased-tables"></a>

<p>The <code class="code">table</code> package provides commands to easily edit text-based
tables.  Here is an example of what such a table looks like:
</p>
<div class="example smallexample">
<div class="group"><pre class="example-preformatted">+-----------------+--------------------------------+-----------------+
|     Command     |          Description           |   Key Binding   |
+-----------------+--------------------------------+-----------------+
|  forward-char   |Move point right N characters   |       C-f       |
|                 |(left if N is negative).        |                 |
|                 |                                |                 |
+-----------------+--------------------------------+-----------------+
|  backward-char  |Move point left N characters    |       C-b       |
|                 |(right if N is negative).       |                 |
|                 |                                |                 |
+-----------------+--------------------------------+-----------------+
</pre></div></div>

<p>When Emacs recognizes such a stretch of text as a table
(see <a class="pxref" href="#Table-Recognition">Table Recognition</a>), editing the contents of each table cell
will automatically resize the table, whenever the contents become too
large to fit in the cell.  You can use the commands defined in the
following sections for navigating and editing the table layout.
</p>
<a class="index-entry-id" id="index-table_002dfixed_002dwidth_002dmode"></a>
<p>Type <kbd class="kbd">M-x table-fixed-width-mode</kbd> to toggle the automatic table
resizing feature.
</p>

<div class="subsection-level-extent" id="Table-Definition">
<h4 class="subsection" id="What-is-a-Text_002dbased-Table_003f">26.15.1 What is a Text-based Table?</h4>
<a class="index-entry-id" id="index-cells_002c-for-text_002dbased-tables"></a>

<p>A <em class="dfn">table</em> consists of a rectangular text area which is divided
into <em class="dfn">cells</em>.  Each cell must be at least one character wide and
one character high, not counting its border lines.  A cell can be
subdivided into more cells, but they cannot overlap.
</p>
<p>Cell border lines are drawn with three special characters, specified
by the following variables:
</p>
<dl class="table">
<dt><a id="index-table_002dcell_002dvertical_002dchar"></a><code class="code">table-cell-vertical-char</code></dt>
<dd><p>The character used for vertical lines.  The default is &#8216;<samp class="samp">|</samp>&#8217;.
</p>
</dd>
<dt><a id="index-table_002dcell_002dhorizontal_002dchars"></a><code class="code">table-cell-horizontal-chars</code></dt>
<dd><p>The characters used for horizontal lines.  The default is &#8216;<samp class="samp">&quot;-=&quot;</samp>&#8217;.
</p>
</dd>
<dt><a id="index-table_002dcell_002dintersection_002dchar"></a><code class="code">table-cell-intersection-char</code></dt>
<dd><p>The character used for the intersection of horizontal and vertical
lines.  The default is &#8216;<samp class="samp">+</samp>&#8217;.
</p></dd>
</dl>

<p>The following are examples of <em class="emph">invalid</em> tables:
</p>
<div class="example">
<pre class="example-preformatted">   +-----+       +--+    +-++--+
   |     |       |  |    | ||  |
   |     |       |  |    | ||  |
   +--+  |    +--+--+    +-++--+
   |  |  |    |  |  |    +-++--+
   |  |  |    |  |  |    | ||  |
   +--+--+    +--+--+    +-++--+
      a          b          c
</pre></div>

<p>From left to right:
</p>
<ol class="enumerate" type="a" start="1">
<li> Overlapped cells or non-rectangular cells are not allowed.
</li><li> The border must be rectangular.
</li><li> Cells must have a minimum width/height of one character.
</li></ol>

</div>
<div class="subsection-level-extent" id="Table-Creation">
<h4 class="subsection" id="Creating-a-Table">26.15.2 Creating a Table</h4>
<a class="index-entry-id" id="index-create-a-text_002dbased-table"></a>
<a class="index-entry-id" id="index-table-creation"></a>

<a class="index-entry-id" id="index-table_002dinsert"></a>
<p>To create a text-based table from scratch, type <kbd class="kbd">M-x
table-insert</kbd>.  This command prompts for the number of table columns,
the number of table rows, cell width and cell height.  The cell width
and cell height do not include the cell borders; each can be specified
as a single integer (which means each cell is given the same
width/height), or as a sequence of integers separated by spaces or
commas (which specify the width/height of the individual table
columns/rows, counting from left to right for table columns and from
top to bottom for table rows).  The specified table is then inserted
at point.
</p>
<p>The table inserted by <kbd class="kbd">M-x table-insert</kbd> contains special text
properties, which tell Emacs to treat it specially as a text-based
table.  If you save the buffer to a file and visit it again later,
those properties are lost, and the table appears to Emacs as an
ordinary piece of text.  See the next section, for how to convert it
back into a table.
</p>
</div>
<div class="subsection-level-extent" id="Table-Recognition">
<h4 class="subsection" id="Table-Recognition-1">26.15.3 Table Recognition</h4>
<a class="index-entry-id" id="index-table-recognition"></a>

<a class="index-entry-id" id="index-table_002drecognize"></a>
<a class="index-entry-id" id="index-table_002dunrecognize"></a>
<p>Existing text-based tables in a buffer, which lack the special text
properties applied by <kbd class="kbd">M-x table-insert</kbd>, are not treated
specially as tables.  To apply those text properties, type <kbd class="kbd">M-x
table-recognize</kbd>.  This command scans the current buffer,
<em class="dfn">recognizes</em> valid table cells, and applies the relevant text
properties.  Conversely, type <kbd class="kbd">M-x table-unrecognize</kbd> to
<em class="dfn">unrecognize</em> all tables in the current buffer, removing the
special text properties and converting tables back to plain text.
</p>
<p>You can also use the following commands to selectively recognize or
unrecognize tables:
</p>
<dl class="table">
<dt><a id="index-table_002drecognize_002dregion"></a><kbd class="kbd">M-x table-recognize-region</kbd></dt>
<dd><p>Recognize tables within the current region.
</p>
</dd>
<dt><a id="index-table_002dunrecognize_002dregion"></a><kbd class="kbd">M-x table-unrecognize-region</kbd></dt>
<dd><p>Unrecognize tables within the current region.
</p>
</dd>
<dt><a id="index-table_002drecognize_002dtable"></a><kbd class="kbd">M-x table-recognize-table</kbd></dt>
<dd><p>Recognize the table at point and activate it.
</p>
</dd>
<dt><a id="index-table_002dunrecognize_002dtable"></a><kbd class="kbd">M-x table-unrecognize-table</kbd></dt>
<dd><p>Deactivate the table at point.
</p>
</dd>
<dt><a id="index-table_002drecognize_002dcell"></a><kbd class="kbd">M-x table-recognize-cell</kbd></dt>
<dd><p>Recognize the cell at point and activate it.
</p>
</dd>
<dt><a id="index-table_002dunrecognize_002dcell"></a><kbd class="kbd">M-x table-unrecognize-cell</kbd></dt>
<dd><p>Deactivate the cell at point.
</p></dd>
</dl>

<p>See <a class="xref" href="#Table-Conversion">Converting Between Plain Text and Tables</a>, for another way to recognize a table.
</p>
</div>
<div class="subsection-level-extent" id="Cell-Commands">
<h4 class="subsection" id="Commands-for-Table-Cells">26.15.4 Commands for Table Cells</h4>

<a class="index-entry-id" id="index-table_002dforward_002dcell"></a>
<a class="index-entry-id" id="index-table_002dbackward_002dcell"></a>
<p>The commands <kbd class="kbd">M-x table-forward-cell</kbd> and <kbd class="kbd">M-x
table-backward-cell</kbd> move point from the current cell to an adjacent
cell.  The order is cyclic: when point is in the last cell of a table,
<kbd class="kbd">M-x table-forward-cell</kbd> moves to the first cell.  Likewise, when
point is on the first cell, <kbd class="kbd">M-x table-backward-cell</kbd> moves to the
last cell.
</p>
<a class="index-entry-id" id="index-table_002dspan_002dcell"></a>
<p><kbd class="kbd">M-x table-span-cell</kbd> prompts for a direction&#8212;right, left,
above, or below&#8212;and merges the current cell with the adjacent cell
in that direction.  This command signals an error if the merge would
result in an illegitimate cell layout.
</p>
<a class="index-entry-id" id="index-table_002dsplit_002dcell"></a>
<a class="index-entry-id" id="index-table_002dsplit_002dcell_002dvertically"></a>
<a class="index-entry-id" id="index-table_002dsplit_002dcell_002dhorizontally"></a>
<a class="index-entry-id" id="index-text_002dbased-tables_002c-splitting-cells"></a>
<a class="index-entry-id" id="index-splitting-table-cells"></a>
<p><kbd class="kbd">M-x table-split-cell</kbd> splits the current cell vertically or
horizontally, prompting for the direction with the minibuffer.  To
split in a specific direction, use <kbd class="kbd">M-x
table-split-cell-vertically</kbd> and <kbd class="kbd">M-x
table-split-cell-horizontally</kbd>.  When splitting vertically, the old
cell contents are automatically split between the two new cells.  When
splitting horizontally, you are prompted for how to divide the cell
contents, if the cell is non-empty; the options are &#8216;<samp class="samp">split</samp>&#8217;
(divide the contents at point), &#8216;<samp class="samp">left</samp>&#8217; (put all the contents in
the left cell), and &#8216;<samp class="samp">right</samp>&#8217; (put all the contents in the right
cell).
</p>
<p>The following commands enlarge or shrink a cell.  By default, they
resize by one row or column; if a numeric argument is supplied, that
specifies the number of rows or columns to resize by.
</p>
<dl class="table">
<dt><a id="index-table_002dheighten_002dcell"></a><kbd class="kbd">M-x table-heighten-cell</kbd></dt>
<dd><p>Enlarge the current cell vertically.
</p>
</dd>
<dt><a id="index-table_002dshorten_002dcell"></a><kbd class="kbd">M-x table-shorten-cell</kbd></dt>
<dd><p>Shrink the current cell vertically.
</p>
</dd>
<dt><a id="index-table_002dwiden_002dcell"></a><kbd class="kbd">M-x table-widen-cell</kbd></dt>
<dd><p>Enlarge the current cell horizontally.
</p>
</dd>
<dt><a id="index-table_002dnarrow_002dcell"></a><kbd class="kbd">M-x table-narrow-cell</kbd></dt>
<dd><p>Shrink the current cell horizontally.
</p></dd>
</dl>

</div>
<div class="subsection-level-extent" id="Cell-Justification">
<h4 class="subsection" id="Cell-Justification-1">26.15.5 Cell Justification</h4>
<a class="index-entry-id" id="index-justification-in-text_002dbased-tables"></a>

<p>The command <kbd class="kbd">M-x table-justify</kbd> imposes <em class="dfn">justification</em> on
one or more cells in a text-based table.  Justification determines how
the text in the cell is aligned, relative to the edges of the cell.
Each cell in a table can be separately justified.
</p>
<a class="index-entry-id" id="index-table_002djustify"></a>
<p><kbd class="kbd">M-x table-justify</kbd> first prompts for what to justify; the
options are &#8216;<samp class="samp">cell</samp>&#8217; (just the current cell), &#8216;<samp class="samp">column</samp>&#8217; (all
cells in the current table column) and &#8216;<samp class="samp">row</samp>&#8217; (all cells in the
current table row).  The command then prompts for the justification
style; the options are <code class="code">left</code>, <code class="code">center</code>, <code class="code">right</code>,
<code class="code">top</code>, <code class="code">middle</code>, <code class="code">bottom</code>, or <code class="code">none</code> (meaning no
vertical justification).
</p>
<p>Horizontal and vertical justification styles are specified
independently, and both types can be in effect simultaneously; for
instance, you can call <kbd class="kbd">M-x table-justify</kbd> twice, once to specify
<code class="code">right</code> justification and once to specify <code class="code">bottom</code>
justification, to align the contents of a cell to the bottom right.
</p>
<a class="index-entry-id" id="index-table_002ddetect_002dcell_002dalignment"></a>
<p>The justification style is stored in the buffer as a text property,
and is lost when you kill the buffer or exit Emacs.  However, the
table recognition commands, such as <kbd class="kbd">M-x table-recognize</kbd>
(see <a class="pxref" href="#Table-Recognition">Table Recognition</a>), attempt to determine and re-apply each
cell&#8217;s justification style, by examining its contents.  To disable
this feature, change the variable <code class="code">table-detect-cell-alignment</code>
to <code class="code">nil</code>.
</p>
</div>
<div class="subsection-level-extent" id="Table-Rows-and-Columns">
<h4 class="subsection" id="Table-Rows-and-Columns-1">26.15.6 Table Rows and Columns</h4>
<a class="index-entry-id" id="index-inserting-rows-and-columns-in-text_002dbased-tables"></a>

<a class="index-entry-id" id="index-table_002dinsert_002drow"></a>
<p><kbd class="kbd">M-x table-insert-row</kbd> inserts a row of cells before the current
table row.  The current row, together with point, is pushed down past
the new row.  To insert a row after the last row at the bottom of a
table, invoke this command with point below the table, just below the
bottom edge.  You can insert more than one row at a time by using a
numeric prefix argument.
</p>

<a class="index-entry-id" id="index-table_002dinsert_002dcolumn"></a>
<p>Similarly, <kbd class="kbd">M-x table-insert-column</kbd> inserts a column of cells
to the left of the current table column.  To insert a column to the
right side of the rightmost column, invoke this command with point to
the right of the rightmost column, outside the table.  A numeric
prefix argument specifies the number of columns to insert.
</p>
<a class="index-entry-id" id="index-deleting-rows-and-column-in-text_002dbased-tables"></a>
<p><kbd class="kbd">M-x table-delete-column</kbd> deletes the column of cells at point.
Similarly, <kbd class="kbd">M-x table-delete-row</kbd> deletes the row of cells at
point.  A numeric prefix argument to either command specifies the
number of columns or rows to delete.
</p>
</div>
<div class="subsection-level-extent" id="Table-Conversion">
<h4 class="subsection" id="Converting-Between-Plain-Text-and-Tables">26.15.7 Converting Between Plain Text and Tables</h4>
<a class="index-entry-id" id="index-text-to-table"></a>
<a class="index-entry-id" id="index-table-to-text"></a>

<a class="index-entry-id" id="index-table_002dcapture"></a>
<p>The command <kbd class="kbd">M-x table-capture</kbd> captures plain text in a region
and turns it into a table.  Unlike <kbd class="kbd">M-x table-recognize</kbd>
(see <a class="pxref" href="#Table-Recognition">Table Recognition</a>), the original text does not need to have a
table appearance; it only needs to have a logical table-like
structure.
</p>
<p>For example, suppose we have the following numbers, which are
divided into three lines and separated horizontally by commas:
</p>
<div class="example">
<pre class="example-preformatted">1, 2, 3, 4
5, 6, 7, 8
, 9, 10
</pre></div>

<p>Invoking <kbd class="kbd">M-x table-capture</kbd> on that text produces this table:
</p>
<div class="example">
<pre class="example-preformatted">+-----+-----+-----+-----+
|1    |2    |3    |4    |
+-----+-----+-----+-----+
|5    |6    |7    |8    |
+-----+-----+-----+-----+
|     |9    |10   |     |
+-----+-----+-----+-----+
</pre></div>

<a class="index-entry-id" id="index-table_002drelease"></a>
<p><kbd class="kbd">M-x table-release</kbd> does the opposite: it converts a table back
to plain text, removing its cell borders.
</p>
<p>One application of this pair of commands is to edit a text in
layout.  Look at the following three paragraphs:
</p>
<div class="example">
<pre class="example-preformatted">table-capture is a powerful command.
Here are some things it can do:

Parse Cell Items   Using row and column delimiter regexps,
                   it parses the specified text area and
                   extracts cell items into a table.
</pre></div>

<p>Applying <code class="code">table-capture</code> to a region containing the above text,
with empty strings for the column and row delimiter regexps, creates a
table with a single cell like the following one.
</p>
<div class="example smallexample">
<div class="group"><pre class="example-preformatted">+----------------------------------------------------------+
|table-capture is a powerful command.                      |
|Here are some things it can do:                           |
|                                                          |
|Parse Cell Items   Using row and column delimiter regexps,|
|                   it parses the specified text area and  |
|                   extracts cell items into a table.      |
+----------------------------------------------------------+
</pre></div></div>

<p>We can then use the cell splitting commands (see <a class="pxref" href="#Cell-Commands">Commands for Table Cells</a>) to
subdivide the table so that each paragraph occupies a cell:
</p>
<div class="example smallexample">
<pre class="example-preformatted">+----------------------------------------------------------+
|table-capture is a powerful command.                      |
|Here are some things it can do:                           |
+-----------------+----------------------------------------+
|Parse Cell Items | Using row and column delimiter regexps,|
|                 | it parses the specified text area and  |
|                 | extracts cell items into a table.      |
+-----------------+----------------------------------------+
</pre></div>

<p>Each cell can now be edited independently without affecting the layout
of other cells.  When finished, we can invoke <kbd class="kbd">M-x table-release</kbd>
to convert the table back to plain text.
</p>
</div>
<div class="subsection-level-extent" id="Table-Misc">
<h4 class="subsection" id="Table-Miscellany">26.15.8 Table Miscellany</h4>

<a class="index-entry-id" id="index-table-dimensions"></a>
<a class="index-entry-id" id="index-table_002dquery_002ddimension"></a>
<p>The command <code class="code">table-query-dimension</code> reports the layout of the
table and table cell at point.  Here is an example of its output:
</p>
<div class="example smallexample">
<pre class="example-preformatted">Cell: (21w, 6h), Table: (67w, 16h), Dim: (2c, 3r), Total Cells: 5
</pre></div>

<p>This indicates that the current cell is 21 characters wide and 6 lines
high, the table is 67 characters wide and 16 lines high with 2 columns
and 3 rows, and a total of 5 cells.
</p>
<a class="index-entry-id" id="index-table_002dinsert_002dsequence"></a>
<p><kbd class="kbd">M-x table-insert-sequence</kbd> traverses the cells of a table
inserting a sequence of text strings into each cell as it goes.  It
asks for the base string of the sequence, and then produces the
sequence by &#8220;incrementing&#8221; the base string, either numerically (if
the base string ends in numerical characters) or in the
<abbr class="acronym">ASCII</abbr> order.  In addition to the base string, the command
prompts for the number of elements in the sequence, the increment, the
cell interval, and the justification of the text in each cell.
</p>
<a class="index-entry-id" id="index-table-for-HTML-and-LaTeX"></a>
<a class="index-entry-id" id="index-table_002dgenerate_002dsource"></a>
<p><kbd class="kbd">M-x table-generate-source</kbd> generates a table formatted for a
specific markup language.  It asks for a language (which must be one
of <code class="code">html</code>, <code class="code">latex</code>, <code class="code">cals</code>, <code class="code">wiki</code> or
<code class="code">mediawiki</code>), a destination buffer in which to put the result,
and a table caption, and then inserts the generated table into the
specified buffer.  The default destination buffer is
<code class="code">table.<var class="var">lang</var></code>, where <var class="var">lang</var> is the language you
specified.
</p>
</div>
</div>
<div class="section-level-extent" id="Two_002dColumn">
<h3 class="section" id="Two_002dColumn-Editing">26.16 Two-Column Editing</h3>
<a class="index-entry-id" id="index-two_002dcolumn-editing"></a>
<a class="index-entry-id" id="index-splitting-columns"></a>
<a class="index-entry-id" id="index-columns_002c-splitting"></a>

<p>Two-column mode lets you conveniently edit two side-by-side columns
of text.  It uses two side-by-side windows, each showing its own
buffer.  There are three ways to enter two-column mode:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-C_002dx-6-2"></a>
<a class="index-entry-id" id="index-2C_002dtwo_002dcolumns"></a>
<a id="index-F2-2"></a><kbd class="kbd"><kbd class="key">F2</kbd> 2</kbd> or <kbd class="kbd">C-x 6 2</kbd></dt>
<dd><p>Enter two-column mode with the current buffer on the left, and on the
right, a buffer whose name is based on the current buffer&#8217;s name
(<code class="code">2C-two-columns</code>).  If the right-hand buffer doesn&#8217;t already
exist, it starts out empty; the current buffer&#8217;s contents are not
changed.
</p>
<p>This command is appropriate when the current buffer is empty or contains
just one column and you want to add another column.
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dx-6-s"></a>
<a class="index-entry-id" id="index-2C_002dsplit"></a>
<a id="index-F2-s"></a><kbd class="kbd"><kbd class="key">F2</kbd> s</kbd> or <kbd class="kbd">C-x 6 s</kbd></dt>
<dd><p>Split the current buffer, which contains two-column text, into two
buffers, and display them side by side (<code class="code">2C-split</code>).  The current
buffer becomes the left-hand buffer, but the text in the right-hand
column is moved into the right-hand buffer.  The current column
specifies the split point.  Splitting starts with the current line and
continues to the end of the buffer.
</p>
<p>This command is appropriate when you have a buffer that already contains
two-column text, and you wish to separate the columns temporarily.
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dx-6-b"></a>
<a class="index-entry-id" id="index-2C_002dassociate_002dbuffer"></a>
<a id="index-F2-b"></a><kbd class="kbd"><kbd class="key">F2</kbd> b <var class="var">buffer</var> <kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">C-x 6 b <var class="var">buffer</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Enter two-column mode using the current buffer as the left-hand buffer,
and using buffer <var class="var">buffer</var> as the right-hand buffer
(<code class="code">2C-associate-buffer</code>).
</p></dd>
</dl>

<p><kbd class="kbd"><kbd class="key">F2</kbd> s</kbd> or <kbd class="kbd">C-x 6 s</kbd> looks for a column separator, which
is a string that appears on each line between the two columns.  You can
specify the width of the separator with a numeric argument to
<kbd class="kbd"><kbd class="key">F2</kbd> s</kbd>; that many characters, before point, constitute the
separator string.  By default, the width is 1, so the column separator
is the character before point.
</p>
<p>When a line has the separator at the proper place, <kbd class="kbd"><kbd class="key">F2</kbd> s</kbd>
puts the text after the separator into the right-hand buffer, and
deletes the separator.  Lines that don&#8217;t have the column separator at
the proper place remain unsplit; they stay in the left-hand buffer, and
the right-hand buffer gets an empty line to correspond.  (This is the
way to write a line that spans both columns while in two-column
mode: write it in the left-hand buffer, and put an empty line in the
right-hand buffer.)
</p>
<a class="index-entry-id" id="index-F2-RET"></a>
<a class="index-entry-id" id="index-C_002dx-6-RET"></a>
<a class="index-entry-id" id="index-2C_002dnewline"></a>
<p>The command <kbd class="kbd"><kbd class="key">F2</kbd> <kbd class="key">RET</kbd></kbd> or <kbd class="kbd">C-x 6 <kbd class="key">RET</kbd></kbd>
(<code class="code">2C-newline</code>) inserts a newline in each of the two buffers at
corresponding positions.  This is the easiest way to add a new line to
the two-column text while editing it in split buffers.
</p>
<a class="index-entry-id" id="index-F2-1"></a>
<a class="index-entry-id" id="index-C_002dx-6-1"></a>
<a class="index-entry-id" id="index-2C_002dmerge"></a>
<p>When you have edited both buffers as you wish, merge them with
<kbd class="kbd"><kbd class="key">F2</kbd> 1</kbd> or <kbd class="kbd">C-x 6 1</kbd> (<code class="code">2C-merge</code>).  This copies the
text from the right-hand buffer as a second column in the other buffer.
To go back to two-column editing, use <kbd class="kbd"><kbd class="key">F2</kbd> s</kbd>.
</p>
<a class="index-entry-id" id="index-F2-d"></a>
<a class="index-entry-id" id="index-C_002dx-6-d"></a>
<a class="index-entry-id" id="index-2C_002ddissociate"></a>
<p>Use <kbd class="kbd"><kbd class="key">F2</kbd> d</kbd> or <kbd class="kbd">C-x 6 d</kbd> to dissociate the two buffers,
leaving each as it stands (<code class="code">2C-dissociate</code>).  If the other buffer,
the one not current when you type <kbd class="kbd"><kbd class="key">F2</kbd> d</kbd>, is empty,
<kbd class="kbd"><kbd class="key">F2</kbd> d</kbd> kills it.
</p></div>
</div>
<div class="footnotes-segment">
<h4 class="footnotes-heading">Footnotes</h4>

<h5 class="footnote-body-heading"><a id="FOOT11" href="#DOCF11">(11)</a></h5>
<p>The curved single quote characters are U+2018 <small class="sc">LEFT SINGLE QUOTATION
MARK</small> and U+2019 <small class="sc">RIGHT SINGLE QUOTATION MARK</small>; the curved double quotes
are U+201C <small class="sc">LEFT DOUBLE QUOTATION MARK</small> and U+201D <small class="sc">RIGHT DOUBLE
QUOTATION MARK</small>.  On text terminals which cannot display these
characters, the Info reader might show them as the typewriter ASCII
quote characters.
</p>
<h5 class="footnote-body-heading"><a id="FOOT12" href="#DOCF12">(12)</a></h5>
<p>It has been replaced by the &#8216;<samp class="samp">slides</samp>&#8217; document class, which comes
with LaTeX.</p>
</div>



</body>
</html>
