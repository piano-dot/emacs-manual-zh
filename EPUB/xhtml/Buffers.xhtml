<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>20 Using Multiple Buffers (GNU Emacs Manual)</title>

<meta name="description" content="20 Using Multiple Buffers (GNU Emacs Manual)"/>
<meta name="keywords" content="20 Using Multiple Buffers (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Windows.xhtml#Windows" rel="next" title="21 Multiple Windows"/>
<link href="Files.xhtml#Files" rel="prev" title="19 File Handling"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Buffers">

<h2 class="chapter" id="Using-Multiple-Buffers">20 Using Multiple Buffers</h2>

<a class="index-entry-id" id="index-buffers"></a>
<p>The text you are editing in Emacs resides in an object called a
<em class="dfn">buffer</em>.  Each time you visit a file, a buffer is used to hold
the file&#8217;s text.  Each time you invoke Dired, a buffer is used to hold
the directory listing.  If you send a message with <kbd class="kbd">C-x m</kbd>, a
buffer is used to hold the text of the message.  When you ask for a
command&#8217;s documentation, that appears in a buffer named <samp class="file">*Help*</samp>.
</p>
<p>Buffers exist as long as they are in use, and are deleted
(&#8220;killed&#8221;) when no longer needed, either by you (see <a class="pxref" href="#Kill-Buffer">Killing Buffers</a>) or by Emacs (e.g., when you exit Emacs, see <a class="pxref" href="Exiting.xhtml">Exiting Emacs</a>).
</p>
<p>Each buffer has a unique name, which can be of any length.  When a
buffer is displayed in a window, its name is shown in the mode line
(see <a class="pxref" href="Screen.xhtml#Mode-Line">The Mode Line</a>).  The distinction between upper and lower case
matters in buffer names.  Most buffers are made by visiting files, and
their names are derived from the files&#8217; names; however, you can also
create an empty buffer with any name you want.  A newly started Emacs
has several buffers, including one named <samp class="file">*scratch*</samp>, which can
be used for evaluating Lisp expressions and is not associated with any
file (see <a class="pxref" href="Building.xhtml#Lisp-Interaction">Lisp Interaction Buffers</a>).
</p>
<a class="index-entry-id" id="index-selected-buffer"></a>
<a class="index-entry-id" id="index-current-buffer"></a>
<p>At any time, one and only one buffer is <em class="dfn">selected</em>; we call it
the <em class="dfn">current buffer</em>.  We sometimes say that a command operates on
&#8220;the buffer&#8221;; this really means that it operates on the current
buffer.  When there is only one Emacs window, the buffer displayed in
that window is current.  When there are multiple windows, the buffer
displayed in the <em class="dfn">selected window</em> is current.  See <a class="xref" href="Windows.xhtml#Windows">Multiple Windows</a>.
</p>
<a class="index-entry-id" id="index-buffer-contents"></a>
<a class="index-entry-id" id="index-contents-of-a-buffer"></a>
<p>A buffer&#8217;s <em class="dfn">contents</em> consist of a series of characters, each of
which optionally carries a set of text properties
(see <a class="pxref" href="International.xhtml#International-Chars">Text properties</a>) that can specify more
information about that character.
</p>
<p>Aside from its textual contents, each buffer records several pieces
of information, such as what file it is visiting (if any), whether it
is modified, and what major mode and minor modes are in effect
(see <a class="pxref" href="Modes.xhtml#Modes">Major and Minor Modes</a>).  These are stored in <em class="dfn">buffer-local
variables</em>&#8212;variables that can have a different value in each buffer.
See <a class="xref" href="Customization.xhtml#Locals">Local Variables</a>.
</p>
<a class="index-entry-id" id="index-buffer-size_002c-maximum"></a>
<p>A buffer&#8217;s size cannot be larger than some maximum, which is defined
by the largest buffer position representable by <em class="dfn">Emacs integers</em>.
This is because Emacs tracks buffer positions using that data type.
For typical 64-bit machines, this maximum buffer size is <em class="math">2^{61} - 2</em>
bytes, or about 2 EiB.  For typical 32-bit machines, the maximum is
usually <em class="math">2^{29} - 2</em> bytes, or about 512 MiB.  Buffer sizes are
also limited by the amount of memory in the system.
</p>

<div class="section-level-extent" id="Select-Buffer">
<h3 class="section" id="Creating-and-Selecting-Buffers">20.1 Creating and Selecting Buffers</h3>
<a class="index-entry-id" id="index-change-buffers"></a>
<a class="index-entry-id" id="index-switch-buffers"></a>

<dl class="table">
<dt><kbd class="kbd">C-x b <var class="var">buffer</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Select or create a buffer named <var class="var">buffer</var> (<code class="code">switch-to-buffer</code>).
</p></dd>
<dt><kbd class="kbd">C-x 4 b <var class="var">buffer</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Similar, but select <var class="var">buffer</var> in another window
(<code class="code">switch-to-buffer-other-window</code>).
</p></dd>
<dt><kbd class="kbd">C-x 5 b <var class="var">buffer</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Similar, but select <var class="var">buffer</var> in a separate frame
(<code class="code">switch-to-buffer-other-frame</code>).
</p></dd>
<dt><kbd class="kbd">C-x <kbd class="key">LEFT</kbd></kbd></dt>
<dd><p>Select the previous buffer in the buffer list (<code class="code">previous-buffer</code>).
</p></dd>
<dt><kbd class="kbd">C-x <kbd class="key">RIGHT</kbd></kbd></dt>
<dd><p>Select the next buffer in the buffer list (<code class="code">next-buffer</code>).
</p></dd>
<dt><kbd class="kbd">C-u M-g M-g</kbd></dt>
<dt><kbd class="kbd">C-u M-g g</kbd></dt>
<dd><p>Read a number <var class="var">n</var> and move to line <var class="var">n</var> in the most recently
selected buffer other than the current buffer, in another window.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-b"></a>
<a class="index-entry-id" id="index-switch_002dto_002dbuffer"></a>
<p>The <kbd class="kbd">C-x b</kbd> (<code class="code">switch-to-buffer</code>) command reads a buffer
name using the minibuffer.  Then it makes that buffer current, and
displays it in the currently-selected window.  An empty input
specifies the buffer that was current most recently among those not
now displayed in any window.
</p>
<p>While entering the buffer name, you can use the usual completion and
history commands (see <a class="pxref" href="Minibuffer.xhtml#Minibuffer">The Minibuffer</a>).  Note that <kbd class="kbd">C-x b</kbd>, and
related commands, use <em class="dfn">permissive completion with confirmation</em>
for minibuffer completion: if you type <kbd class="key">RET</kbd> when the minibuffer
text names a nonexistent buffer, Emacs prints &#8216;<samp class="samp">[Confirm]</samp>&#8217; and you
must type a second <kbd class="key">RET</kbd> to submit that buffer name.
See <a class="xref" href="Minibuffer.xhtml#Completion-Exit">Completion Exit</a>, for details.  For other completion options and
features, see <a class="ref" href="Minibuffer.xhtml#Completion-Options">Completion Options</a>.
</p>
<p>If you specify a buffer that does not exist, <kbd class="kbd">C-x b</kbd> creates a
new, empty buffer that is not visiting any file, and selects it for
editing.  The default value of the variable <code class="code">major-mode</code>
determines the new buffer&#8217;s major mode; the default value is
Fundamental mode.  See <a class="xref" href="Modes.xhtml#Major-Modes">Major Modes</a>.  One reason to create a new
buffer is to use it for making temporary notes.  If you try to save
it, Emacs asks for the file name to use, and the buffer&#8217;s major mode
is re-established taking that file name into account (see <a class="pxref" href="Modes.xhtml#Choosing-Modes">Choosing File Modes</a>).
</p>
<a class="index-entry-id" id="index-C_002dx-LEFT"></a>
<a class="index-entry-id" id="index-C_002dx-RIGHT"></a>
<a class="index-entry-id" id="index-next_002dbuffer"></a>
<a class="index-entry-id" id="index-previous_002dbuffer"></a>
<p>For conveniently switching between a few buffers, use the commands
<kbd class="kbd">C-x <kbd class="key">LEFT</kbd></kbd> and <kbd class="kbd">C-x <kbd class="key">RIGHT</kbd></kbd>.  <kbd class="kbd">C-x <kbd class="key">LEFT</kbd></kbd>
(<code class="code">previous-buffer</code>) selects the previous buffer (following the
order of most recent selection in the current frame), while <kbd class="kbd">C-x
<kbd class="key">RIGHT</kbd></kbd> (<code class="code">next-buffer</code>) moves through buffers in the reverse
direction.  Both commands support a numeric prefix argument that
serves as a repeat count.
</p>
<a class="index-entry-id" id="index-C_002dx-4-b"></a>
<a class="index-entry-id" id="index-switch_002dto_002dbuffer_002dother_002dwindow"></a>
<p>To select a buffer in a window other than the current one
(see <a class="pxref" href="Windows.xhtml#Windows">Multiple Windows</a>), type <kbd class="kbd">C-x 4 b</kbd>
(<code class="code">switch-to-buffer-other-window</code>).  This prompts for a buffer
name using the minibuffer, displays that buffer in another window, and
selects that window.
</p>
<a class="index-entry-id" id="index-C_002dx-5-b"></a>
<a class="index-entry-id" id="index-switch_002dto_002dbuffer_002dother_002dframe"></a>
<p>Similarly, <kbd class="kbd">C-x 5 b</kbd> (<code class="code">switch-to-buffer-other-frame</code>)
prompts for a buffer name, displays that buffer in another frame
(see <a class="pxref" href="Frames.xhtml#Frames">Frames and Graphical Displays</a>), and selects that frame.  If the buffer is already
being shown in a window on another frame, Emacs selects that window
and frame instead of creating a new frame.
</p>
<p>See <a class="xref" href="Windows.xhtml#Displaying-Buffers">Displaying a Buffer in a Window</a>, for how the <kbd class="kbd">C-x 4 b</kbd> and <kbd class="kbd">C-x 5
b</kbd> commands get the window and/or frame to display in.
</p>
<p>In addition, <kbd class="kbd">C-x C-f</kbd>, and any other command for visiting a
file, can also be used to switch to an existing file-visiting buffer.
See <a class="xref" href="Files.xhtml#Visiting">Visiting Files</a>.
</p>
<a class="index-entry-id" id="index-goto_002dline_002c-with-an-argument"></a>
<p><kbd class="kbd">C-u M-g M-g</kbd>, that is <code class="code">goto-line</code> with a plain prefix
argument, reads a number <var class="var">n</var> using the minibuffer, selects the
most recently selected buffer other than the current buffer in another
window, and then moves point to the beginning of line number <var class="var">n</var>
in that buffer.  This is mainly useful in a buffer that refers to line
numbers in another buffer: if point is on or just after a number,
<code class="code">goto-line</code> uses that number as the default for <var class="var">n</var>.  Note
that prefix arguments other than just <kbd class="kbd">C-u</kbd> behave differently.
<kbd class="kbd">C-u 4 M-g M-g</kbd> goes to line 4 in the <em class="emph">current</em> buffer,
without reading a number from the minibuffer.  (Remember that <kbd class="kbd">M-g
M-g</kbd> without prefix argument reads a number <var class="var">n</var> and then moves to
line number <var class="var">n</var> in the current buffer.  See <a class="xref" href="Basic.xhtml#Moving-Point">Changing the Location of Point</a>.)
</p>
<p>Emacs uses buffer names that start with a space for internal purposes.
It treats these buffers specially in minor ways&#8212;for example, by
default they do not record undo information.  It is best to avoid using
such buffer names yourself.
</p>
</div>
<div class="section-level-extent" id="List-Buffers">
<h3 class="section" id="Listing-Existing-Buffers">20.2 Listing Existing Buffers</h3>

<dl class="table">
<dt><kbd class="kbd">C-x C-b</kbd></dt>
<dd><p>List the existing buffers (<code class="code">list-buffers</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-listing-current-buffers"></a>
<a class="index-entry-id" id="index-C_002dx-C_002db"></a>
<a class="index-entry-id" id="index-list_002dbuffers"></a>
<p>To display a list of existing buffers, type <kbd class="kbd">C-x C-b</kbd>.  This
pops up a buffer menu in a buffer named <samp class="file">*Buffer List*</samp>.  Each
line in the list shows one buffer&#8217;s name, size, major mode and visited file.
The buffers are listed in the order that they were current; the
buffers that were current most recently come first.  This section
describes how the list of buffers is displayed and how to interpret
the various indications in the list; see <a class="ref" href="#Several-Buffers">Operating on Several Buffers</a>, for
description of the special mode in the <samp class="file">*Buffer List*</samp> buffer and
the commands available there.
</p>
<p>&#8216;<samp class="samp">.</samp>&#8217; in the first field of a line indicates that the buffer is
current.  &#8216;<samp class="samp">%</samp>&#8217; indicates a read-only buffer.  &#8216;<samp class="samp">*</samp>&#8217; indicates
that the buffer is modified.  If several buffers are modified, it
may be time to save some with <kbd class="kbd">C-x s</kbd> (see <a class="pxref" href="Files.xhtml#Save-Commands">Commands for Saving Files</a>).
Here is an example of a buffer list:
</p>
<div class="example smallexample">
<pre class="example-preformatted">CRM Buffer                Size  Mode              File
. * .emacs                3294  Emacs-Lisp        ~/.emacs
 %  *Help*                 101  Help
    search.c             86055  C                 ~/cvs/emacs/src/search.c
 %  src                  20959  Dired by name     ~/cvs/emacs/src/
  * *mail*                  42  Mail
 %  HELLO                 1607  Fundamental       ~/cvs/emacs/etc/HELLO
 %  NEWS                481184  Outline           ~/cvs/emacs/etc/NEWS
    *scratch*              191  Lisp Interaction
  * *Messages*            1554  Messages
</pre></div>

<p>The buffer <samp class="file">*Help*</samp> was made by a help request (see <a class="pxref" href="Help.xhtml#Help">Help</a>); it
is not visiting any file.  The buffer <code class="code">src</code> was made by Dired on
the directory <samp class="file">~/cvs/emacs/src/</samp>.  You can list only buffers that
are visiting files by giving the command a prefix argument, as in
<kbd class="kbd">C-u C-x C-b</kbd>.
</p>
<p><code class="code">list-buffers</code> omits buffers whose names begin with a space,
unless they visit files: such buffers are used internally by Emacs.
</p>
</div>
<div class="section-level-extent" id="Misc-Buffer">
<h3 class="section" id="Miscellaneous-Buffer-Operations">20.3 Miscellaneous Buffer Operations</h3>

<dl class="table">
<dt><kbd class="kbd">C-x C-q</kbd></dt>
<dd><p>Toggle read-only status of buffer (<code class="code">read-only-mode</code>).
</p></dd>
<dt><kbd class="kbd">C-x x r <kbd class="key">RET</kbd> <var class="var">buffer</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Change the name of the current buffer.
</p></dd>
<dt><kbd class="kbd">C-x x u</kbd></dt>
<dd><p>Rename the current buffer by adding &#8216;<samp class="samp">&lt;<var class="var">number</var>&gt;</samp>&#8217; to the end.
</p></dd>
<dt><kbd class="kbd">M-x view-buffer <kbd class="key">RET</kbd> <var class="var">buffer</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Scroll through buffer <var class="var">buffer</var>.  See <a class="xref" href="Display.xhtml#View-Mode">View Mode</a>.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-C_002dq"></a>
<a class="index-entry-id" id="index-buffer_002dread_002donly"></a>
<a class="index-entry-id" id="index-read_002donly-buffer"></a>
<p>A buffer can be <em class="dfn">read-only</em>, which means that commands to insert
or delete its text are not allowed.  (However, other commands, like
<kbd class="kbd">C-x <kbd class="key">RET</kbd> f</kbd>, can still mark it as modified, see <a class="pxref" href="International.xhtml#Text-Coding">Specifying a Coding System for File Text</a>).  The mode line indicates read-only buffers with &#8216;<samp class="samp">%%</samp>&#8217; or
&#8216;<samp class="samp">%*</samp>&#8217; near the left margin.  See <a class="xref" href="Screen.xhtml#Mode-Line">The Mode Line</a>.  Read-only buffers
are usually made by subsystems such as Dired and Rmail that have
special commands to operate on the text.  Visiting a file whose access
control says you cannot write it also makes the buffer read-only.
</p>
<a class="index-entry-id" id="index-read_002donly_002dmode"></a>
<a class="index-entry-id" id="index-view_002dread_002donly"></a>
<p>The command <kbd class="kbd">C-x C-q</kbd> (<code class="code">read-only-mode</code>) makes a read-only
buffer writable, and makes a writable buffer read-only.  This works by
setting the variable <code class="code">buffer-read-only</code>, which has a local value
in each buffer and makes the buffer read-only if its value is
non-<code class="code">nil</code>.  If you change the option <code class="code">view-read-only</code> to a
non-<code class="code">nil</code> value, making the buffer read-only with <kbd class="kbd">C-x C-q</kbd>
also enables View mode in the buffer (see <a class="pxref" href="Display.xhtml#View-Mode">View Mode</a>).
</p>
<a class="index-entry-id" id="index-C_002dx-x-r"></a>
<a class="index-entry-id" id="index-rename_002dbuffer"></a>
<p><kbd class="kbd">C-x x r</kbd> (<code class="code">rename-buffer</code> changes the name of the current
buffer.  You specify the new name as a minibuffer argument; there is
no default.  If you specify a name that is in use for some other
buffer, an error happens and no renaming is done.
</p>
<a class="index-entry-id" id="index-C_002dx-x-u"></a>
<a class="index-entry-id" id="index-rename_002duniquely"></a>
<p><kbd class="kbd">C-x x u</kbd> (<code class="code">rename-uniquely</code>) renames the current buffer to
a similar name with a numeric suffix added to make it both different
and unique.  This command does not need an argument.  It is useful for
creating multiple shell buffers: if you rename the <samp class="file">*shell*</samp>
buffer, then do <kbd class="kbd">M-x shell</kbd> again, it makes a new shell buffer
named <samp class="file">*shell*</samp>; meanwhile, the old shell buffer continues to
exist under its new name.  This method is also good for mail buffers,
compilation buffers, and most Emacs features that create special
buffers with particular names.  (With some of these features, such as
<kbd class="kbd">M-x compile</kbd>, <kbd class="kbd">M-x grep</kbd>, you need to switch to some other
buffer before using the command again, otherwise it will reuse the
current buffer despite the name change.)
</p>
<a class="index-entry-id" id="index-C_002dx-x-i"></a>
<p>The commands <kbd class="kbd">M-x append-to-buffer</kbd> and <kbd class="kbd">C-x x i</kbd>
(<code class="code">insert-buffer</code>) can also be used to copy text from one buffer
to another.  See <a class="xref" href="Killing.xhtml#Accumulating-Text">Accumulating Text</a>.
</p>
</div>
<div class="section-level-extent" id="Kill-Buffer">
<h3 class="section" id="Killing-Buffers">20.4 Killing Buffers</h3>

<a class="index-entry-id" id="index-killing-buffers"></a>
<a class="index-entry-id" id="index-close-buffer"></a>
<a class="index-entry-id" id="index-close-file"></a>
<p>If you continue an Emacs session for a while, you may accumulate a
large number of buffers.  You may then find it convenient to <em class="dfn">kill</em>
the buffers you no longer need.  (Some other editors call this
operation <em class="dfn">close</em>, and talk about &#8220;closing the buffer&#8221; or
&#8220;closing the file&#8221; visited in the buffer.)  On most operating
systems, killing a buffer releases the memory Emacs used for the buffer
back to the operating system so that other programs can use it.  Here
are some commands for killing buffers:
</p>
<dl class="table">
<dt><kbd class="kbd">C-x k <var class="var">buffer</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Kill buffer <var class="var">buffer</var> (<code class="code">kill-buffer</code>).
</p></dd>
<dt><kbd class="kbd">M-x kill-some-buffers</kbd></dt>
<dd><p>Offer to kill each buffer, one by one.
</p></dd>
<dt><kbd class="kbd">M-x kill-matching-buffers</kbd></dt>
<dd><p>Offer to kill all buffers matching a regular expression.
</p></dd>
</dl>

<a class="index-entry-id" id="index-kill_002dbuffer"></a>
<a class="index-entry-id" id="index-C_002dx-k"></a>
<a class="index-entry-id" id="index-killing-unsaved-buffers"></a>
<a class="index-entry-id" id="index-unsaved-buffers_002c-killing"></a>
<p><kbd class="kbd">C-x k</kbd> (<code class="code">kill-buffer</code>) kills one buffer, whose name you
specify in the minibuffer.  The default, used if you type just
<kbd class="key">RET</kbd> in the minibuffer, is to kill the current buffer.  If you
kill the current buffer, another buffer becomes current: one that was
current in the recent past but is not displayed in any window now.  If
you ask to kill a file-visiting buffer that is modified, then you must
confirm with <kbd class="kbd">yes</kbd> before the buffer is killed.
</p>
<a class="index-entry-id" id="index-kill_002dsome_002dbuffers"></a>
<p>The command <kbd class="kbd">M-x kill-some-buffers</kbd> asks about each buffer, one
by one.  An answer of <kbd class="kbd">yes</kbd> means to kill the buffer, just like
<code class="code">kill-buffer</code>.  This command ignores buffers whose names begin
with a space, which are used internally by Emacs.
</p>
<a class="index-entry-id" id="index-kill_002dmatching_002dbuffers"></a>
<p>The command <kbd class="kbd">M-x kill-matching-buffers</kbd> prompts for a regular
expression and kills all buffers whose names match that expression.
See <a class="xref" href="Search.xhtml#Regexps">Syntax of Regular Expressions</a>.  Like <code class="code">kill-some-buffers</code>, it asks for
confirmation before each kill.  This command normally ignores buffers
whose names begin with a space, which are used internally by Emacs.
To kill internal buffers as well, call <code class="code">kill-matching-buffers</code>
with a prefix argument.
</p>
<p>The Buffer Menu feature is also convenient for killing various
buffers.  See <a class="xref" href="#Several-Buffers">Operating on Several Buffers</a>.
</p>
<a class="index-entry-id" id="index-kill_002dbuffer_002dhook"></a>
<p>If you want to do something special every time a buffer is killed, you
can add hook functions to the hook <code class="code">kill-buffer-hook</code> (see <a class="pxref" href="Customization.xhtml#Hooks">Hooks</a>).
</p>
<a class="index-entry-id" id="index-clean_002dbuffer_002dlist"></a>
<p>If you run one Emacs session for a period of days, as many people do,
it can fill up with buffers that you used several days ago.  The command
<kbd class="kbd">M-x clean-buffer-list</kbd> is a convenient way to purge them; it kills
all the unmodified buffers that you have not used for a long time.  An
ordinary buffer is killed if it has not been displayed for three days;
however, you can specify certain buffers that should never be killed
automatically, and others that should be killed if they have been unused
for a mere hour.  These defaults, and other aspects of this command&#8217;s
behavior, can be controlled by customizing several options described
in the doc string of <code class="code">clean-buffer-list</code>.
</p>
<a class="index-entry-id" id="index-Midnight-mode"></a>
<a class="index-entry-id" id="index-midnight_002dmode"></a>
<a class="index-entry-id" id="index-midnight_002dhook"></a>
<p>You can also have this buffer purging done for you, once a day,
by enabling Midnight mode.  Midnight mode operates each day
at midnight; at that time, it runs <code class="code">clean-buffer-list</code>, or
whichever functions you have placed in the normal hook
<code class="code">midnight-hook</code> (see <a class="pxref" href="Customization.xhtml#Hooks">Hooks</a>).  To enable Midnight mode, use
the Customization buffer to set the variable <code class="code">midnight-mode</code> to
<code class="code">t</code>.  See <a class="xref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>.
</p>
</div>
<div class="section-level-extent" id="Several-Buffers">
<h3 class="section" id="Operating-on-Several-Buffers">20.5 Operating on Several Buffers</h3>
<a class="index-entry-id" id="index-Buffer-Menu"></a>

<dl class="table">
<dt><kbd class="kbd">M-x buffer-menu</kbd></dt>
<dd><p>Begin editing a buffer listing all Emacs buffers.
</p></dd>
<dt><kbd class="kbd">M-x buffer-menu-other-window</kbd></dt>
<dd><p>Similar, but do it in another window.
</p></dd>
</dl>

<p>The <em class="dfn">Buffer Menu</em> opened by <kbd class="kbd">C-x C-b</kbd> (see <a class="pxref" href="#List-Buffers">Listing Existing Buffers</a>)
does not merely list buffers.  It also allows you to perform various
operations on buffers, through an interface similar to Dired
(see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>).  You can save buffers, kill them (here called
<em class="dfn">deleting</em> them, for consistency with Dired), or display them.
</p>
<a class="index-entry-id" id="index-buffer_002dmenu"></a>
<a class="index-entry-id" id="index-buffer_002dmenu_002dother_002dwindow"></a>
<p>To use the Buffer Menu, type <kbd class="kbd">C-x C-b</kbd> and switch to the window
displaying the <samp class="file">*Buffer List*</samp> buffer.  You can also type
<kbd class="kbd">M-x buffer-menu</kbd> to open the Buffer Menu in the selected window.
Alternatively, the command <kbd class="kbd">M-x buffer-menu-other-window</kbd> opens
the Buffer Menu in another window, and selects that window.
</p>
<p>The Buffer Menu is a read-only buffer, and can be changed only
through the special commands described in this section.  The usual
cursor motion commands can be used in this buffer.  The following
commands apply to the buffer described on the current line:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-d-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002ddelete"></a><kbd class="kbd">d</kbd></dt>
<dd><p>Flag the buffer for deletion (killing), then move point to the next
line (<code class="code">Buffer-menu-delete</code>).  The deletion flag is indicated by
the character &#8216;<samp class="samp">D</samp>&#8217; on the line, before the buffer name.  The
deletion occurs only when you type the <kbd class="kbd">x</kbd> command (see below).
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dd-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002ddelete_002dbackwards"></a><kbd class="kbd">C-d</kbd></dt>
<dd><p>Like <kbd class="kbd">d</kbd>, but move point up instead of down
(<code class="code">Buffer-menu-delete-backwards</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-s-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dsave"></a><kbd class="kbd">s</kbd></dt>
<dd><p>Flag the buffer for saving (<code class="code">Buffer-menu-save</code>).  The save flag
is indicated by the character &#8216;<samp class="samp">S</samp>&#8217; on the line, before the buffer
name.  The saving occurs only when you type <kbd class="kbd">x</kbd>.  You may request
both saving and deletion for the same buffer.
</p>
</dd>
<dt><a class="index-entry-id" id="index-x-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dexecute"></a><kbd class="kbd">x</kbd></dt>
<dd><p>Perform all flagged deletions and saves (<code class="code">Buffer-menu-execute</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-u-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dunmark"></a><kbd class="kbd">u</kbd></dt>
<dd><p>Remove all flags from the current line, and move down
(<code class="code">Buffer-menu-unmark</code>).  With a prefix argument, moves up after
removing the flags.
</p>
</dd>
<dt><a class="index-entry-id" id="index-DEL-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dbackup_002dunmark"></a><kbd class="kbd"><kbd class="key">DEL</kbd></kbd></dt>
<dd><p>Move to the previous line and remove all flags on that line
(<code class="code">Buffer-menu-backup-unmark</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-M_002dDEL-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dunmark_002dall_002dbuffers"></a><kbd class="kbd">M-<kbd class="key">DEL</kbd></kbd></dt>
<dd><p>Remove a particular flag from all lines
(<code class="code">Buffer-menu-unmark-all-buffers</code>).  This asks for a single
character, and unmarks buffers marked with that character; typing
<kbd class="key">RET</kbd> removes all marks.
</p>
</dd>
<dt><a class="index-entry-id" id="index-U-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dunmark_002dall"></a><kbd class="kbd">U</kbd></dt>
<dd><p>Remove all flags from all the lines
(<code class="code">Buffer-menu-unmark-all</code>).
</p></dd>
</dl>

<p>The commands for removing flags, <kbd class="kbd">d</kbd> and <kbd class="kbd">C-d</kbd>, accept a
numeric argument as a repeat count.
</p>
<p>The following commands operate immediately on the buffer listed on
the current line.  They also accept a numeric argument as a repeat
count.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-_007e-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dnot_002dmodified"></a><kbd class="kbd">~</kbd></dt>
<dd><p>Mark the buffer as unmodified (<code class="code">Buffer-menu-not-modified</code>).
See <a class="xref" href="Files.xhtml#Save-Commands">Commands for Saving Files</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-_0025-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dtoggle_002dread_002donly"></a><kbd class="kbd">%</kbd></dt>
<dd><p>Toggle the buffer&#8217;s read-only status
(<code class="code">Buffer-menu-toggle-read-only</code>).  See <a class="xref" href="#Misc-Buffer">Miscellaneous Buffer Operations</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-t-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dvisit_002dtags_002dtable"></a><kbd class="kbd">t</kbd></dt>
<dd><p>Visit the buffer as a tags table
(<code class="code">Buffer-menu-visit-tags-table</code>).  See <a class="xref" href="Maintaining.xhtml#Select-Tags-Table">Selecting a Tags Table</a>.
</p></dd>
</dl>

<p>The following commands are used to select another buffer or buffers:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-q-_0028Buffer-Menu_0029"></a>
<a id="index-quit_002dwindow-1"></a><kbd class="kbd">q</kbd></dt>
<dd><p>Quit the Buffer Menu (<code class="code">quit-window</code>).  The most recent formerly
visible buffer is displayed in its place.
</p>
</dd>
<dt><a class="index-entry-id" id="index-f-_0028Buffer-Menu_0029"></a>
<a class="index-entry-id" id="index-RET-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dthis_002dwindow"></a><kbd class="kbd"><kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">f</kbd></dt>
<dd><p>Select this line&#8217;s buffer, replacing the <samp class="file">*Buffer List*</samp> buffer
in its window (<code class="code">Buffer-menu-this-window</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-o-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dother_002dwindow"></a><kbd class="kbd">o</kbd></dt>
<dd><p>Select this line&#8217;s buffer in another window, as if by <kbd class="kbd">C-x 4 b</kbd>,
leaving <samp class="file">*Buffer List*</samp> visible
(<code class="code">Buffer-menu-other-window</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002do-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dswitch_002dother_002dwindow"></a><kbd class="kbd">C-o</kbd></dt>
<dd><p>Display this line&#8217;s buffer in another window, without selecting it
(<code class="code">Buffer-menu-switch-other-window</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-1-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002d1_002dwindow"></a><kbd class="kbd">1</kbd></dt>
<dd><p>Select this line&#8217;s buffer in a full-frame window
(<code class="code">Buffer-menu-1-window</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-2-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002d2_002dwindow"></a><kbd class="kbd">2</kbd></dt>
<dd><p>Set up two windows on the current frame, with this line&#8217;s buffer
selected in one, and a previously current buffer (aside from
<samp class="file">*Buffer List*</samp>) in the other (<code class="code">Buffer-menu-2-window</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-b-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dbury"></a><kbd class="kbd">b</kbd></dt>
<dd><p>Bury this line&#8217;s buffer (<code class="code">Buffer-menu-bury</code>) (i.e., move it to
the end of the buffer list).
</p>
</dd>
<dt><a class="index-entry-id" id="index-m-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dmark"></a><kbd class="kbd">m</kbd></dt>
<dd><p>Mark this line&#8217;s buffer to be displayed in another window if you exit
with the <kbd class="kbd">v</kbd> command (<code class="code">Buffer-menu-mark</code>).  The display flag
is indicated by the character &#8216;<samp class="samp">&gt;</samp>&#8217; at the beginning of the line.
(A single buffer may not have both deletion and display flags.)
</p>
</dd>
<dt><a class="index-entry-id" id="index-v-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dselect"></a><kbd class="kbd">v</kbd></dt>
<dd><p>Select this line&#8217;s buffer, and also display in other windows any
buffers flagged with the <kbd class="kbd">m</kbd> command (<code class="code">Buffer-menu-select</code>).
If you have not flagged any buffers, this command is equivalent to
<kbd class="kbd">1</kbd>.
</p></dd>
</dl>

<p>The following commands affect the entire buffer list:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-S-_0028Buffer-Menu_0029"></a>
<a id="index-tabulated_002dlist_002dsort"></a><kbd class="kbd">S</kbd></dt>
<dd><p>Sort the Buffer Menu entries according to their values in the column
at point.  With a numeric prefix argument <var class="var">n</var>, sort according to
the <var class="var">n</var>-th column (<code class="code">tabulated-list-sort</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-tabulated_002dlist_002dwiden_002dcurrent_002dcolumn"></a>
<a id="index-_007d-_0028Buffer-Menu_0029"></a><kbd class="kbd">}</kbd></dt>
<dd><p>Widen the current column width by <var class="var">n</var> (the prefix numeric
argument) characters.
</p>
</dd>
<dt><a class="index-entry-id" id="index-tabulated_002dlist_002dnarrow_002dcurrent_002dcolumn"></a>
<a id="index-_007b-_0028Buffer-Menu_0029"></a><kbd class="kbd">{</kbd></dt>
<dd><p>Narrow the current column width by <var class="var">n</var> (the prefix numeric
argument) characters.
</p>
</dd>
<dt><a class="index-entry-id" id="index-T-_0028Buffer-Menu_0029"></a>
<a id="index-Buffer_002dmenu_002dtoggle_002dfiles_002donly"></a><kbd class="kbd">T</kbd></dt>
<dd><p>Delete, or reinsert, lines for non-file buffers
(<code class="code">Buffer-menu-toggle-files-only</code>).  This command toggles the
inclusion of such buffers in the buffer list.
</p></dd>
</dl>

<p>Normally, the buffer <samp class="file">*Buffer List*</samp> is not updated
automatically when buffers are created and killed; its contents are
just text.  If you have created, deleted or renamed buffers, the way
to update <samp class="file">*Buffer List*</samp> to show what you have done is to type
<kbd class="kbd">g</kbd> (<code class="code">revert-buffer</code>).  You can make this happen regularly
every <code class="code">auto-revert-interval</code> seconds if you enable Auto Revert
mode in this buffer, as long as it is not marked modified.  Global
Auto Revert mode applies to the <samp class="file">*Buffer List*</samp> buffer only if
<code class="code">global-auto-revert-non-file-buffers</code> is non-<code class="code">nil</code>.
See <a class="xref" href="Files.xhtml#Auto-Reverting-the-Buffer-Menu">global-auto-revert-non-file-buffers</a>, for details.
</p>
</div>
<div class="section-level-extent" id="Indirect-Buffers">
<h3 class="section" id="Indirect-Buffers-1">20.6 Indirect Buffers</h3>
<a class="index-entry-id" id="index-indirect-buffer"></a>
<a class="index-entry-id" id="index-base-buffer"></a>

<p>An <em class="dfn">indirect buffer</em> shares the text of some other buffer, which
is called the <em class="dfn">base buffer</em> of the indirect buffer.  In some ways it
is a buffer analogue of a symbolic link between files.
</p>
<dl class="table">
<dt><a id="index-make_002dindirect_002dbuffer"></a><kbd class="kbd">M-x make-indirect-buffer <kbd class="key">RET</kbd> <var class="var">base-buffer</var> <kbd class="key">RET</kbd> <var class="var">indirect-name</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Create an indirect buffer named <var class="var">indirect-name</var> with base buffer
<var class="var">base-buffer</var>.
<a class="index-entry-id" id="index-clone_002dindirect_002dbuffer"></a>
</p></dd>
<dt><kbd class="kbd">M-x clone-indirect-buffer <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Create an indirect buffer that is a twin copy of the current buffer.
</p></dd>
<dt><a class="index-entry-id" id="index-clone_002dindirect_002dbuffer_002dother_002dwindow"></a>
<a id="index-C_002dx-4-c"></a><kbd class="kbd">C-x 4 c</kbd></dt>
<dd><p>Create an indirect buffer that is a twin copy of the current buffer, and
select it in another window (<code class="code">clone-indirect-buffer-other-window</code>).
</p></dd>
</dl>

<p>The text of the indirect buffer is always identical to the text of its
base buffer; changes made by editing either one are visible immediately
in the other.  &#8220;Text&#8221; here includes both the characters and their text
properties.  But in all other respects, the indirect buffer and its
base buffer are completely separate.  They can have different names,
different values of point, different narrowing, different markers,
different overlays, different major modes, and different local variables.
</p>
<p>An indirect buffer cannot visit a file, but its base buffer can.  If
you try to save the indirect buffer, that actually works by saving the
base buffer.  Killing the base buffer effectively kills the indirect
buffer, but killing an indirect buffer has no effect on its base buffer.
</p>
<p>One way to use indirect buffers is to display multiple views of an
outline.  See <a class="xref" href="Text.xhtml#Outline-Views">Viewing One Outline in Multiple Views</a>.
</p>
<p>A quick and handy way to make an indirect buffer is with the command
<kbd class="kbd">C-x 4 c</kbd> (<code class="code">clone-indirect-buffer-other-window</code>).  It creates
and selects an indirect buffer whose base buffer is the current
buffer.  With a numeric argument, it prompts for the name of the
indirect buffer; otherwise it uses the name of the current buffer,
with a &#8216;<samp class="samp">&lt;<var class="var">n</var>&gt;</samp>&#8217; suffix added.
</p>
<p>The more general way to make an indirect buffer is with the command
<kbd class="kbd">M-x make-indirect-buffer</kbd>.  It creates an indirect buffer
named <var class="var">indirect-name</var> from a buffer <var class="var">base-buffer</var>, prompting for
both using the minibuffer.
</p>
<a class="index-entry-id" id="index-clone_002dindirect_002dbuffer_002dhook"></a>
<p>The functions that create indirect buffers run the hook
<code class="code">clone-indirect-buffer-hook</code> after creating the indirect buffer.
When this hook runs, the newly created indirect buffer is the current
buffer.
</p>
<p>Note: When a modification is made to the text of a buffer, the
modification hooks are run only in the base buffer, because most of
the functions on those hooks are not prepared to work correctly in
indirect buffers.  So if you need a modification hook function in an
indirect buffer, you need to manually add that function to the hook
<em class="emph">in the base buffer</em> and then make the function operate in the
desired indirect buffer.
</p>
</div>
<div class="section-level-extent" id="Buffer-Convenience">
<h3 class="section" id="Convenience-Features-and-Customization-of-Buffer-Handling">20.7 Convenience Features and Customization of Buffer Handling</h3>

<p>This section describes several modes and features that make it more
convenient to switch between buffers.
</p>

<div class="subsection-level-extent" id="Uniquify">
<h4 class="subsection" id="Making-Buffer-Names-Unique">20.7.1 Making Buffer Names Unique</h4>

<a class="index-entry-id" id="index-unique-buffer-names"></a>
<a class="index-entry-id" id="index-directories-in-buffer-names"></a>
<p>When several buffers visit identically-named files, Emacs must give
the buffers distinct names.  The default method adds a suffix based on
the names of the directories that contain the files.  For example, if
you visit files <samp class="file">/foo/bar/mumble/name</samp> and
<samp class="file">/baz/quux/mumble/name</samp> at the same time, their buffers will be
named &#8216;<samp class="samp">name&lt;bar/mumble&gt;</samp>&#8217; and &#8216;<samp class="samp">name&lt;quux/mumble&gt;</samp>&#8217;, respectively.
Emacs adds as many directory parts as are needed to make a unique name.
</p>
<a class="index-entry-id" id="index-uniquify_002dbuffer_002dname_002dstyle"></a>
<p>You can choose from several different styles for constructing unique
buffer names, by customizing the option <code class="code">uniquify-buffer-name-style</code>.
</p>
<p>The <code class="code">forward</code> naming method includes part of the file&#8217;s
directory name at the beginning of the buffer name; using this method,
buffers visiting the files <samp class="file">/u/rms/tmp/Makefile</samp> and
<samp class="file">/usr/projects/zaphod/Makefile</samp> would be named
&#8216;<samp class="samp">tmp/Makefile</samp>&#8217; and &#8216;<samp class="samp">zaphod/Makefile</samp>&#8217;.
</p>
<p>In contrast, the <code class="code">post-forward</code> naming method would call the
buffers &#8216;<samp class="samp">Makefile|tmp</samp>&#8217; and &#8216;<samp class="samp">Makefile|zaphod</samp>&#8217;.  The default
method <code class="code">post-forward-angle-brackets</code> is like <code class="code">post-forward</code>,
except that it encloses the unique path in angle brackets.  The
<code class="code">reverse</code> naming method would call them &#8216;<samp class="samp">Makefile\tmp</samp>&#8217; and
&#8216;<samp class="samp">Makefile\zaphod</samp>&#8217;.  The nontrivial difference between
<code class="code">post-forward</code> and <code class="code">reverse</code> occurs when just one directory
name is not enough to distinguish two files; then <code class="code">reverse</code> puts
the directory names in reverse order, so that <samp class="file">/top/middle/file</samp>
becomes &#8216;<samp class="samp">file\middle\top</samp>&#8217;, while <code class="code">post-forward</code> puts them in
forward order after the file name, as in &#8216;<samp class="samp">file|top/middle</samp>&#8217;.  If
<code class="code">uniquify-buffer-name-style</code> is set to <code class="code">nil</code>, the buffer
names simply get &#8216;<samp class="samp">&lt;2&gt;</samp>&#8217;, &#8216;<samp class="samp">&lt;3&gt;</samp>&#8217;, etc. appended.
</p>
<p>The value of <code class="code">uniquify-buffer-name-style</code> can be set to a
customized function with two arguments <var class="var">base</var> and
<var class="var">extra-strings</var> where <var class="var">base</var> is a string and
<var class="var">extra-strings</var> is a list of strings.  For example the current
implementation for <code class="code">post-forward-angle-brackets</code> could be:
</p>
<div class="example">
<pre class="example-preformatted">(defun my-post-forward-angle-brackets (base extra-string)
  (concat base \&quot;&lt;\&quot; (mapconcat #'identity extra-string \&quot;/\&quot;) \&quot;&gt;\&quot;))
</pre></div>

<p>Which rule to follow for putting the directory names in the buffer
name is not very important if you are going to <em class="emph">look</em> at the
buffer names before you type one.  But as an experienced user, if you
know the rule, you won&#8217;t have to look.  And then you may find that one
rule or another is easier for you to remember and apply quickly.
</p>
</div>
<div class="subsection-level-extent" id="Icomplete">
<h4 class="subsection" id="Fast-minibuffer-selection">20.7.2 Fast minibuffer selection</h4>

<a class="index-entry-id" id="index-icomplete_002dmode"></a>
<a class="index-entry-id" id="index-Icomplete-mode"></a>

<p>Icomplete global minor mode provides a convenient way to quickly select an
element among the possible completions in a minibuffer.  When enabled, typing
in the minibuffer continuously displays a list of possible completions that
match the string you have typed.
</p>
<p>At any time, you can type <kbd class="kbd">C-j</kbd> to select the first completion in
the list.  So the way to select a particular completion is to make it the
first in the list.  There are two ways to do this.  You can type more
of the completion name and thus narrow down the list, excluding unwanted
completions above the desired one.  Alternatively, you can use <kbd class="kbd">C-.</kbd>
and <kbd class="kbd">C-,</kbd> to rotate the list until the desired buffer is first.
</p>
<p><kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> will select the first completion in the list, like
<kbd class="kbd">C-j</kbd> but without exiting the minibuffer, so you can edit it
further.  This is typically used when entering a file name, where
<kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> can be used a few times to descend in the hierarchy
of directories.
</p>
<p>To enable Icomplete mode, type <kbd class="kbd">M-x icomplete-mode</kbd>, or customize
the variable <code class="code">icomplete-mode</code> to <code class="code">t</code> (see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>).
</p>
<a class="index-entry-id" id="index-fido_002dmode"></a>
<a class="index-entry-id" id="index-fido-mode"></a>

<p>An alternative to Icomplete mode is Fido mode.  This is very similar
to Icomplete mode, but retains some functionality from a popular
extension called Ido mode (in fact the name is derived from &#8220;Fake
Ido&#8221;).  Among other things, in Fido mode, <kbd class="kbd">C-s</kbd> and <kbd class="kbd">C-r</kbd> are
also used to rotate the completions list, <kbd class="kbd">C-k</kbd> can be used to
delete files and kill buffers in-list.  Another noteworthy aspect is
that <code class="code">flex</code> is used as the default completion style
(see <a class="pxref" href="Minibuffer.xhtml#Completion-Styles">How Completion Alternatives Are Chosen</a>).  To change this, add the following to
your initialization file (see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>):
</p>
<div class="example">
<pre class="example-preformatted">(defun my-icomplete-styles ()
  (setq-local completion-styles '(initials flex)))
(add-hook 'icomplete-minibuffer-setup-hook 'my-icomplete-styles)
</pre></div>

<p>To enable Fido mode, type <kbd class="kbd">M-x fido-mode</kbd>, or customize
the variable <code class="code">fido-mode</code> to <code class="code">t</code> (see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>).
</p>
<a class="index-entry-id" id="index-icomplete_002dvertical_002dmode"></a>
<a class="index-entry-id" id="index-Icomplete-vertical-mode"></a>

<p>Icomplete mode and Fido mode display the possible completions on the
same line as the prompt by default.  To display the completion candidates
vertically under the prompt, type <kbd class="kbd">M-x icomplete-vertical-mode</kbd>, or
customize the variable <code class="code">icomplete-vertical-mode</code> to <code class="code">t</code>
(see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>).
</p>
</div>
<div class="subsection-level-extent" id="Buffer-Menus">
<h4 class="subsection" id="Customizing-Buffer-Menus">20.7.3 Customizing Buffer Menus</h4>

<a class="index-entry-id" id="index-bs_002dshow"></a>
<a class="index-entry-id" id="index-buffer-list_002c-customizable"></a>
<dl class="table">
<dt><kbd class="kbd">M-x bs-show</kbd></dt>
<dd><p>Make a list of buffers similarly to <kbd class="kbd">M-x list-buffers</kbd> but
customizable.
</p></dd>
<dt><kbd class="kbd">M-x ibuffer</kbd></dt>
<dd><p>Make a list of buffers and operate on them in Dired-like fashion.
</p></dd>
</dl>

<a class="index-entry-id" id="index-bs_002dcustomize"></a>
<p><kbd class="kbd">M-x bs-show</kbd> pops up a buffer list similar to the one normally
displayed by <kbd class="kbd">C-x C-b</kbd>, but whose display you can customize in a
more flexible fashion.  For example, you can specify the list of
buffer attributes to show, the minimum and maximum width of buffer
name column, a regexp for names of buffers that will never be shown
and those which will always be shown, etc.  If you prefer
this to the usual buffer list, you can bind this command to <kbd class="kbd">C-x
C-b</kbd>.  To customize this buffer list, use the <code class="code">bs</code> Custom group
(see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>), or invoke <kbd class="kbd">bs-customize</kbd>.
</p>
<a class="index-entry-id" id="index-msb_002dmode"></a>
<a class="index-entry-id" id="index-mode_002c-MSB"></a>
<a class="index-entry-id" id="index-MSB-mode"></a>
<a class="index-entry-id" id="index-mouse_002dbuffer_002dmenu"></a>
<a class="index-entry-id" id="index-C_002dDown_002dmouse_002d1"></a>
<p>MSB global minor mode (&#8220;MSB&#8221; stands for &#8220;mouse select buffer&#8221;)
provides a different and customizable mouse buffer menu which you may
prefer.  It replaces the <code class="code">mouse-buffer-menu</code> commands, normally
bound to <kbd class="kbd">C-Down-mouse-1</kbd> and <kbd class="kbd">C-<kbd class="key">F10</kbd></kbd>, with its own
commands, and also modifies the menu-bar buffer menu.  You can
customize the menu in the <code class="code">msb</code> Custom group.
</p>
<a class="index-entry-id" id="index-ibuffer"></a>
<p>IBuffer is a major mode for viewing a list of buffers and operating
on them in a way analogous to that of Dired (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>), including
filtering, marking, sorting in various ways, and acting on buffers.
</p></div>
</div>
</div>



</body>
</html>
