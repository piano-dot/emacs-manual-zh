<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>Appendix H Emacs and Microsoft Windows/MS-DOS (GNU Emacs Manual)</title>

<meta name="description" content="Appendix H Emacs and Microsoft Windows/MS-DOS (GNU Emacs Manual)"/>
<meta name="keywords" content="Appendix H Emacs and Microsoft Windows/MS-DOS (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Manifesto.xhtml#Manifesto" rel="next" title="The GNU Manifesto"/>
<link href="Haiku.xhtml#Haiku" rel="prev" title="Appendix G Emacs and Haiku"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
span.r {font-family: initial; font-weight: normal; font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="appendix-level-extent" id="Microsoft-Windows">

<h2 class="appendix" id="Emacs-and-Microsoft-Windows_002fMS_002dDOS">Appendix H Emacs and Microsoft Windows/MS-DOS</h2>
<a class="index-entry-id" id="index-Microsoft-Windows"></a>
<a class="index-entry-id" id="index-MS_002dWindows_002c-Emacs-peculiarities"></a>

<p>This section describes peculiarities of using Emacs on Microsoft
Windows.  Some of these peculiarities are also relevant to Microsoft&#8217;s
older MS-DOS operating system.
However, Emacs features that are relevant <em class="emph">only</em> to MS-DOS are
described in a separate
section (see <a class="pxref" href="#MS_002dDOS">Emacs and MS-DOS</a>).
</p>
<p>MS-Windows is a non-free operating system; that means it denies its
users the freedom that every computer user deserves.  That is an
injustice.  For your freedom&#8217;s sake, we urge you to switch to a free
operating system.
</p>
<p>We support GNU Emacs on proprietary operating systems because we
hope this taste of freedom will inspire users to escape from them.
</p>
<p>The behavior of Emacs on MS-Windows is reasonably similar to what is
documented in the rest of the manual, including support for long file
names, multiple frames, scroll bars, mouse menus, and subprocesses.
However, a few special considerations apply, and they are described
here.
</p>

<div class="section-level-extent" id="Windows-Startup">
<h3 class="section" id="How-to-Start-Emacs-on-MS_002dWindows">H.1 How to Start Emacs on MS-Windows</h3>
<a class="index-entry-id" id="index-starting-Emacs-on-MS_002dWindows"></a>

<p>There are several ways of starting Emacs on MS-Windows:
</p>
<ol class="enumerate">
<li> <a class="index-entry-id" id="index-runemacs_002eexe"></a>
<a class="index-entry-id" id="index-desktop-shortcut_002c-MS_002dWindows"></a>
<a class="index-entry-id" id="index-start-directory_002c-MS_002dWindows"></a>
<a class="index-entry-id" id="index-directory-where-Emacs-starts-on-MS_002dWindows"></a>
From the desktop shortcut icon: either double-click the left mouse
button on the icon, or click once, then press <kbd class="key">RET</kbd>.  The desktop
shortcut should specify as its &#8220;Target&#8221; (in the &#8220;Properties&#8221; of
the shortcut) the full absolute file name of <samp class="file">runemacs.exe</samp>,
<em class="emph">not</em> of <samp class="file">emacs.exe</samp>.  This is because <samp class="file">runemacs.exe</samp>
hides the console window that would have been created if the target of
the shortcut were <samp class="file">emacs.exe</samp> (which is a console program, as far
as Windows is concerned).  If you use this method, Emacs starts in the
directory specified by the shortcut.  To control where that is,
right-click on the shortcut, select &#8220;Properties&#8221;, and in the
&#8220;Shortcut&#8221; tab modify the &#8220;Start in&#8221; field to your liking.

</li><li> <a class="index-entry-id" id="index-pinning-Emacs-to-Windows-task-bar"></a>
From a task-bar shortcut icon, by clicking once the left mouse button.
Windows versions since Vista allow you to create such shortcuts by
<em class="dfn">pinning</em> the icon of a running program that appears in the task
bar.  You can do that with Emacs, but afterwards you will have to
change the properties of the pinned shortcut to run
<samp class="file">runemacs.exe</samp>, <em class="emph">not</em> of <samp class="file">emacs.exe</samp>.  You can also pin
Emacs to the task bar by clicking the right mouse button on its icon
in the Start menu, then selecting &#8216;<samp class="samp">Pin to taskbar</samp>&#8217;.  Once again,
be sure to specify <samp class="file">runemacs.exe</samp> as the program to run.  You can
control where Emacs starts by setting the &#8220;Start in&#8221; field of the
shortcut&#8217;s Properties.

</li><li> From the Command Prompt window, by typing <kbd class="kbd">emacs <kbd class="key">RET</kbd></kbd> at the
prompt.  The Command Prompt window where you did that will not be
available for invoking other commands until Emacs exits.  In this
case, Emacs will start in the current directory of the Windows shell.

</li><li> From the Command Prompt window, by typing <kbd class="kbd">runemacs <kbd class="key">RET</kbd></kbd> at
the prompt.  The Command Prompt window where you did that will be
immediately available for invoking other commands.  In this case,
Emacs will start in the current directory of the Windows shell.

</li><li> From the Windows <code class="code">Run</code> dialog (normally reached by clicking the
<code class="code">Start</code> button).  Typing <kbd class="kbd">runemacs <kbd class="key">RET</kbd></kbd> into the dialog
will start Emacs in the parent directory of the Windows equivalent of
your user&#8217;s <code class="code">HOME</code> directory, see <a class="ref" href="#Windows-HOME">HOME and Startup Directories on MS-Windows</a>.

</li><li> <a class="index-entry-id" id="index-invoking-Emacs-from-Windows-Explorer"></a>
<a class="index-entry-id" id="index-emacsclient_002eexe"></a>
<a class="index-entry-id" id="index-emacsclientw_002eexe"></a>
Via <samp class="file">emacsclient.exe</samp> or <samp class="file">emacsclientw.exe</samp>, which allow you
to invoke Emacs from other programs, and to reuse a running Emacs
process for serving editing jobs required by other programs.
See <a class="xref" href="Emacs-Server.xhtml#Emacs-Server">Using Emacs as a Server</a>.  The difference between <samp class="file">emacsclient.exe</samp>
and <samp class="file">emacsclientw.exe</samp> is that the former is a console program,
while the latter is a Windows GUI program.  Both programs wait for
Emacs to signal that the editing job is finished, before they exit and
return control to the program that invoked them.  Which one of them to
use in each case depends on the expectations of the program that needs
editing services.  If that program is itself a console (text-mode)
program, you should use <samp class="file">emacsclient.exe</samp>, so that any of its
messages and prompts appear in the same command window as those of the
invoking program.  By contrast, if the invoking program is a GUI
program, you will be better off using <samp class="file">emacsclientw.exe</samp>, because
<samp class="file">emacsclient.exe</samp> will pop up a command window if it is invoked
from a GUI program.  A notable situation where you would want
<samp class="file">emacsclientw.exe</samp> is when you right-click on a file in the
Windows Explorer and select &#8220;Open With&#8221; from the pop-up menu.  Use
the &#8216;<samp class="samp">--alternate-editor=</samp>&#8217; or &#8216;<samp class="samp">-a</samp>&#8217; options if Emacs might not
be running (or not running as a server) when <code class="command">emacsclient</code> is
invoked&#8212;that will always give you an editor.  When invoked via
<code class="command">emacsclient</code>, Emacs will start in the current directory of
the program that invoked <code class="command">emacsclient</code>.
</li></ol>

<a class="index-entry-id" id="index-emacsclient_002c-on-MS_002dWindows"></a>
<p>Note that, due to limitations of MS-Windows, Emacs cannot have both
GUI and text-mode frames in the same session.  It also cannot open
text-mode frames on more than a single <em class="dfn">Command Prompt</em> window,
because each Windows program can have only one console at any given
time.  For these reasons, if you invoke <code class="command">emacsclient</code> with the
<samp class="option">-c</samp> option, and the Emacs server runs in a text-mode session,
Emacs will always create a new text-mode frame in the same
<em class="dfn">Command Prompt</em> window where it was started; a GUI frame will be
created only if the server runs in a GUI session.  Similarly, if you
invoke <code class="command">emacsclient</code> with the <samp class="option">-t</samp> option, Emacs will
create a GUI frame if the server runs in a GUI session, or a text-mode
frame when the session runs in text mode in a <em class="dfn">Command Prompt</em>
window.  See <a class="xref" href="Emacs-Server.xhtml#emacsclient-Options"><code class="code">emacsclient</code> Options</a>.
</p>
</div>
<div class="section-level-extent" id="Text-and-Binary">
<h3 class="section" id="Text-Files-and-Binary-Files">H.2 Text Files and Binary Files</h3>
<a class="index-entry-id" id="index-text-and-binary-files-on-MS_002dDOS_002fMS_002dWindows"></a>

<p>GNU Emacs uses newline characters to separate text lines.  This is the
convention used on GNU, Unix, and other POSIX-compliant systems.
</p>
<a class="index-entry-id" id="index-end_002dof_002dline-conversion-on-MS_002dDOS_002fMS_002dWindows"></a>
<p>By contrast, MS-DOS and MS-Windows normally use carriage return
followed by linefeed, a two-character sequence, to separate text
lines.  (Linefeed is the same character as newline.)  Therefore,
convenient editing of typical files with Emacs requires conversion of
these end-of-line (EOL) sequences.  And that is what Emacs normally
does: it converts carriage return followed by linefeed into newline
when reading files, and converts newline into carriage return followed
by linefeed when writing files.  The same mechanism that handles
conversion of international character codes does this conversion also
(see <a class="pxref" href="International.xhtml#Coding-Systems">Coding Systems</a>).
</p>
<a class="index-entry-id" id="index-cursor-location_002c-on-MS_002dDOS"></a>
<a class="index-entry-id" id="index-point-location_002c-on-MS_002dDOS"></a>
<p>One consequence of this special format-conversion of most files is
that character positions as reported by Emacs (see <a class="pxref" href="Basic.xhtml#Position-Info">Cursor Position Information</a>) do
not agree with the file size information known to the operating system.
</p>
<p>In addition, if Emacs recognizes from a file&#8217;s contents that it uses
newline rather than carriage return followed by linefeed as its line
separator, it does not perform EOL conversion when reading or writing
that file.  Thus, you can read and edit files from GNU and Unix
systems on MS-DOS with no special effort, and they will retain their
Unix-style end-of-line convention after you edit them.
</p>
<p>The mode line indicates whether end-of-line translation was used for
the current buffer.  If MS-DOS end-of-line translation is in use for the
buffer, the MS-Windows build of Emacs displays a backslash &#8216;<samp class="samp">\</samp>&#8217; after
the coding system mnemonic near the beginning of the mode line
(see <a class="pxref" href="Screen.xhtml#Mode-Line">The Mode Line</a>).  If no EOL translation was performed, the string
&#8216;<samp class="samp">(Unix)</samp>&#8217; is displayed instead of the backslash, to alert you that the
file&#8217;s EOL format is not the usual carriage return followed by linefeed.
</p>
<a class="index-entry-id" id="index-DOS_002dto_002dUnix-conversion-of-files"></a>
<p>To visit a file and specify whether it uses DOS-style or Unix-style
end-of-line, specify a coding system (see <a class="pxref" href="International.xhtml#Text-Coding">Specifying a Coding System for File Text</a>).  For
example, <kbd class="kbd">C-x <kbd class="key">RET</kbd> c unix <kbd class="key">RET</kbd> C-x C-f foobar.txt</kbd>
visits the file <samp class="file">foobar.txt</samp> without converting the EOLs; if some
line ends with a carriage return followed by linefeed pair, Emacs will
display &#8216;<samp class="samp">^M</samp>&#8217; at the end of that line.  Similarly, you can direct
Emacs to save a buffer in a specified EOL format with the <kbd class="kbd">C-x
<kbd class="key">RET</kbd> f</kbd> command.  For example, to save a buffer with Unix EOL
format, type <kbd class="kbd">C-x <kbd class="key">RET</kbd> f unix <kbd class="key">RET</kbd> C-x C-s</kbd>.  If you
visit a file with DOS EOL conversion, then save it with Unix EOL
format, that effectively converts the file to Unix EOL style, like the
<code class="code">dos2unix</code> program.
</p>
<a class="index-entry-id" id="index-untranslated-file-system"></a>
<a class="index-entry-id" id="index-w32_002dadd_002duntranslated_002dfilesystem"></a>
<p>When you use NFS, Samba, or some other similar method to access file
systems that reside on computers using GNU or Unix systems, Emacs
should not perform end-of-line translation on any files in these file
systems&#8212;not even when you create a new file.  To request this,
designate these file systems as <em class="dfn">untranslated</em> file systems by
calling the function <code class="code">w32-add-untranslated-filesystem</code>.  It takes
one argument: the file system name, including a drive letter and
optionally a directory.  For example,
</p>
<div class="example">
<pre class="example-preformatted">(w32-add-untranslated-filesystem &quot;Z:&quot;)
</pre></div>

<p>designates drive Z as an untranslated file system, and
</p>
<div class="example">
<pre class="example-preformatted">(w32-add-untranslated-filesystem &quot;Z:\\foo&quot;)
</pre></div>

<p>designates directory <samp class="file">\foo</samp> on drive Z as an untranslated file
system.
</p>
<p>Most often you would use <code class="code">w32-add-untranslated-filesystem</code> in your
<samp class="file">.emacs</samp> or <samp class="file">init.el</samp> init file, or in <samp class="file">site-start.el</samp>
so that all the users at your site get the benefit of it.
</p>
<a class="index-entry-id" id="index-w32_002dremove_002duntranslated_002dfilesystem"></a>
<p>To countermand the effect of <code class="code">w32-add-untranslated-filesystem</code>,
use the function <code class="code">w32-remove-untranslated-filesystem</code>.  This
function takes one argument, which should be a string just like the
one that was used previously with <code class="code">w32-add-untranslated-filesystem</code>.
</p>
<p>Designating a file system as untranslated does not affect character
set conversion, only end-of-line conversion.  Essentially, it directs
Emacs to default to creating new files with the Unix-style convention
of using newline at the end of a line.  See <a class="xref" href="International.xhtml#Coding-Systems">Coding Systems</a>.
</p>
</div>
<div class="section-level-extent" id="Windows-Files">
<h3 class="section" id="File-Names-on-MS_002dWindows">H.3 File Names on MS-Windows</h3>
<a class="index-entry-id" id="index-file-names-on-MS_002dWindows"></a>

<p>MS-Windows and MS-DOS normally use a backslash, &#8216;<samp class="samp">\</samp>&#8217;, to
separate name units within a file name, instead of the slash used on
other systems.  Emacs on MS-DOS/MS-Windows permits use of either slash or
backslash, and also knows about drive letters in file names.
</p>
<a class="index-entry-id" id="index-file_002dname-completion_002c-on-MS_002dWindows"></a>
<p>On MS-DOS/MS-Windows, file names are case-insensitive, so Emacs by
default ignores letter-case in file names during completion.  To this
end, the default value of <code class="code">read-file-name-completion-ignore-case</code>
is non-<code class="code">nil</code> on MS-DOS/MS-Windows.  See <a class="xref" href="Minibuffer.xhtml#Completion-Options">Completion Options</a>.
</p>
<a class="index-entry-id" id="index-w32_002dget_002dtrue_002dfile_002dattributes"></a>
<p>The variable <code class="code">w32-get-true-file-attributes</code> controls whether
Emacs should issue additional system calls to determine more
accurately file attributes in primitives like <code class="code">file-attributes</code>
and <code class="code">directory-files-and-attributes</code>.  These additional calls are
needed to report correct file ownership, link counts and file types
for special files such as pipes.  Without these system calls, file
ownership will be attributed to the current user, link counts will be
always reported as 1, and special files will be reported as regular
files.
</p>
<p>If the value of this variable is <code class="code">local</code> (the default), Emacs
will issue these additional system calls only for files on local fixed
drives.  Any other non-<code class="code">nil</code> value means do this even for
removable and remote volumes, where this could potentially slow down
Dired and other related features.  The value of <code class="code">nil</code> means never
issue those system calls.  Non-<code class="code">nil</code> values are more useful on
NTFS volumes, which support hard links and file security, than on FAT,
FAT32, and exFAT volumes.
</p>
<a class="index-entry-id" id="index-file-names_002c-invalid-characters-on-MS_002dWindows"></a>
<p>Unlike Unix, MS-Windows file systems restrict the set of characters
that can be used in a file name.  The following characters are not
allowed:
</p>
<ul class="itemize mark-bullet">
<li>Shell redirection symbols &#8216;<samp class="samp">&lt;</samp>&#8217;, &#8216;<samp class="samp">&gt;</samp>&#8217;, and &#8216;<samp class="samp">|</samp>&#8217;.

</li><li>Colon &#8216;<samp class="samp">:</samp>&#8217; (except after the drive letter).

</li><li>Forward slash &#8216;<samp class="samp">/</samp>&#8217; and backslash &#8216;<samp class="samp">\</samp>&#8217; (except as directory
separators).

</li><li>Wildcard characters &#8216;<samp class="samp">*</samp>&#8217; and &#8216;<samp class="samp">?</samp>&#8217;.

</li><li>Control characters whose codepoints are 1 through 31 decimal.  In
particular, newlines in file names are not allowed.

</li><li>The null character, whose codepoint is zero (this limitation exists on
Unix filesystems as well).
</li></ul>

<p>In addition, referencing any file whose name matches a DOS character
device, such as <samp class="file">NUL</samp> or <samp class="file">LPT1</samp> or <samp class="file">PRN</samp> or <samp class="file">CON</samp>,
with or without any file-name extension, will always resolve to those
character devices, in any directory.  Therefore, only use such file
names when you want to use the corresponding character device.
</p>
</div>
<div class="section-level-extent" id="ls-in-Lisp">
<h3 class="section" id="Emulation-of-ls-on-MS_002dWindows">H.4 Emulation of <code class="code">ls</code> on MS-Windows</h3>
<a class="index-entry-id" id="index-Dired_002c-and-MS_002dWindows_002fMS_002dDOS"></a>
<a class="index-entry-id" id="index-ls-emulation"></a>

<p>Dired normally uses the external program <code class="code">ls</code>
to produce the directory listing displayed in Dired
buffers (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>).  However, MS-Windows and MS-DOS systems don&#8217;t
come with such a program, although several ports of <small class="sc">GNU</small> <code class="code">ls</code>
are available.  Therefore, Emacs on those systems <em class="emph">emulates</em>
<code class="code">ls</code> in Lisp, by using the <samp class="file">ls-lisp.el</samp> package.  While
<samp class="file">ls-lisp.el</samp> provides a reasonably full emulation of <code class="code">ls</code>,
there are some options and features peculiar to that emulation;
they are described in this section.
</p>
<p>The <code class="code">ls</code> emulation supports many of the <code class="code">ls</code> switches, but
it doesn&#8217;t support all of them.  Here&#8217;s the list of the switches it
does support: <samp class="option">-A</samp>, <samp class="option">-a</samp>, <samp class="option">-B</samp>, <samp class="option">-C</samp>,
<samp class="option">-c</samp>, <samp class="option">-G</samp>, <samp class="option">-g</samp>, <samp class="option">-h</samp>, <samp class="option">-i</samp>, <samp class="option">-n</samp>,
<samp class="option">-R</samp>, <samp class="option">-r</samp>, <samp class="option">-S</samp>, <samp class="option">-s</samp>, <samp class="option">-t</samp>, <samp class="option">-U</samp>,
<samp class="option">-u</samp>, <samp class="option">-v</samp>, and <samp class="option">-X</samp>.  The <samp class="option">-F</samp> switch is
partially supported (it appends the character that classifies the
file, but does not prevent symlink following).
</p>
<a class="index-entry-id" id="index-ls_002dlisp_002duse_002dinsert_002ddirectory_002dprogram"></a>
<p>On MS-Windows and MS-DOS, <samp class="file">ls-lisp.el</samp> is preloaded when Emacs
is built, so the Lisp emulation of <code class="code">ls</code> is always used on those
platforms.  If you have a ported <code class="code">ls</code>, setting
<code class="code">ls-lisp-use-insert-directory-program</code> to a non-<code class="code">nil</code> value
will revert to using an external program named by the variable
<code class="code">insert-directory-program</code>.
</p>
<a class="index-entry-id" id="index-Dired-sorting-order_002c-on-MS_002dWindows_002fMS_002dDOS"></a>
<p>The order in which <samp class="file">ls-lisp.el</samp> sorts files depends on several
customizable options described below.
</p>
<a class="index-entry-id" id="index-ls_002dlisp_002duse_002dstring_002dcollate"></a>
<p>The default sorting order follows locale-specific rules derived from
your system locale.  You can make the order locale-independent by
customizing <code class="code">ls-lisp-use-string-collate</code> to a <code class="code">nil</code> value.
</p>
<a class="index-entry-id" id="index-Unicode-Collation-Algorithm-_0028UCA_0029_002c-and-ls_002dlisp_002eel"></a>
<a class="index-entry-id" id="index-ls_002dlisp_002dUCA_002dlike_002dcollation"></a>
<p>On GNU and Unix systems, when the locale&#8217;s encoding is UTF-8, the
collation order follows the Unicode Collation Algorithm
(<abbr class="acronym">UCA</abbr>).  To have a similar effect on MS-Windows, the variable
<code class="code">ls-lisp-UCA-like-collation</code> should have a non-<code class="code">nil</code> value
(this is the default).  The resulting sorting order ignores
punctuation, symbol characters, and whitespace characters, so
<samp class="file">.foobar</samp>, <samp class="file">foobar</samp> and <samp class="file">foo&#160;bar</samp><!-- /@w --> will appear
together rather than far apart.
</p>
<a class="index-entry-id" id="index-ls_002dlisp_002dignore_002dcase"></a>
<p>By default, <samp class="file">ls-lisp.el</samp> uses a case-sensitive sort order for
the directory listing it produces; this is so the listing looks the
same as on other platforms.  If you wish that the files be sorted in
case-insensitive order, set the variable <code class="code">ls-lisp-ignore-case</code> to
a non-<code class="code">nil</code> value.
</p>
<a class="index-entry-id" id="index-ls_002dlisp_002ddirs_002dfirst"></a>
<p>By default, files and subdirectories are sorted together, to emulate
the behavior of <code class="code">ls</code>.  However, native MS-Windows/MS-DOS file
managers list the directories before the files; if you want that
behavior, customize the option <code class="code">ls-lisp-dirs-first</code> to a
non-<code class="code">nil</code> value.
</p>
<a class="index-entry-id" id="index-ls_002dlisp_002dverbosity"></a>
<p>The variable <code class="code">ls-lisp-verbosity</code> controls the file attributes
that <samp class="file">ls-lisp.el</samp> displays.  The value should be either
<code class="code">nil</code> or a list that contains one or more of the symbols
<code class="code">links</code>, <code class="code">uid</code>, and <code class="code">gid</code>.  <code class="code">links</code> means display
the count of different file names that are associated with (a.k.a.
<em class="dfn">links to</em>) the file&#8217;s data; this is only useful on NTFS volumes.
<code class="code">uid</code> means display the numerical identifier of the user who owns
the file.  <code class="code">gid</code> means display the numerical identifier of the
file owner&#8217;s group.  The default value is <code class="code">(links uid gid)</code> i.e.,
all the 3 optional attributes are displayed.  The value <code class="code">nil</code>
means not to display any of these attributes.
</p>
<a class="index-entry-id" id="index-ls_002dlisp_002demulation"></a>
<p>The variable <code class="code">ls-lisp-emulation</code> controls the flavor of the
<code class="code">ls</code> emulation by setting the defaults for the 3 options
described above: <code class="code">ls-lisp-ignore-case</code>,
<code class="code">ls-lisp-dirs-first</code>, and <code class="code">ls-lisp-verbosity</code>.  The value of
this option can be one of the following symbols:
</p>
<dl class="table">
<dt><code class="code">GNU</code></dt>
<dt><code class="code">nil</code></dt>
<dd><p>Emulate <small class="sc">GNU</small> systems; this is the default.  This sets
<code class="code">ls-lisp-ignore-case</code> and <code class="code">ls-lisp-dirs-first</code> to
<code class="code">nil</code>, and <code class="code">ls-lisp-verbosity</code> to <code class="code">(links uid gid)</code>.
</p></dd>
<dt><code class="code">UNIX</code></dt>
<dd><p>Emulate Unix systems.  Like <code class="code">GNU</code>, but sets
<code class="code">ls-lisp-verbosity</code> to <code class="code">(links uid)</code>.
</p></dd>
<dt><code class="code">MacOS</code></dt>
<dd><p>Emulate macOS.  Sets <code class="code">ls-lisp-ignore-case</code> to <code class="code">t</code>, and
<code class="code">ls-lisp-dirs-first</code> and <code class="code">ls-lisp-verbosity</code> to <code class="code">nil</code>.
</p></dd>
<dt><code class="code">MS-Windows</code></dt>
<dd><p>Emulate MS-Windows.  Sets <code class="code">ls-lisp-ignore-case</code> and
<code class="code">ls-lisp-dirs-first</code> to <code class="code">t</code>, and <code class="code">ls-lisp-verbosity</code> to
<code class="code">nil</code> on Windows 9X and to <code class="code">t</code> on modern versions of
Windows.  Note that the default emulation is <em class="emph">not</em>
<code class="code">MS-Windows</code>, even on Windows, since many users of Emacs on those
platforms prefer the <small class="sc">GNU</small> defaults.
</p></dd>
</dl>

<p>Any other value of <code class="code">ls-lisp-emulation</code> means the same as <code class="code">GNU</code>.
Customizing this option calls the function <code class="code">ls-lisp-set-options</code> to
update the 3 dependent options as needed.  If you change the value of
this variable without using customize after <samp class="file">ls-lisp.el</samp> is loaded
(note that it is preloaded on MS-Windows and MS-DOS), you can call that
function manually for the same result.
</p>
<a class="index-entry-id" id="index-ls_002dlisp_002dsupport_002dshell_002dwildcards"></a>
<p>The variable <code class="code">ls-lisp-support-shell-wildcards</code> controls how
file-name patterns are supported: if it is non-<code class="code">nil</code> (the
default), they are treated as shell-style wildcards; otherwise they
are treated as Emacs regular expressions.
</p>
<a class="index-entry-id" id="index-ls_002dlisp_002dformat_002dtime_002dlist"></a>
<p>The variable <code class="code">ls-lisp-format-time-list</code> defines how to format
the date and time of files.  <em class="emph">The value of this variable is
ignored</em>, unless Emacs cannot determine the current locale.  (However,
if the value of <code class="code">ls-lisp-use-localized-time-format</code> is
non-<code class="code">nil</code>, Emacs obeys <code class="code">ls-lisp-format-time-list</code> even if
the current locale is available; see below.)
</p>
<p>The value of <code class="code">ls-lisp-format-time-list</code> is a list of 2 strings.
The first string is used if the file was modified within the current
year, while the second string is used for older files.  In each of
these two strings you can use &#8216;<samp class="samp">%</samp>&#8217;-sequences to substitute parts
of the time.  For example:
</p><div class="example lisp">
<pre class="lisp-preformatted">(&quot;%b %e %H:%M&quot; &quot;%b %e  %Y&quot;)
</pre></div>

<p>Note that the strings substituted for these &#8216;<samp class="samp">%</samp>&#8217;-sequences depend
on the current locale.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html#Time-Parsing">Time Parsing</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>, for more about format time specs.
</p>
<a class="index-entry-id" id="index-ls_002dlisp_002duse_002dlocalized_002dtime_002dformat"></a>
<p>Normally, Emacs formats the file time stamps in either traditional
or ISO-style time format.  However, if the value of the variable
<code class="code">ls-lisp-use-localized-time-format</code> is non-<code class="code">nil</code>, Emacs
formats file time stamps according to what
<code class="code">ls-lisp-format-time-list</code> specifies.  The &#8216;<samp class="samp">%</samp>&#8217;-sequences in
<code class="code">ls-lisp-format-time-list</code> produce locale-dependent month and day
names, which might cause misalignment of columns in Dired display.
The default value of <code class="code">ls-lisp-use-localized-time-format</code> is
<code class="code">nil</code>.
</p>
</div>
<div class="section-level-extent" id="Windows-HOME">
<h3 class="section" id="HOME-and-Startup-Directories-on-MS_002dWindows">H.5 HOME and Startup Directories on MS-Windows</h3>
<a class="index-entry-id" id="index-HOME-directory-on-MS_002dWindows"></a>

<p>The Windows equivalent of <code class="code">HOME</code> is the <em class="dfn">user-specific
application data directory</em>.  The actual location depends on the
Windows version; typical values are <samp class="file">C:\Documents and
Settings\<var class="var">username</var>\Application Data</samp> on Windows 2000 up to XP,
<samp class="file">C:\Users\<var class="var">username</var>\AppData\Roaming</samp> on Windows Vista and
later, and either <samp class="file">C:\WINDOWS\Application Data</samp> or
<samp class="file">C:\WINDOWS\Profiles\<var class="var">username</var>\Application Data</samp> on Windows
9X/ME.  If this directory does not exist or cannot be accessed, Emacs
falls back to <samp class="file">C:\</samp> as the default value of <code class="code">HOME</code>.
</p>
<p>You can override this default value of <code class="code">HOME</code> by explicitly
setting the environment variable <code class="env">HOME</code> to point to any directory
on your system.  <code class="env">HOME</code> can be set either from the command shell
prompt or from &#8216;<samp class="samp">Properties</samp>&#8217; dialog of &#8216;<samp class="samp">My Computer</samp>&#8217;.
<code class="code">HOME</code> can also be set in the system registry,
see <a class="pxref" href="Emacs-Invocation.xhtml#MS_002dWindows-Registry">The MS-Windows System Registry</a>.
</p>
<p>For compatibility with older versions of Emacs<a class="footnote" id="DOCF27" href="#FOOT27"><sup>27</sup></a>, if there is a file named <samp class="file">.emacs</samp> in <samp class="file">C:\</samp>, the root
directory of drive <samp class="file">C:</samp>, and <code class="env">HOME</code> is set neither in the
environment nor in the Registry, Emacs will treat <samp class="file">C:\</samp> as the
default <code class="code">HOME</code> location, and will not look in the application
data directory, even if it exists.  Note that only <samp class="file">.emacs</samp> is
looked for in <samp class="file">C:\</samp>; the older name <samp class="file">_emacs</samp> (see below) is
not.  This use of <samp class="file">C:\.emacs</samp> to define <code class="code">HOME</code> is
deprecated; Emacs will display a warning about its use during
startup.
</p>
<p>Whatever the final place is, Emacs sets the internal value of the
<code class="env">HOME</code> environment variable to point to it, and it will use that
location for other files and directories it normally looks for or
creates in your home directory.
</p>
<p>You can always find out what Emacs thinks is your home directory&#8217;s
location by typing <kbd class="kbd">C-x d ~/ <kbd class="key">RET</kbd></kbd>.  This should present the
list of files in the home directory, and show its full name on the
first line.  Likewise, to visit your init file, type <kbd class="kbd">C-x C-f
~/.emacs <kbd class="key">RET</kbd></kbd> (assuming the file&#8217;s name is <samp class="file">.emacs</samp>).
</p>
<a class="index-entry-id" id="index-init-file-_002eemacs-on-MS_002dWindows"></a>
<p>Your init file can have any name mentioned in <a class="ref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>.
</p>
<a class="index-entry-id" id="index-_005femacs-init-file_002c-MS_002dWindows"></a>
<p>Because MS-DOS does not allow file names with leading dots, and
older Windows systems made it hard to create files with such names,
the Windows port of Emacs supports an init file name <samp class="file">_emacs</samp>, if
such a file exists in the home directory and <samp class="file">.emacs</samp> does not.
This name is considered obsolete, so Emacs will display a warning if
it is used.
</p>
</div>
<div class="section-level-extent" id="Windows-Keyboard">
<h3 class="section" id="Keyboard-Usage-on-MS_002dWindows">H.6 Keyboard Usage on MS-Windows</h3>
<a class="index-entry-id" id="index-keyboard_002c-MS_002dWindows"></a>

<p>This section describes the Windows-specific features related to
keyboard input in Emacs.
</p>
<a class="index-entry-id" id="index-MS_002dWindows-keyboard-shortcuts"></a>
<p>Many key combinations (known as &#8220;keyboard shortcuts&#8221;) that have
conventional uses in MS-Windows programs conflict with traditional
Emacs key bindings.  (These Emacs key bindings were established years
before Microsoft was founded.)  Examples of conflicts include
<kbd class="kbd">C-c</kbd>, <kbd class="kbd">C-x</kbd>, <kbd class="kbd">C-z</kbd>, and <kbd class="kbd">C-a</kbd>.
You can redefine some of them with meanings more like the MS-Windows
meanings by enabling CUA Mode (see <a class="pxref" href="Killing.xhtml#CUA-Bindings">CUA Bindings</a>).  Another
optional feature which will make Emacs behave like other Windows
applications is Delete Selection mode (see <a class="pxref" href="Mark.xhtml#Using-Region">Operating on the Region</a>).
</p>
<a class="index-entry-id" id="index-w32_002dalt_002dis_002dmeta"></a>
<a class="index-entry-id" id="index-Alt-key-_0028MS_002dWindows_0029"></a>
<p>By default, the key labeled <kbd class="key">Alt</kbd> is mapped as the <kbd class="key">Meta</kbd>
key.  If you wish it to produce the <code class="code">Alt</code> modifier instead, set
the variable <code class="code">w32-alt-is-meta</code> to a <code class="code">nil</code> value.
</p>
<a class="index-entry-id" id="index-w32_002dregister_002dhot_002dkey"></a>
<a class="index-entry-id" id="index-w32_002dunregister_002dhot_002dkey"></a>
<p>MS-Windows reserves certain key combinations, such as
<kbd class="kbd"><kbd class="key">Alt</kbd>-<kbd class="key">TAB</kbd></kbd> and a number of Windows key combinations,
for its own use.  These key combinations are intercepted by the system
before Emacs can see them.  Also, on Windows 10, all Windows key
combinations are reserved by the system in such a way that they are
never propagated to applications, even if the system does not
currently define a hotkey on the specific combination.  You can use
the <code class="code">w32-register-hot-key</code> function to allow a key sequence to be
seen by Emacs instead of being grabbed by Windows.  When registered as
a hot key, the key combination is pulled out of the system&#8217;s input
queue before it is handled by Windows, effectively overriding the
special meaning of that key sequence for Windows.  The override is
only effective when Emacs is active; with other applications on the
foreground the keys behave normally.
</p>
<p>The argument to <code class="code">w32-register-hot-key</code> must be a single key with a
single modifier, in vector form that would be acceptable to
<code class="code">define-key</code>.  The control and shift modifiers have no effect on the
argument.  The meta modifier is interpreted as the <kbd class="key">Alt</kbd> key if
<code class="code">w32-alt-is-meta</code> is <code class="code">t</code> (the default), and the super and hyper
modifiers are interpreted according to the bindings of
<code class="code">w32-lwindow-modifier</code> and <code class="code">w32-rwindow-modifier</code>.  Additionally, a
modifier with the trailing dash but with no key indicates that all
Windows defined hotkeys for that modifier are to be overridden in the
favor of Emacs.
</p>
<a class="index-entry-id" id="index-M_002dTAB_002c-_0028MS_002dWindows_0029"></a>
<a class="index-entry-id" id="index-M_002dTAB-vs-Alt_002dTAB-_0028MS_002dWindows_0029"></a>
<a class="index-entry-id" id="index-Alt_002dTAB-vs-M_002dTAB-_0028MS_002dWindows_0029"></a>
<p>For example, <code class="code">(w32-register-hot-key [M-tab])</code> lets you use
<kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> normally in Emacs; for instance, to complete the
word or symbol at point at top level, or to complete the current
search string against previously sought strings during incremental
search.  <code class="code">(w32-register-hot-key [s-])</code> with
<code class="code">w32-lwindow-modifier</code> bound to <code class="code">super</code> disables all the
Windows&#8217; own Windows key based shortcuts.<a class="footnote" id="DOCF28" href="#FOOT28"><sup>28</sup></a>
</p>
<p>Note that <code class="code">w32-register-hot-key</code> checks the
<code class="code">w32-[lr]window-modifier</code> values at the time of the function
call.  Thus, you can set <code class="code">w32-lwindow-modifier</code> as <code class="code">super</code>,
then call <code class="code">(w32-register-hot-key [s-r])</code>, and finally set
<code class="code">w32-rwindow-modifier</code> as <code class="code">super</code> as well.  The result is
that the left Windows key together with <kbd class="kbd">R</kbd> invokes whichever
function you have bound for the combination in Emacs, and the right
Windows key and <kbd class="kbd">R</kbd> opens the Windows <code class="code">Run</code> dialog.
</p>
<p>The hotkey registrations always also include all the shift and
control modifier combinations for the given hotkey; that is,
registering <kbd class="kbd">s-a</kbd> as a hotkey gives you <kbd class="kbd">S-s-a</kbd>,
<kbd class="kbd">C-s-a</kbd> and <kbd class="kbd">C-S-s-a</kbd> as well.
</p>
<p>On Windows 98 and ME, the hotkey registration is more restricted.
The desired hotkey must always be fully specified, and
<code class="code">w32-phantom-key-code</code> can be customized to achieve desired
results.
</p>
<p>The function <code class="code">w32-unregister-hot-key</code> reverses the effect of
<code class="code">w32-register-hot-key</code> for its argument key sequence.
</p>
<a class="index-entry-id" id="index-w32_002dcapslock_002dis_002dshiftlock"></a>
<p>By default, the <kbd class="key">CapsLock</kbd> key only affects normal character
keys (it converts lower-case characters to their upper-case
variants).  However, if you set the variable
<code class="code">w32-capslock-is-shiftlock</code> to a non-<code class="code">nil</code> value, the
<kbd class="key">CapsLock</kbd> key will affect non-character keys as well, as if you
pressed the <kbd class="key">SHIFT</kbd> key while typing the non-character key.
</p>
<a class="index-entry-id" id="index-w32_002denable_002dcaps_002dlock"></a>
<p>If the variable <code class="code">w32-enable-caps-lock</code> is set to a <code class="code">nil</code>
value, the <kbd class="key">CapsLock</kbd> key produces the symbol <code class="code">capslock</code>
instead of the shifted version of typed keys.  The default value is
<code class="code">t</code>.
</p>
<a class="index-entry-id" id="index-w32_002denable_002dnum_002dlock"></a>
<a class="index-entry-id" id="index-keypad-keys-_0028MS_002dWindows_0029"></a>
<p>Similarly, if <code class="code">w32-enable-num-lock</code> is <code class="code">nil</code>, the
<kbd class="key">NumLock</kbd> key will produce the symbol <code class="code">kp-numlock</code>.  The
default is <code class="code">t</code>, which causes <kbd class="key">NumLock</kbd> to work as expected:
toggle the meaning of the keys on the numeric keypad.
</p>
<a class="index-entry-id" id="index-w32_002dapps_002dmodifier"></a>
<p>The variable <code class="code">w32-apps-modifier</code> controls the effect of the
<kbd class="key">Apps</kbd> key (usually located between the right <kbd class="key">Alt</kbd> and the
right <kbd class="key">Ctrl</kbd> keys).  Its value can be one of the symbols
<code class="code">hyper</code>, <code class="code">super</code>, <code class="code">meta</code>, <code class="code">alt</code>, <code class="code">control</code>,
or <code class="code">shift</code> for the respective modifier, or <code class="code">nil</code> to appear
as the key <code class="code">apps</code>.  The default is <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-w32_002dlwindow_002dmodifier"></a>
<a class="index-entry-id" id="index-w32_002drwindow_002dmodifier"></a>
<a class="index-entry-id" id="index-w32_002dscroll_002dlock_002dmodifier"></a>
<p>The variable <code class="code">w32-lwindow-modifier</code> determines the effect of
the left Windows key (usually labeled with <kbd class="key">start</kbd> and the Windows
logo).  If its value is <code class="code">nil</code> (the default), the key will produce
the symbol <code class="code">lwindow</code>.  Setting it to one of the symbols
<code class="code">hyper</code>, <code class="code">super</code>, <code class="code">meta</code>, <code class="code">alt</code>, <code class="code">control</code>,
or <code class="code">shift</code> will produce the respective modifier.  A similar
variable <code class="code">w32-rwindow-modifier</code> controls the effect of the right
Windows key, and <code class="code">w32-scroll-lock-modifier</code> does the same for the
<kbd class="key">ScrLock</kbd> key.  If these variables are set to <code class="code">nil</code>, the
right Windows key produces the symbol <code class="code">rwindow</code> and <kbd class="key">ScrLock</kbd>
produces the symbol <code class="code">scroll</code>.  If you want <kbd class="key">ScrLock</kbd> to
produce the same effect as in other applications, i.e. toggle the
Scroll Lock <abbr class="acronym">LED</abbr> indication on the keyboard, set
<code class="code">w32-scroll-lock-modifier</code> to <code class="code">t</code> or any non-<code class="code">nil</code>
value other than the above modifier symbols.
</p>
<a class="index-entry-id" id="index-w32_002dpass_002dalt_002dto_002dsystem"></a>
<a class="index-entry-id" id="index-Windows-system-menu"></a>
<a class="index-entry-id" id="index-Alt-key-invokes-menu-_0028Windows_0029"></a>
<p>Emacs compiled as a native Windows application normally turns off
the Windows feature that tapping the <kbd class="key">Alt</kbd> key invokes the Windows
menu.  The reason is that the <kbd class="key">Alt</kbd> serves as <kbd class="key">Meta</kbd> in Emacs.
When using Emacs, users often press the <kbd class="key">Meta</kbd> key temporarily and
then change their minds; if this has the effect of bringing up the
Windows menu, it alters the meaning of subsequent commands.  Many
users find this frustrating.
</p>
<p>You can re-enable Windows&#8217;s default handling of tapping the <kbd class="key">Alt</kbd>
key by setting <code class="code">w32-pass-alt-to-system</code> to a non-<code class="code">nil</code>
value.
</p>
<a class="index-entry-id" id="index-w32_002dpass_002dlwindow_002dto_002dsystem"></a>
<a class="index-entry-id" id="index-w32_002dpass_002drwindow_002dto_002dsystem"></a>
<p>The variables <code class="code">w32-pass-lwindow-to-system</code> and
<code class="code">w32-pass-rwindow-to-system</code> determine whether the respective
keys are passed to Windows or swallowed by Emacs.  If the value is
<code class="code">nil</code>, the respective key is silently swallowed by Emacs,
otherwise it is passed to Windows.  The default is <code class="code">t</code> for both
of these variables.  Passing each of these keys to Windows produces
its normal effect: for example, <kbd class="kbd"><kbd class="key">Lwindow</kbd></kbd> opens the
<code class="code">Start</code> menu, etc.
</p>
<a class="index-entry-id" id="index-w32_002drecognize_002daltgr"></a>
<a class="index-entry-id" id="index-AltGr-_0028MS_002dWindows_0029"></a>
<a class="index-entry-id" id="index-AltGr-key-_0028MS_002dWindows_0029"></a>
<p>The variable <code class="code">w32-recognize-altgr</code> controls whether the
<kbd class="key">AltGr</kbd> key (if it exists on your keyboard), or its equivalent,
the combination of the right <kbd class="key">Alt</kbd> and left <kbd class="key">Ctrl</kbd> keys
pressed together, is recognized as the <kbd class="key">AltGr</kbd> key.  The default
is <code class="code">t</code>, which means these keys produce <code class="code">AltGr</code>; setting it
to <code class="code">nil</code> causes <kbd class="key">AltGr</kbd> or the equivalent key combination to
be interpreted as the combination of <kbd class="key">Ctrl</kbd> and <kbd class="key">Meta</kbd>
modifiers.
</p>
<a class="index-entry-id" id="index-IME_002c-MS_002dWindows"></a>
<a class="index-entry-id" id="index-w32_002dset_002dime_002dopen_002dstatus"></a>
<p>Some versions of MS-Windows, typically East Asian localized Windows,
enable the Input Method Manager (<abbr class="acronym">IMM</abbr>) that allows
applications to communicate with the Input Method Editor
(<abbr class="acronym">IME</abbr>), the native Windows input method service.  Emacs uses
the <abbr class="acronym">IME</abbr> when available to allow users to input East Asian
non-<abbr class="acronym">ASCII</abbr> characters, similarly to Emacs&#8217;s built-in input
methods (see <a class="pxref" href="International.xhtml#Input-Methods">Input Methods</a>).  However, in some situations the
<abbr class="acronym">IME</abbr> can get in the way if it interprets simple
<abbr class="acronym">ASCII</abbr> keys you input as part of a key sequence that
designates a non-<abbr class="acronym">ASCII</abbr> character.  The <abbr class="acronym">IME</abbr> can be
temporarily turned off and then on again by using the
<code class="code">w32-set-ime-open-status</code> function.
</p>
</div>
<div class="section-level-extent" id="Windows-Mouse">
<h3 class="section" id="Mouse-Usage-on-MS_002dWindows">H.7 Mouse Usage on MS-Windows</h3>
<a class="index-entry-id" id="index-mouse_002c-and-MS_002dWindows"></a>

<p>This section describes the Windows-specific variables related to
the mouse.
</p>
<a class="index-entry-id" id="index-w32_002dmouse_002dbutton_002dtolerance"></a>
<a class="index-entry-id" id="index-simulation-of-middle-mouse-button"></a>
<p>The variable <code class="code">w32-mouse-button-tolerance</code> specifies the
time interval, in milliseconds, for faking middle mouse button press
on 2-button mice.  If both mouse buttons are depressed within this
time interval, Emacs generates a middle mouse button click event
instead of a double click on one of the buttons.
</p>
<a class="index-entry-id" id="index-w32_002dpass_002dextra_002dmouse_002dbuttons_002dto_002dsystem"></a>
<p>If the variable <code class="code">w32-pass-extra-mouse-buttons-to-system</code> is
non-<code class="code">nil</code>, Emacs passes the fourth and fifth mouse buttons to
Windows.
</p>
<a class="index-entry-id" id="index-w32_002dswap_002dmouse_002dbuttons"></a>
<p>The variable <code class="code">w32-swap-mouse-buttons</code> controls which of the 3
mouse buttons generates the <kbd class="kbd">mouse-2</kbd> events.  When it is
<code class="code">nil</code> (the default), the middle button generates <kbd class="kbd">mouse-2</kbd>
and the right button generates <kbd class="kbd">mouse-3</kbd> events.  If this variable
is non-<code class="code">nil</code>, the roles of these two buttons are reversed.
</p>
</div>
<div class="section-level-extent" id="Windows-Processes">
<h3 class="section" id="Subprocesses-on-Windows-9X_002fME-and-Windows-NT_002f2K_002fXP_002fVista_002f7_002f8_002f10">H.8 Subprocesses on Windows 9X/ME and Windows NT/2K/XP/Vista/7/8/10</h3>
<a class="index-entry-id" id="index-subprocesses-on-MS_002dWindows"></a>

<a class="index-entry-id" id="index-DOS-applications_002c-running-from-Emacs"></a>
<p>Emacs compiled as a native Windows application (as opposed to the
DOS version) includes full support for asynchronous subprocesses.  In
the Windows version, synchronous and asynchronous subprocesses work
fine on all versions of MS-Windows, as long as you run only 32-bit or
64-bit Windows applications.  However, when you run a DOS application
in a subprocess, you may encounter problems or be unable to run the
application at all; and if you run two DOS applications at the same
time in two subprocesses, you may have to reboot your system.
</p>
<p>Since the standard command interpreter (and most command line utilities)
on Windows 9X are DOS applications, these problems are significant when
using that system.  But there&#8217;s nothing we can do about them; only
Microsoft can fix them.
</p>
<p>If you run just one DOS application subprocess, the subprocess should
work as expected as long as it is &#8220;well-behaved&#8221; and does not perform
direct screen access or other unusual actions.  If you have a CPU
monitor application, your machine will appear to be 100% busy even when
the DOS application is idle, but this is only an artifact of the way CPU
monitors measure processor load.
</p>
<p>You must terminate the DOS application before you start any other DOS
application in a different subprocess.  Emacs is unable to interrupt or
terminate a DOS subprocess.  The only way you can terminate such a
subprocess is by giving it a command that tells its program to exit.
</p>
<p>If you attempt to run two DOS applications at the same time in separate
subprocesses, the second one that is started will be suspended until the
first one finishes, even if either or both of them are asynchronous.
</p>
<a class="index-entry-id" id="index-kill-DOS-application"></a>
<p>If you can go to the first subprocess, and tell it to exit, the second
subprocess should continue normally.  However, if the second
subprocess is synchronous, Emacs itself will be hung until the first
subprocess finishes.  If it will not finish without user input, then
you have no choice but to reboot if you are running on Windows 9X.
If you are running on Windows NT and later, you can use a process
viewer application to kill the appropriate instance of NTVDM instead
(this will terminate both DOS subprocesses).
</p>
<p>If you have to reboot Windows 9X in this situation, do not use the
<code class="code">Shutdown</code> command on the <code class="code">Start</code> menu; that usually hangs the
system.  Instead, type <kbd class="kbd"><kbd class="key">Ctrl</kbd>-<kbd class="key">Alt</kbd>-<kbd class="key">DEL</kbd></kbd> and then choose
<code class="code">Shutdown</code>.  That usually works, although it may take a few minutes
to do its job.
</p>
<a class="index-entry-id" id="index-w32_002dquote_002dprocess_002dargs"></a>
<p>The variable <code class="code">w32-quote-process-args</code> controls how Emacs quotes
the process arguments.  Non-<code class="code">nil</code> means quote with the <code class="code">&quot;</code>
character.  If the value is a character, Emacs uses that character to escape
any quote characters that appear; otherwise it chooses a suitable escape
character based on the type of the program.
</p>
<a class="index-entry-id" id="index-w32_002dpipe_002dbuffer_002dsize"></a>
<p>The variable <code class="code">w32-pipe-buffer-size</code> controls the size of the
buffer Emacs requests from the system when it creates pipes for
communications with subprocesses.  The default value is zero, which
lets the OS choose the size.  Any valid positive value will request a
buffer of that size in bytes.  This can be used to tailor
communications with subprocesses to programs that exhibit unusual
behavior with respect to buffering pipe I/O.
</p>
<a class="index-entry-id" id="index-w32_002dpipe_002dread_002ddelay"></a>
<p>If you need to invoke MS-DOS programs as Emacs subprocesses, you may
see low rate of reading data from such programs.  Setting the variable
<code class="code">w32-pipe-read-delay</code> to a non-zero value may improve throughput
in these cases; we suggest the value of 50 for such situations.  The
default is zero.
</p>
<a class="index-entry-id" id="index-w32_002dshell_002dexecute"></a>
<p>The function <code class="code">w32-shell-execute</code> can be useful for writing
customized commands that run MS-Windows applications registered to
handle a certain standard Windows operation for a specific type of
document or file.  This function is a wrapper around the Windows
<code class="code">ShellExecute</code> API.  See the MS-Windows API documentation for
more details.
</p>
</div>
<div class="section-level-extent" id="Windows-Printing">
<h3 class="section" id="Printing-and-MS_002dWindows">H.9 Printing and MS-Windows</h3>

<p>Printing commands, such as <code class="code">lpr-buffer</code> (see <a class="pxref" href="Printing.xhtml#Printing">Printing Hard Copies</a>) and
<code class="code">ps-print-buffer</code> (see <a class="pxref" href="Printing.xhtml#PostScript">PostScript Hardcopy</a>) work in MS-DOS and
MS-Windows by sending the output to one of the printer ports, if a
POSIX-style <code class="code">lpr</code> program is unavailable.  The same Emacs
variables control printing on all systems, but in some cases they have
different default values on MS-DOS and MS-Windows.
</p>
<p>Emacs on MS Windows attempts to determine your default printer
automatically (using the function <code class="code">default-printer-name</code>).
But in some rare cases this can fail, or you may wish to use a different
printer from within Emacs.  The rest of this section explains how to
tell Emacs which printer to use.
</p>
<a class="index-entry-id" id="index-printer_002dname_002c-_0028MS_002dDOS_002fMS_002dWindows_0029"></a>
<p>If you want to use your local printer, then set the Lisp variable
<code class="code">lpr-command</code> to <code class="code">&quot;&quot;</code> (its default value on Windows) and
<code class="code">printer-name</code> to the name of the printer port&#8212;for example,
<code class="code">&quot;PRN&quot;</code>, the usual local printer port, or <code class="code">&quot;LPT2&quot;</code>, or
<code class="code">&quot;COM1&quot;</code> for a serial printer.  You can also set
<code class="code">printer-name</code> to a file name, in which case &#8220;printed&#8221; output
is actually appended to that file.  If you set <code class="code">printer-name</code> to
<code class="code">&quot;NUL&quot;</code>, printed output is silently discarded (sent to the system
null device).
</p>
<p>You can also use a printer shared by another machine by setting
<code class="code">printer-name</code> to the UNC share name for that printer&#8212;for
example, <code class="code">&quot;//joes_pc/hp4si&quot;</code>.  (It doesn&#8217;t matter whether you use
forward slashes or backslashes here.)  To find out the names of shared
printers, run the command &#8216;<samp class="samp">net view</samp>&#8217; from the command prompt to
obtain a list of servers, and &#8216;<samp class="samp">net view <var class="var">server-name</var></samp>&#8217; to see
the names of printers (and directories) shared by that server.
Alternatively, click the &#8216;<samp class="samp">Network Neighborhood</samp>&#8217; icon on your
desktop, and look for machines that share their printers via the
network.
</p>
<a class="index-entry-id" id="index-net-use_002c-and-printing-on-MS_002dWindows"></a>
<a class="index-entry-id" id="index-networked-printers-_0028MS_002dWindows_0029"></a>
<p>If the printer doesn&#8217;t appear in the output of &#8216;<samp class="samp">net view</samp>&#8217;, or
if setting <code class="code">printer-name</code> to the UNC share name doesn&#8217;t produce a
hardcopy on that printer, you can use the &#8216;<samp class="samp">net use</samp>&#8217; command to
connect a local print port such as <code class="code">&quot;LPT2&quot;</code> to the networked
printer.  For example, typing <kbd class="kbd">net use LPT2: \\joes_pc\hp4si</kbd><a class="footnote" id="DOCF29" href="#FOOT29"><sup>29</sup></a>
causes Windows to <em class="dfn">capture</em> the <code class="code">LPT2</code> port and redirect the
printed material to the printer connected to the machine <code class="code">joes_pc</code>.
After this command, setting <code class="code">printer-name</code> to <code class="code">&quot;LPT2&quot;</code>
should produce the hardcopy on the networked printer.
</p>
<p>With some varieties of Windows network software, you can instruct
Windows to capture a specific printer port such as <code class="code">&quot;LPT2&quot;</code>, and
redirect it to a networked printer via the <code class="code">Control&#160;Panel-&gt;Printers</code><!-- /@w --> applet instead of &#8216;<samp class="samp">net use</samp>&#8217;.
</p>
<p>If you set <code class="code">printer-name</code> to a file name, it&#8217;s best to use an
absolute file name.  Emacs changes the working directory according to
the default directory of the current buffer, so if the file name in
<code class="code">printer-name</code> is relative, you will end up with several such
files, each one in the directory of the buffer from which the printing
was done.
</p>
<p>If the value of <code class="code">printer-name</code> is correct, but printing does
not produce the hardcopy on your printer, it is possible that your
printer does not support printing plain text (some cheap printers omit
this functionality).  In that case, try the PostScript print commands,
described below.
</p>
<a class="index-entry-id" id="index-print_002dbuffer-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-print_002dregion-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-lpr_002dheaders_002dswitches-_0028MS_002dDOS_0029"></a>
<p>The commands <code class="code">print-buffer</code> and <code class="code">print-region</code> call the
<code class="code">pr</code> program, or use special switches to the <code class="code">lpr</code> program, to
produce headers on each printed page.  MS-DOS and MS-Windows don&#8217;t
normally have these programs, so by default, the variable
<code class="code">lpr-headers-switches</code> is set so that the requests to print page
headers are silently ignored.  Thus, <code class="code">print-buffer</code> and
<code class="code">print-region</code> produce the same output as <code class="code">lpr-buffer</code> and
<code class="code">lpr-region</code>, respectively.  If you do have a suitable <code class="code">pr</code>
program (for example, from GNU Coreutils), set
<code class="code">lpr-headers-switches</code> to <code class="code">nil</code>; Emacs will then call
<code class="code">pr</code> to produce the page headers, and print the resulting output as
specified by <code class="code">printer-name</code>.
</p>
<a class="index-entry-id" id="index-print_002dregion_002dfunction-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-lpr-usage-under-MS_002dDOS"></a>
<a class="index-entry-id" id="index-lpr_002dcommand-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-lpr_002dswitches-_0028MS_002dDOS_0029"></a>
<p>Finally, if you do have an <code class="code">lpr</code> work-alike, you can set the
variable <code class="code">lpr-command</code> to <code class="code">&quot;lpr&quot;</code>.  Then Emacs will use
<code class="code">lpr</code> for printing, as on other systems.  (If the name of the
program isn&#8217;t <code class="code">lpr</code>, set <code class="code">lpr-command</code> to the appropriate value.)
The variable <code class="code">lpr-switches</code> has its standard meaning
when <code class="code">lpr-command</code> is not <code class="code">&quot;&quot;</code>.  If the variable
<code class="code">printer-name</code> has a string value, it is used as the value for the
<code class="code">-P</code> option to <code class="code">lpr</code>, as on Unix.
</p>
<a class="index-entry-id" id="index-ps_002dprint_002dbuffer-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-ps_002dspool_002dbuffer-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-ps_002dprinter_002dname-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-ps_002dlpr_002dcommand-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-ps_002dlpr_002dswitches-_0028MS_002dDOS_0029"></a>
<p>A parallel set of variables, <code class="code">ps-lpr-command</code>,
<code class="code">ps-lpr-switches</code>, and <code class="code">ps-printer-name</code> (see <a class="pxref" href="Printing.xhtml#PostScript-Variables">Variables for PostScript Hardcopy</a>), defines how PostScript files should be printed.  These
variables are used in the same way as the corresponding variables
described above for non-PostScript printing.  Thus, the value of
<code class="code">ps-printer-name</code> is used as the name of the device (or file) to
which PostScript output is sent, just as <code class="code">printer-name</code> is used
for non-PostScript printing.  (There are two distinct sets of
variables in case you have two printers attached to two different
ports, and only one of them is a PostScript printer.)
</p>
<a class="index-entry-id" id="index-Ghostscript_002c-use-for-PostScript-printing"></a>
<p>The default value of the variable <code class="code">ps-lpr-command</code> is <code class="code">&quot;&quot;</code>,
which causes PostScript output to be sent to the printer port specified
by <code class="code">ps-printer-name</code>; but <code class="code">ps-lpr-command</code> can also be set to
the name of a program which will accept PostScript files.  Thus, if you
have a non-PostScript printer, you can set this variable to the name of
a PostScript interpreter program (such as Ghostscript).  Any switches
that need to be passed to the interpreter program are specified using
<code class="code">ps-lpr-switches</code>.  (If the value of <code class="code">ps-printer-name</code> is a
string, it will be added to the list of switches as the value for the
<code class="code">-P</code> option.  This is probably only useful if you are using
<code class="code">lpr</code>, so when using an interpreter typically you would set
<code class="code">ps-printer-name</code> to something other than a string so it is
ignored.)
</p>
<p>For example, to use Ghostscript for printing on the system&#8217;s default
printer, put this in your <samp class="file">.emacs</samp> file:
</p>
<div class="example">
<pre class="example-preformatted">(setq ps-printer-name t)
(setq ps-lpr-command &quot;D:/gs6.01/bin/gswin32c.exe&quot;)
(setq ps-lpr-switches '(&quot;-q&quot; &quot;-dNOPAUSE&quot; &quot;-dBATCH&quot;
                        &quot;-sDEVICE=mswinpr2&quot;
                        &quot;-sPAPERSIZE=a4&quot;))
</pre></div>

<p>(This assumes that Ghostscript is installed in the
<samp class="file">D:/gs6.01</samp> directory.)
</p>
</div>
<div class="section-level-extent" id="Windows-Fonts">
<h3 class="section" id="Specifying-Fonts-on-MS_002dWindows">H.10 Specifying Fonts on MS-Windows</h3>
<a class="index-entry-id" id="index-font-specification-_0028MS-Windows_0029"></a>

<p>Fonts are specified by their name, size and optional properties.
The format for specifying fonts comes from the fontconfig library used
in modern Free desktops:
</p>
<div class="example">
<pre class="example-preformatted">  [Family[-PointSize]][:Option1=Value1[:Option2=Value2[...]]]
</pre></div>

<p>The old XLFD based format is also supported for backwards compatibility.
</p>
<a class="index-entry-id" id="index-font-backend-selection-_0028MS_002dWindows_0029"></a>
<p>Emacs on MS-Windows supports a number of font backends.  Currently,
the <code class="code">gdi</code>, <code class="code">uniscribe</code>, and <code class="code">harfbuzz</code> backends are
available.  The <code class="code">gdi</code> font backend is available on all versions
of Windows, and supports all fonts that are natively supported by
Windows.  The <code class="code">uniscribe</code> font backend is available on Windows
2000 and later, and supports TrueType and OpenType fonts.  The
<code class="code">harfbuzz</code> font backend is available if Emacs was built with
HarfBuzz support, and if the HarfBuzz DLL is installed on your system;
like <code class="code">uniscribe</code>, this backend supports only TrueType and
OpenType fonts.  Some languages requiring complex layout can only be
properly supported by the Uniscribe or HarfBuzz backends.  By default,
two backends are enabled for each frame: <code class="code">gdi</code> and either
<code class="code">harfbuzz</code> or <code class="code">uniscribe</code>, depending on which one is
available (if both are available, only <code class="code">harfbuzz</code> is enabled by
default).  The <code class="code">harfbuzz</code> and <code class="code">uniscribe</code> backends take
priority over <code class="code">gdi</code> when Emacs looks for a suitable font.  To
override that and use the GDI backend even if Uniscribe is available,
invoke Emacs with the <kbd class="kbd">-xrm Emacs.fontBackend:gdi</kbd> command-line
argument, or add a <code class="code">Emacs.fontBackend</code> resource with the value
<code class="code">gdi</code> in the Registry under either the
&#8216;<samp class="samp">HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs</samp>&#8217; or the
&#8216;<samp class="samp">HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs</samp>&#8217; key (see <a class="pxref" href="X-Resources.xhtml#Resources">X Resources</a>).
Similarly, to use the Uniscribe backend even if HarfBuzz is available,
use <kbd class="kbd">-xrm Emacs.fontBackend:uniscribe</kbd> on the command line that
invokes Emacs.  You can also request all the 3 backends via the
<code class="code">font-backend</code> frame parameter, but be warned that in that case
font searches for characters for which no fonts are available on the
system will take longer.
</p>
<p>Alternatively, you could specify a font backend for a frame via the
<code class="code">font-backend</code> frame parameter, using
<code class="code">modify-frame-parameters</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Parameter-Access.html#Parameter-Access">Parameter Access</a> in <cite class="cite">The
Emacs Lisp Reference Manual</cite>).  You can also request specific font
backend(s) for all your frames via <code class="code">default-frame-alist</code> and
<code class="code">initial-frame-alist</code> (see <a class="pxref" href="Frames.xhtml#Frame-Parameters">Frame Parameters</a>).  Note that the
value of the <code class="code">font-backend</code> parameter should be a list of
symbols, as in <code class="code">(uniscribe)</code> or <code class="code">(harfbuzz&#160;uniscribe&#160;gdi)</code><!-- /@w -->.
</p>
<a class="index-entry-id" id="index-font-properties-_0028MS-Windows_0029"></a>
<p>Optional font properties supported on MS-Windows are:
</p>
<dl class="table">
<dt><a id="index-font_002dweight_002dtable-_0028MS_002dWindows_0029"></a><code class="code">weight</code></dt>
<dd><p>Specifies the weight of the font.  Special values <code class="code">light</code>,
<code class="code">medium</code>, <code class="code">demibold</code>, <code class="code">bold</code>, and <code class="code">black</code> can be specified
without <code class="code">weight=</code> (e.g., <kbd class="kbd">Courier New-12:bold</kbd>).  Otherwise,
the weight should be a numeric value between 100 and 900, or one of the
named weights in <code class="code">font-weight-table</code>.  If unspecified, a regular font
is assumed.
</p>
</dd>
<dt><a id="index-font_002dslant_002dtable-_0028MS_002dWindows_0029"></a><code class="code">slant</code></dt>
<dd><p>Specifies whether the font is italic.  Special values
<code class="code">roman</code>, <code class="code">italic</code> and <code class="code">oblique</code> can be specified
without <code class="code">slant=</code> (e.g., <kbd class="kbd">Courier New-12:italic</kbd>).
Otherwise, the slant should be a numeric value, or one of the named
slants in <code class="code">font-slant-table</code>.  On Windows, any slant above 150 is
treated as italics, and anything below as roman.
</p>
</dd>
<dt><code class="code">family</code></dt>
<dd><p>Specifies the font family, but normally this will be specified
at the start of the font name.
</p>
</dd>
<dt><code class="code">pixelsize</code></dt>
<dd><p>Specifies the font size in pixels.  This can be used instead
of the point size specified after the family name.
</p>
</dd>
<dt><code class="code">adstyle</code></dt>
<dd><p>Specifies additional style information for the font.
On MS-Windows, the values <code class="code">mono</code>, <code class="code">sans</code>, <code class="code">serif</code>,
<code class="code">script</code> and <code class="code">decorative</code> are recognized.  These are most useful
as a fallback with the font family left unspecified.
</p>
</dd>
<dt><a id="index-w32_002dcharset_002dinfo_002dalist"></a><code class="code">registry</code></dt>
<dd><p>Specifies the character set registry that the font is
expected to cover.  Most TrueType and OpenType fonts will be Unicode fonts
that cover several national character sets, but you can narrow down the
selection of fonts to those that support a particular character set by
using a specific registry from <code class="code">w32-charset-info-alist</code> here.
</p>
</dd>
<dt><code class="code">spacing</code></dt>
<dd><p>Specifies how the font is spaced.  The <code class="code">p</code> spacing specifies
a proportional font, and <code class="code">m</code> or <code class="code">c</code> specify a monospaced font.
</p>
</dd>
<dt><code class="code">foundry</code></dt>
<dd><p>Not used on Windows, but for informational purposes and to
prevent problems with code that expects it to be set, is set internally to
<code class="code">raster</code> for bitmapped fonts, <code class="code">outline</code> for scalable fonts,
or <code class="code">unknown</code> if the type cannot be determined as one of those.
</p>
</dd>
<dt><a class="index-entry-id" id="index-font-Unicode-subranges-_0028MS-Windows_0029"></a>
<a id="index-font-scripts-_0028MS-Windows_0029"></a><code class="code">script</code></dt>
<dd><p>Specifies a Unicode subrange the font should support.
</p>
<p>All the scripts known to Emacs (which generally means all the scripts
defined by the latest Unicode Standard) are recognized on MS-Windows.
However, <code class="code">GDI</code> fonts support only a subset of the known scripts:
<code class="code">greek</code>, <code class="code">hangul</code>, <code class="code">kana</code>, <code class="code">kanbun</code>,
<code class="code">bopomofo</code>, <code class="code">tibetan</code>, <code class="code">yi</code>, <code class="code">mongolian</code>,
<code class="code">hebrew</code>, <code class="code">arabic</code>, and <code class="code">thai</code>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-Cleartype"></a>
<a id="index-font-antialiasing-_0028MS-Windows_0029"></a><code class="code">antialias</code></dt>
<dd><p>Specifies the antialiasing method.  The value <code class="code">none</code> means no
antialiasing, <code class="code">standard</code> means use standard antialiasing,
<code class="code">subpixel</code> means use subpixel antialiasing (known as
<em class="dfn">Cleartype</em> on Windows), and <code class="code">natural</code> means use subpixel
antialiasing with adjusted spacing between letters.  If unspecified,
the font will use the system default antialiasing.
</p></dd>
</dl>

<a class="index-entry-id" id="index-font-lookup_002c-MS_002dWindows"></a>
<a class="index-entry-id" id="index-w32_002dfind_002dnon_002dUSB_002dfonts"></a>
<p>The method used by Emacs on MS-Windows to look for fonts suitable for
displaying a given non-<small class="sc">ASCII</small> character might fail for some rare
scripts, specifically those added by Unicode relatively recently, even
if you have fonts installed on your system that support those scripts.
That is because these scripts have no Unicode Subrange Bits (USBs)
defined for them in the information used by Emacs on MS-Windows to
look for fonts.  You can use the <code class="code">w32-find-non-USB-fonts</code>
function to overcome these problems.  It needs to be run once at the
beginning of the Emacs session, and again if you install new fonts.
You can add the following line to your init file to have this function
run every time you start Emacs:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(w32-find-non-USB-fonts)
</pre></div>

<a class="index-entry-id" id="index-w32_002dnon_002dUSB_002dfonts"></a>
<p>Alternatively, you can run this function manually via <kbd class="kbd">M-:</kbd>
(see <a class="pxref" href="Building.xhtml#Lisp-Eval">Evaluating Emacs Lisp Expressions</a>) at any time.  On a system that has many fonts
installed, running <code class="code">w32-find-non-USB-fonts</code> might take a couple
of seconds; if you consider that to be too long to be run during
startup, and if you install new fonts only rarely, run this function
once via <kbd class="kbd">M-:</kbd>, and then assign the value it returns, if
non-<code class="code">nil</code>, to the variable <code class="code">w32-non-USB-fonts</code> in your init
file.  (If the function returns <code class="code">nil</code>, you have no fonts
installed that can display characters from the scripts which need this
facility.)
</p>
<a class="index-entry-id" id="index-w32_002duse_002dw32_002dfont_002ddialog"></a>
<a class="index-entry-id" id="index-w32_002dfixed_002dfont_002dalist"></a>
<p>The variable <code class="code">w32-use-w32-font-dialog</code> controls the way fonts can
be selected via <kbd class="kbd">S-mouse-1</kbd> (<code class="code">mouse-appearance-menu</code>).  If
the value is <code class="code">t</code>, the default, Emacs uses the standard Windows
font selection dialog.  If the value is <code class="code">nil</code>, Emacs instead pops
a menu of a fixed set of fonts.  The fonts to appear in the menu are
determined by <code class="code">w32-fixed-font-alist</code>.
</p>
</div>
<div class="section-level-extent" id="Windows-Misc">
<h3 class="section" id="Miscellaneous-Windows_002dspecific-features">H.11 Miscellaneous Windows-specific features</h3>

<p>This section describes Windows-specific features that don&#8217;t fit
anywhere else.
</p>
<a class="index-entry-id" id="index-w32_002duse_002dvisible_002dsystem_002dcaret"></a>
<a class="index-entry-id" id="index-screen-reader-software_002c-MS_002dWindows"></a>
<p>The variable <code class="code">w32-use-visible-system-caret</code> is a flag that
determines whether to make the system caret visible.  The default when
no screen reader software is in use is <code class="code">nil</code>, which means Emacs
draws its own cursor to indicate the position of point.  A
non-<code class="code">nil</code> value means Emacs will indicate point location with the
system caret; this facilitates use of screen reader software, and is
the default when such software is detected when running Emacs.
When this variable is non-<code class="code">nil</code>, other variables affecting the
cursor display have no effect.
</p>
<a class="index-entry-id" id="index-w32_002dgrab_002dfocus_002don_002draise"></a>
<a class="index-entry-id" id="index-frame-focus-policy_002c-MS_002dWindows"></a>
<p>The variable <code class="code">w32-grab-focus-on-raise</code>, if set to a
non-<code class="code">nil</code> value causes a frame to grab focus when it is raised.
The default is <code class="code">t</code>, which fits well with the Windows default
click-to-focus policy.
</p>
<p>On Windows 10 (version 1809 and higher) and Windows 11, Emacs title
bars and scroll bars will follow the system&#8217;s Light or Dark mode,
similar to other programs such as Explorer and Command Prompt.  To
change the color mode, select <code class="code">Personalization</code> from
<code class="code">Windows&#160;Settings</code><!-- /@w -->, then
<code class="code">Colors-&gt;Choose&#160;your&#160;color</code><!-- /@w --> (or <code class="code">Choose&#160;your&#160;default&#160;app&#160;mode</code><!-- /@w -->); then restart Emacs.
</p>
</div>
<div class="section-level-extent" id="MS_002dDOS">
<h3 class="section" id="Emacs-and-MS_002dDOS">H.12 Emacs and MS-DOS</h3>
<a class="index-entry-id" id="index-MS_002dDOS-peculiarities"></a>

<p>This section briefly describes the peculiarities of using Emacs on
MS-DOS.
Information about peculiarities common to MS-DOS and Microsoft&#8217;s
current operating systems Windows is in
<a class="ref" href="#Microsoft-Windows">Emacs and Microsoft Windows/MS-DOS</a>.
</p>
<p>If you build Emacs for MS-DOS, the binary will also run on Windows
3.X, Windows NT, Windows 9X/ME, or Windows 2000/XP as a DOS
application; all of this chapter applies for all of those systems, if
you use an Emacs that was built for MS-DOS.
</p>
<p>See <a class="xref" href="#Text-and-Binary">Text Files and Binary Files</a>, for information
about Emacs&#8217;s special handling of text files under MS-DOS (and Windows).
</p>

<div class="subsection-level-extent" id="MS_002dDOS-Keyboard">
<h4 class="subsection" id="Keyboard-Usage-on-MS_002dDOS">H.12.1 Keyboard Usage on MS-DOS</h4>

<a class="index-entry-id" id="index-DEL-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-BS-_0028MS_002dDOS_0029"></a>
<p>The key that is called <kbd class="key">DEL</kbd> in Emacs (because that&#8217;s how it is
designated on most workstations) is known as <kbd class="key">BS</kbd> (backspace) on a
PC.  That is why the PC-specific terminal initialization remaps the
<kbd class="key">BS</kbd> key to act as <kbd class="key">DEL</kbd>; the <kbd class="key">Delete</kbd> key is remapped to act
as <kbd class="kbd">C-d</kbd> for the same reasons.
</p>
<a class="index-entry-id" id="index-C_002dg-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-C_002dBreak-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-quitting-on-MS_002dDOS"></a>
<p>Emacs built for MS-DOS recognizes <kbd class="kbd">C-<kbd class="key">Break</kbd></kbd> as a quit
character, just like <kbd class="kbd">C-g</kbd>.  This is because Emacs cannot detect
that you have typed <kbd class="kbd">C-g</kbd> until it is ready for more input.  As a
consequence, you cannot use <kbd class="kbd">C-g</kbd> to stop a running command
(see <a class="pxref" href="Quitting.xhtml">Quitting and Aborting</a>).
By contrast, <kbd class="kbd">C-<kbd class="key">Break</kbd></kbd> <em class="emph">is</em> detected as soon as you
type it (as <kbd class="kbd">C-g</kbd> is on other systems), so it can be used to stop
a running command and for emergency escape
(see <a class="pxref" href="Lossage.xhtml#Emergency-Escape">Emergency Escape</a>).
</p>
<a class="index-entry-id" id="index-Meta-_0028under-MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-Hyper-_0028under-MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-Super-_0028under-MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-dos_002dsuper_002dkey"></a>
<a class="index-entry-id" id="index-dos_002dhyper_002dkey"></a>
<p>The PC keyboard maps use the left <kbd class="key">Alt</kbd> key as the <kbd class="key">Meta</kbd> key.
You have two choices for emulating the <kbd class="key">SUPER</kbd> and <kbd class="key">Hyper</kbd> keys:
choose either the right <kbd class="key">Ctrl</kbd> key or the right <kbd class="key">Alt</kbd> key by
setting the variables <code class="code">dos-hyper-key</code> and <code class="code">dos-super-key</code> to 1
or 2 respectively.  If neither <code class="code">dos-super-key</code> nor
<code class="code">dos-hyper-key</code> is 1, then by default the right <kbd class="key">Alt</kbd> key is
also mapped to the <kbd class="key">Meta</kbd> key.  However, if the MS-DOS international
keyboard support program <samp class="file">KEYB.COM</samp> is installed, Emacs will
<em class="emph">not</em> map the right <kbd class="key">Alt</kbd> to <kbd class="key">Meta</kbd>, since it is used for
accessing characters like <kbd class="kbd">~</kbd> and <kbd class="kbd">@</kbd> on non-US keyboard
layouts; in this case, you may only use the left <kbd class="key">Alt</kbd> as <kbd class="key">Meta</kbd>
key.
</p>
<a class="index-entry-id" id="index-C_002dj-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-dos_002dkeypad_002dmode"></a>
<p>The variable <code class="code">dos-keypad-mode</code> is a flag variable that controls
what key codes are returned by keys in the numeric keypad.  You can also
define the keypad <kbd class="key">ENTER</kbd> key to act like <kbd class="kbd">C-j</kbd>, by putting the
following line into your <samp class="file">_emacs</samp> file:
</p>
<div class="example smallexample">
<pre class="example-preformatted">;; <span class="r">Make the <kbd class="key">ENTER</kbd> key from the numeric keypad act as <kbd class="kbd">C-j</kbd>.</span>
(keymap-set function-key-map &quot;&lt;kp-enter&gt;&quot; &quot;C-j&quot;)
</pre></div>

</div>
<div class="subsection-level-extent" id="MS_002dDOS-Mouse">
<h4 class="subsection" id="Mouse-Usage-on-MS_002dDOS">H.12.2 Mouse Usage on MS-DOS</h4>

<a class="index-entry-id" id="index-mouse-support-under-MS_002dDOS"></a>
<p>Emacs on MS-DOS supports a mouse (on the default terminal only).
The mouse commands work as documented, including those that use menus
and the menu bar
(see <a class="pxref" href="Screen.xhtml#Menu-Bar">The Menu Bar</a>).
 Scroll bars don&#8217;t work in MS-DOS Emacs.  PC mice usually have only
two buttons; these act as <kbd class="kbd">mouse-1</kbd> and <kbd class="kbd">mouse-2</kbd>, but if you
press both of them together, that has the effect of <kbd class="kbd">mouse-3</kbd>.  If
the mouse does have 3 buttons, Emacs detects that at startup, and all
the 3 buttons function normally, as on X.
</p>
<p>Help strings for menu-bar and pop-up menus are displayed in the echo
area when the mouse pointer moves across the menu items.  Highlighting
of mouse-sensitive text
(see <a class="pxref" href="Frames.xhtml#Mouse-References">Following References with the Mouse</a>)
is also supported.
</p>
<a class="index-entry-id" id="index-mouse_002c-set-number-of-buttons"></a>
<a class="index-entry-id" id="index-msdos_002dset_002dmouse_002dbuttons"></a>
<p>Some versions of mouse drivers don&#8217;t report the number of mouse
buttons correctly.  For example, mice with a wheel report that they
have 3 buttons, but only 2 of them are passed to Emacs; the clicks on
the wheel, which serves as the middle button, are not passed.  In
these cases, you can use the <kbd class="kbd">M-x msdos-set-mouse-buttons</kbd> command
to tell Emacs how many mouse buttons to expect.  You could make such a
setting permanent by adding this fragment to your <samp class="file">_emacs</samp> init
file:
</p>
<div class="example">
<pre class="example-preformatted">;; <span class="r">Treat the mouse like a 2-button mouse.</span>
(msdos-set-mouse-buttons 2)
</pre></div>

<a class="index-entry-id" id="index-Windows-clipboard-support"></a>
<p>Emacs built for MS-DOS supports clipboard operations when it runs on
Windows.  Commands that put text on the kill ring, or yank text from
the ring, check the Windows clipboard first, just as Emacs does on the
X Window System
(see <a class="pxref" href="Frames.xhtml#Mouse-Commands">Mouse Commands for Editing</a>).
Only the primary selection and the cut buffer are supported by MS-DOS
Emacs on Windows; the secondary selection always appears as empty.
</p>
<p>Due to the way clipboard access is implemented by Windows, the
length of text you can put into the clipboard is limited by the amount
of free DOS memory that is available to Emacs.  Usually, up to 620KB of
text can be put into the clipboard, but this limit depends on the system
configuration and is lower if you run Emacs as a subprocess of
another program.  If the killed text does not fit, Emacs outputs a
message saying so, and does not put the text into the clipboard.
</p>
<p>Null characters also cannot be put into the Windows clipboard.  If the
killed text includes null characters, Emacs does not put such text into
the clipboard, and displays in the echo area a message to that effect.
</p>
<a class="index-entry-id" id="index-dos_002ddisplay_002dscancodes"></a>
<p>The variable <code class="code">dos-display-scancodes</code>, when non-<code class="code">nil</code>,
directs Emacs to display the <abbr class="acronym">ASCII</abbr> value and the keyboard scan code of
each keystroke; this feature serves as a complement to the
<code class="code">view-lossage</code> command, for debugging.
</p>
</div>
<div class="subsection-level-extent" id="MS_002dDOS-Display">
<h4 class="subsection" id="Display-on-MS_002dDOS">H.12.3 Display on MS-DOS</h4>
<a class="index-entry-id" id="index-faces-under-MS_002dDOS"></a>
<a class="index-entry-id" id="index-fonts_002c-emulating-under-MS_002dDOS"></a>

<p>Display on MS-DOS cannot use font variants, like bold or italic, but
it does support multiple faces, each of which can specify a foreground
and a background color.  Therefore, you can get the full functionality
of Emacs packages that use fonts (such as <code class="code">font-lock</code>, Enriched
Text mode, and others) by defining the relevant faces to use different
colors.  Use the <code class="code">list-colors-display</code> command
(see <a class="pxref" href="Display.xhtml#Colors">Colors for Faces</a>)
and the <code class="code">list-faces-display</code> command
(see <a class="pxref" href="Display.xhtml#Faces">Text Faces</a>)
to see what colors and faces are available and what they look like.
</p>
<p>See <a class="xref" href="#MS_002dDOS-and-MULE">International Support on MS-DOS</a>, later in this chapter, for information on
how Emacs displays glyphs and characters that aren&#8217;t supported by the
native font built into the DOS display.
</p>
<a class="index-entry-id" id="index-cursor-shape-on-MS_002dDOS"></a>
<p>When Emacs starts, it changes the cursor shape to a solid box.  This
is for compatibility with other systems, where the box cursor is the
default in Emacs.  This default shape can be changed to a bar by
specifying the <code class="code">cursor-type</code> parameter in the variable
<code class="code">default-frame-alist</code>
(see <a class="pxref" href="Frames.xhtml#Creating-Frames">Creating Frames</a>).
The MS-DOS terminal doesn&#8217;t support a vertical-bar cursor,
so the bar cursor is horizontal, and the <code class="code"><var class="var">width</var></code> parameter,
if specified by the frame parameters, actually determines its height.
For this reason, the <code class="code">bar</code> and <code class="code">hbar</code> cursor types produce
the same effect on MS-DOS.  As an extension, the bar cursor
specification can include the starting scan line of the cursor as well
as its width, like this:
</p>
<div class="example">
<pre class="example-preformatted"> '(cursor-type bar <var class="var">width</var> . <var class="var">start</var>)
</pre></div>

<p>In addition, if the <var class="var">width</var> parameter is negative, the cursor bar
begins at the top of the character cell.
</p>
<a class="index-entry-id" id="index-frames-on-MS_002dDOS"></a>
<p>The MS-DOS terminal can only display a single frame at a time.  The
Emacs frame facilities work on MS-DOS much as they do on text
terminals
(see <a class="pxref" href="Frames.xhtml#Frames">Frames and Graphical Displays</a>).
When you run Emacs from a DOS window on MS-Windows, you can make the
visible frame smaller than the full screen, but Emacs still cannot
display more than a single frame at a time.
</p>
<a class="index-entry-id" id="index-frame-size-under-MS_002dDOS"></a>
<a class="index-entry-id" id="index-dos_002dmode4350"></a>
<a class="index-entry-id" id="index-dos_002dmode25"></a>
<p>The <code class="code">dos-mode4350</code> command switches the display to 43 or 50
lines, depending on your hardware; the <code class="code">dos-mode25</code> command switches
to the default 80x25 screen size.
</p>
<p>By default, Emacs only knows how to set screen sizes of 80 columns by
25, 28, 35, 40, 43 or 50 rows.  However, if your video adapter has
special video modes that will switch the display to other sizes, you can
have Emacs support those too.  When you ask Emacs to switch the frame to
<var class="var">n</var> rows by <var class="var">m</var> columns dimensions, it checks if there is a
variable called <code class="code">screen-dimensions-<var class="var">n</var>x<var class="var">m</var></code>, and if so,
uses its value (which must be an integer) as the video mode to switch
to.  (Emacs switches to that video mode by calling the BIOS <code class="code">Set
Video Mode</code> function with the value of
<code class="code">screen-dimensions-<var class="var">n</var>x<var class="var">m</var></code> in the <code class="code">AL</code> register.)
For example, suppose your adapter will switch to 66x80 dimensions when
put into video mode 85.  Then you can make Emacs support this screen
size by putting the following into your <samp class="file">_emacs</samp> file:
</p>
<div class="example">
<pre class="example-preformatted">(setq screen-dimensions-66x80 85)
</pre></div>

<p>Since Emacs on MS-DOS can only set the frame size to specific
supported dimensions, it cannot honor every possible frame resizing
request.  When an unsupported size is requested, Emacs chooses the next
larger supported size beyond the specified size.  For example, if you
ask for 36x80 frame, you will get 40x80 instead.
</p>
<p>The variables <code class="code">screen-dimensions-<var class="var">n</var>x<var class="var">m</var></code> are used only
when they exactly match the specified size; the search for the next
larger supported size ignores them.  In the above example, even if your
VGA supports 38x80 dimensions and you define a variable
<code class="code">screen-dimensions-38x80</code> with a suitable value, you will still get
40x80 screen when you ask for a 36x80 frame.  If you want to get the
38x80 size in this case, you can do it by setting the variable named
<code class="code">screen-dimensions-36x80</code> with the same video mode value as
<code class="code">screen-dimensions-38x80</code>.
</p>
<p>Changing frame dimensions on MS-DOS has the effect of changing all the
other frames to the new dimensions.
</p>
</div>
<div class="subsection-level-extent" id="MS_002dDOS-File-Names">
<h4 class="subsection" id="File-Names-on-MS_002dDOS">H.12.4 File Names on MS-DOS</h4>
<a class="index-entry-id" id="index-file-names-under-MS_002dDOS"></a>
<a class="index-entry-id" id="index-init-file_002c-default-name-under-MS_002dDOS"></a>

<p>On MS-DOS, file names are case-insensitive and limited to eight
characters, plus optionally a period and three more characters.  Emacs
knows enough about these limitations to handle file names that were
meant for other operating systems.  For instance, leading dots
&#8216;<samp class="samp">.</samp>&#8217;  in file names are invalid in MS-DOS, so Emacs transparently
converts them to underscores &#8216;<samp class="samp">_</samp>&#8217;; thus your default init file
(see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>)
is called <samp class="file">_emacs</samp> on MS-DOS.  Excess characters before or after
the period are generally ignored by MS-DOS itself; thus, if you visit
the file <samp class="file">LongFileName.EvenLongerExtension</samp>, you will silently
get <samp class="file">longfile.eve</samp>, but Emacs will still display the long file
name on the mode line.  Other than that, it&#8217;s up to you to specify
file names which are valid under MS-DOS; the transparent conversion as
described above only works on file names built into Emacs.
</p>
<a class="index-entry-id" id="index-backup-file-names-on-MS_002dDOS"></a>
<p>The above restrictions on the file names on MS-DOS make it almost
impossible to construct the name of a backup file
(see <a class="pxref" href="Files.xhtml#Backup-Names">Single or Numbered Backups</a>)
without losing some of the original file name characters.  For
example, the name of a backup file for <samp class="file">docs.txt</samp> is
<samp class="file">docs.tx~</samp> even if single backup is used.
</p>
<a class="index-entry-id" id="index-file-names-under-Windows-95_002fNT"></a>
<a class="index-entry-id" id="index-long-file-names-in-DOS-box-under-Windows-95_002fNT"></a>
<p>If you run Emacs as a DOS application under Windows 9X, Windows ME, or
Windows 2000/XP, you can turn on support for long file names.  If you do
that, Emacs doesn&#8217;t truncate file names or convert them to lower case;
instead, it uses the file names that you specify, verbatim.  To enable
long file name support, set the environment variable <code class="env">LFN</code> to
&#8216;<samp class="samp">y</samp>&#8217; before starting Emacs.  Unfortunately, Windows NT doesn&#8217;t allow
DOS programs to access long file names, so Emacs built for MS-DOS will
only see their short 8+3 aliases.
</p>
<a class="index-entry-id" id="index-HOME-directory-under-MS_002dDOS"></a>
<p>MS-DOS has no notion of home directory, so Emacs on MS-DOS pretends
that the directory where it is installed is the value of the <code class="env">HOME</code>
environment variable.  That is, if your Emacs binary,
<samp class="file">emacs.exe</samp>, is in the directory <samp class="file">c:/utils/emacs/bin</samp>, then
Emacs acts as if <code class="env">HOME</code> were set to &#8216;<samp class="samp">c:/utils/emacs</samp>&#8217;.  In
particular, that is where Emacs looks for the init file <samp class="file">_emacs</samp>.
With this in mind, you can use &#8216;<samp class="samp">~</samp>&#8217; in file names as an alias for
the home directory, as you would on GNU or Unix.  You can also set
<code class="env">HOME</code> variable in the environment before starting Emacs; its
value will then override the above default behavior.
</p>
<p>Emacs on MS-DOS handles the name <samp class="file">/dev</samp> specially,
because of a feature in the emulator libraries of DJGPP that pretends
I/O devices have names in that directory.  We recommend that you avoid
using an actual directory named <samp class="file">/dev</samp> on any disk.
</p>
</div>
<div class="subsection-level-extent" id="MS_002dDOS-Printing">
<h4 class="subsection" id="Printing-and-MS_002dDOS">H.12.5 Printing and MS-DOS</h4>

<p>Printing commands, such as <code class="code">lpr-buffer</code>
(see <a class="pxref" href="Printing.xhtml#Printing">Printing Hard Copies</a>) and <code class="code">ps-print-buffer</code> (see <a class="pxref" href="Printing.xhtml#PostScript">PostScript Hardcopy</a>)
can work on MS-DOS by sending the output to one of the printer ports,
if a POSIX-style <code class="code">lpr</code> program is unavailable.  The same Emacs
variables control printing on all systems, but in some cases they have
different default values on MS-DOS.
</p>
<p>See <a class="xref" href="#Windows-Printing">Printing and MS-Windows</a>,
for details about setting up printing to a networked printer.
</p>
<p>Some printers expect DOS codepage encoding of non-<abbr class="acronym">ASCII</abbr> text, even
though they are connected to a Windows machine that uses a different
encoding for the same locale.  For example, in the Latin-1 locale, DOS
uses codepage 850 whereas Windows uses codepage 1252.  See <a class="xref" href="#MS_002dDOS-and-MULE">International Support on MS-DOS</a>.  When you print to such printers from Windows, you can use the
<kbd class="kbd">C-x <kbd class="key">RET</kbd> c</kbd> (<code class="code">universal-coding-system-argument</code>) command
before <kbd class="kbd">M-x lpr-buffer</kbd>; Emacs will then convert the text to the DOS
codepage that you specify.  For example,
<kbd class="kbd">C-x <kbd class="key">RET</kbd> c cp850-dos <kbd class="key">RET</kbd> M-x lpr-region <kbd class="key">RET</kbd></kbd>
will print the region while converting it to the codepage 850 encoding.
</p>
<a class="index-entry-id" id="index-dos_002dprinter"></a>
<a class="index-entry-id" id="index-dos_002dps_002dprinter"></a>
<p>For backwards compatibility, the value of <code class="code">dos-printer</code>
(<code class="code">dos-ps-printer</code>), if it has a value, overrides the value of
<code class="code">printer-name</code> (<code class="code">ps-printer-name</code>), on MS-DOS.
</p>

</div>
<div class="subsection-level-extent" id="MS_002dDOS-and-MULE">
<h4 class="subsection" id="International-Support-on-MS_002dDOS">H.12.6 International Support on MS-DOS</h4>
<a class="index-entry-id" id="index-international-support-_0028MS_002dDOS_0029"></a>

<p>Emacs on MS-DOS supports the same international character sets as it
does on GNU, Unix and other platforms
(see <a class="pxref" href="International.xhtml#International">International Character Set Support</a>),
including coding systems for converting between the different
character sets.  However, due to incompatibilities between
MS-DOS/MS-Windows and other systems, there are several DOS-specific
aspects of this support that you should be aware of.  This section
describes these aspects.
</p>
<p>The description below is largely specific to the MS-DOS port of
Emacs, especially where it talks about practical implications for
Emacs users.
</p>
<dl class="table">
<dt><kbd class="kbd">M-x dos-codepage-setup</kbd></dt>
<dd><p>Set up Emacs display and coding systems as appropriate for the current
DOS codepage.
</p></dd>
</dl>

<a class="index-entry-id" id="index-codepage_002c-MS_002dDOS"></a>
<a class="index-entry-id" id="index-DOS-codepages"></a>
<p>MS-DOS is designed to support one character set of 256 characters at
any given time, but gives you a variety of character sets to choose
from.  The alternative character sets are known as <em class="dfn">DOS codepages</em>.
Each codepage includes all 128 <abbr class="acronym">ASCII</abbr> characters, but the other 128
characters (codes 128 through 255) vary from one codepage to another.
Each DOS codepage is identified by a 3-digit number, such as 850, 862,
etc.
</p>
<p>In contrast to X, which lets you use several fonts at the same time,
MS-DOS normally doesn&#8217;t allow use of several codepages in a single
session.  MS-DOS was designed to load a single codepage at system
startup, and require you to reboot in order to change
it<a class="footnote" id="DOCF30" href="#FOOT30"><sup>30</sup></a>.  Much the same limitation applies when you run DOS
executables on other systems such as MS-Windows.
</p>
<a class="index-entry-id" id="index-dos_002dcodepage"></a>
<p>For multibyte operation on MS-DOS, Emacs needs to know which
characters the chosen DOS codepage can display.  So it queries the
system shortly after startup to get the chosen codepage number, and
stores the number in the variable <code class="code">dos-codepage</code>.  Some systems
return the default value 437 for the current codepage, even though the
actual codepage is different.  (This typically happens when you use the
codepage built into the display hardware.)  You can specify a different
codepage for Emacs to use by setting the variable <code class="code">dos-codepage</code> in
your init file.
</p>
<a class="index-entry-id" id="index-language-environment_002c-automatic-selection-on-MS_002dDOS"></a>
<p>Multibyte Emacs supports only certain DOS codepages: those which can
display Far-Eastern scripts, like the Japanese codepage 932, and those
that encode a single ISO 8859 character set.
</p>
<p>The Far-Eastern codepages can directly display one of the MULE
character sets for these countries, so Emacs simply sets up to use the
appropriate terminal coding system that is supported by the codepage.
The special features described in the rest of this section mostly
pertain to codepages that encode ISO 8859 character sets.
</p>
<p>For the codepages that correspond to one of the ISO character sets,
Emacs knows the character set based on the codepage number.  Emacs
automatically creates a coding system to support reading and writing
files that use the current codepage, and uses this coding system by
default.  The name of this coding system is <code class="code">cp<var class="var">nnn</var></code>, where
<var class="var">nnn</var> is the codepage number.<a class="footnote" id="DOCF31" href="#FOOT31"><sup>31</sup></a>
</p>
<a class="index-entry-id" id="index-mode-line-_0028MS_002dDOS_0029"></a>
<p>All the <code class="code">cp<var class="var">nnn</var></code> coding systems use the letter &#8216;<samp class="samp">D</samp>&#8217;
(for &#8220;DOS&#8221;) as their mode-line mnemonic.  Since both the terminal
coding system and the default coding system for file I/O are set to
the proper <code class="code">cp<var class="var">nnn</var></code> coding system at startup, it is normal
for the mode line on MS-DOS to begin with &#8216;<samp class="samp">-DD\-</samp>&#8217;.
See <a class="xref" href="Screen.xhtml#Mode-Line">The Mode Line</a>.
Far-Eastern DOS terminals do not use the <code class="code">cp<var class="var">nnn</var></code> coding
systems, and thus their initial mode line looks like the Emacs
default.
</p>
<p>Since the codepage number also indicates which script you are using,
Emacs automatically runs <code class="code">set-language-environment</code> to select the
language environment for that script
(see <a class="pxref" href="International.xhtml#Language-Environments">Language Environments</a>).
</p>
<p>If a buffer contains a character belonging to some other ISO 8859
character set, not the one that the chosen DOS codepage supports, Emacs
displays it using a sequence of <abbr class="acronym">ASCII</abbr> characters.  For example, if the
current codepage doesn&#8217;t have a glyph for the letter &#8216;<samp class="samp">&#242;</samp>&#8217; (small
&#8216;<samp class="samp">o</samp>&#8217; with a grave accent), it is displayed as &#8216;<samp class="samp">{`o}</samp>&#8217;, where
the braces serve as a visual indication that this is a single character.
(This may look awkward for some non-Latin characters, such as those from
Greek or Hebrew alphabets, but it is still readable by a person who
knows the language.)  Even though the character may occupy several
columns on the screen, it is really still just a single character, and
all Emacs commands treat it as one.
</p>
<a class="index-entry-id" id="index-MS_002dWindows-codepages"></a>
<p>MS-Windows provides its own codepages, which are different from the
DOS codepages for the same locale.  For example, DOS codepage 850
supports the same character set as Windows codepage 1252; DOS codepage
855 supports the same character set as Windows codepage 1251, etc.
The MS-Windows version of Emacs uses the current codepage for display
when invoked with the &#8216;<samp class="samp">-nw</samp>&#8217; option.
</p>
</div>
<div class="subsection-level-extent" id="MS_002dDOS-Processes">
<h4 class="subsection" id="Subprocesses-on-MS_002dDOS">H.12.7 Subprocesses on MS-DOS</h4>

<a class="index-entry-id" id="index-compilation-under-MS_002dDOS"></a>
<a class="index-entry-id" id="index-inferior-processes-under-MS_002dDOS"></a>
<a class="index-entry-id" id="index-compile-_0028MS_002dDOS_0029"></a>
<a class="index-entry-id" id="index-grep-_0028MS_002dDOS_0029"></a>
<p>Because MS-DOS is a single-process &#8220;operating system&#8221;,
asynchronous subprocesses are not available.  In particular, Shell
mode and its variants do not work.  Most Emacs features that use
asynchronous subprocesses also don&#8217;t work on MS-DOS, including
Shell mode and GUD.  When in doubt, try and see; commands that
don&#8217;t work output an error message saying that asynchronous processes
aren&#8217;t supported.
</p>
<p>Compilation under Emacs with <kbd class="kbd">M-x compile</kbd>, searching files with
<kbd class="kbd">M-x grep</kbd> and displaying differences between files with <kbd class="kbd">M-x
diff</kbd> do work, by running the inferior processes synchronously.  This
means you cannot do any more editing until the inferior process
finishes.
</p>
<p>Spell checking also works, by means of special support for synchronous
invocation of the <code class="code">ispell</code> program.  This is slower than the
asynchronous invocation on other platforms.
</p>
<p>Instead of the Shell mode, which doesn&#8217;t work on MS-DOS, you can use
the <kbd class="kbd">M-x eshell</kbd> command.  This invokes the Eshell package that
implements a POSIX-like shell entirely in Emacs Lisp.
</p>
<p>By contrast, Emacs compiled as a native Windows application
<strong class="strong">does</strong> support asynchronous subprocesses.
See <a class="xref" href="#Windows-Processes">Subprocesses on Windows 9X/ME and Windows NT/2K/XP/Vista/7/8/10</a>.
</p>
<a class="index-entry-id" id="index-printing-under-MS_002dDOS"></a>
<p>Printing commands, such as <code class="code">lpr-buffer</code>
(see <a class="pxref" href="Printing.xhtml#Printing">Printing Hard Copies</a>) and <code class="code">ps-print-buffer</code> (see <a class="pxref" href="Printing.xhtml#PostScript">PostScript Hardcopy</a>),
work in MS-DOS by sending the output to one of the printer ports.
See <a class="xref" href="#MS_002dDOS-Printing">Printing and MS-DOS</a>.
</p>
<p>When you run a subprocess synchronously on MS-DOS, make sure the
program terminates and does not try to read keyboard input.  If the
program does not terminate on its own, you will be unable to terminate
it, because MS-DOS provides no general way to terminate a process.
Pressing <kbd class="kbd">C-c</kbd> or <kbd class="kbd">C-<kbd class="key">Break</kbd></kbd> might sometimes help in these
cases.
</p>
<p>Accessing files on other machines is not supported on MS-DOS.  Other
network-oriented commands such as sending mail, Web browsing, remote
login, etc., don&#8217;t work either, unless network access is built into
MS-DOS with some network redirector.
</p>
<a class="index-entry-id" id="index-directory-listing-on-MS_002dDOS"></a>
<a class="index-entry-id" id="index-dired_002dlisting_002dswitches-_0028MS_002dDOS_0029"></a>
<p>Dired on MS-DOS uses the <code class="code">ls-lisp</code> package
(see <a class="pxref" href="#ls-in-Lisp">Emulation of <code class="code">ls</code> on MS-Windows</a>).
Therefore, Dired on MS-DOS supports only some of the possible options
you can mention in the <code class="code">dired-listing-switches</code> variable.  The
options that work are &#8216;<samp class="samp">-A</samp>&#8217;, &#8216;<samp class="samp">-a</samp>&#8217;, &#8216;<samp class="samp">-c</samp>&#8217;, &#8216;<samp class="samp">-i</samp>&#8217;,
&#8216;<samp class="samp">-r</samp>&#8217;, &#8216;<samp class="samp">-S</samp>&#8217;, &#8216;<samp class="samp">-s</samp>&#8217;, &#8216;<samp class="samp">-t</samp>&#8217;, and &#8216;<samp class="samp">-u</samp>&#8217;.
</p>
</div>
</div>
</div>
<div class="footnotes-segment">
<h4 class="footnotes-heading">Footnotes</h4>

<h5 class="footnote-body-heading"><a id="FOOT27" href="#DOCF27">(27)</a></h5>
<p>Older versions of Emacs didn&#8217;t check the application data directory.
</p>
<h5 class="footnote-body-heading"><a id="FOOT28" href="#DOCF28">(28)</a></h5>
<p>There is one known
exception: The combination <kbd class="kbd"><kbd class="key">Windows</kbd>-L</kbd> that locks the
workstation is handled by the system on a lower level.  For this
reason, <code class="code">w32-register-hot-key</code> cannot override this key
combination - it always locks the computer.</p>
<h5 class="footnote-body-heading"><a id="FOOT29" href="#DOCF29">(29)</a></h5>
<p>Note that the &#8216;<samp class="samp">net use</samp>&#8217; command requires the UNC share name to be
typed with the Windows-style backslashes, while the value of
<code class="code">printer-name</code> can be set with either forward- or backslashes.</p>
<h5 class="footnote-body-heading"><a id="FOOT30" href="#DOCF30">(30)</a></h5>
<p>Normally, one particular codepage is burnt into the
display memory, while other codepages can be installed by modifying
system configuration files, such as <samp class="file">CONFIG.SYS</samp>, and rebooting.
While there is third-party software that allows changing the codepage
without rebooting, we describe here how a stock MS-DOS system
behaves.</p>
<h5 class="footnote-body-heading"><a id="FOOT31" href="#DOCF31">(31)</a></h5>
<p>The standard Emacs coding
systems for ISO 8859 are not quite right for the purpose, because
typically the DOS codepage does not match the standard ISO character
codes.  For example, the letter &#8216;<samp class="samp">&#231;</samp>&#8217; (&#8216;<samp class="samp">c</samp>&#8217; with cedilla) has
code 231 in the standard Latin-1 character set, but the corresponding
DOS codepage 850 uses code 135 for this glyph.</p>
</div>



</body>
</html>
