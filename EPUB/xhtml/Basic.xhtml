<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>8 Basic Editing Commands (GNU Emacs Manual)</title>

<meta name="description" content="8 Basic Editing Commands (GNU Emacs Manual)"/>
<meta name="keywords" content="8 Basic Editing Commands (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Minibuffer.xhtml#Minibuffer" rel="next" title="9 The Minibuffer"/>
<link href="Exiting.xhtml" rel="prev" title="7 Exiting Emacs"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
span.r {font-family: initial; font-weight: normal; font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Basic">

<h2 class="chapter" id="Basic-Editing-Commands">8 Basic Editing Commands</h2>

<a class="index-entry-id" id="index-C_002dh-t"></a>
<a class="index-entry-id" id="index-help_002dwith_002dtutorial"></a>
<p>Here we explain the basics of how to enter text, make corrections,
and save the text in a file.  If this material is new to you, we
suggest you first run the Emacs learn-by-doing tutorial, by typing
<kbd class="kbd">C-h t</kbd> (<code class="code">help-with-tutorial</code>).
</p>

<div class="section-level-extent" id="Inserting-Text">
<h3 class="section" id="Inserting-Text-1">8.1 Inserting Text</h3>

<a class="index-entry-id" id="index-insertion"></a>
<a class="index-entry-id" id="index-graphic-characters"></a>
<p>You can insert an ordinary <em class="dfn">graphic character</em> (e.g., &#8216;<samp class="samp">a</samp>&#8217;,
&#8216;<samp class="samp">B</samp>&#8217;, &#8216;<samp class="samp">3</samp>&#8217;, and &#8216;<samp class="samp">=</samp>&#8217;) by typing the associated key.  This
adds the character to the buffer at point.  Insertion moves point
forward, so that point remains just after the inserted text.
See <a class="xref" href="Screen.xhtml#Point">Point</a>.
</p>
<a class="index-entry-id" id="index-RET"></a>
<a class="index-entry-id" id="index-C_002dj"></a>
<a class="index-entry-id" id="index-newline"></a>
<p>To end a line and start a new one, type <kbd class="key">RET</kbd> (<code class="code">newline</code>).
(The <kbd class="key">RET</kbd> key may be labeled <kbd class="key">Return</kbd>, or <kbd class="key">Enter</kbd>, or
with a funny-looking left-pointing arrow on your keyboard, but we
refer to it as <kbd class="key">RET</kbd> in this manual.)  This command inserts a
newline character into the buffer, then indents (see <a class="pxref" href="Indentation.xhtml#Indentation">Indentation</a>)
according to the major mode.  If point is at the end of the line, the
effect is to create a new blank line after it and indent the new line;
if point is in the middle of a line, the line is split at that
position.  To turn off the auto-indentation, you can either disable
Electric Indent mode (see <a class="pxref" href="Indentation.xhtml#Indent-Convenience">Convenience Features for Indentation</a>) or type <kbd class="kbd">C-j</kbd>,
which inserts just a newline, without any auto-indentation.
</p>
<p>As we explain later in this manual, you can change the way Emacs
handles text insertion by turning on <em class="dfn">minor modes</em>.  For instance,
the minor mode called Auto Fill mode splits lines automatically when
they get too long (see <a class="pxref" href="Text.xhtml#Filling">Filling Text</a>).  The minor mode called Overwrite
mode causes inserted characters to replace (overwrite) existing text,
instead of shoving it to the right.  See <a class="xref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>.
</p>
<a class="index-entry-id" id="index-quoting"></a>
<a class="index-entry-id" id="index-C_002dq"></a>
<a class="index-entry-id" id="index-quoted_002dinsert"></a>
<p>Only graphic characters can be inserted by typing the associated
key; other keys act as editing commands and do not insert themselves.
For instance, <kbd class="key">DEL</kbd> runs the command <code class="code">delete-backward-char</code>
by default (some modes bind it to a different command); it does not
insert a literal &#8216;<samp class="samp">DEL</samp>&#8217; character (<abbr class="acronym">ASCII</abbr> character code
127).
</p>
<p>To insert a non-graphic character, or a character that your keyboard
does not support, first <em class="dfn">quote</em> it by typing <kbd class="kbd">C-q</kbd>
(<code class="code">quoted-insert</code>).  There are two ways to use <kbd class="kbd">C-q</kbd>:
</p>
<ul class="itemize mark-bullet">
<li><kbd class="kbd">C-q</kbd> followed by any non-graphic character (even <kbd class="kbd">C-g</kbd>)
inserts that character.  For instance, <kbd class="kbd">C-q <kbd class="key">DEL</kbd></kbd> inserts a
literal &#8216;<samp class="samp">DEL</samp>&#8217; character.

</li><li><kbd class="kbd">C-q</kbd> followed by a sequence of octal digits inserts the character
with the specified octal character code.  You can use any number of
octal digits; any non-digit terminates the sequence.  If the
terminating character is <kbd class="key">RET</kbd>, that <kbd class="key">RET</kbd> serves only to
terminate the sequence.  Any other non-digit terminates the sequence
and then acts as normal input&#8212;thus, <kbd class="kbd">C-q 1 0 1 B</kbd> inserts
&#8216;<samp class="samp">AB</samp>&#8217;.

<p>The use of octal sequences is disabled in ordinary non-binary
Overwrite mode, to give you a convenient way to insert a digit instead
of overwriting with it.
</p></li></ul>

<a class="index-entry-id" id="index-read_002dquoted_002dchar_002dradix"></a>
<p>To use decimal or hexadecimal instead of octal, set the variable
<code class="code">read-quoted-char-radix</code> to 10 or 16.  If the radix is 16,
the letters <kbd class="kbd">a</kbd> to <kbd class="kbd">f</kbd> serve as part of a character code,
just like digits.  Case is ignored.
</p>
<a class="index-entry-id" id="index-insert_002dchar"></a>
<a class="index-entry-id" id="index-C_002dx-8"></a>
<a class="index-entry-id" id="index-Unicode-characters_002c-inserting"></a>
<a class="index-entry-id" id="index-insert-Unicode-character"></a>
<a class="index-entry-id" id="index-characters_002c-inserting-by-name-or-code_002dpoint"></a>
<a class="index-entry-id" id="index-curly-quotes_002c-inserting"></a>
<a class="index-entry-id" id="index-curved-quotes_002c-inserting"></a>
<p>A few common Unicode characters can be inserted via a command
starting with <kbd class="kbd">C-x&#160;8</kbd><!-- /@w -->.  For example, <kbd class="kbd">C-x 8 [</kbd> inserts <code class="t">‘</code>
which is Unicode code-point U+2018 <small class="sc">LEFT SINGLE QUOTATION MARK</small>,
sometimes called a left single &#8220;curved quote&#8221; or &#8220;curly quote&#8221;.
Similarly, <kbd class="kbd">C-x&#160;8&#160;]</kbd><!-- /@w -->, <kbd class="kbd">C-x 8 {</kbd> and <kbd class="kbd">C-x 8 }</kbd> insert the
curved quotes <code class="t">’</code>, <code class="t">“</code> and <code class="t">”</code>, respectively.  Also, a working
<kbd class="key">Alt</kbd> key acts like <kbd class="kbd">C-x 8</kbd> (unless followed by <kbd class="key">RET</kbd>);
e.g., <kbd class="kbd">A-[</kbd> acts like <kbd class="kbd">C-x 8 [</kbd> and inserts <code class="t">‘</code>.  To see
which characters have <kbd class="kbd">C-x 8</kbd> shorthands, type <kbd class="kbd">C-x 8 C-h</kbd>.
</p>
<p>Alternatively, you can use the command <kbd class="kbd">C-x 8 <kbd class="key">RET</kbd></kbd>
(<code class="code">insert-char</code>).  This prompts for the Unicode name or code-point
of a character, using the minibuffer.  If you enter a name, the
command provides completion (see <a class="pxref" href="Minibuffer.xhtml#Completion">Completion</a>).  If you enter a
code-point, it should be as a hexadecimal number (the convention for
Unicode), or a number with a specified radix, e.g., <code class="code">#o23072</code>
(octal); See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Integer-Basics.html#Integer-Basics">Integer Basics</a> in <cite class="cite">The Emacs Lisp Reference
Manual</cite>.  The command then inserts the corresponding character into
the buffer.
</p>
<p>For example, the following all insert the same character:
</p>
<div class="example">
<pre class="example-preformatted"><kbd class="kbd">C-x 8 <kbd class="key">RET</kbd> left single quotation mark <kbd class="key">RET</kbd></kbd>
<kbd class="kbd">C-x 8 <kbd class="key">RET</kbd> left sin <kbd class="key">TAB</kbd> <kbd class="key">RET</kbd></kbd>
<kbd class="kbd">C-x 8 <kbd class="key">RET</kbd> 2018 <kbd class="key">RET</kbd></kbd>
<kbd class="kbd">C-x 8 [</kbd>
<kbd class="kbd">A-[</kbd>  <span class="r">(if the Alt key works)</span>
<kbd class="kbd">`</kbd>    <span class="r">(in Electric Quote mode)</span>
</pre></div>

<p>A numeric argument to <kbd class="kbd">C-q</kbd> or <kbd class="kbd">C-x 8 ...</kbd> specifies
how many copies of the character to insert (see <a class="pxref" href="#Arguments">Numeric Arguments</a>).
</p>
<p>As an alternative to <kbd class="kbd">C-x 8</kbd>, you can select the corresponding
transient input method by typing <kbd class="kbd">C-u C-x \ iso-transl <kbd class="key">RET</kbd></kbd>,
then temporarily activating this transient input method by typing
<kbd class="kbd">C-x \ [</kbd> will insert the same character <code class="t">‘</code> (see <a class="pxref" href="International.xhtml#transient-input-method">transient input method</a>).
</p>
<p>In addition, in some contexts, if you type a quotation using grave
accent and apostrophe <kbd class="kbd">`like this'</kbd>, it is converted to a form
<code class="t">‘like this’</code> using single quotation marks, even without <kbd class="kbd">C-x 8</kbd>
commands.  Similarly, typing a quotation <kbd class="kbd">``like this''</kbd> using
double grave accent and apostrophe converts it to a form <code class="t">“like
this”</code> using double quotation marks.  See <a class="xref" href="Text.xhtml#Quotation-Marks">Quotation Marks</a>.
</p>
</div>
<div class="section-level-extent" id="Moving-Point">
<h3 class="section" id="Changing-the-Location-of-Point">8.2 Changing the Location of Point</h3>

<a class="index-entry-id" id="index-arrow-keys"></a>
<a class="index-entry-id" id="index-moving-point"></a>
<a class="index-entry-id" id="index-movement"></a>
<a class="index-entry-id" id="index-cursor-motion"></a>
<a class="index-entry-id" id="index-moving-the-cursor"></a>
<p>To do more than insert characters, you have to know how to move
point (see <a class="pxref" href="Screen.xhtml#Point">Point</a>).  The keyboard commands <kbd class="kbd">C-f</kbd>, <kbd class="kbd">C-b</kbd>,
<kbd class="kbd">C-n</kbd>, and <kbd class="kbd">C-p</kbd> move point to the right, left, down, and up,
respectively.  You can also move point using the <em class="dfn">arrow keys</em>
present on most keyboards: <kbd class="key">RIGHT</kbd>, <kbd class="key">LEFT</kbd>,
<kbd class="key">DOWN</kbd>, and <kbd class="key">UP</kbd>; however, many Emacs users find
that it is slower to use the arrow keys than the control keys, because
you need to move your hand to the area of the keyboard where those
keys are located.
</p>
<p>You can also click the left mouse button to move point to the
position clicked.  Emacs also provides a variety of additional
keyboard commands that move point in more sophisticated ways.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-forward_002dchar"></a>
<a id="index-C_002df"></a><kbd class="kbd">C-f</kbd></dt>
<dd><p>Move forward one character (<code class="code">forward-char</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-right_002dchar"></a>
<a id="index-RIGHT"></a><kbd class="kbd"><kbd class="key">RIGHT</kbd></kbd></dt>
<dd><p>This command (<code class="code">right-char</code>) behaves like <kbd class="kbd">C-f</kbd>, except when
point is in a right-to-left paragraph (see <a class="pxref" href="International.xhtml#Bidirectional-Editing">Bidirectional Editing</a>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-backward_002dchar"></a>
<a id="index-C_002db"></a><kbd class="kbd">C-b</kbd></dt>
<dd><p>Move backward one character (<code class="code">backward-char</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-left_002dchar"></a>
<a id="index-LEFT"></a><kbd class="kbd"><kbd class="key">LEFT</kbd></kbd></dt>
<dd><p>This command (<code class="code">left-char</code>) behaves like <kbd class="kbd">C-b</kbd>, except if the
current paragraph is right-to-left (see <a class="pxref" href="International.xhtml#Bidirectional-Editing">Bidirectional Editing</a>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-DOWN"></a>
<a class="index-entry-id" id="index-next_002dline"></a>
<a id="index-C_002dn"></a><kbd class="kbd">C-n</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">DOWN</kbd></kbd></dt>
<dd><p>Move down one screen line (<code class="code">next-line</code>).  This command attempts
to keep the horizontal position unchanged, so if you start in the
middle of one line, you move to the middle of the next.
</p>
</dd>
<dt><a class="index-entry-id" id="index-UP"></a>
<a class="index-entry-id" id="index-previous_002dline"></a>
<a id="index-C_002dp"></a><kbd class="kbd">C-p</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">UP</kbd></kbd></dt>
<dd><p>Move up one screen line (<code class="code">previous-line</code>).  This command
preserves position within the line, like <kbd class="kbd">C-n</kbd>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-HOME"></a>
<a class="index-entry-id" id="index-move_002dbeginning_002dof_002dline"></a>
<a id="index-C_002da"></a><kbd class="kbd">C-a</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">Home</kbd></kbd></dt>
<dd><p>Move to the beginning of the line (<code class="code">move-beginning-of-line</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-END"></a>
<a class="index-entry-id" id="index-move_002dend_002dof_002dline"></a>
<a id="index-C_002de"></a><kbd class="kbd">C-e</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">End</kbd></kbd></dt>
<dd><p>Move to the end of the line (<code class="code">move-end-of-line</code>).
</p>
</dd>
<dt><kbd class="kbd">M-f</kbd></dt>
<dd><p>Move forward one word (<code class="code">forward-word</code>).  See <a class="xref" href="Text.xhtml#Words">Words</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-M_002dRIGHT"></a>
<a class="index-entry-id" id="index-right_002dword"></a>
<a id="index-C_002dRIGHT"></a><kbd class="kbd">C-<kbd class="key">RIGHT</kbd></kbd></dt>
<dt><kbd class="kbd">M-<kbd class="key">RIGHT</kbd></kbd></dt>
<dd><p>This command (<code class="code">right-word</code>) behaves like <kbd class="kbd">M-f</kbd>, except it
moves <em class="emph">backward</em> by one word if the current paragraph is
right-to-left.  See <a class="xref" href="International.xhtml#Bidirectional-Editing">Bidirectional Editing</a>.
</p>
</dd>
<dt><kbd class="kbd">M-b</kbd></dt>
<dd><p>Move backward one word (<code class="code">backward-word</code>).  See <a class="xref" href="Text.xhtml#Words">Words</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-M_002dLEFT"></a>
<a class="index-entry-id" id="index-left_002dword"></a>
<a id="index-C_002dLEFT"></a><kbd class="kbd">C-<kbd class="key">LEFT</kbd></kbd></dt>
<dt><kbd class="kbd">M-<kbd class="key">LEFT</kbd></kbd></dt>
<dd><p>This command (<code class="code">left-word</code>) behaves like <kbd class="kbd">M-b</kbd>, except it
moves <em class="emph">forward</em> by one word if the current paragraph is
right-to-left.  See <a class="xref" href="International.xhtml#Bidirectional-Editing">Bidirectional Editing</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-move_002dto_002dwindow_002dline_002dtop_002dbottom"></a>
<a id="index-M_002dr"></a><kbd class="kbd">M-r</kbd></dt>
<dd><p>Without moving the text on the screen, reposition point on the left
margin of the center-most text line of the window; on subsequent
consecutive invocations, move point to the left margin of the top-most
line, the bottom-most line, and so forth, in cyclic order
(<code class="code">move-to-window-line-top-bottom</code>).
</p>
<p>A numeric argument says which screen line to place point on, counting
downward from the top of the window (zero means the top line).  A
negative argument counts lines up from the bottom (&#8722;1 means the
bottom line).  See <a class="xref" href="#Arguments">Numeric Arguments</a>, for more information on numeric
arguments.
</p>
</dd>
<dt><a class="index-entry-id" id="index-beginning_002dof_002dbuffer"></a>
<a id="index-M_002d_003c"></a><kbd class="kbd">M-&lt;</kbd></dt>
<dd><p>Move to the top of the buffer (<code class="code">beginning-of-buffer</code>).  With
numeric argument <var class="var">n</var>, move to <var class="var">n</var>/10 of the way from the top.
On graphical displays, <kbd class="kbd">C-<kbd class="key">HOME</kbd></kbd> does the same.
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dEND"></a>
<a class="index-entry-id" id="index-end_002dof_002dbuffer"></a>
<a id="index-M_002d_003e"></a><kbd class="kbd">M-&gt;</kbd></dt>
<dd><p>Move to the end of the buffer (<code class="code">end-of-buffer</code>).  On graphical
displays, <kbd class="kbd">C-<kbd class="key">END</kbd></kbd> does the same.
</p>
</dd>
<dt><a class="index-entry-id" id="index-PageDown"></a>
<a class="index-entry-id" id="index-next"></a>
<a id="index-C_002dv"></a><kbd class="kbd">C-v</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">PageDown</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">next</kbd></kbd></dt>
<dd><p>Scroll the display one screen forward, and move point onscreen if
necessary (<code class="code">scroll-up-command</code>).  See <a class="xref" href="Display.xhtml#Scrolling">Scrolling</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-PageUp"></a>
<a class="index-entry-id" id="index-prior"></a>
<a id="index-M_002dv"></a><kbd class="kbd">M-v</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">PageUp</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">prior</kbd></kbd></dt>
<dd><p>Scroll one screen backward, and move point onscreen if necessary
(<code class="code">scroll-down-command</code>).  See <a class="xref" href="Display.xhtml#Scrolling">Scrolling</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-goto_002dchar"></a>
<a id="index-M_002dg-c"></a><kbd class="kbd">M-g c</kbd></dt>
<dd><p>Read a number <var class="var">n</var> and move point to buffer position <var class="var">n</var>.
Position 1 is the beginning of the buffer.  If point is on or just
after a number in the buffer, that is the default for <var class="var">n</var>.  Just
type <kbd class="key">RET</kbd> in the minibuffer to use it.  You can also specify
<var class="var">n</var> by giving <kbd class="kbd">M-g c</kbd> a numeric prefix argument.
</p>
</dd>
<dt><a class="index-entry-id" id="index-M_002dg-g"></a>
<a class="index-entry-id" id="index-goto_002dline"></a>
<a class="index-entry-id" id="index-goto_002dline_002drelative"></a>
<a id="index-M_002dg-M_002dg"></a><kbd class="kbd">M-g M-g</kbd></dt>
<dt><kbd class="kbd">M-g g</kbd></dt>
<dd><p>Read a number <var class="var">n</var> and move point to the beginning of line number
<var class="var">n</var> (<code class="code">goto-line</code>).  Line 1 is the beginning of the buffer.  If
point is on or just after a number in the buffer, that is the default
for <var class="var">n</var>.  Just type <kbd class="key">RET</kbd> in the minibuffer to use it.  You can
also specify <var class="var">n</var> by giving <kbd class="kbd">M-g M-g</kbd> a numeric prefix argument.
See <a class="xref" href="Buffers.xhtml#Select-Buffer">Creating and Selecting Buffers</a>, for the behavior of <kbd class="kbd">M-g M-g</kbd> when you give it
a plain prefix argument.  Alternatively, you can use the command
<code class="code">goto-line-relative</code> to move point to the line relative to the
accessible portion of the narrowed buffer.
</p>
<p><code class="code">goto-line</code> has its own history list (see <a class="pxref" href="Minibuffer.xhtml#Minibuffer-History">Minibuffer History</a>).  You can have either a single list shared between all
buffers (the default) or a separate list for each buffer, by
customizing the user option <code class="code">goto-line-history-local</code>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-move_002dto_002dcolumn"></a>
<a id="index-M_002dg-TAB"></a><kbd class="kbd">M-g <kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Read a number <var class="var">n</var> and move to column <var class="var">n</var> in the current line.
Column 0 is the leftmost column.  If called with a prefix argument,
move to the column number specified by the argument&#8217;s numeric value.
</p>
</dd>
<dt><a class="index-entry-id" id="index-set_002dgoal_002dcolumn"></a>
<a id="index-C_002dx-C_002dn"></a><kbd class="kbd">C-x C-n</kbd></dt>
<dd><p>Use the current column of point as the <em class="dfn">semipermanent goal column</em>
(<code class="code">set-goal-column</code>) in the current buffer.  When a semipermanent
goal column is in effect, <kbd class="kbd">C-n</kbd>, <kbd class="kbd">C-p</kbd>, <kbd class="kbd">&lt;prior&gt;</kbd> and
<kbd class="kbd">&lt;next&gt;</kbd> always try to move to this column, or as close as
possible to it, after moving vertically.  The goal column remains in
effect until canceled.
</p>
</dd>
<dt><kbd class="kbd">C-u C-x C-n</kbd></dt>
<dd><p>Cancel the goal column.  Henceforth, <kbd class="kbd">C-n</kbd> and <kbd class="kbd">C-p</kbd> try to
preserve the horizontal position, as usual.
</p></dd>
</dl>

<a class="index-entry-id" id="index-line_002dmove_002dvisual"></a>
<p>When a line of text in the buffer is longer than the width of the
window, Emacs usually displays it on two or more <em class="dfn">screen lines</em>,
a.k.a. <em class="dfn">visual lines</em>.  For convenience, <kbd class="kbd">C-n</kbd> and <kbd class="kbd">C-p</kbd>
move point by screen lines, as do the equivalent keys <kbd class="kbd"><kbd class="key">down</kbd></kbd>
and <kbd class="kbd"><kbd class="key">up</kbd></kbd>.  You can force these commands to move according to
<em class="dfn">logical lines</em> (i.e., according to the text lines in the buffer)
by setting the variable <code class="code">line-move-visual</code> to <code class="code">nil</code>; if a
logical line occupies multiple screen lines, the cursor then skips
over the additional screen lines.  For details, see <a class="ref" href="#Continuation-Lines">Continuation Lines</a>.  See <a class="xref" href="Customization.xhtml#Variables">Variables</a>, for how to set variables such as
<code class="code">line-move-visual</code>.
</p>
<p>Unlike <kbd class="kbd">C-n</kbd> and <kbd class="kbd">C-p</kbd>, most of the Emacs commands that work
on lines work on <em class="emph">logical</em> lines.  For instance, <kbd class="kbd">C-a</kbd>
(<code class="code">move-beginning-of-line</code>) and <kbd class="kbd">C-e</kbd>
(<code class="code">move-end-of-line</code>) respectively move to the beginning and end
of the logical line.  Whenever we encounter commands that work on
screen lines, such as <kbd class="kbd">C-n</kbd> and <kbd class="kbd">C-p</kbd>, we will point these
out.
</p>
<a class="index-entry-id" id="index-track_002deol"></a>
<p>When <code class="code">line-move-visual</code> is <code class="code">nil</code>, you can also set the
variable <code class="code">track-eol</code> to a non-<code class="code">nil</code> value.  Then <kbd class="kbd">C-n</kbd>
and <kbd class="kbd">C-p</kbd>, when starting at the end of the logical line, move to
the end of the next logical line.  Normally, <code class="code">track-eol</code> is
<code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-next_002dline_002dadd_002dnewlines"></a>
<p><kbd class="kbd">C-n</kbd> normally stops at the end of the buffer when you use it on
the last line in the buffer.  However, if you set the variable
<code class="code">next-line-add-newlines</code> to a non-<code class="code">nil</code> value, <kbd class="kbd">C-n</kbd> on
the last line of a buffer creates an additional line at the end and
moves down into it.
</p>
</div>
<div class="section-level-extent" id="Erasing">
<h3 class="section" id="Erasing-Text">8.3 Erasing Text</h3>
<a class="index-entry-id" id="index-killing-characters-and-lines"></a>
<a class="index-entry-id" id="index-deleting-characters-and-lines"></a>
<a class="index-entry-id" id="index-erasing-characters-and-lines"></a>

<dl class="table">
<dt><kbd class="kbd"><kbd class="key">DEL</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">BACKSPACE</kbd></kbd></dt>
<dd><p>Delete the character before point, or the region if it is active
(<code class="code">delete-backward-char</code>).
</p>
</dd>
<dt><kbd class="kbd"><kbd class="key">Delete</kbd></kbd></dt>
<dd><p>Delete the character after point, or the region if it is active
(<code class="code">delete-forward-char</code>).
</p>
</dd>
<dt><kbd class="kbd">C-d</kbd></dt>
<dd><p>Delete the character after point (<code class="code">delete-char</code>).
</p>
</dd>
<dt><kbd class="kbd">C-k</kbd></dt>
<dd><p>Kill to the end of the line (<code class="code">kill-line</code>).
</p>
</dd>
<dt><kbd class="kbd">M-d</kbd></dt>
<dd><p>Kill forward to the end of the next word (<code class="code">kill-word</code>).
</p>
</dd>
<dt><kbd class="kbd">M-<kbd class="key">DEL</kbd></kbd></dt>
<dt><kbd class="kbd">M-<kbd class="key">BACKSPACE</kbd></kbd></dt>
<dd><p>Kill back to the beginning of the previous word
(<code class="code">backward-kill-word</code>).
</p></dd>
</dl>

<p>The <kbd class="kbd"><kbd class="key">DEL</kbd></kbd> (<code class="code">delete-backward-char</code>) command removes
the character before point, moving the cursor and the characters after
it backwards.  If point was at the beginning of a line, this deletes
the preceding newline, joining this line to the previous one.
</p>
<p>If, however, the region is active, <kbd class="kbd"><kbd class="key">DEL</kbd></kbd> instead deletes
the text in the region.  See <a class="xref" href="Mark.xhtml#Mark">The Mark and the Region</a>, for a description of the region.
</p>
<p>On most keyboards, <kbd class="key">DEL</kbd> is labeled <kbd class="key">BACKSPACE</kbd>, but we
refer to it as <kbd class="key">DEL</kbd> in this manual.  (Do not confuse <kbd class="key">DEL</kbd>
with the <kbd class="key">Delete</kbd> key; we will discuss <kbd class="key">Delete</kbd> momentarily.)
On some text terminals, Emacs may not recognize the <kbd class="key">DEL</kbd> key
properly.  See <a class="xref" href="Lossage.xhtml#DEL-Does-Not-Delete">If <kbd class="key">DEL</kbd> Fails to Delete</a>, if you encounter this problem.
</p>
<p>The <kbd class="key">Delete</kbd> (<code class="code">delete-forward-char</code>) command deletes in the
opposite direction: it deletes the character after point, i.e., the
character under the cursor.  If point was at the end of a line, this
joins the following line onto this one.  Like <kbd class="kbd"><kbd class="key">DEL</kbd></kbd>, it
deletes the text in the region if the region is active (see <a class="pxref" href="Mark.xhtml#Mark">The Mark and the Region</a>).
</p>
<p><kbd class="kbd">C-d</kbd> (<code class="code">delete-char</code>) deletes the character after point,
similar to <kbd class="key">Delete</kbd>, but regardless of whether the region is
active.
</p>
<p>See <a class="xref" href="Killing.xhtml#Deletion">Deletion</a>, for more detailed information about the above
deletion commands.
</p>
<p><kbd class="kbd">C-k</kbd> (<code class="code">kill-line</code>) erases (kills) a line at a time.  If
you type <kbd class="kbd">C-k</kbd> at the beginning or middle of a line, it kills all
the text up to the end of the line.  If you type <kbd class="kbd">C-k</kbd> at the end
of a line, it joins that line with the following line.
</p>
<p>See <a class="xref" href="Killing.xhtml#Killing">Killing and Moving Text</a>, for more information about <kbd class="kbd">C-k</kbd> and related
commands.
</p>
</div>
<div class="section-level-extent" id="Basic-Undo">
<h3 class="section" id="Undoing-Changes">8.4 Undoing Changes</h3>

<dl class="table">
<dt><kbd class="kbd">C-/</kbd></dt>
<dt><kbd class="kbd">C-x u</kbd></dt>
<dt><kbd class="kbd">C-_</kbd></dt>
<dd><p>Undo one entry of the undo records&#8212;usually, one command worth
(<code class="code">undo</code>).  (The first key might be unavailable on text-mode
displays.)
</p></dd>
</dl>

<p>Emacs records a list of changes made in the buffer text, so you can
undo recent changes.  This is done using the <code class="code">undo</code> command,
which is bound to <kbd class="kbd">C-/</kbd> (as well as <kbd class="kbd">C-x u</kbd> and <kbd class="kbd">C-_</kbd>).
Normally, this command undoes the last change, moving point back to
where it was before the change.  The undo command applies only to
changes in the buffer; you can&#8217;t use it to undo cursor motion.
</p>
<p>On a terminal that supports the <kbd class="key">Control</kbd> modifier on all other
keys, the easiest way to invoke <code class="code">undo</code> is with <kbd class="kbd">C-/</kbd>, since
that doesn&#8217;t need the <kbd class="key">Shift</kbd> modifier.  On terminals which allow
only the ASCII control characters, <kbd class="kbd">C-/</kbd> does not exist, but for
many of them <kbd class="kbd">C-/</kbd> still works because it actually sends <kbd class="kbd">C-_</kbd>
to Emacs, while many others allow you to omit the <kbd class="key">Shift</kbd> modifier
when you type <kbd class="kbd">C-_</kbd> (in effect pressing <kbd class="kbd">C--</kbd>), making that
the most convenient way to invoke <code class="code">undo</code>.
</p>
<p>Although each editing command usually makes a separate entry in the
undo records, very simple commands may be grouped together.
Sometimes, an entry may cover just part of a complex command.
</p>
<p>If you repeat <kbd class="kbd">C-/</kbd> (or its aliases), each repetition undoes
another, earlier change, back to the limit of the undo information
available.  If all recorded changes have already been undone, the undo
command displays an error message and does nothing.
</p>
<p>To learn more about the <code class="code">undo</code> command, see <a class="ref" href="Fixit.xhtml#Undo">Undo</a>.
</p>
</div>
<div class="section-level-extent" id="Basic-Files">
<h3 class="section" id="Files-1">8.5 Files</h3>

<p>Text that you insert in an Emacs buffer lasts only as long as the
Emacs session.  To keep any text permanently, you must put it in a
<em class="dfn">file</em>.
</p>
<p>Suppose there is a file named <samp class="file">test.emacs</samp> in your home
directory.  To begin editing this file in Emacs, type
</p>
<div class="example">
<pre class="example-preformatted">C-x C-f test.emacs <kbd class="key">RET</kbd>
</pre></div>

<p>Here the file name is given as an <em class="dfn">argument</em> to the command <kbd class="kbd">C-x
C-f</kbd> (<code class="code">find-file</code>).  That command uses the <em class="dfn">minibuffer</em> to
read the argument, and you type <kbd class="key">RET</kbd> to terminate the argument
(see <a class="pxref" href="Minibuffer.xhtml#Minibuffer">The Minibuffer</a>).
</p>
<p>Emacs obeys this command by <em class="dfn">visiting</em> the file: it creates a
buffer, copies the contents of the file into the buffer, and then
displays the buffer for editing.  If you alter the text, you can
<em class="dfn">save</em> the new text in the file by typing <kbd class="kbd">C-x C-s</kbd>
(<code class="code">save-buffer</code>).  This copies the altered buffer contents back
into the file <samp class="file">test.emacs</samp>, making them permanent.  Until you
save, the changed text exists only inside Emacs, and the file
<samp class="file">test.emacs</samp> is unaltered.
</p>
<p>To create a file, just visit it with <kbd class="kbd">C-x C-f</kbd> as if it already
existed.  This creates an empty buffer, in which you can insert the
text you want to put in the file.  Emacs actually creates the file the
first time you save this buffer with <kbd class="kbd">C-x C-s</kbd>.
</p>
<p>To learn more about using files in Emacs, see <a class="ref" href="Files.xhtml#Files">File Handling</a>.
</p>
</div>
<div class="section-level-extent" id="Basic-Help">
<h3 class="section" id="Help-1">8.6 Help</h3>

<a class="index-entry-id" id="index-getting-help-with-keys"></a>
<p>If you forget what a key does, you can find out by typing <kbd class="kbd">C-h
k</kbd> (<code class="code">describe-key</code>), followed by the key of interest; for
example, <kbd class="kbd">C-h k C-n</kbd> tells you what <kbd class="kbd">C-n</kbd> does.
</p>
<p>The prefix key <kbd class="kbd">C-h</kbd> stands for &#8220;help&#8221;.  The key <kbd class="key">F1</kbd>
serves as an alias for <kbd class="kbd">C-h</kbd>.  Apart from <kbd class="kbd">C-h k</kbd>, there are
many other help commands providing different kinds of help.
</p>
<p>See <a class="xref" href="Help.xhtml#Help">Help</a>, for details.
</p>
</div>
<div class="section-level-extent" id="Blank-Lines">
<h3 class="section" id="Blank-Lines-1">8.7 Blank Lines</h3>

<a class="index-entry-id" id="index-inserting-blank-lines"></a>
<a class="index-entry-id" id="index-deleting-blank-lines"></a>
<p>Here are special commands and techniques for inserting and deleting
blank lines.
</p>
<dl class="table">
<dt><kbd class="kbd">C-o</kbd></dt>
<dd><p>Insert a blank line after the cursor (<code class="code">open-line</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-o</kbd></dt>
<dd><p>Delete all but one of many consecutive blank lines
(<code class="code">delete-blank-lines</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002do"></a>
<a class="index-entry-id" id="index-C_002dx-C_002do"></a>
<a class="index-entry-id" id="index-blank-lines"></a>
<a class="index-entry-id" id="index-open_002dline"></a>
<a class="index-entry-id" id="index-delete_002dblank_002dlines"></a>
<p>We have seen how <kbd class="kbd"><kbd class="key">RET</kbd></kbd> (<code class="code">newline</code>) starts a new line
of text.  However, it may be easier to see what you are doing if you
first make a blank line and then insert the desired text into it.
This is easy to do using the key <kbd class="kbd">C-o</kbd> (<code class="code">open-line</code>), which
inserts a newline after point but leaves point in front of the
newline.  After <kbd class="kbd">C-o</kbd>, type the text for the new line.
</p>
<p>You can make several blank lines by typing <kbd class="kbd">C-o</kbd> several times, or
by giving it a numeric argument specifying how many blank lines to make.
See <a class="xref" href="#Arguments">Numeric Arguments</a>, for how.  If you have a fill prefix, the <kbd class="kbd">C-o</kbd>
command inserts the fill prefix on the new line, if typed at the
beginning of a line.  See <a class="xref" href="Text.xhtml#Fill-Prefix">The Fill Prefix</a>.
</p>
<p>The easy way to get rid of extra blank lines is with the command
<kbd class="kbd">C-x C-o</kbd> (<code class="code">delete-blank-lines</code>).  If point lies within a run
of several blank lines, <kbd class="kbd">C-x C-o</kbd> deletes all but one of them.  If
point is on a single blank line, <kbd class="kbd">C-x C-o</kbd> deletes it.  If point
is on a nonblank line, <kbd class="kbd">C-x C-o</kbd> deletes all following blank
lines, if any exists.
</p>
</div>
<div class="section-level-extent" id="Continuation-Lines">
<h3 class="section" id="Continuation-Lines-1">8.8 Continuation Lines</h3>

<a class="index-entry-id" id="index-continuation-line"></a>
<a class="index-entry-id" id="index-wrapping"></a>
<a class="index-entry-id" id="index-line-wrapping"></a>
<a class="index-entry-id" id="index-fringes_002c-and-continuation-lines"></a>
<a class="index-entry-id" id="index-logical-line"></a>
<a class="index-entry-id" id="index-screen-line"></a>
<a class="index-entry-id" id="index-visual-line"></a>
<p>Sometimes, a line of text in the buffer&#8212;a <em class="dfn">logical line</em>&#8212;is
too long to fit in the window, and Emacs displays it as two or more
<em class="dfn">screen lines</em>, or <em class="dfn">visual lines</em>.  This is called <em class="dfn">line
wrapping</em> or <em class="dfn">continuation</em>, and the long logical line is called a
<em class="dfn">continued line</em>.  On a graphical display, Emacs indicates line
wrapping with small bent arrows in the left and right window fringes.
On a text terminal, Emacs indicates line wrapping by displaying a
&#8216;<samp class="samp">\</samp>&#8217; character at the right margin.
</p>
<p>Most commands that act on lines act on logical lines, not screen
lines.  For instance, <kbd class="kbd">C-k</kbd> kills a logical line.  As described
earlier, <kbd class="kbd">C-n</kbd> (<code class="code">next-line</code>) and <kbd class="kbd">C-p</kbd>
(<code class="code">previous-line</code>) are special exceptions: they move point down
and up, respectively, by one screen line (see <a class="pxref" href="#Moving-Point">Changing the Location of Point</a>).
</p>
<a class="index-entry-id" id="index-line-truncation_002c-and-fringes"></a>
<p>Emacs can optionally <em class="dfn">truncate</em> long logical lines instead of
continuing them.  This means that every logical line occupies a single
screen line; if it is longer than the width of the window, the rest of
the line is not displayed.  On a graphical display, a truncated line
is indicated by a small straight arrow in the right fringe; on a text
terminal, it is indicated by a &#8216;<samp class="samp">$</samp>&#8217; character in the right margin.
See <a class="xref" href="Display.xhtml#Line-Truncation">Line Truncation</a>.
</p>
<p>By default, continued lines are wrapped at the right window edge.
Since the wrapping may occur in the middle of a word, continued lines
can be difficult to read.  The usual solution is to break your lines
before they get too long, by inserting newlines.  If you prefer, you
can make Emacs insert a newline automatically when a line gets too
long, by using Auto Fill mode.  See <a class="xref" href="Text.xhtml#Filling">Filling Text</a>.
</p>
<p>Sometimes, you may need to edit files containing many long logical
lines, and it may not be practical to break them all up by adding
newlines.  In that case, you can use Visual Line mode, which enables
<em class="dfn">word wrapping</em>: instead of wrapping long lines exactly at the
right window edge, Emacs wraps them at the word boundaries (i.e.,
space or tab characters) nearest to the right window edge.  Visual
Line mode also redefines editing commands such as <kbd class="kbd">C-a</kbd>,
<kbd class="kbd">C-n</kbd>, and <kbd class="kbd">C-k</kbd> to operate on screen lines rather than
logical lines.  See <a class="xref" href="Display.xhtml#Visual-Line-Mode">Visual Line Mode</a>.
</p>
</div>
<div class="section-level-extent" id="Position-Info">
<h3 class="section" id="Cursor-Position-Information">8.9 Cursor Position Information</h3>

<p>Here are commands to get information about the size and position of
parts of the buffer, and to count words and lines.
</p>
<dl class="table">
<dt><kbd class="kbd">M-x what-line</kbd></dt>
<dd><p>Display the line number of point.
</p></dd>
<dt><kbd class="kbd">M-x line-number-mode</kbd></dt>
<dt><kbd class="kbd">M-x column-number-mode</kbd></dt>
<dd><p>Toggle automatic display of the current line number or column number.
See <a class="xref" href="Display.xhtml#Optional-Mode-Line">Optional Mode Line Features</a>.  If you want to have a line number
displayed before each line, see <a class="ref" href="Display.xhtml#Display-Custom">Customization of Display</a>.
</p>
</dd>
<dt><kbd class="kbd">M-=</kbd></dt>
<dd><p>Display the number of lines, sentences, words, and characters that are
present in the region (<code class="code">count-words-region</code>).  See <a class="xref" href="Mark.xhtml#Mark">The Mark and the Region</a>, for
information about the region.
</p>
</dd>
<dt><kbd class="kbd">M-x count-words</kbd></dt>
<dd><p>Display the number of lines, sentences, words, and characters that are
present in the buffer.  If the region is active (see <a class="pxref" href="Mark.xhtml#Mark">The Mark and the Region</a>),
display the numbers for the region instead.
</p>
</dd>
<dt><kbd class="kbd">C-x =</kbd></dt>
<dd><p>Display the character code of character after point, character position of
point, and column of point (<code class="code">what-cursor-position</code>).
</p></dd>
<dt><kbd class="kbd">M-x hl-line-mode</kbd></dt>
<dd><p>Enable or disable highlighting of the current line.  See <a class="xref" href="Display.xhtml#Cursor-Display">Displaying the Cursor</a>.
</p></dd>
<dt><kbd class="kbd">M-x size-indication-mode</kbd></dt>
<dd><p>Toggle automatic display of the size of the buffer.
See <a class="xref" href="Display.xhtml#Optional-Mode-Line">Optional Mode Line Features</a>.
</p></dd>
</dl>

<a class="index-entry-id" id="index-what_002dline"></a>
<a class="index-entry-id" id="index-line-number-commands"></a>
<a class="index-entry-id" id="index-location-of-point"></a>
<a class="index-entry-id" id="index-cursor-location"></a>
<a class="index-entry-id" id="index-point-location"></a>
<p><kbd class="kbd">M-x what-line</kbd> displays the current line number in the echo
area.  This command is usually redundant because the current line
number is shown in the mode line (see <a class="pxref" href="Screen.xhtml#Mode-Line">The Mode Line</a>).  However, if you
narrow the buffer, the mode line shows the line number relative to
the accessible portion (see <a class="pxref" href="Display.xhtml#Narrowing">Narrowing</a>).  By contrast,
<code class="code">what-line</code> displays both the line number relative to the
narrowed region and the line number relative to the whole buffer.
</p>
<a class="index-entry-id" id="index-M_002d_003d"></a>
<a class="index-entry-id" id="index-count_002dwords_002dregion"></a>
<p><kbd class="kbd">M-=</kbd> (<code class="code">count-words-region</code>) displays a message reporting
the number of lines, sentences, words, and characters in the region
(see <a class="pxref" href="Mark.xhtml#Mark">The Mark and the Region</a>, for an explanation of the region).  With a prefix
argument, <kbd class="kbd">C-u M-=</kbd>, the command displays a count for the entire
buffer.
</p>
<a class="index-entry-id" id="index-count_002dwords"></a>
<p>The command <kbd class="kbd">M-x count-words</kbd> does the same job, but with a
different calling convention.  It displays a count for the region if
the region is active, and for the buffer otherwise.
</p>
<a class="index-entry-id" id="index-C_002dx-_003d"></a>
<a class="index-entry-id" id="index-what_002dcursor_002dposition"></a>
<p>The command <kbd class="kbd">C-x =</kbd> (<code class="code">what-cursor-position</code>) shows
information about the current cursor position and the buffer contents
at that position.  It displays a line in the echo area that looks like
this:
</p>
<div class="example smallexample">
<pre class="example-preformatted">Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53
</pre></div>

<p>After &#8216;<samp class="samp">Char:</samp>&#8217;, this shows the character in the buffer at point.
The text inside the parenthesis shows the corresponding decimal, octal
and hex character codes; for more information about how <kbd class="kbd">C-x =</kbd>
displays character information, see <a class="ref" href="International.xhtml#International-Chars">Introduction to International Character Sets</a>.  After
&#8216;<samp class="samp">point=</samp>&#8217; is the position of point as a character count (the first
character in the buffer is position 1, the second character is
position 2, and so on).  The number after that is the total number of
characters in the buffer, and the number in parenthesis expresses the
position as a percentage of the total.  After &#8216;<samp class="samp">column=</samp>&#8217; is the
horizontal position of point, in columns counting from the left edge
of the window.
</p>
<a class="index-entry-id" id="index-what_002dcursor_002dshow_002dnames"></a>
<p>If the user option <code class="code">what-cursor-show-names</code> is non-<code class="code">nil</code>,
the name of the character, as defined by the Unicode Character
Database, is shown as well.  The part in parentheses would then become:
</p>
<div class="example smallexample">
<pre class="example-preformatted">(99, #o143, #x63, LATIN SMALL LETTER C)
</pre></div>

<p>If the buffer has been narrowed, making some of the text at the
beginning and the end temporarily inaccessible, <kbd class="kbd">C-x =</kbd> displays
additional text describing the currently accessible range.  For
example, it might display this:
</p>
<div class="example smallexample">
<pre class="example-preformatted">Char: C (67, #o103, #x43) point=252 of 889 (28%) &lt;231-599&gt; column=0
</pre></div>

<p>where the two extra numbers give the smallest and largest character
position that point is allowed to assume.  The characters between
those two positions are the accessible ones.  See <a class="xref" href="Display.xhtml#Narrowing">Narrowing</a>.
</p>
<p>Related, but different feature is <code class="code">display-line-numbers-mode</code>
(see <a class="pxref" href="Display.xhtml#Display-Custom">Customization of Display</a>).
</p>
</div>
<div class="section-level-extent" id="Arguments">
<h3 class="section" id="Numeric-Arguments">8.10 Numeric Arguments</h3>
<a class="index-entry-id" id="index-numeric-arguments"></a>
<a class="index-entry-id" id="index-prefix-arguments"></a>
<a class="index-entry-id" id="index-arguments-to-commands"></a>

<p>In the terminology of mathematics and computing, <em class="dfn">argument</em>
means &#8220;data provided to a function or operation&#8221;.  You can give any
Emacs command a <em class="dfn">numeric argument</em> (also called a <em class="dfn">prefix
argument</em>).  Some commands interpret the argument as a repetition
count.  For example, giving <kbd class="kbd">C-f</kbd> an argument of ten causes it to
move point forward by ten characters instead of one.  With these
commands, no argument is equivalent to an argument of one, and
negative arguments cause them to move or act in the opposite
direction.
</p>
<a class="index-entry-id" id="index-M_002d1"></a>
<a class="index-entry-id" id="index-M_002d_002d"></a>
<a class="index-entry-id" id="index-digit_002dargument"></a>
<a class="index-entry-id" id="index-negative_002dargument"></a>
<p>The easiest way to specify a numeric argument is to type a digit
and/or a minus sign while holding down the <kbd class="key">Meta</kbd> key.  For
example,
</p>
<div class="example">
<pre class="example-preformatted">M-5 C-n
</pre></div>

<p>moves down five lines.  The keys <kbd class="kbd">M-1</kbd>, <kbd class="kbd">M-2</kbd>, and so on, as
well as <kbd class="kbd">M--</kbd>, are bound to commands (<code class="code">digit-argument</code> and
<code class="code">negative-argument</code>) that set up an argument for the next
command.  <kbd class="kbd">M--</kbd> without digits normally means &#8722;1.
</p>
<p>If you enter more than one digit, you need not hold down the
<kbd class="key">Meta</kbd> key for the second and subsequent digits.  Thus, to move
down fifty lines, type
</p>
<div class="example">
<pre class="example-preformatted">M-5 0 C-n
</pre></div>

<p>Note that this <em class="emph">does not</em> insert five copies of &#8216;<samp class="samp">0</samp>&#8217; and move
down one line, as you might expect&#8212;the &#8216;<samp class="samp">0</samp>&#8217; is treated as part
of the prefix argument.
</p>
<p>(What if you do want to insert five copies of &#8216;<samp class="samp">0</samp>&#8217;?  Type <kbd class="kbd">M-5
C-u 0</kbd>.  Here, <kbd class="kbd">C-u</kbd> terminates the prefix argument, so that
the next keystroke begins the command that you want to execute.  Note
that this meaning of <kbd class="kbd">C-u</kbd> applies only to this case.  For the
usual role of <kbd class="kbd">C-u</kbd>, see below.)
</p>
<a class="index-entry-id" id="index-C_002du"></a>
<a class="index-entry-id" id="index-universal_002dargument"></a>
<p>Instead of typing <kbd class="kbd">M-1</kbd>, <kbd class="kbd">M-2</kbd>, and so on, another way to
specify a numeric argument is to type <kbd class="kbd">C-u</kbd>
(<code class="code">universal-argument</code>) followed by some digits, or (for a
negative argument) a minus sign followed by digits.  A minus sign
without digits normally means &#8722;1.
</p>
<p><kbd class="kbd">C-u</kbd> alone has the special meaning of &#8220;four times&#8221;: it
multiplies the argument for the next command by four.  <kbd class="kbd">C-u C-u</kbd>
multiplies it by sixteen.  Thus, <kbd class="kbd">C-u C-u C-f</kbd> moves forward
sixteen characters.  Other useful combinations are <kbd class="kbd">C-u C-n</kbd>,
<kbd class="kbd">C-u C-u C-n</kbd> (move down a good fraction of a screen), <kbd class="kbd">C-u
C-u C-o</kbd> (make sixteen blank lines), and <kbd class="kbd">C-u C-k</kbd> (kill four
lines).
</p>
<p>You can use a numeric argument before a self-inserting character to
insert multiple copies of it.  This is straightforward when the
character is not a digit; for example, <kbd class="kbd">C-u&#160;6&#160;4&#160;a</kbd><!-- /@w --> inserts 64
copies of the character &#8216;<samp class="samp">a</samp>&#8217;.  But this does not work for
inserting digits; <kbd class="kbd">C-u&#160;6&#160;4&#160;1</kbd><!-- /@w --> specifies an argument of 641.
You can separate the argument from the digit to insert with another
<kbd class="kbd">C-u</kbd>; for example, <kbd class="kbd">C-u&#160;6&#160;4&#160;C-u&#160;1</kbd><!-- /@w --> does insert 64 copies
of the character &#8216;<samp class="samp">1</samp>&#8217;.
</p>
<p>Some commands care whether there is an argument, but ignore its
value.  For example, the command <kbd class="kbd">M-q</kbd> (<code class="code">fill-paragraph</code>)
fills text; with an argument, it justifies the text as well.
(See <a class="xref" href="Text.xhtml#Filling">Filling Text</a>, for more information on <kbd class="kbd">M-q</kbd>.)  For these
commands, it is enough to specify the argument with a single
<kbd class="kbd">C-u</kbd>.
</p>
<p>Some commands use the value of the argument as a repeat count but
do something special when there is no argument.  For example, the
command <kbd class="kbd">C-k</kbd> (<code class="code">kill-line</code>) with argument <var class="var">n</var> kills
<var class="var">n</var> lines, including their terminating newlines.  But <kbd class="kbd">C-k</kbd>
with no argument is special: it kills the text up to the next newline,
or, if point is right at the end of the line, it kills the newline
itself.  Thus, two <kbd class="kbd">C-k</kbd> commands with no arguments can kill a
nonblank line, just like <kbd class="kbd">C-k</kbd> with an argument of one.
(See <a class="xref" href="Killing.xhtml#Killing">Killing and Moving Text</a>, for more information on <kbd class="kbd">C-k</kbd>.)
</p>
<p>A few commands treat a plain <kbd class="kbd">C-u</kbd> differently from an ordinary
argument.  A few others may treat an argument of just a minus sign
differently from an argument of &#8722;1.  These unusual cases are
described when they come up; they exist to make an individual command
more convenient, and they are documented in that command&#8217;s
documentation string.
</p>
<p>We use the term <em class="dfn">prefix argument</em> to emphasize that you type
such arguments <em class="emph">before</em> the command, and to distinguish them from
minibuffer arguments (see <a class="pxref" href="Minibuffer.xhtml#Minibuffer">The Minibuffer</a>), which are entered
<em class="emph">after</em> invoking the command.
</p>
<p>On graphical displays, <kbd class="kbd">C-0</kbd>, <kbd class="kbd">C-1</kbd>, etc.&#160;act the same as
<kbd class="kbd">M-0</kbd>, <kbd class="kbd">M-1</kbd>, etc.
</p>
</div>
<div class="section-level-extent" id="Repeating">
<h3 class="section" id="Repeating-a-Command">8.11 Repeating a Command</h3>
<a class="index-entry-id" id="index-repeating-a-command"></a>

<p>Many simple commands, such as those invoked with a single key or
with <kbd class="kbd">M-x&#160;<var class="var">command-name</var>&#160;<kbd class="key">RET</kbd></kbd><!-- /@w -->, can be repeated by
invoking them with a numeric argument that serves as a repeat count
(see <a class="pxref" href="#Arguments">Numeric Arguments</a>).  However, if the command you want to repeat
prompts for input, or uses a numeric argument in another way, that
method won&#8217;t work.
</p>
<a class="index-entry-id" id="index-C_002dx-z"></a>
<a class="index-entry-id" id="index-repeat"></a>
<p>The command <kbd class="kbd">C-x z</kbd> (<code class="code">repeat</code>) provides another way to repeat
an Emacs command many times.  This command repeats the previous Emacs
command, whatever that was.  Repeating a command uses the same arguments
that were used before; it does not read new arguments each time.
</p>
<p>To repeat the command more than once, type additional <kbd class="kbd">z</kbd>&#8217;s: each
<kbd class="kbd">z</kbd> repeats the command one more time.  Repetition ends when you
type a character other than <kbd class="kbd">z</kbd> or press a mouse button.
</p>
<p>For example, suppose you type <kbd class="kbd">C-u 2 0 C-d</kbd> to delete 20
characters.  You can repeat that command (including its argument) three
additional times, to delete a total of 80 characters, by typing <kbd class="kbd">C-x
z z z</kbd>.  The first <kbd class="kbd">C-x z</kbd> repeats the command once, and each
subsequent <kbd class="kbd">z</kbd> repeats it once again.
</p>
<a class="index-entry-id" id="index-repeat_002dmode"></a>
<a class="index-entry-id" id="index-describe_002drepeat_002dmaps"></a>
<a class="index-entry-id" id="index-repeat_002dexit_002dkey"></a>
<a class="index-entry-id" id="index-repeat_002dexit_002dtimeout"></a>
<p>You can also activate <code class="code">repeat-mode</code> which allows repeating
commands bound to sequences of two or more keys by typing a single
character.  For example, after typing <kbd class="kbd">C-x&#160;u</kbd><!-- /@w --> (<code class="code">undo</code>,
see <a class="pxref" href="Fixit.xhtml#Undo">Undo</a>) to undo the most recent edits, you can undo many more
edits by typing <kbd class="kbd">u&#160;u&#160;u&#8230;</kbd><!-- /@w -->.  Similarly, type <kbd class="kbd">C-x&#160;o&#160;o&#160;o&#8230;</kbd><!-- /@w --> instead of <kbd class="kbd">C-x&#160;o&#160;C-x&#160;o&#160;C-x&#160;o&#8230;</kbd><!-- /@w --> to switch
to the window several windows away.  This works by entering a
transient repeating mode after you type the full key sequence that
invokes the command; the single-key shortcuts are shown in the echo
area.
</p>
<p>Only some commands support repetition in <code class="code">repeat-mode</code>; type
<kbd class="kbd">M-x&#160;describe-repeat-maps&#160;<kbd class="key">RET</kbd></kbd><!-- /@w --> to see which ones.
</p>
<p>The single-character shortcuts enabled by the transient repeating mode
do not need to be identical: for example, after typing <kbd class="kbd">C-x&#160;{</kbd><!-- /@w -->, either <kbd class="kbd">{</kbd> or <kbd class="kbd">}</kbd> or <kbd class="kbd">^</kbd> or <kbd class="kbd">v</kbd>, or any series
that mixes these characters in any order, will resize the selected
window in respective ways.  Similarly, after <kbd class="kbd">M-g&#160;n</kbd><!-- /@w --> or
<kbd class="kbd">M-g p</kbd>, typing any sequence of <kbd class="kbd">n</kbd> and/or <kbd class="kbd">p</kbd> in any mix
will repeat <code class="code">next-error</code> and <code class="code">previous-error</code> to navigate in
a <samp class="file">*compilation*</samp> or <samp class="file">*grep*</samp> buffer (see <a class="pxref" href="Building.xhtml#Compilation-Mode">Compilation Mode</a>).
</p>
<p>Typing any key other than those defined to repeat the previous command
exits the transient repeating mode, and then the key you typed is
executed normally.  You can also define a key which will exit the
transient repeating mode <em class="emph">without</em> executing the key which caused
the exit.  To this end, customize the user option
<code class="code">repeat-exit-key</code> to name a key; one natural value is <kbd class="key">RET</kbd>.
Finally, it&#8217;s possible to break the repetition chain automatically
after some amount of idle time: customize the user option
<code class="code">repeat-exit-timeout</code> to specify the idle time in seconds after
which this transient repetition mode will be turned off automatically.
</p></div>
</div>



</body>
</html>
