<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>23 International Character Set Support (GNU Emacs Manual)</title>

<meta name="description" content="23 International Character Set Support (GNU Emacs Manual)"/>
<meta name="keywords" content="23 International Character Set Support (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Modes.xhtml#Modes" rel="next" title="24 Major and Minor Modes"/>
<link href="Frames.xhtml#Frames" rel="prev" title="22 Frames and Graphical Displays"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
span.r {font-family: initial; font-weight: normal; font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="International">

<h2 class="chapter" id="International-Character-Set-Support">23 International Character Set Support</h2>
<a class="index-entry-id" id="index-international-scripts"></a>
<a class="index-entry-id" id="index-multibyte-characters"></a>
<a class="index-entry-id" id="index-encoding-of-characters"></a>

<a class="index-entry-id" id="index-Han"></a>
<a class="index-entry-id" id="index-Hindi"></a>
<a class="index-entry-id" id="index-Hangul"></a>
<p>Emacs supports a wide variety of international character sets,
including European and Vietnamese variants of the Latin alphabet, as
well as Arabic scripts, Brahmic scripts (for languages such as
Bengali, Hindi, and Thai), Cyrillic, Ethiopic, Georgian, Greek, Han
(for Chinese and Japanese), Hangul (for Korean), Hebrew and IPA.
Emacs also supports various encodings of these characters that are used by
other internationalized software, such as word processors and mailers.
</p>
<p>Emacs allows editing text with international characters by supporting
all the related activities:
</p>
<ul class="itemize mark-bullet">
<li>You can visit files with non-<abbr class="acronym">ASCII</abbr> characters, save non-<abbr class="acronym">ASCII</abbr> text, and
pass non-<abbr class="acronym">ASCII</abbr> text between Emacs and programs it invokes (such as
compilers, spell-checkers, and mailers).  Setting your language
environment (see <a class="pxref" href="#Language-Environments">Language Environments</a>) takes care of setting up the
coding systems and other options for a specific language or culture.
Alternatively, you can specify how Emacs should encode or decode text
for each command; see <a class="ref" href="#Text-Coding">Specifying a Coding System for File Text</a>.

</li><li>You can display non-<abbr class="acronym">ASCII</abbr> characters encoded by the various
scripts.  This works by using appropriate fonts on graphics displays
(see <a class="pxref" href="#Defining-Fontsets">Defining Fontsets</a>), and by sending special codes to text
displays (see <a class="pxref" href="#Terminal-Coding">Coding Systems for Terminal I/O</a>).  If some characters are displayed
incorrectly, refer to <a class="ref" href="#Undisplayable-Characters">Undisplayable Characters</a>, which describes
possible problems and explains how to solve them.

</li><li>Characters from scripts whose natural ordering of text is from right
to left are reordered for display (see <a class="pxref" href="#Bidirectional-Editing">Bidirectional Editing</a>).
These scripts include Arabic, Hebrew, Syriac, Thaana, and a few
others.

</li><li>You can insert non-<abbr class="acronym">ASCII</abbr> characters or search for them.  To do that,
you can specify an Emacs input method (see <a class="pxref" href="#Select-Input-Method">Selecting an Input Method</a>) suitable
for your language, or use the default input method set up when you choose
your language environment.  If
your keyboard can produce non-<abbr class="acronym">ASCII</abbr> characters, you can select an
appropriate keyboard coding system (see <a class="pxref" href="#Terminal-Coding">Coding Systems for Terminal I/O</a>), and Emacs
will accept those characters.  On graphical displays, modern systems
typically provide their native input methods, and Latin-1 characters
can also be input by using the <kbd class="kbd">C-x 8</kbd> prefix, see <a class="ref" href="#Unibyte-Mode">Unibyte Editing Mode</a>.

<p>With the X Window System, your locale should be set to an appropriate
value to make sure Emacs interprets keyboard input correctly; see
<a class="ref" href="#Language-Environments">locales</a>, and <a class="ref" href="#X-Coding">Coding Systems for X Keyboard Input</a>.
</p></li></ul>

<p>The rest of this chapter describes these issues in detail.
</p>

<div class="section-level-extent" id="International-Chars">
<h3 class="section" id="Introduction-to-International-Character-Sets">23.1 Introduction to International Character Sets</h3>

<p>The users of international character sets and scripts have
established many more-or-less standard coding systems for storing
files.  These coding systems are typically <em class="dfn">multibyte</em>, meaning
that sequences of two or more bytes are used to represent individual
non-<abbr class="acronym">ASCII</abbr> characters.
</p>
<a class="index-entry-id" id="index-Unicode"></a>
<p>Internally, Emacs uses its own multibyte character encoding, which
is a superset of the <em class="dfn">Unicode</em> standard.  This internal encoding
allows characters from almost every known script to be intermixed in a
single buffer or string.  Emacs translates between the multibyte
character encoding and various other coding systems when reading and
writing files, and when exchanging data with subprocesses.
</p>
<a class="index-entry-id" id="index-C_002dh-h"></a>
<a class="index-entry-id" id="index-view_002dhello_002dfile"></a>
<a class="index-entry-id" id="index-undisplayable-characters"></a>
<a class="index-entry-id" id="index-_003f-in-display"></a>
<p>The command <kbd class="kbd">C-h h</kbd> (<code class="code">view-hello-file</code>) displays the file
<samp class="file">etc/HELLO</samp>, which illustrates various scripts by showing
how to say &#8220;hello&#8221; in many languages.  If some characters can&#8217;t be
displayed on your terminal, they appear as &#8216;<samp class="samp">?</samp>&#8217; or as hollow boxes
(see <a class="pxref" href="#Undisplayable-Characters">Undisplayable Characters</a>).
</p>
<p>Keyboards, even in the countries where these character sets are
used, generally don&#8217;t have keys for all the characters in them.  You
can insert characters that your keyboard does not support, using
<kbd class="kbd">C-x 8 <kbd class="key">RET</kbd></kbd> (<code class="code">insert-char</code>).  See <a class="xref" href="Basic.xhtml#Inserting-Text">Inserting Text</a>.
Shorthands are available for some common characters; for example, you
can insert a left single quotation mark <code class="t">‘</code> by typing <kbd class="kbd">C-x 8
[</kbd>, or in Electric Quote mode, usually by simply typing <kbd class="kbd">`</kbd>.
See <a class="xref" href="Text.xhtml#Quotation-Marks">Quotation Marks</a>.  Emacs also supports
various <em class="dfn">input methods</em>, typically one for each script or
language, which make it easier to type characters in the script.
See <a class="xref" href="#Input-Methods">Input Methods</a>.
</p>
<a class="index-entry-id" id="index-C_002dx-RET"></a>
<p>The prefix key <kbd class="kbd">C-x <kbd class="key">RET</kbd></kbd> is used for commands that pertain
to multibyte characters, coding systems, and input methods.
</p>
<a class="index-entry-id" id="index-C_002dx-_003d_002c-and-international-characters"></a>
<a class="index-entry-id" id="index-what_002dcursor_002dposition_002c-and-international-characters"></a>
<p>The command <kbd class="kbd">C-x =</kbd> (<code class="code">what-cursor-position</code>) shows
information about the character at point.  In addition to the
character position, which was described in <a class="ref" href="Basic.xhtml#Position-Info">Cursor Position Information</a>, this
command displays how the character is encoded.  For instance, it
displays the following line in the echo area for the character
&#8216;<samp class="samp">c</samp>&#8217;:
</p>
<div class="example smallexample">
<pre class="example-preformatted">Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53
</pre></div>

<p>The four values after &#8216;<samp class="samp">Char:</samp>&#8217; describe the character that
follows point, first by showing it and then by giving its character
code in decimal, octal and hex.  For a non-<abbr class="acronym">ASCII</abbr> multibyte
character, these are followed by &#8216;<samp class="samp">file</samp>&#8217; and the character&#8217;s
representation, in hex, in the buffer&#8217;s coding system, if that coding
system encodes the character safely and with a single byte
(see <a class="pxref" href="#Coding-Systems">Coding Systems</a>).  If the character&#8217;s encoding is longer than
one byte, Emacs shows &#8216;<samp class="samp">file ...</samp>&#8217;.
</p>
<a class="index-entry-id" id="index-eight_002dbit-character-set"></a>
<a class="index-entry-id" id="index-raw-bytes"></a>
<p>On rare occasions, Emacs encounters <em class="dfn">raw bytes</em>: single bytes
whose values are in the range 128 (0200 octal) through 255 (0377
octal), which Emacs cannot interpret as part of a known encoding of
some non-ASCII character.  Such raw bytes are treated as if they
belonged to a special character set <code class="code">eight-bit</code>; Emacs displays
them as escaped octal codes (this can be customized; see <a class="pxref" href="Display.xhtml#Display-Custom">Customization of Display</a>).  In this case, <kbd class="kbd">C-x =</kbd> shows &#8216;<samp class="samp">raw-byte</samp>&#8217; instead of
&#8216;<samp class="samp">file</samp>&#8217;.  In addition, <kbd class="kbd">C-x =</kbd> shows the character codes of
raw bytes as if they were in the range <code class="code">#x3FFF80..#x3FFFFF</code>,
which is where Emacs maps them to distinguish them from Unicode
characters in the range <code class="code">#x0080..#x00FF</code>.
</p>
<a class="index-entry-id" id="index-character-set-of-character-at-point"></a>
<a class="index-entry-id" id="index-font-of-character-at-point"></a>
<a class="index-entry-id" id="index-text-properties-at-point"></a>
<a class="index-entry-id" id="index-face-at-point"></a>
<a class="index-entry-id" id="index-describe_002dchar"></a>
<p>With a prefix argument (<kbd class="kbd">C-u C-x =</kbd>), this command additionally
calls the command <code class="code">describe-char</code>, which displays a detailed
description of the character:
</p>
<ul class="itemize mark-bullet">
<li>The character set name, and the codes that identify the character
within that character set; <abbr class="acronym">ASCII</abbr> characters are identified
as belonging to the <code class="code">ascii</code> character set.

</li><li>The character&#8217;s script, syntax and categories.

</li><li>What keys to type to input the character in the current input method
(if it supports the character).

</li><li>The character&#8217;s encodings, both internally in the buffer, and externally
if you were to save the buffer to a file.

</li><li>If you are running Emacs on a graphical display, the font name and
glyph code for the character.  If you are running Emacs on a text
terminal, the code(s) sent to the terminal.

</li><li>If the character was composed on display with any following characters
to form one or more grapheme clusters, the composition information:
the font glyphs if the frame is on a graphical display, and the
characters that were composed.

</li><li>The character&#8217;s text properties (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html#Text-Properties">Text Properties</a> in <cite class="cite">the Emacs Lisp Reference Manual</cite>), including any non-default
faces used to display the character, and any overlays containing it
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlays.html#Overlays">Overlays</a> in <cite class="cite">the same manual</cite>).
</li></ul>

<p>Here&#8217;s an example, with some lines folded to fit into this manual:
</p>
<div class="example smallexample">
<pre class="example-preformatted">             position: 1 of 1 (0%), column: 0
            character: ê (displayed as ê) (codepoint 234, #o352, #xea)
    preferred charset: unicode (Unicode (ISO10646))
code point in charset: 0xEA
               script: latin
               syntax: w        which means: word
             category: .:Base, L:Left-to-right (strong), c:Chinese,
                       j:Japanese, l:Latin, v:Viet
             to input: type &quot;C-x 8 RET ea&quot; or
                       &quot;C-x 8 RET LATIN SMALL LETTER E WITH CIRCUMFLEX&quot;
          buffer code: #xC3 #xAA
            file code: #xC3 #xAA (encoded by coding system utf-8-unix)
              display: by this font (glyph code)
    xft:-PfEd-DejaVu Sans Mono-normal-normal-
        normal-*-15-*-*-*-m-0-iso10646-1 (#xAC)

Character code properties: customize what to show
  name: LATIN SMALL LETTER E WITH CIRCUMFLEX
  old-name: LATIN SMALL LETTER E CIRCUMFLEX
  general-category: Ll (Letter, Lowercase)
  decomposition: (101 770) ('e' '^')
</pre></div>

</div>
<div class="section-level-extent" id="Language-Environments">
<h3 class="section" id="Language-Environments-1">23.2 Language Environments</h3>
<a class="index-entry-id" id="index-language-environments"></a>

<p>All supported character sets are supported in Emacs buffers whenever
multibyte characters are enabled; there is no need to select a
particular language in order to display its characters.
However, it is important to select a <em class="dfn">language
environment</em> in order to set various defaults.  Roughly speaking, the
language environment represents a choice of preferred script rather
than a choice of language.
</p>
<p>The language environment controls which coding systems to recognize
when reading text (see <a class="pxref" href="#Recognize-Coding">Recognizing Coding Systems</a>).  This applies to files,
incoming mail, and any other text you read into Emacs.  It may also
specify the default coding system to use when you create a file.  Each
language environment also specifies a default input method.
</p>
<a class="index-entry-id" id="index-set_002dlanguage_002denvironment"></a>
<a class="index-entry-id" id="index-current_002dlanguage_002denvironment"></a>
<p>To select a language environment, customize
<code class="code">current-language-environment</code> or use the command <kbd class="kbd">M-x
set-language-environment</kbd>.  It makes no difference which buffer is
current when you use this command, because the effects apply globally
to the Emacs session.  See the variable <code class="code">language-info-alist</code> for
the list of supported language environments, and use the command
<kbd class="kbd">C-h L <var class="var">lang-env</var> <kbd class="key">RET</kbd></kbd> (<code class="code">describe-language-environment</code>)
for more information about the language environment <var class="var">lang-env</var>.
Supported language environments include:
</p>
<blockquote class="quotation">
<a class="index-entry-id" id="index-ASCII-_0028language-environment_0029"></a>
<a class="index-entry-id" id="index-Arabic"></a>
<p>ASCII, Arabic,
<a class="index-entry-id" id="index-Belarusian"></a>
<a class="index-entry-id" id="index-Bengali"></a>
Belarusian, Bengali,
<a class="index-entry-id" id="index-Brazilian-Portuguese"></a>
<a class="index-entry-id" id="index-Bulgarian"></a>
Brazilian Portuguese, Bulgarian,
<a class="index-entry-id" id="index-Burmese"></a>
<a class="index-entry-id" id="index-Cham"></a>
Burmese, Cham,
<a class="index-entry-id" id="index-Chinese"></a>
Chinese-BIG5, Chinese-CNS, Chinese-EUC-TW, Chinese-GB,
Chinese-GB18030, Chinese-GBK,
<a class="index-entry-id" id="index-Croatian"></a>
<a class="index-entry-id" id="index-Cyrillic"></a>
Croatian, Cyrillic-ALT, Cyrillic-ISO, Cyrillic-KOI8,
<a class="index-entry-id" id="index-Czech"></a>
<a class="index-entry-id" id="index-Devanagari"></a>
Czech, Devanagari,
<a class="index-entry-id" id="index-Dutch"></a>
<a class="index-entry-id" id="index-English"></a>
Dutch, English,
<a class="index-entry-id" id="index-Esperanto"></a>
<a class="index-entry-id" id="index-Ethiopic"></a>
Esperanto, Ethiopic,
<a class="index-entry-id" id="index-French"></a>
<a class="index-entry-id" id="index-Georgian"></a>
French, Georgian,
<a class="index-entry-id" id="index-German"></a>
<a class="index-entry-id" id="index-Greek"></a>
<a class="index-entry-id" id="index-Gujarati"></a>
German, Greek, Gujarati,
<a class="index-entry-id" id="index-Hebrew"></a>
<a class="index-entry-id" id="index-IPA"></a>
Hebrew, IPA,
<a class="index-entry-id" id="index-Italian"></a>
Italian,
<a class="index-entry-id" id="index-Japanese"></a>
<a class="index-entry-id" id="index-Kannada"></a>
Japanese, Kannada,
<a class="index-entry-id" id="index-Khmer"></a>
<a class="index-entry-id" id="index-Korean"></a>
<a class="index-entry-id" id="index-Lao"></a>
Khmer, Korean, Lao,
<a class="index-entry-id" id="index-Latin"></a>
Latin-1, Latin-2, Latin-3, Latin-4, Latin-5, Latin-6, Latin-7,
Latin-8, Latin-9,
<a class="index-entry-id" id="index-Latvian"></a>
<a class="index-entry-id" id="index-Lithuanian"></a>
Latvian, Lithuanian,
<a class="index-entry-id" id="index-Malayalam"></a>
<a class="index-entry-id" id="index-Oriya"></a>
Malayalam, Oriya,
<a class="index-entry-id" id="index-Persian"></a>
<a class="index-entry-id" id="index-Polish"></a>
Persian, Polish,
<a class="index-entry-id" id="index-Punjabi"></a>
<a class="index-entry-id" id="index-Romanian"></a>
Punjabi, Romanian,
<a class="index-entry-id" id="index-Russian"></a>
<a class="index-entry-id" id="index-Sinhala"></a>
Russian, Sinhala,
<a class="index-entry-id" id="index-Slovak"></a>
<a class="index-entry-id" id="index-Slovenian"></a>
<a class="index-entry-id" id="index-Spanish"></a>
Slovak, Slovenian, Spanish,
<a class="index-entry-id" id="index-Swedish"></a>
<a class="index-entry-id" id="index-TaiViet"></a>
Swedish, TaiViet,
<a class="index-entry-id" id="index-Tajik"></a>
<a class="index-entry-id" id="index-Tamil"></a>
Tajik, Tamil,
<a class="index-entry-id" id="index-Telugu"></a>
<a class="index-entry-id" id="index-Thai"></a>
Telugu, Thai,
<a class="index-entry-id" id="index-Tibetan"></a>
<a class="index-entry-id" id="index-Turkish"></a>
Tibetan, Turkish,
<a class="index-entry-id" id="index-UTF_002d8"></a>
<a class="index-entry-id" id="index-Ukrainian"></a>
UTF-8, Ukrainian,
<a class="index-entry-id" id="index-Vietnamese"></a>
<a class="index-entry-id" id="index-Welsh"></a>
Vietnamese, Welsh,
<a class="index-entry-id" id="index-Windows_002d1255"></a>
and Windows-1255.
</p></blockquote>

<p>To display the script(s) used by your language environment on a
graphical display, you need to have suitable fonts.
See <a class="xref" href="#Fontsets">Fontsets</a>, for more details about setting up your fonts.
</p>
<a class="index-entry-id" id="index-set_002dlocale_002denvironment"></a>
<a class="index-entry-id" id="index-locale_002dlanguage_002dnames"></a>
<a class="index-entry-id" id="index-locale_002dcharset_002dlanguage_002dnames"></a>
<a class="index-entry-id" id="index-locales"></a>
<p>Some operating systems let you specify the character-set locale you
are using by setting the locale environment variables <code class="env">LC_ALL</code>,
<code class="env">LC_CTYPE</code>, or <code class="env">LANG</code>.  (If more than one of these is
set, the first one that is nonempty specifies your locale for this
purpose.)  During startup, Emacs looks up your character-set locale&#8217;s
name in the system locale alias table, matches its canonical name
against entries in the value of the variables
<code class="code">locale-charset-language-names</code> and <code class="code">locale-language-names</code>
(the former overrides the latter),
and selects the corresponding language environment if a match is found.
It also adjusts the display
table and terminal coding system, the locale coding system, the
preferred coding system as needed for the locale, and&#8212;last but not
least&#8212;the way Emacs decodes non-<abbr class="acronym">ASCII</abbr> characters sent by your keyboard.
</p>
<p>If you modify the <code class="env">LC_ALL</code>, <code class="env">LC_CTYPE</code>, or <code class="env">LANG</code>
environment variables while running Emacs (by using <kbd class="kbd">M-x setenv</kbd>),
you may want to invoke the <code class="code">set-locale-environment</code>
command afterwards to readjust the language environment from the new
locale.
</p>
<a class="index-entry-id" id="index-locale_002dpreferred_002dcoding_002dsystems"></a>
<p>The <code class="code">set-locale-environment</code> function normally uses the preferred
coding system established by the language environment to decode system
messages.  But if your locale matches an entry in the variable
<code class="code">locale-preferred-coding-systems</code>, Emacs uses the corresponding
coding system instead.  For example, if the locale &#8216;<samp class="samp">ja_JP.PCK</samp>&#8217;
matches <code class="code">japanese-shift-jis</code> in
<code class="code">locale-preferred-coding-systems</code>, Emacs uses that encoding even
though it might normally use <code class="code">utf-8</code>.
</p>
<p>You can override the language environment chosen at startup with
explicit use of the command <code class="code">set-language-environment</code>, or with
customization of <code class="code">current-language-environment</code> in your init
file.
</p>
<a class="index-entry-id" id="index-C_002dh-L"></a>
<a class="index-entry-id" id="index-describe_002dlanguage_002denvironment"></a>
<p>To display information about the effects of a certain language
environment <var class="var">lang-env</var>, use the command <kbd class="kbd">C-h L <var class="var">lang-env</var>
<kbd class="key">RET</kbd></kbd> (<code class="code">describe-language-environment</code>).  This tells you
which languages this language environment is useful for, and lists the
character sets, coding systems, and input methods that go with it.  It
also shows some sample text to illustrate scripts used in this
language environment.  If you give an empty input for <var class="var">lang-env</var>,
this command describes the chosen language environment.
</p>
<a class="index-entry-id" id="index-set_002dlanguage_002denvironment_002dhook"></a>
<p>You can customize any language environment with the normal hook
<code class="code">set-language-environment-hook</code>.  The command
<code class="code">set-language-environment</code> runs that hook after setting up the new
language environment.  The hook functions can test for a specific
language environment by checking the variable
<code class="code">current-language-environment</code>.  This hook is where you should
put non-default settings for specific language environments, such as
coding systems for keyboard input and terminal output, the default
input method, etc.
</p>
<a class="index-entry-id" id="index-exit_002dlanguage_002denvironment_002dhook"></a>
<p>Before it starts to set up the new language environment,
<code class="code">set-language-environment</code> first runs the hook
<code class="code">exit-language-environment-hook</code>.  This hook is useful for undoing
customizations that were made with <code class="code">set-language-environment-hook</code>.
For instance, if you set up a special key binding in a specific language
environment using <code class="code">set-language-environment-hook</code>, you should set
up <code class="code">exit-language-environment-hook</code> to restore the normal binding
for that key.
</p>
</div>
<div class="section-level-extent" id="Input-Methods">
<h3 class="section" id="Input-Methods-1">23.3 Input Methods</h3>

<a class="index-entry-id" id="index-input-methods"></a>
<p>An <em class="dfn">input method</em> is a kind of character conversion designed
specifically for interactive input.  This section describes input
methods that come with Emacs; for native input methods provided by the
underlying OS, see <a class="pxref" href="#Unibyte-Mode">Unibyte Editing Mode</a>.
</p>
<p>In Emacs, typically each language has its own input method;
sometimes several languages that use the same characters can share one
input method.  A few languages support several input methods.
</p>
<p>The simplest kind of input method works by mapping <abbr class="acronym">ASCII</abbr> letters
into another alphabet; this allows you to use one other alphabet
instead of <abbr class="acronym">ASCII</abbr>.  The Greek and Russian input methods
work this way.
</p>
<p>A more powerful technique is composition: converting sequences of
characters into one letter.  Many European input methods use composition
to produce a single non-<abbr class="acronym">ASCII</abbr> letter from a sequence that consists of a
letter followed by accent characters (or vice versa).  For example, some
methods convert the sequence <kbd class="kbd">o ^</kbd> into a single accented letter.
These input methods have no special commands of their own; all they do
is compose sequences of printing characters.
</p>
<p>The input methods for syllabic scripts typically use mapping followed
by composition.  The input methods for Thai and Korean work this way.
First, letters are mapped into symbols for particular sounds or tone
marks; then, sequences of these that make up a whole syllable are
mapped into one syllable sign.
</p>
<a class="index-entry-id" id="index-C_002df_002c-when-using-input-methods"></a>
<a class="index-entry-id" id="index-C_002db_002c-when-using-input-methods"></a>
<a class="index-entry-id" id="index-C_002dn_002c-when-using-input-methods"></a>
<a class="index-entry-id" id="index-C_002dp_002c-when-using-input-methods"></a>
<p>Chinese and Japanese require more complex methods.  In Chinese input
methods, first you enter the phonetic spelling of a Chinese word (in
input method <code class="code">chinese-py</code>, among others), or a sequence of
portions of the character (input methods <code class="code">chinese-4corner</code> and
<code class="code">chinese-sw</code>, and others).  One input sequence typically
corresponds to many possible Chinese characters.  You select the one
you mean using keys such as <kbd class="kbd">C-f</kbd>, <kbd class="kbd">C-b</kbd>, <kbd class="kbd">C-n</kbd>,
<kbd class="kbd">C-p</kbd> (or the arrow keys), and digits, which have special meanings
in this situation.
</p>
<p>The possible characters are conceptually arranged in several rows,
with each row holding up to 10 alternatives.  Normally, Emacs displays
just one row at a time, in the echo area; <code class="code">(<var class="var">i</var>/<var class="var">j</var>)</code>
appears at the beginning, to indicate that this is the <var class="var">i</var>th row
out of a total of <var class="var">j</var> rows.  Type <kbd class="kbd">C-n</kbd> or <kbd class="kbd">C-p</kbd> to
display the next row or the previous row.
</p>
<p>Type <kbd class="kbd">C-f</kbd> and <kbd class="kbd">C-b</kbd> to move forward and backward among
the alternatives in the current row.  As you do this, Emacs highlights
the current alternative with a special color; type <kbd class="kbd">C-<kbd class="key">SPC</kbd></kbd>
to select the current alternative and use it as input.  The
alternatives in the row are also numbered; the number appears before
the alternative.  Typing a number selects the associated alternative
of the current row and uses it as input.
</p>
<a class="index-entry-id" id="index-TAB_002c-when-using-Chinese-input-methods"></a>
<p><kbd class="key">TAB</kbd> in these Chinese input methods displays a buffer showing
all the possible characters at once; then clicking <kbd class="kbd">mouse-2</kbd> on
one of them selects that alternative.  The keys <kbd class="kbd">C-f</kbd>, <kbd class="kbd">C-b</kbd>,
<kbd class="kbd">C-n</kbd>, <kbd class="kbd">C-p</kbd>, and digits continue to work as usual, but they
do the highlighting in the buffer showing the possible characters,
rather than in the echo area.
</p>
<p>To enter characters according to the <em class="dfn">p&#299;ny&#299;n</em> transliteration
method instead, use the <code class="code">chinese-sisheng</code> input method.  This is
a composition based method, where e.g. <kbd class="kbd">pi1</kbd> results in &#8216;<samp class="samp">p&#299;</samp>&#8217;.
</p>
<p>In Japanese input methods, first you input a whole word using
phonetic spelling; then, after the word is in the buffer, Emacs
converts it into one or more characters using a large dictionary.  One
phonetic spelling corresponds to a number of different Japanese words;
to select one of them, use <kbd class="kbd">C-n</kbd> and <kbd class="kbd">C-p</kbd> to cycle through
the alternatives.
</p>
<p>Sometimes it is useful to cut off input method processing so that the
characters you have just entered will not combine with subsequent
characters.  For example, in input method <code class="code">latin-1-postfix</code>, the
sequence <kbd class="kbd">o ^</kbd> combines to form an &#8216;<samp class="samp">o</samp>&#8217; with an accent.  What if
you want to enter them as separate characters?
</p>
<p>One way is to type the accent twice; this is a special feature for
entering the separate letter and accent.  For example, <kbd class="kbd">o ^ ^</kbd> gives
you the two characters &#8216;<samp class="samp">o^</samp>&#8217;.  Another way is to type another letter
after the <kbd class="kbd">o</kbd>&#8212;something that won&#8217;t combine with that&#8212;and
immediately delete it.  For example, you could type <kbd class="kbd">o o <kbd class="key">DEL</kbd>
^</kbd> to get separate &#8216;<samp class="samp">o</samp>&#8217; and &#8216;<samp class="samp">^</samp>&#8217;.  Another method, more
general but not quite as easy to type, is to use <kbd class="kbd">C-\ C-\</kbd> between
two characters to stop them from combining.  This is the command
<kbd class="kbd">C-\</kbd> (<code class="code">toggle-input-method</code>) used twice.
See <a class="xref" href="#Select-Input-Method">Selecting an Input Method</a>.
</p>
<a class="index-entry-id" id="index-incremental-search_002c-input-method-interference"></a>
<p><kbd class="kbd">C-\ C-\</kbd> is especially useful inside an incremental search,
because it stops waiting for more characters to combine, and starts
searching for what you have already entered.
</p>
<p>To find out how to input the character after point using the current
input method, type <kbd class="kbd">C-u C-x =</kbd>.  See <a class="xref" href="Basic.xhtml#Position-Info">Cursor Position Information</a>.
</p>
<a class="index-entry-id" id="index-input_002dmethod_002dverbose_002dflag"></a>
<a class="index-entry-id" id="index-input_002dmethod_002dhighlight_002dflag"></a>
<p>The variables <code class="code">input-method-highlight-flag</code> and
<code class="code">input-method-verbose-flag</code> control how input methods explain
what is happening.  If <code class="code">input-method-highlight-flag</code> is
non-<code class="code">nil</code>, the partial sequence is highlighted in the buffer (for
most input methods&#8212;some disable this feature).  If
<code class="code">input-method-verbose-flag</code> is non-<code class="code">nil</code>, the list of
possible characters to type next is displayed in the echo area (but
not when you are in the minibuffer).
</p>
<a class="index-entry-id" id="index-quail_002dactivate_002dhook"></a>
<a class="index-entry-id" id="index-quail_002dtranslation_002dkeymap"></a>
<p>You can modify how an input method works by making your changes in a
function that you add to the hook variable <code class="code">quail-activate-hook</code>.
See <a class="xref" href="Customization.xhtml#Hooks">Hooks</a>.  For example, you can redefine some of the input
method&#8217;s keys by defining key bindings in the keymap returned by the
function <code class="code">quail-translation-keymap</code>, using <code class="code">define-key</code>.
See <a class="xref" href="Customization.xhtml#Init-Rebinding">Rebinding Keys in Your Init File</a>.
</p>
<p>Input methods are inhibited when the text in the buffer is read-only
for some reason.  This is so single-character key bindings work in
modes that make buffer text or parts of it read-only, such as
<code class="code">read-only-mode</code> and <code class="code">image-mode</code>, even when an input method
is active.
</p>
<a class="index-entry-id" id="index-C_002dx-8-RET"></a>
<a class="index-entry-id" id="index-insert-character-by-name-or-code_002dpoint"></a>
<p>Another facility for typing characters not on your keyboard is by
using <kbd class="kbd">C-x 8 <kbd class="key">RET</kbd></kbd> (<code class="code">insert-char</code>) to insert a single
character based on its Unicode name or code-point; see <a class="ref" href="Basic.xhtml#Inserting-Text">Inserting Text</a>.
</p>
<a class="index-entry-id" id="index-emoji-input"></a>
<a class="index-entry-id" id="index-inserting-Emoji"></a>
<a class="index-entry-id" id="index-C_002dx-8-e"></a>
<a class="index-entry-id" id="index-emoji_002dinsert"></a>
<a class="index-entry-id" id="index-emoji_002dlist"></a>
<a class="index-entry-id" id="index-emoji_002dsearch"></a>
<p>There are specialized commands for inserting Emoji, and these can be
found on the <kbd class="kbd">C-x 8 e</kbd> keymap.  <kbd class="kbd">C-x 8 e e</kbd>
(<code class="code">emoji-insert</code>) will let you navigate through different Emoji
categories and then choose one.  <kbd class="kbd">C-x 8 e l</kbd> (<code class="code">emoji-list</code>)
will pop up a new buffer and list all the Emoji; clicking (or using
<kbd class="kbd">RET</kbd>) on an emoji character will insert it in the current buffer.
Finally, <kbd class="kbd">C-x 8 e s</kbd> (<code class="code">emoji-search</code>) will allow you to
search for Emoji based on their names.
</p>
<a class="index-entry-id" id="index-emoji_002ddescribe"></a>
<p><code class="code">describe-char</code> displays a lot of information about the
character/glyphs under point (including emojis).  It&#8217;s sometimes
useful to get a quick description of the name, and you can use the
<kbd class="kbd">C-x 8 e d</kbd> (<code class="code">emoji-describe</code>) command to do that.  It&#8217;s
meant primarily to help distinguish between different Emoji
variants (which can look very similar), but it will also tell you
the names of non-Emoji characters.
</p>
</div>
<div class="section-level-extent" id="Select-Input-Method">
<h3 class="section" id="Selecting-an-Input-Method">23.4 Selecting an Input Method</h3>

<dl class="table">
<dt><kbd class="kbd">C-\</kbd></dt>
<dd><p>Enable or disable use of the selected input method (<code class="code">toggle-input-method</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x <kbd class="key">RET</kbd> C-\ <var class="var">method</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Select a new input method for the current buffer (<code class="code">set-input-method</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x \ <var class="var">method</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Temporarily enable the selected transient input method ; it will be
automatically disabled after inserting a single character
(<code class="code">activate-transient-input-method</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dh-I"></a>
<a class="index-entry-id" id="index-C_002dh-C_002d_005c"></a>
<a id="index-describe_002dinput_002dmethod"></a><kbd class="kbd">C-h I <var class="var">method</var> <kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">C-h C-\ <var class="var">method</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Describe the input method <var class="var">method</var> (<code class="code">describe-input-method</code>).
By default, it describes the current input method (if any).  This
description should give you the full details of how to use any
particular input method.
</p>
</dd>
<dt><kbd class="kbd">M-x list-input-methods</kbd></dt>
<dd><p>Display a list of all the supported input methods.
</p></dd>
</dl>

<a class="index-entry-id" id="index-set_002dinput_002dmethod"></a>
<a class="index-entry-id" id="index-current_002dinput_002dmethod"></a>
<a class="index-entry-id" id="index-C_002dx-RET-C_002d_005c"></a>
<p>To choose an input method for the current buffer, use <kbd class="kbd">C-x
<kbd class="key">RET</kbd> C-\</kbd> (<code class="code">set-input-method</code>).  This command reads the
input method name from the minibuffer; the name normally starts with the
language environment that it is meant to be used with.  The variable
<code class="code">current-input-method</code> records which input method is selected.
</p>
<a class="index-entry-id" id="index-toggle_002dinput_002dmethod"></a>
<a class="index-entry-id" id="index-C_002d_005c"></a>
<p>Input methods use various sequences of <abbr class="acronym">ASCII</abbr> characters to
stand for non-<abbr class="acronym">ASCII</abbr> characters.  Sometimes it is useful to
turn off the input method temporarily.  To do this, type <kbd class="kbd">C-\</kbd>
(<code class="code">toggle-input-method</code>).  To reenable the input method, type
<kbd class="kbd">C-\</kbd> again.
</p>
<p>If you type <kbd class="kbd">C-\</kbd> and you have not yet selected an input method,
it prompts you to specify one.  This has the same effect as using
<kbd class="kbd">C-x <kbd class="key">RET</kbd> C-\</kbd> to specify an input method.
</p>
<p>When invoked with a numeric argument, as in <kbd class="kbd">C-u C-\</kbd>,
<code class="code">toggle-input-method</code> always prompts you for an input method,
suggesting the most recently selected one as the default.
</p>
<a class="index-entry-id" id="index-default_002dinput_002dmethod"></a>
<p>Selecting a language environment specifies a default input method for
use in various buffers.  When you have a default input method, you can
select it in the current buffer by typing <kbd class="kbd">C-\</kbd>.  The variable
<code class="code">default-input-method</code> specifies the default input method
(<code class="code">nil</code> means there is none).
</p>
<p>In some language environments, which support several different input
methods, you might want to use an input method different from the
default chosen by <code class="code">set-language-environment</code>.  You can instruct
Emacs to select a different default input method for a certain
language environment, if you wish, by using
<code class="code">set-language-environment-hook</code> (see <a class="pxref" href="#Language-Environments">set-language-environment-hook</a>).  For example:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(defun my-chinese-setup ()
  &quot;Set up my private Chinese environment.&quot;
  (if (equal current-language-environment &quot;Chinese-GB&quot;)
      (setq default-input-method &quot;chinese-tonepy&quot;)))
(add-hook 'set-language-environment-hook 'my-chinese-setup)
</pre></div>

<p>This sets the default input method to be <code class="code">chinese-tonepy</code>
whenever you choose a Chinese-GB language environment.
</p>
<p>You can instruct Emacs to activate a certain input method
automatically.  For example:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(add-hook 'text-mode-hook
  (lambda () (set-input-method &quot;german-prefix&quot;)))
</pre></div>

<p>This automatically activates the input method <code class="code">german-prefix</code> in
Text mode.
</p>
<a class="index-entry-id" id="index-quail_002dset_002dkeyboard_002dlayout"></a>
<p>Some input methods for alphabetic scripts work by (in effect)
remapping the keyboard to emulate various keyboard layouts commonly used
for those scripts.  How to do this remapping properly depends on your
actual keyboard layout.  To specify which layout your keyboard has, use
the command <kbd class="kbd">M-x quail-set-keyboard-layout</kbd>.
</p>
<a class="index-entry-id" id="index-quail_002dshow_002dkey"></a>
<p>You can use the command <kbd class="kbd">M-x quail-show-key</kbd> to show what key (or
key sequence) to type in order to input the character following point,
using the selected keyboard layout.  The command <kbd class="kbd">C-u C-x =</kbd> also
shows that information, in addition to other information about the
character.
</p>
<a class="index-entry-id" id="index-list_002dinput_002dmethods"></a>
<p><kbd class="kbd">M-x list-input-methods</kbd> displays a list of all the supported
input methods.  The list gives information about each input method,
including the string that stands for it in the mode line.
</p>
<a class="index-entry-id" id="index-activate_002dtransient_002dinput_002dmethod"></a>
<a class="index-entry-id" id="index-C_002dx-_005c"></a>
<a class="anchor" id="transient-input-method"></a><p>Sometimes it can be convenient to enable an input method
<em class="dfn">transiently</em>, for inserting only a single character.  Typing
<kbd class="kbd">C-x \</kbd> (<code class="code">activate-transient-input-method</code>) will temporarily
enable an input method, let you insert a single character using the input
method rules, and then automatically disable the input method.  If no
transient input method was selected yet, <kbd class="kbd">C-x \</kbd> will prompt you
for an input method; subsequent invocations of this command will
enable the selected transient input method.  To select a different
transient input method, type <kbd class="kbd">C-u C-x \</kbd>.  You can select a
transient method that is different from the input method which you
selected using <kbd class="kbd">C-u C-\</kbd>.
</p>
</div>
<div class="section-level-extent" id="Coding-Systems">
<h3 class="section" id="Coding-Systems-1">23.5 Coding Systems</h3>
<a class="index-entry-id" id="index-coding-systems"></a>

<p>Users of various languages have established many more-or-less standard
coding systems for representing them.  Emacs does not use these coding
systems internally; instead, it converts from various coding systems to
its own system when reading data, and converts the internal coding
system to other coding systems when writing data.  Conversion is
possible in reading or writing files, in sending or receiving from the
terminal, and in exchanging data with subprocesses.
</p>
<p>Emacs assigns a name to each coding system.  Most coding systems are
used for one language, and the name of the coding system starts with
the language name.  Some coding systems are used for several
languages; their names usually start with &#8216;<samp class="samp">iso</samp>&#8217;.  There are also
special coding systems, such as <code class="code">no-conversion</code>, <code class="code">raw-text</code>,
and <code class="code">emacs-internal</code>.
</p>
<a class="index-entry-id" id="index-international-files-from-DOS_002fWindows-systems"></a>
<p>A special class of coding systems, collectively known as
<em class="dfn">codepages</em>, is designed to support text encoded by MS-Windows and
MS-DOS software.  The names of these coding systems are
<code class="code">cp<var class="var">nnnn</var></code>, where <var class="var">nnnn</var> is a 3- or 4-digit number of the
codepage.  You can use these encodings just like any other coding
system; for example, to visit a file encoded in codepage 850, type
<kbd class="kbd">C-x <kbd class="key">RET</kbd> c cp850 <kbd class="key">RET</kbd> C-x C-f <var class="var">filename</var>
<kbd class="key">RET</kbd></kbd>.
</p>
<p>In addition to converting various representations of non-<abbr class="acronym">ASCII</abbr>
characters, a coding system can perform end-of-line conversion.  Emacs
handles three different conventions for how to separate lines in a file:
newline (Unix), carriage return followed by linefeed (DOS), and just
carriage return (Mac).
</p>
<dl class="table">
<dt><kbd class="kbd">C-h C <var class="var">coding</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Describe coding system <var class="var">coding</var> (<code class="code">describe-coding-system</code>).
</p>
</dd>
<dt><kbd class="kbd">C-h C <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Describe the coding systems currently in use (<code class="code">describe-coding-system</code>).
</p>
</dd>
<dt><kbd class="kbd">M-x list-coding-systems</kbd></dt>
<dd><p>Display a list of all the supported coding systems.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dh-C"></a>
<a class="index-entry-id" id="index-describe_002dcoding_002dsystem"></a>
<p>The command <kbd class="kbd">C-h C</kbd> (<code class="code">describe-coding-system</code>) displays
information about particular coding systems, including the end-of-line
conversion specified by those coding systems.  You can specify a coding
system name as the argument; alternatively, with an empty argument, it
describes the coding systems currently selected for various purposes,
both in the current buffer and as the defaults, and the priority list
for recognizing coding systems (see <a class="pxref" href="#Recognize-Coding">Recognizing Coding Systems</a>).
</p>
<a class="index-entry-id" id="index-list_002dcoding_002dsystems"></a>
<p>To display a list of all the supported coding systems, type <kbd class="kbd">M-x
list-coding-systems</kbd>.  The list gives information about each coding
system, including the letter that stands for it in the mode line
(see <a class="pxref" href="Screen.xhtml#Mode-Line">The Mode Line</a>).
</p>
<a class="index-entry-id" id="index-end_002dof_002dline-conversion"></a>
<a class="index-entry-id" id="index-line-endings"></a>
<a class="index-entry-id" id="index-MS_002dDOS-end_002dof_002dline-conversion"></a>
<a class="index-entry-id" id="index-Macintosh-end_002dof_002dline-conversion"></a>
<p>Each of the coding systems that appear in this list&#8212;except for
<code class="code">no-conversion</code>, which means no conversion of any kind&#8212;specifies
how and whether to convert printing characters, but leaves the choice of
end-of-line conversion to be decided based on the contents of each file.
For example, if the file appears to use the sequence carriage return
and linefeed to separate lines, DOS end-of-line conversion will be used.
</p>
<p>Each of the listed coding systems has three variants, which specify
exactly what to do for end-of-line conversion:
</p>
<dl class="table">
<dt><code class="code">&#8230;-unix</code></dt>
<dd><p>Don&#8217;t do any end-of-line conversion; assume the file uses
newline to separate lines.  (This is the convention normally used
on Unix and GNU systems, and macOS.)
</p>
</dd>
<dt><code class="code">&#8230;-dos</code></dt>
<dd><p>Assume the file uses carriage return followed by linefeed to separate
lines, and do the appropriate conversion.  (This is the convention
normally used on Microsoft systems.<a class="footnote" id="DOCF8" href="#FOOT8"><sup>8</sup></a>)
</p>
</dd>
<dt><code class="code">&#8230;-mac</code></dt>
<dd><p>Assume the file uses carriage return to separate lines, and do the
appropriate conversion.  (This was the convention used in Classic Mac
OS.)
</p></dd>
</dl>

<p>These variant coding systems are omitted from the
<code class="code">list-coding-systems</code> display for brevity, since they are entirely
predictable.  For example, the coding system <code class="code">iso-latin-1</code> has
variants <code class="code">iso-latin-1-unix</code>, <code class="code">iso-latin-1-dos</code> and
<code class="code">iso-latin-1-mac</code>.
</p>
<a class="index-entry-id" id="index-undecided_002c-coding-system"></a>
<p>The coding systems <code class="code">unix</code>, <code class="code">dos</code>, and <code class="code">mac</code> are
aliases for <code class="code">undecided-unix</code>, <code class="code">undecided-dos</code>, and
<code class="code">undecided-mac</code>, respectively.  These coding systems specify only
the end-of-line conversion, and leave the character code conversion to
be deduced from the text itself.
</p>
<a class="index-entry-id" id="index-raw_002dtext_002c-coding-system"></a>
<p>The coding system <code class="code">raw-text</code> is good for a file which is mainly
<abbr class="acronym">ASCII</abbr> text, but may contain byte values above 127 that are
not meant to encode non-<abbr class="acronym">ASCII</abbr> characters.  With
<code class="code">raw-text</code>, Emacs copies those byte values unchanged, and sets
<code class="code">enable-multibyte-characters</code> to <code class="code">nil</code> in the current buffer
so that they will be interpreted properly.  <code class="code">raw-text</code> handles
end-of-line conversion in the usual way, based on the data
encountered, and has the usual three variants to specify the kind of
end-of-line conversion to use.
</p>
<a class="index-entry-id" id="index-no_002dconversion_002c-coding-system"></a>
<p>In contrast, the coding system <code class="code">no-conversion</code> specifies no
character code conversion at all&#8212;none for non-<abbr class="acronym">ASCII</abbr> byte values and
none for end of line.  This is useful for reading or writing binary
files, tar files, and other files that must be examined verbatim.  It,
too, sets <code class="code">enable-multibyte-characters</code> to <code class="code">nil</code>.
</p>
<p>The easiest way to edit a file with no conversion of any kind is with
the <kbd class="kbd">M-x find-file-literally</kbd> command.  This uses
<code class="code">no-conversion</code>, and also suppresses other Emacs features that
might convert the file contents before you see them.  See <a class="xref" href="Files.xhtml#Visiting">Visiting Files</a>.
</p>
<a class="index-entry-id" id="index-emacs_002dinternal_002c-coding-system"></a>
<p>The coding system <code class="code">emacs-internal</code> (or <code class="code">utf-8-emacs</code>,
which is equivalent) means that the file contains non-<abbr class="acronym">ASCII</abbr>
characters stored with the internal Emacs encoding.  This coding
system handles end-of-line conversion based on the data encountered,
and has the usual three variants to specify the kind of end-of-line
conversion.
</p>
</div>
<div class="section-level-extent" id="Recognize-Coding">
<h3 class="section" id="Recognizing-Coding-Systems">23.6 Recognizing Coding Systems</h3>

<p>Whenever Emacs reads a given piece of text, it tries to recognize
which coding system to use.  This applies to files being read, output
from subprocesses, text from X selections, etc.  Emacs can select the
right coding system automatically most of the time&#8212;once you have
specified your preferences.
</p>
<p>Some coding systems can be recognized or distinguished by which byte
sequences appear in the data.  However, there are coding systems that
cannot be distinguished, not even potentially.  For example, there is no
way to distinguish between Latin-1 and Latin-2; they use the same byte
values with different meanings.
</p>
<p>Emacs handles this situation by means of a priority list of coding
systems.  Whenever Emacs reads a file, if you do not specify the coding
system to use, Emacs checks the data against each coding system,
starting with the first in priority and working down the list, until it
finds a coding system that fits the data.  Then it converts the file
contents assuming that they are represented in this coding system.
</p>
<p>The priority list of coding systems depends on the selected language
environment (see <a class="pxref" href="#Language-Environments">Language Environments</a>).  For example, if you use
French, you probably want Emacs to prefer Latin-1 to Latin-2; if you use
Czech, you probably want Latin-2 to be preferred.  This is one of the
reasons to specify a language environment.
</p>
<a class="index-entry-id" id="index-prefer_002dcoding_002dsystem"></a>
<p>However, you can alter the coding system priority list in detail
with the command <kbd class="kbd">M-x prefer-coding-system</kbd>.  This command reads
the name of a coding system from the minibuffer, and adds it to the
front of the priority list, so that it is preferred to all others.  If
you use this command several times, each use adds one element to the
front of the priority list.
</p>
<p>If you use a coding system that specifies the end-of-line conversion
type, such as <code class="code">iso-8859-1-dos</code>, what this means is that Emacs
should attempt to recognize <code class="code">iso-8859-1</code> with priority, and should
use DOS end-of-line conversion when it does recognize <code class="code">iso-8859-1</code>.
</p>
<a class="index-entry-id" id="index-file_002dcoding_002dsystem_002dalist"></a>
<p>Sometimes a file name indicates which coding system to use for the
file.  The variable <code class="code">file-coding-system-alist</code> specifies this
correspondence.  There is a special function
<code class="code">modify-coding-system-alist</code> for adding elements to this list.  For
example, to read and write all &#8216;<samp class="samp">.txt</samp>&#8217; files using the coding system
<code class="code">chinese-iso-8bit</code>, you can execute this Lisp expression:
</p>
<div class="example smallexample">
<pre class="example-preformatted">(modify-coding-system-alist 'file &quot;\\.txt\\'&quot; 'chinese-iso-8bit)
</pre></div>

<p>The first argument should be <code class="code">file</code>, the second argument should be
a regular expression that determines which files this applies to, and
the third argument says which coding system to use for these files.
</p>
<a class="index-entry-id" id="index-inhibit_002deol_002dconversion"></a>
<a class="index-entry-id" id="index-DOS_002dstyle-end_002dof_002dline-display"></a>
<p>Emacs recognizes which kind of end-of-line conversion to use based on
the contents of the file: if it sees only carriage returns, or only
carriage return followed by linefeed sequences, then it chooses the
end-of-line conversion accordingly.  You can inhibit the automatic use
of end-of-line conversion by setting the variable
<code class="code">inhibit-eol-conversion</code> to non-<code class="code">nil</code>.  If you do that,
DOS-style files will be displayed with the &#8216;<samp class="samp">^M</samp>&#8217; characters
visible in the buffer; some people prefer this to the more subtle
&#8216;<samp class="samp">(DOS)</samp>&#8217; end-of-line type indication near the left edge of the
mode line (see <a class="pxref" href="Screen.xhtml#Mode-Line">eol-mnemonic</a>).
</p>
<a class="index-entry-id" id="index-inhibit_002diso_002descape_002ddetection"></a>
<a class="index-entry-id" id="index-escape-sequences-in-files"></a>
<p>By default, the automatic detection of the coding system is sensitive to
escape sequences.  If Emacs sees a sequence of characters that begin
with an escape character, and the sequence is valid as an ISO-2022
code, that tells Emacs to use one of the ISO-2022 encodings to decode
the file.
</p>
<p>However, there may be cases that you want to read escape sequences
in a file as is.  In such a case, you can set the variable
<code class="code">inhibit-iso-escape-detection</code> to non-<code class="code">nil</code>.  Then the code
detection ignores any escape sequences, and never uses an ISO-2022
encoding.  The result is that all escape sequences become visible in
the buffer.
</p>
<p>The default value of <code class="code">inhibit-iso-escape-detection</code> is
<code class="code">nil</code>.  We recommend that you not change it permanently, only for
one specific operation.  That&#8217;s because some Emacs Lisp source files
in the Emacs distribution contain non-<abbr class="acronym">ASCII</abbr> characters encoded in the
coding system <code class="code">iso-2022-7bit</code>, and they won&#8217;t be
decoded correctly when you visit those files if you suppress the
escape sequence detection.
</p>
<a class="index-entry-id" id="index-auto_002dcoding_002dalist"></a>
<a class="index-entry-id" id="index-auto_002dcoding_002dregexp_002dalist"></a>
<p>The variables <code class="code">auto-coding-alist</code> and
<code class="code">auto-coding-regexp-alist</code> are
the strongest way to specify the coding system for certain patterns of
file names, or for files containing certain patterns, respectively.
These variables even override &#8216;<samp class="samp">-*-coding:-*-</samp>&#8217; tags in the file
itself (see <a class="pxref" href="#Specify-Coding">Specifying a File&#8217;s Coding System</a>).  For example, Emacs
uses <code class="code">auto-coding-alist</code> for tar and archive files, to prevent it
from being confused by a &#8216;<samp class="samp">-*-coding:-*-</samp>&#8217; tag in a member of the
archive and thinking it applies to the archive file as a whole.
</p>
<a class="index-entry-id" id="index-auto_002dcoding_002dfunctions"></a>
<p>Another way to specify a coding system is with the variable
<code class="code">auto-coding-functions</code>.  For example, one of the builtin
<code class="code">auto-coding-functions</code> detects the encoding for XML files.
Unlike the previous two, this variable does not override any
&#8216;<samp class="samp">-*-coding:-*-</samp>&#8217; tag.
</p>
</div>
<div class="section-level-extent" id="Specify-Coding">
<h3 class="section" id="Specifying-a-File_0027s-Coding-System">23.7 Specifying a File&#8217;s Coding System</h3>

<p>If Emacs recognizes the encoding of a file incorrectly, you can
reread the file using the correct coding system with <kbd class="kbd">C-x
<kbd class="key">RET</kbd> r</kbd> (<code class="code">revert-buffer-with-coding-system</code>).  This command
prompts for the coding system to use.  To see what coding system Emacs
actually used to decode the file, look at the coding system mnemonic
letter near the left edge of the mode line (see <a class="pxref" href="Screen.xhtml#Mode-Line">The Mode Line</a>), or
type <kbd class="kbd">C-h C</kbd> (<code class="code">describe-coding-system</code>).
</p>
<a class="index-entry-id" id="index-coding"></a>
<p>You can specify the coding system for a particular file in the file
itself, using the &#8216;<samp class="samp">-*-&#8230;-*-</samp>&#8217;<!-- /@w --> construct at the beginning,
or a local variables list at the end (see <a class="pxref" href="Customization.xhtml#File-Variables">Local Variables in Files</a>).  You do
this by defining a value for the &#8220;variable&#8221; named <code class="code">coding</code>.
Emacs does not really have a variable <code class="code">coding</code>; instead of
setting a variable, this uses the specified coding system for the
file.  For example, &#8216;<samp class="samp">-*-mode:&#160;C;&#160;coding:&#160;latin-1;&#160;-*-</samp>&#8217;<!-- /@w --> specifies
use of the Latin-1 coding system, as well as C mode.  When you specify
the coding explicitly in the file, that overrides
<code class="code">file-coding-system-alist</code>.
</p>
</div>
<div class="section-level-extent" id="Output-Coding">
<h3 class="section" id="Choosing-Coding-Systems-for-Output">23.8 Choosing Coding Systems for Output</h3>

<a class="index-entry-id" id="index-buffer_002dfile_002dcoding_002dsystem"></a>
<p>Once Emacs has chosen a coding system for a buffer, it stores that
coding system in <code class="code">buffer-file-coding-system</code>.  That makes it the
default for operations that write from this buffer into a file, such
as <code class="code">save-buffer</code> and <code class="code">write-region</code>.  You can specify a
different coding system for further file output from the buffer using
<code class="code">set-buffer-file-coding-system</code> (see <a class="pxref" href="#Text-Coding">Specifying a Coding System for File Text</a>).
</p>
<p>You can insert any character Emacs supports into any Emacs buffer,
but most coding systems can only handle a subset of these characters.
Therefore, it&#8217;s possible that the characters you insert cannot be
encoded with the coding system that will be used to save the buffer.
For example, you could visit a text file in Polish, encoded in
<code class="code">iso-8859-2</code>, and add some Russian words to it.  When you save
that buffer, Emacs cannot use the current value of
<code class="code">buffer-file-coding-system</code>, because the characters you added
cannot be encoded by that coding system.
</p>
<p>When that happens, Emacs tries the most-preferred coding system (set
by <kbd class="kbd">M-x prefer-coding-system</kbd> or <kbd class="kbd">M-x
set-language-environment</kbd>).  If that coding system can safely encode
all of the characters in the buffer, Emacs uses it, and stores its
value in <code class="code">buffer-file-coding-system</code>.  Otherwise, Emacs displays
a list of coding systems suitable for encoding the buffer&#8217;s contents,
and asks you to choose one of those coding systems.
</p>
<p>If you insert the unsuitable characters in a mail message, Emacs
behaves a bit differently.  It additionally checks whether the
most-preferred coding system is recommended for use in MIME messages;
if not, it informs you of this fact and prompts you for another coding
system.  This is so you won&#8217;t inadvertently send a message encoded in
a way that your recipient&#8217;s mail software will have difficulty
decoding.  (You can still use an unsuitable coding system if you enter
its name at the prompt.)
</p>
<a class="index-entry-id" id="index-sendmail_002dcoding_002dsystem"></a>
<p>When you send a mail message (see <a class="pxref" href="Sending-Mail.xhtml#Sending-Mail">Sending Mail</a>),
Emacs has four different ways to determine the coding system to use
for encoding the message text.  It first tries the buffer&#8217;s own value of
<code class="code">buffer-file-coding-system</code>, if that is non-<code class="code">nil</code>.
Otherwise, it uses the value of <code class="code">sendmail-coding-system</code>, if that
is non-<code class="code">nil</code>.  Thirdly, it uses the value of
<code class="code">default-sendmail-coding-system</code>.
If all of these three values are <code class="code">nil</code>, Emacs encodes outgoing
mail using the default coding system for new files (i.e., the
default value of <code class="code">buffer-file-coding-system</code>), which is
controlled by your choice of language environment.
</p>
</div>
<div class="section-level-extent" id="Text-Coding">
<h3 class="section" id="Specifying-a-Coding-System-for-File-Text">23.9 Specifying a Coding System for File Text</h3>

<p>In cases where Emacs does not automatically choose the right coding
system for a file&#8217;s contents, you can use these commands to specify
one:
</p>
<dl class="table">
<dt><kbd class="kbd">C-x <kbd class="key">RET</kbd> f <var class="var">coding</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Use coding system <var class="var">coding</var> to save or revisit the file in
the current buffer (<code class="code">set-buffer-file-coding-system</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x <kbd class="key">RET</kbd> c <var class="var">coding</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Specify coding system <var class="var">coding</var> for the immediately following
command (<code class="code">universal-coding-system-argument</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x <kbd class="key">RET</kbd> r <var class="var">coding</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Revisit the current file using the coding system <var class="var">coding</var>
(<code class="code">revert-buffer-with-coding-system</code>).
</p>
</dd>
<dt><kbd class="kbd">M-x recode-region <kbd class="key">RET</kbd> <var class="var">right</var> <kbd class="key">RET</kbd> <var class="var">wrong</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Convert a region that was decoded using coding system <var class="var">wrong</var>,
decoding it using coding system <var class="var">right</var> instead.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-RET-f"></a>
<a class="index-entry-id" id="index-set_002dbuffer_002dfile_002dcoding_002dsystem"></a>
<p>The command <kbd class="kbd">C-x <kbd class="key">RET</kbd> f</kbd>
(<code class="code">set-buffer-file-coding-system</code>) sets the file coding system for
the current buffer (i.e., the coding system to use when saving or
reverting the file).  You specify which coding system using the
minibuffer.  You can also invoke this command by clicking with
<kbd class="kbd">mouse-3</kbd> on the coding system indicator in the mode line
(see <a class="pxref" href="Screen.xhtml#Mode-Line">The Mode Line</a>).
</p>
<p>If you specify a coding system that cannot handle all the characters
in the buffer, Emacs will warn you about the troublesome characters,
and ask you to choose another coding system, when you try to save the
buffer (see <a class="pxref" href="#Output-Coding">Choosing Coding Systems for Output</a>).
</p>
<a class="index-entry-id" id="index-specify-end_002dof_002dline-conversion"></a>
<p>You can also use this command to specify the end-of-line conversion
(see <a class="pxref" href="#Coding-Systems">end-of-line conversion</a>) for encoding the
current buffer.  For example, <kbd class="kbd">C-x <kbd class="key">RET</kbd> f dos <kbd class="key">RET</kbd></kbd> will
cause Emacs to save the current buffer&#8217;s text with DOS-style
carriage return followed by linefeed line endings.
</p>
<a class="index-entry-id" id="index-C_002dx-RET-c"></a>
<a class="index-entry-id" id="index-universal_002dcoding_002dsystem_002dargument"></a>
<p>Another way to specify the coding system for a file is when you visit
the file.  First use the command <kbd class="kbd">C-x <kbd class="key">RET</kbd> c</kbd>
(<code class="code">universal-coding-system-argument</code>); this command uses the
minibuffer to read a coding system name.  After you exit the minibuffer,
the specified coding system is used for <em class="emph">the immediately following
command</em>.
</p>
<p>So if the immediately following command is <kbd class="kbd">C-x C-f</kbd>, for example,
it reads the file using that coding system (and records the coding
system for when you later save the file).  Or if the immediately following
command is <kbd class="kbd">C-x C-w</kbd>, it writes the file using that coding system.
When you specify the coding system for saving in this way, instead
of with <kbd class="kbd">C-x <kbd class="key">RET</kbd> f</kbd>, there is no warning if the buffer
contains characters that the coding system cannot handle.
</p>
<p>Other file commands affected by a specified coding system include
<kbd class="kbd">C-x i</kbd> and <kbd class="kbd">C-x C-v</kbd>, as well as the other-window variants
of <kbd class="kbd">C-x C-f</kbd>.  <kbd class="kbd">C-x <kbd class="key">RET</kbd> c</kbd> also affects commands that
start subprocesses, including <kbd class="kbd">M-x shell</kbd> (see <a class="pxref" href="Shell.xhtml#Shell">Running Shell Commands from Emacs</a>).  If the
immediately following command does not use the coding system, then
<kbd class="kbd">C-x <kbd class="key">RET</kbd> c</kbd> ultimately has no effect.
</p>
<p>An easy way to visit a file with no conversion is with the <kbd class="kbd">M-x
find-file-literally</kbd> command.  See <a class="xref" href="Files.xhtml#Visiting">Visiting Files</a>.
</p>
<p>The default value of the variable <code class="code">buffer-file-coding-system</code>
specifies the choice of coding system to use when you create a new file.
It applies when you find a new file, and when you create a buffer and
then save it in a file.  Selecting a language environment typically sets
this variable to a good choice of default coding system for that language
environment.
</p>
<a class="index-entry-id" id="index-C_002dx-RET-r"></a>
<a class="index-entry-id" id="index-revert_002dbuffer_002dwith_002dcoding_002dsystem"></a>
<p>If you visit a file with a wrong coding system, you can correct this
with <kbd class="kbd">C-x <kbd class="key">RET</kbd> r</kbd> (<code class="code">revert-buffer-with-coding-system</code>).
This visits the current file again, using a coding system you specify.
</p>
<a class="index-entry-id" id="index-recode_002dregion"></a>
<p>If a piece of text has already been inserted into a buffer using the
wrong coding system, you can redo the decoding of it using <kbd class="kbd">M-x
recode-region</kbd>.  This prompts you for the proper coding system, then
for the wrong coding system that was actually used, and does the
conversion.  It first encodes the region using the wrong coding system,
then decodes it again using the proper coding system.
</p>
</div>
<div class="section-level-extent" id="Communication-Coding">
<h3 class="section" id="Coding-Systems-for-Interprocess-Communication">23.10 Coding Systems for Interprocess Communication</h3>

<p>This section explains how to specify coding systems for use
in communication with other processes.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x <kbd class="key">RET</kbd> x <var class="var">coding</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Use coding system <var class="var">coding</var> for transferring selections to and from
other graphical applications (<code class="code">set-selection-coding-system</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x <kbd class="key">RET</kbd> X <var class="var">coding</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Use coding system <var class="var">coding</var> for transferring <em class="emph">one</em>
selection&#8212;the next one&#8212;to or from another graphical application
(<code class="code">set-next-selection-coding-system</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x <kbd class="key">RET</kbd> p <var class="var">input-coding</var> <kbd class="key">RET</kbd> <var class="var">output-coding</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Use coding systems <var class="var">input-coding</var> and <var class="var">output-coding</var> for
subprocess input and output in the current buffer
(<code class="code">set-buffer-process-coding-system</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-RET-x"></a>
<a class="index-entry-id" id="index-C_002dx-RET-X"></a>
<a class="index-entry-id" id="index-set_002dselection_002dcoding_002dsystem"></a>
<a class="index-entry-id" id="index-set_002dnext_002dselection_002dcoding_002dsystem"></a>
<p>The command <kbd class="kbd">C-x <kbd class="key">RET</kbd> x</kbd> (<code class="code">set-selection-coding-system</code>)
specifies the coding system for sending selected text to other windowing
applications, and for receiving the text of selections made in other
applications.  This command applies to all subsequent selections, until
you override it by using the command again.  The command <kbd class="kbd">C-x
<kbd class="key">RET</kbd> X</kbd> (<code class="code">set-next-selection-coding-system</code>) specifies the
coding system for the next selection made in Emacs or read by Emacs.
</p>
<a class="index-entry-id" id="index-x_002dselect_002drequest_002dtype"></a>
<p>The variable <code class="code">x-select-request-type</code> specifies the data type to
request from the X Window System for receiving text selections from
other applications.  If the value is <code class="code">nil</code> (the default), Emacs
tries <code class="code">UTF8_STRING</code> and <code class="code">COMPOUND_TEXT</code>, in this order, and
uses various heuristics to choose the more appropriate of the two
results; if none of these succeed, Emacs falls back on <code class="code">STRING</code>.
If the value of <code class="code">x-select-request-type</code> is one of the symbols
<code class="code">COMPOUND_TEXT</code>, <code class="code">UTF8_STRING</code>, <code class="code">STRING</code>, or
<code class="code">TEXT</code>, Emacs uses only that request type.  If the value is a
list of some of these symbols, Emacs tries only the request types in
the list, in order, until one of them succeeds, or until the list is
exhausted.
</p>
<a class="index-entry-id" id="index-C_002dx-RET-p"></a>
<a class="index-entry-id" id="index-set_002dbuffer_002dprocess_002dcoding_002dsystem"></a>
<p>The command <kbd class="kbd">C-x <kbd class="key">RET</kbd> p</kbd> (<code class="code">set-buffer-process-coding-system</code>)
specifies the coding system for input and output to a subprocess.  This
command applies to the current buffer; normally, each subprocess has its
own buffer, and thus you can use this command to specify translation to
and from a particular subprocess by giving the command in the
corresponding buffer.
</p>
<p>You can also use <kbd class="kbd">C-x <kbd class="key">RET</kbd> c</kbd>
(<code class="code">universal-coding-system-argument</code>) just before the command that
runs or starts a subprocess, to specify the coding system for
communicating with that subprocess.  See <a class="xref" href="#Text-Coding">Specifying a Coding System for File Text</a>.
</p>
<p>The default for translation of process input and output depends on the
current language environment.
</p>
<a class="index-entry-id" id="index-locale_002dcoding_002dsystem"></a>
<a class="index-entry-id" id="index-decoding-non_002dASCII-keyboard-input-on-X"></a>
<p>The variable <code class="code">locale-coding-system</code> specifies a coding system
to use when encoding and decoding system strings such as system error
messages and <code class="code">format-time-string</code> formats and time stamps.  That
coding system might also be used for decoding non-<abbr class="acronym">ASCII</abbr>
keyboard input on the X Window System and will also be used to encode
text sent to the standard output and error streams in batch mode.  You
should choose a coding system that is compatible with the underlying
system&#8217;s text representation, which is normally specified by one of
the environment variables <code class="env">LC_ALL</code>, <code class="env">LC_CTYPE</code>, and
<code class="env">LANG</code>.  (The first one, in the order specified above, whose value
is nonempty is the one that determines the text representation.)
</p>
</div>
<div class="section-level-extent" id="File-Name-Coding">
<h3 class="section" id="Coding-Systems-for-File-Names">23.11 Coding Systems for File Names</h3>

<dl class="table">
<dt><kbd class="kbd">C-x <kbd class="key">RET</kbd> F <var class="var">coding</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Use coding system <var class="var">coding</var> for encoding and decoding file
names (<code class="code">set-file-name-coding-system</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-set_002dfile_002dname_002dcoding_002dsystem"></a>
<a class="index-entry-id" id="index-C_002dx-RET-F"></a>
<a class="index-entry-id" id="index-file-names-with-non_002dASCII-characters"></a>
<p>The command <kbd class="kbd">C-x <kbd class="key">RET</kbd> F</kbd> (<code class="code">set-file-name-coding-system</code>)
specifies a coding system to use for encoding file <em class="emph">names</em>.  It
has no effect on reading and writing the <em class="emph">contents</em> of files.
</p>
<a class="index-entry-id" id="index-file_002dname_002dcoding_002dsystem"></a>
<p>In fact, all this command does is set the value of the variable
<code class="code">file-name-coding-system</code>.  If you set the variable to a coding
system name (as a Lisp symbol or a string), Emacs encodes file names
using that coding system for all file operations.  This makes it
possible to use non-<abbr class="acronym">ASCII</abbr> characters in file names&#8212;or, at
least, those non-<abbr class="acronym">ASCII</abbr> characters that the specified coding
system can encode.
</p>
<p>If <code class="code">file-name-coding-system</code> is <code class="code">nil</code>, Emacs uses a
default coding system determined by the selected language environment,
and stored in the <code class="code">default-file-name-coding-system</code> variable
(normally UTF-8).
</p>
<a class="index-entry-id" id="index-file_002dname-encoding_002c-MS_002dWindows"></a>
<a class="index-entry-id" id="index-w32_002dunicode_002dfilenames"></a>
<p>When Emacs runs on MS-Windows versions that are descendants of the
NT family (Windows 2000, XP, and all the later versions), the value of
<code class="code">file-name-coding-system</code> is largely ignored, as Emacs by default
uses APIs that allow passing Unicode file names directly.  By
contrast, on Windows 9X, file names are encoded using
<code class="code">file-name-coding-system</code>, which should be set to the codepage
(see <a class="pxref" href="#Coding-Systems">codepage</a>) pertinent for the current system
locale.  The value of the variable <code class="code">w32-unicode-filenames</code>
controls whether Emacs uses the Unicode APIs when it calls OS
functions that accept file names.  This variable is set by the startup
code to <code class="code">nil</code> on Windows 9X, and to <code class="code">t</code> on newer versions of
MS-Windows.
</p>
<p><strong class="strong">Warning:</strong> if you change <code class="code">file-name-coding-system</code> (or the
language environment) in the middle of an Emacs session, problems can
result if you have already visited files whose names were encoded using
the earlier coding system and cannot be encoded (or are encoded
differently) under the new coding system.  If you try to save one of
these buffers under the visited file name, saving may use the wrong file
name, or it may encounter an error.  If such a problem happens, use <kbd class="kbd">C-x
C-w</kbd> to specify a new file name for that buffer.
</p>
<a class="index-entry-id" id="index-recode_002dfile_002dname"></a>
<p>If a mistake occurs when encoding a file name, use the command
<kbd class="kbd">M-x recode-file-name</kbd> to change the file name&#8217;s coding
system.  This prompts for an existing file name, its old coding
system, and the coding system to which you wish to convert.
</p>
</div>
<div class="section-level-extent" id="X-Coding">
<h3 class="section" id="Coding-Systems-for-X-Keyboard-Input">23.12 Coding Systems for X Keyboard Input</h3>
<a class="index-entry-id" id="index-X-input-method-coding-systems"></a>
<p>Input methods under the X Window System specify their own coding
systems that must be used to decode keyboard input.  By default, Emacs
determines the coding system used for each input method automatically
upon establishing the connection to the input method server, and uses
that specific coding system to decode keyboard input.  However, that
determination can sometimes fail; in that situation, the locale coding
system (see <a class="pxref" href="#Communication-Coding">Coding Systems for Interprocess Communication</a>) is used instead.
</p>
<a class="index-entry-id" id="index-X-input-method-coding-systems_002c-overriding"></a>
<a class="index-entry-id" id="index-x_002dinput_002dcoding_002dsystem"></a>
<p>If the input method does not correctly announce the coding system it
uses to encode text, then the coding system used by Emacs to decode
text from input methods must be manually specified.  The value of the
variable <code class="code">x-input-coding-system</code>, when set to a symbol, is
unconditionally used as the coding system used to decode keyboard
input from input methods.
</p>
</div>
<div class="section-level-extent" id="Terminal-Coding">
<h3 class="section" id="Coding-Systems-for-Terminal-I_002fO">23.13 Coding Systems for Terminal I/O</h3>

<dl class="table">
<dt><kbd class="kbd">C-x <kbd class="key">RET</kbd> t <var class="var">coding</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Use coding system <var class="var">coding</var> for terminal output
(<code class="code">set-terminal-coding-system</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x <kbd class="key">RET</kbd> k <var class="var">coding</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Use coding system <var class="var">coding</var> for keyboard input
(<code class="code">set-keyboard-coding-system</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-RET-t"></a>
<a class="index-entry-id" id="index-set_002dterminal_002dcoding_002dsystem"></a>
<p>The command <kbd class="kbd">C-x <kbd class="key">RET</kbd> t</kbd> (<code class="code">set-terminal-coding-system</code>)
specifies the coding system for terminal output.  If you specify a
character code for terminal output, all characters output to the
terminal are translated into that coding system.
</p>
<p>This feature is useful for certain character-only terminals built to
support specific languages or character sets&#8212;for example, European
terminals that support one of the ISO Latin character sets.  You need to
specify the terminal coding system when using multibyte text, so that
Emacs knows which characters the terminal can actually handle.
</p>
<p>By default, output to the terminal is not translated at all, unless
Emacs can deduce the proper coding system from your terminal type or
your locale specification (see <a class="pxref" href="#Language-Environments">Language Environments</a>).
</p>
<a class="index-entry-id" id="index-C_002dx-RET-k"></a>
<a class="index-entry-id" id="index-set_002dkeyboard_002dcoding_002dsystem"></a>
<a class="index-entry-id" id="index-keyboard_002dcoding_002dsystem"></a>
<p>The command <kbd class="kbd">C-x <kbd class="key">RET</kbd> k</kbd> (<code class="code">set-keyboard-coding-system</code>),
or the variable <code class="code">keyboard-coding-system</code>, specifies the coding
system for keyboard input.  Character-code translation of keyboard
input is useful for terminals with keys that send non-<abbr class="acronym">ASCII</abbr>
graphic characters&#8212;for example, some terminals designed for ISO
Latin-1 or subsets of it.
</p>
<p>By default, keyboard input is translated based on your system locale
setting.  If your terminal does not really support the encoding
implied by your locale (for example, if you find it inserts a
non-<abbr class="acronym">ASCII</abbr> character if you type <kbd class="kbd">M-i</kbd>), you will need to set
<code class="code">keyboard-coding-system</code> to <code class="code">nil</code> to turn off encoding.
You can do this by putting
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(set-keyboard-coding-system nil)
</pre></div>

<p>in your init file.
</p>
<a class="index-entry-id" id="index-w32_002dset_002dconsole_002dcodepage"></a>
<p>Setting <code class="code">keyboard-coding-system</code> has no effect on MS-Windows,
except on old Windows 9X systems, in which case the encoding must
match the current codepage of the MS-Windows console, which can be
changed by calling <code class="code">w32-set-console-codepage</code>.
</p>
<p>There is a similarity between using a coding system translation for
keyboard input, and using an input method: both define sequences of
keyboard input that translate into single characters.  However, input
methods are designed to be convenient for interactive use by humans, and
the sequences that are translated are typically sequences of <abbr class="acronym">ASCII</abbr>
printing characters.  Coding systems typically translate sequences of
non-graphic characters.
</p>
</div>
<div class="section-level-extent" id="Fontsets">
<h3 class="section" id="Fontsets-1">23.14 Fontsets</h3>
<a class="index-entry-id" id="index-fontsets"></a>

<p>A font typically defines shapes for a single alphabet or script.
Therefore, displaying the entire range of scripts that Emacs supports
requires a collection of many fonts.  In Emacs, such a collection is
called a <em class="dfn">fontset</em>.  A fontset is defined by a list of font specifications,
each assigned to handle a range of character codes, and may fall back
on another fontset for characters that are not covered by the fonts
it specifies.
</p>
<a class="index-entry-id" id="index-fonts-for-various-scripts"></a>
<a class="index-entry-id" id="index-Intlfonts-package_002c-installation"></a>
<p>Each fontset has a name, like a font.  However, while fonts are
stored in the system and the available font names are defined by the
system, fontsets are defined within Emacs itself.  Once you have
defined a fontset, you can use it within Emacs by specifying its name,
anywhere that you could use a single font.  Of course, Emacs fontsets
can use only the fonts that your system supports.  If some characters
appear on the screen as empty boxes or hex codes, this means that the
fontset in use for them has no font for those characters.  In this
case, or if the characters are shown, but not as well as you would
like, you may need to install extra fonts or modify the fontset to use
specific fonts already installed on your system (see below).  Your
operating system may have optional fonts that you can install; or you
can install the GNU Intlfonts package, which includes fonts for most
supported scripts.<a class="footnote" id="DOCF9" href="#FOOT9"><sup>9</sup></a>
</p>
<p>Emacs creates three fontsets automatically: the <em class="dfn">standard
fontset</em>, the <em class="dfn">startup fontset</em> and the <em class="dfn">default fontset</em>.
The default fontset is most likely to have fonts for a wide variety of
non-<abbr class="acronym">ASCII</abbr> characters, and is the default fallback for the
other two fontsets, and if you set a default font rather than fontset.
However, it does not specify font family names, so results can be
somewhat random if you use it directly.  You can specify a particular
fontset by starting Emacs with the &#8216;<samp class="samp">-fn</samp>&#8217; option.  For example,
</p>
<div class="example">
<pre class="example-preformatted">emacs -fn fontset-standard
</pre></div>

<p>You can also specify a fontset with the &#8216;<samp class="samp">Font</samp>&#8217; resource (see <a class="pxref" href="X-Resources.xhtml#X-Resources">X Options and Resources</a>).
</p>
<p>If no fontset is specified for use, then Emacs uses an
<abbr class="acronym">ASCII</abbr> font, with &#8216;<samp class="samp">fontset-default</samp>&#8217; as a fallback for
characters the font does not cover.  The standard fontset is only used if
explicitly requested, despite its name.
</p>
<a class="index-entry-id" id="index-describe_002dfontset"></a>
<p>To show the information about a specific fontset, use the
<kbd class="kbd">M-x&#160;describe-fontset</kbd><!-- /@w --> command.  It prompts for a fontset
name, defaulting to the one used by the current frame, and then
displays all the subranges of characters and the fonts assigned to
them in that fontset.  To see which fonts Emacs is using in a session
started without a specific fontset (which is what happens normally),
type <kbd class="kbd">fontset-default <kbd class="key">RET</kbd></kbd> at the prompt, or just
<kbd class="kbd"><kbd class="key">RET</kbd></kbd> to describe the fontset used by the current frame.
</p>
<p>A fontset does not necessarily specify a font for every character
code.  If a fontset specifies no font for a certain character, or if
it specifies a font that does not exist on your system, then it cannot
display that character properly.  It will display that character as a
hex code or thin space or an empty box instead.  (See <a class="xref" href="Display.xhtml#Text-Display">glyphless characters</a>, for details.)  Or a fontset might specify a
font for some range of characters, but you may not like their visual
appearance.  If this happens, you may wish to modify your fontset; see
<a class="ref" href="#Modifying-Fontsets">Modifying Fontsets</a>, for how to do that.
</p>
</div>
<div class="section-level-extent" id="Defining-Fontsets">
<h3 class="section" id="Defining-Fontsets-1">23.15 Defining Fontsets</h3>

<a class="index-entry-id" id="index-standard_002dfontset_002dspec"></a>
<a class="index-entry-id" id="index-w32_002dstandard_002dfontset_002dspec"></a>
<a class="index-entry-id" id="index-ns_002dstandard_002dfontset_002dspec"></a>
<a class="index-entry-id" id="index-standard-fontset"></a>
<p>When running on X, Emacs creates a standard fontset automatically according to the value
of <code class="code">standard-fontset-spec</code>.  This fontset&#8217;s name is
</p>
<div class="example">
<pre class="example-preformatted">-*-fixed-medium-r-normal-*-16-*-*-*-*-*-fontset-standard
</pre></div>

<p>or just &#8216;<samp class="samp">fontset-standard</samp>&#8217; for short.
</p>
<p>On GNUstep and macOS, the standard fontset is created using the value of
<code class="code">ns-standard-fontset-spec</code>, and on MS Windows it is
created using the value of <code class="code">w32-standard-fontset-spec</code>.
</p>
<p>Bold, italic, and bold-italic variants of the standard fontset are
created automatically.  Their names have &#8216;<samp class="samp">bold</samp>&#8217; instead of
&#8216;<samp class="samp">medium</samp>&#8217;, or &#8216;<samp class="samp">i</samp>&#8217; instead of &#8216;<samp class="samp">r</samp>&#8217;, or both.
</p>
<a class="index-entry-id" id="index-startup-fontset"></a>
<p>Emacs generates a fontset automatically, based on any default
<abbr class="acronym">ASCII</abbr> font that you specify with the &#8216;<samp class="samp">Font</samp>&#8217; resource or
the &#8216;<samp class="samp">-fn</samp>&#8217; argument, or the default font that Emacs found when it
started.  This is the <em class="dfn">startup fontset</em> and its name is
<code class="code">fontset-startup</code>.  Emacs generates this fontset by replacing the
<var class="var">charset_registry</var> field with &#8216;<samp class="samp">fontset</samp>&#8217;, and replacing the
<var class="var">charset_encoding</var> field with &#8216;<samp class="samp">startup</samp>&#8217;, then using the
resulting string to specify a fontset.
</p>
<p>For instance, if you start Emacs with a font of this form,
</p>
<div class="example">
<pre class="example-preformatted">emacs -fn &quot;*courier-medium-r-normal--14-140-*-iso8859-1&quot;
</pre></div>

<p>Emacs generates the following fontset and uses it for the initial X
window frame:
</p>
<div class="example">
<pre class="example-preformatted">-*-courier-medium-r-normal-*-14-140-*-*-*-*-fontset-startup
</pre></div>

<p>The startup fontset will use the font that you specify, or a variant
with a different registry and encoding, for all the characters that
are supported by that font, and fallback on &#8216;<samp class="samp">fontset-default</samp>&#8217; for
other characters.
</p>
<p>With the X resource &#8216;<samp class="samp">Emacs.Font</samp>&#8217;, you can specify a fontset name
just like an actual font name.  But be careful not to specify a fontset
name in a wildcard resource like &#8216;<samp class="samp">Emacs*Font</samp>&#8217;&#8212;that wildcard
specification matches various other resources, such as for menus, and
menus cannot handle fontsets.  See <a class="xref" href="X-Resources.xhtml#X-Resources">X Options and Resources</a>.
</p>
<p>You can specify additional fontsets using X resources named
&#8216;<samp class="samp">Fontset-<var class="var">n</var></samp>&#8217;, where <var class="var">n</var> is an integer starting from 0.
The resource value should have this form:
</p>
<div class="example smallexample">
<pre class="example-preformatted"><var class="var">fontpattern</var>, <span class="r">[</span><var class="var">charset</var>:<var class="var">font</var><span class="r">]...</span>
</pre></div>

<p>where <var class="var">fontpattern</var> should have the form of a standard X font name
(see the previous fontset-startup example), except for the last two
fields.  They should have the form &#8216;<samp class="samp">fontset-<var class="var">alias</var></samp>&#8217;.
</p>
<p>Each fontset has two names, one long and one short.  The long name
is  <var class="var">fontpattern</var>.  The short name is &#8216;<samp class="samp">fontset-<var class="var">alias</var></samp>&#8217;,
the last 2 fields of the long name (e.g., &#8216;<samp class="samp">fontset-startup</samp>&#8217; for
the  fontset automatically created at startup).  You can refer to the
fontset by either name.
</p>
<p>The construct &#8216;<samp class="samp"><var class="var">charset</var>:<var class="var">font</var></samp>&#8217; specifies which font to
use (in this fontset) for one particular character set.  Here,
<var class="var">charset</var> is the name of a character set, and <var class="var">font</var> is the
font to use for that character set.  You can use this construct any
number of times in defining one fontset.
</p>
<p>For the other character sets, Emacs chooses a font based on
<var class="var">fontpattern</var>.  It replaces &#8216;<samp class="samp">fontset-<var class="var">alias</var></samp>&#8217; with values
that describe the character set.  For the <abbr class="acronym">ASCII</abbr> character font,
&#8216;<samp class="samp">fontset-<var class="var">alias</var></samp>&#8217; is replaced with &#8216;<samp class="samp">ISO8859-1</samp>&#8217;.
</p>
<p>In addition, when several consecutive fields are wildcards, Emacs
collapses them into a single wildcard.  This is to prevent use of
auto-scaled fonts.  Fonts made by scaling larger fonts are not usable
for editing, and scaling a smaller font is also not useful, because it is
better to use the smaller font in its own size, which is what Emacs
does.
</p>
<p>Thus if <var class="var">fontpattern</var> is this,
</p>
<div class="example">
<pre class="example-preformatted">-*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24
</pre></div>

<p>the font specification for <abbr class="acronym">ASCII</abbr> characters would be this:
</p>
<div class="example">
<pre class="example-preformatted">-*-fixed-medium-r-normal-*-24-*-ISO8859-1
</pre></div>

<p>and the font specification for Chinese GB2312 characters would be this:
</p>
<div class="example">
<pre class="example-preformatted">-*-fixed-medium-r-normal-*-24-*-gb2312*-*
</pre></div>

<p>You may not have any Chinese font matching the above font
specification.  Most X distributions include only Chinese fonts that
have &#8216;<samp class="samp">song ti</samp>&#8217; or &#8216;<samp class="samp">fangsong ti</samp>&#8217; in the <var class="var">family</var> field.  In
such a case, &#8216;<samp class="samp">Fontset-<var class="var">n</var></samp>&#8217; can be specified as:
</p>
<div class="example smallexample">
<pre class="example-preformatted">Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\
        chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*
</pre></div>

<p>Then, the font specifications for all but Chinese GB2312 characters have
&#8216;<samp class="samp">fixed</samp>&#8217; in the <var class="var">family</var> field, and the font specification for
Chinese GB2312 characters has a wild card &#8216;<samp class="samp">*</samp>&#8217; in the <var class="var">family</var>
field.
</p>
<a class="index-entry-id" id="index-create_002dfontset_002dfrom_002dfontset_002dspec"></a>
<p>The function that processes the fontset resource value to create the
fontset is called <code class="code">create-fontset-from-fontset-spec</code>.  You can also
call this function explicitly to create a fontset.
</p>
<p>See <a class="xref" href="Frames.xhtml#Fonts">Fonts</a>, for more information about font naming.
</p>
</div>
<div class="section-level-extent" id="Modifying-Fontsets">
<h3 class="section" id="Modifying-Fontsets-1">23.16 Modifying Fontsets</h3>
<a class="index-entry-id" id="index-fontsets_002c-modifying"></a>
<a class="index-entry-id" id="index-set_002dfontset_002dfont"></a>

<p>Fontsets do not always have to be created from scratch.  If only
minor changes are required it may be easier to modify an existing
fontset, usually &#8216;<samp class="samp">fontset-default</samp>&#8217;.  Modifying
&#8216;<samp class="samp">fontset-default</samp>&#8217; will also affect other fontsets that use it as
a fallback, so can be an effective way of fixing problems with the
fonts that Emacs chooses for a particular script.
</p>
<p>Fontsets can be modified using the function <code class="code">set-fontset-font</code>,
specifying a character, a charset, a script, or a range of characters
to modify the font for, and a font specification for the font to be
used.  Some examples are:
</p>
<div class="example">
<pre class="example-preformatted">;; Prefer a big5 font for han characters.
(set-fontset-font &quot;fontset-default&quot;
                  'han (font-spec :registry &quot;big5&quot;)
                  nil 'prepend)

;; Use MyPrivateFont for the Unicode private use area.
(set-fontset-font &quot;fontset-default&quot;  '(#xe000 . #xf8ff)
                  &quot;MyPrivateFont&quot;)

;; Use Liberation Mono for latin-3 charset.
(set-fontset-font &quot;fontset-default&quot; 'iso-8859-3
                  &quot;Liberation Mono&quot;)

;; Use DejaVu Sans Mono as a fallback in fontset-startup
;; before resorting to fontset-default.
(set-fontset-font &quot;fontset-startup&quot; nil &quot;DejaVu Sans Mono&quot;
                  nil 'append)
</pre></div>

<p>See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Fontsets.html#Fontsets">Fontsets</a> in <cite class="cite">GNU Emacs Lisp Reference Manual</cite>, for more
details about using the <code class="code">set-fontset-font</code> function.
</p>
<a class="index-entry-id" id="index-script-of-a-character"></a>
<a class="index-entry-id" id="index-codepoint-of-a-character"></a>
<p>If you don&#8217;t know the character&#8217;s codepoint or the script to which it
belongs, you can ask Emacs.  With point at the character, type
<kbd class="kbd">C-u&#160;C-x&#160;=</kbd><!-- /@w --> (<code class="code">what-cursor-position</code>), and this
information, together with much more, will be displayed in the
<samp class="file">*Help*</samp> buffer that Emacs pops up.  See <a class="xref" href="Basic.xhtml#Position-Info">Cursor Position Information</a>.  For
example, Japanese characters belong to the &#8216;<samp class="samp">kana</samp>&#8217; script, but
Japanese text also mixes them with Chinese characters so the following
uses the &#8216;<samp class="samp">han</samp>&#8217; script to set up Emacs to use the &#8216;<samp class="samp">Kochi
Gothic</samp>&#8217; font for Japanese text:
</p>
<div class="example">
<pre class="example-preformatted">(set-fontset-font &quot;fontset-default&quot; 'han &quot;Kochi Gothic&quot;)
</pre></div>

<a class="index-entry-id" id="index-CKJ-characters"></a>
<p>(For convenience, the &#8216;<samp class="samp">han</samp>&#8217; script in Emacs is set up to support
all of the Chinese, Japanese, and Korean, a.k.a. <abbr class="acronym">CJK</abbr>,
characters, not just Chinese characters.)
</p>
<a class="index-entry-id" id="index-script_002drepresentative_002dchars"></a>
<p>For the list of known scripts, see the variable
<code class="code">script-representative-chars</code>.
</p>
<p>Fontset settings like those above only affect characters that the
default font doesn&#8217;t support, so if the &#8216;<samp class="samp">Kochi Gothic</samp>&#8217; font
covers Latin characters, it will not be used for displaying Latin
scripts, since the default font used by Emacs usually covers Basic
Latin.
</p>
<a class="index-entry-id" id="index-ignore-font"></a>
<a class="index-entry-id" id="index-fonts_002c-how-to-ignore"></a>
<a class="index-entry-id" id="index-face_002dignored_002dfonts"></a>
<p>Some fonts installed on your system might be broken, or produce
unpleasant results for characters for which they are used, and you may
wish to instruct Emacs to completely ignore them while searching for a
suitable font required to display a character.  You can do that by
adding the offending fonts to the value of the variable
<code class="code">face-ignored-fonts</code>, which is a list.  Here&#8217;s an example to put
in your <samp class="file">~/.emacs</samp>:
</p>
<div class="example">
<pre class="example-preformatted">(add-to-list 'face-ignored-fonts &quot;Some Bad Font&quot;)
</pre></div>

</div>
<div class="section-level-extent" id="Undisplayable-Characters">
<h3 class="section" id="Undisplayable-Characters-1">23.17 Undisplayable Characters</h3>

<p>There may be some non-<abbr class="acronym">ASCII</abbr> characters that your
terminal cannot display.  Most text terminals support just a single
character set (use the variable <code class="code">default-terminal-coding-system</code>
to tell Emacs which one, <a class="ref" href="#Terminal-Coding">Coding Systems for Terminal I/O</a>); characters that
can&#8217;t be encoded in that coding system are displayed as &#8216;<samp class="samp">?</samp>&#8217; by
default.
</p>
<p>Graphical displays can display a broader range of characters, but
you may not have fonts installed for all of them; characters that have
no font appear as a hollow box.
</p>
<p>If you use Latin-1 characters but your terminal can&#8217;t display
Latin-1, you can arrange to display mnemonic <abbr class="acronym">ASCII</abbr> sequences
instead, e.g., &#8216;<samp class="samp">&quot;o</samp>&#8217; for o-umlaut.  Load the library
<samp class="file">iso-ascii</samp> to do this.
</p>
<a class="index-entry-id" id="index-latin1_002ddisplay"></a>
<p>If your terminal can display Latin-1, you can display characters
from other European character sets using a mixture of equivalent
Latin-1 characters and <abbr class="acronym">ASCII</abbr> mnemonics.  Customize the variable
<code class="code">latin1-display</code> to enable this.  The mnemonic <abbr class="acronym">ASCII</abbr>
sequences mostly correspond to those of the prefix input methods.
</p>
</div>
<div class="section-level-extent" id="Unibyte-Mode">
<h3 class="section" id="Unibyte-Editing-Mode">23.18 Unibyte Editing Mode</h3>

<a class="index-entry-id" id="index-European-character-sets"></a>
<a class="index-entry-id" id="index-accented-characters"></a>
<a class="index-entry-id" id="index-ISO-Latin-character-sets"></a>
<a class="index-entry-id" id="index-Unibyte-operation"></a>
<p>The ISO 8859 Latin-<var class="var">n</var> character sets define character codes in
the range 0240 to 0377 octal (160 to 255 decimal) to handle the
accented letters and punctuation needed by various European languages
(and some non-European ones).  Note that Emacs considers bytes with
codes in this range as raw bytes, not as characters, even in a unibyte
buffer, i.e., if you disable multibyte characters.  However, Emacs can
still handle these character codes as if they belonged to <em class="emph">one</em>
of the single-byte character sets at a time.  To specify <em class="emph">which</em>
of these codes to use, invoke <kbd class="kbd">M-x set-language-environment</kbd> and
specify a suitable language environment such as &#8216;<samp class="samp">Latin-<var class="var">n</var></samp>&#8217;.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Disabling-Multibyte.html#Disabling-Multibyte">Disabling Multibyte Characters</a> in <cite class="cite">GNU Emacs Lisp Reference Manual</cite>.
</p>
<a class="index-entry-id" id="index-unibyte_002ddisplay_002dvia_002dlanguage_002denvironment"></a>
<p>Emacs can also display bytes in the range 160 to 255 as readable
characters, provided the terminal or font in use supports them.  This
works automatically.  On a graphical display, Emacs can also display
single-byte characters through fontsets, in effect by displaying the
equivalent multibyte characters according to the current language
environment.  To request this, set the variable
<code class="code">unibyte-display-via-language-environment</code> to a non-<code class="code">nil</code>
value.  Note that setting this only affects how these bytes are
displayed, but does not change the fundamental fact that Emacs treats
them as raw bytes, not as characters.
</p>
<a class="index-entry-id" id="index-iso_002dascii-library"></a>
<p>If your terminal does not support display of the Latin-1 character
set, Emacs can display these characters as <abbr class="acronym">ASCII</abbr> sequences which at
least give you a clear idea of what the characters are.  To do this,
load the library <code class="code">iso-ascii</code>.  Similar libraries for other
Latin-<var class="var">n</var> character sets could be implemented, but have not been
so far.
</p>
<a class="index-entry-id" id="index-standard_002ddisplay_002d8bit"></a>
<a class="index-entry-id" id="index-8_002dbit-display"></a>
<p>Normally non-ISO-8859 characters (decimal codes between 128 and 159
inclusive) are displayed as octal escapes.  You can change this for
non-standard extended versions of ISO-8859 character sets by using the
function <code class="code">standard-display-8bit</code> in the <code class="code">disp-table</code> library.
</p>
<p>There are two ways to input single-byte non-<abbr class="acronym">ASCII</abbr>
characters:
</p>
<ul class="itemize mark-bullet">
<li><a class="index-entry-id" id="index-8_002dbit-input"></a>
You can use an input method for the selected language environment.
See <a class="xref" href="#Input-Methods">Input Methods</a>.  When you use an input method in a unibyte
buffer, the non-<abbr class="acronym">ASCII</abbr> character you specify with it is
converted to unibyte.

</li><li>If your keyboard can generate character codes 128 (decimal) and up,
representing non-<abbr class="acronym">ASCII</abbr> characters, you can type those
character codes directly.

<p>On a graphical display, you should not need to do anything special to
use these keys; they should simply work.  On a text terminal, you
should use the command <kbd class="kbd">M-x set-keyboard-coding-system</kbd> or
customize the variable <code class="code">keyboard-coding-system</code> to specify which
coding system your keyboard uses (see <a class="pxref" href="#Terminal-Coding">Coding Systems for Terminal I/O</a>).  Enabling
this feature will probably require you to use <kbd class="key">ESC</kbd> to type Meta
characters; however, on a console terminal or a terminal emulator such
as <code class="code">xterm</code>, you can arrange for Meta to be converted to <kbd class="key">ESC</kbd>
and still be able to type 8-bit characters present directly on the
keyboard or using <kbd class="key">Compose</kbd> or <kbd class="key">AltGr</kbd> keys.  See <a class="xref" href="User-Input.xhtml">Kinds of User Input</a>.
</p>
<a class="index-entry-id" id="index-input-methods_002c-native"></a>
<a class="index-entry-id" id="index-XIM_002c-X-Input-Methods"></a>
<a class="index-entry-id" id="index-GTK-input-methods"></a>
<p>Many modern systems provide <em class="dfn">native input methods</em> for many
languages whose characters don&#8217;t have keyboard keys assigned to them.
If Emacs was built with support for these native input methods, you
can activate such an input method and type the characters they
support.  How to activate and use these input methods depends on the
system and the input method, and will not be described here; see your
system documentation.  Here we describe some Emacs facilities to
control the use of the native input methods.
</p>
<a class="index-entry-id" id="index-x_002dgtk_002duse_002dnative_002dinput"></a>
<p>In Emacs built with the GTK toolkit, the variable
<code class="code">x-gtk-use-native-input</code> controls whether Emacs should receive
characters produced by GTK input methods.  If the value is <code class="code">nil</code>,
the default, Emacs uses the X input methods (<abbr class="acronym">XIM</abbr>), otherwise
it uses the GTK input methods.  The <code class="code">useXIM</code> X resource controls
whether to use <abbr class="acronym">XIM</abbr>, and <code class="code">inputStyle</code> X resource
controls the display on X of preview text generated by the native
input methods; see <a class="pxref" href="X-Resources.xhtml#Table-of-Resources">Table of X Resources for Emacs</a>.
</p>
<p>On MS-Windows, Emacs supports native inputs methods provided by
<abbr class="acronym">IMM</abbr>, the Input Method Manager, but that can be turned off if
needed; see <a class="pxref" href="Microsoft-Windows.xhtml#Windows-Keyboard">Keyboard Usage on MS-Windows</a>.
</p>
</li><li><a class="index-entry-id" id="index-iso_002dtransl-library"></a>
<a class="index-entry-id" id="index-compose-character"></a>
<a class="index-entry-id" id="index-dead-character"></a>
You can use the key <kbd class="kbd">C-x 8</kbd> as a compose-character prefix for
entry of non-<abbr class="acronym">ASCII</abbr> Latin-1 and other printing
characters.  <kbd class="kbd">C-x 8</kbd> is good for insertion (in the minibuffer as
well as other buffers), for searching, and in any other context where
a key sequence is allowed.

<p><kbd class="kbd">C-x 8</kbd> works by loading the <code class="code">iso-transl</code> library.  Once that
library is loaded, the <kbd class="key">Alt</kbd> modifier key, if the keyboard has
one, serves the same purpose as <kbd class="kbd">C-x 8</kbd>: use <kbd class="key">Alt</kbd> together
with an accent character to modify the following letter.  In addition,
if the keyboard has keys for the Latin-1 dead accent characters,
they too are defined to compose with the following character, once
<code class="code">iso-transl</code> is loaded.
</p>
<p>Use <kbd class="kbd">C-x 8 C-h</kbd> to list all the available <kbd class="kbd">C-x 8</kbd> translations.
</p></li></ul>

</div>
<div class="section-level-extent" id="Charsets">
<h3 class="section" id="Charsets-1">23.19 Charsets</h3>
<a class="index-entry-id" id="index-charsets"></a>

<p>In Emacs, <em class="dfn">charset</em> is short for &#8220;character set&#8221;.  Emacs
supports most popular charsets (such as <code class="code">ascii</code>,
<code class="code">iso-8859-1</code>, <code class="code">cp1250</code>, <code class="code">big5</code>, and <code class="code">unicode</code>), in
addition to some charsets of its own (such as <code class="code">emacs</code>,
<code class="code">unicode-bmp</code>, and <code class="code">eight-bit</code>).  All supported characters
belong to one or more charsets.
</p>
<p>Emacs normally does the right thing with respect to charsets, so
that you don&#8217;t have to worry about them.  However, it is sometimes
helpful to know some of the underlying details about charsets.
</p>
<p>One example is font selection (see <a class="pxref" href="Frames.xhtml#Fonts">Fonts</a>).  Each language
environment (see <a class="pxref" href="#Language-Environments">Language Environments</a>) defines a priority
list for the various charsets.  When searching for a font, Emacs
initially attempts to find one that can display the highest-priority
charsets.  For instance, in the Japanese language environment, the
charset <code class="code">japanese-jisx0208</code> has the highest priority, so Emacs
tries to use a font whose <code class="code">registry</code> property is
&#8216;<samp class="samp">JISX0208.1983-0</samp>&#8217;.
</p>
<a class="index-entry-id" id="index-list_002dcharset_002dchars"></a>
<a class="index-entry-id" id="index-characters-in-a-certain-charset"></a>
<a class="index-entry-id" id="index-describe_002dcharacter_002dset"></a>
<p>There are two commands that can be used to obtain information about
charsets.  The command <kbd class="kbd">M-x list-charset-chars</kbd> prompts for a
charset name, and displays all the characters in that character set.
The command <kbd class="kbd">M-x describe-character-set</kbd> prompts for a charset
name, and displays information about that charset, including its
internal representation within Emacs.
</p>
<a class="index-entry-id" id="index-list_002dcharacter_002dsets"></a>
<p><kbd class="kbd">M-x list-character-sets</kbd> displays a list of all supported
charsets.  The list gives the names of charsets and additional
information to identity each charset; for more details, see the
<a class="url" href="https://www.itscj.ipsj.or.jp/itscj_english/iso-ir/ISO-IR.pdf">ISO International Register of Coded Character Sets to be Used with
Escape Sequences (ISO-IR)</a> maintained by
the <a class="url" href="https://www.itscj.ipsj.or.jp/itscj_english/">Information Processing Society of Japan/Information Technology
Standards Commission of Japan (IPSJ/ITSCJ)</a>.  In this list,
charsets are divided into two categories: <em class="dfn">normal charsets</em> are
listed first, followed by <em class="dfn">supplementary charsets</em>.  A
supplementary charset is one that is used to define another charset
(as a parent or a subset), or to provide backward-compatibility for
older Emacs versions.
</p>
<p>To find out which charset a character in the buffer belongs to, put
point before it and type <kbd class="kbd">C-u C-x =</kbd> (see <a class="pxref" href="#International-Chars">Introduction to International Character Sets</a>).
</p>
</div>
<div class="section-level-extent" id="Bidirectional-Editing">
<h3 class="section" id="Bidirectional-Editing-1">23.20 Bidirectional Editing</h3>
<a class="index-entry-id" id="index-bidirectional-editing"></a>
<a class="index-entry-id" id="index-right_002dto_002dleft-text"></a>

<p>Emacs supports editing text written in scripts, such as Arabic,
Farsi, and Hebrew, whose natural ordering of horizontal text for
display is from right to left.  However, digits and Latin text
embedded in these scripts are still displayed left to right.  It is
also not uncommon to have small portions of text in Arabic or Hebrew
embedded in an otherwise Latin document; e.g., as comments and strings
in a program source file.  For these reasons, text that uses these
scripts is actually <em class="dfn">bidirectional</em>: a mixture of runs of
left-to-right and right-to-left characters.
</p>
<p>This section describes the facilities and options provided by Emacs
for editing bidirectional text.
</p>
<a class="index-entry-id" id="index-logical-order"></a>
<a class="index-entry-id" id="index-visual-order"></a>
<p>Emacs stores right-to-left and bidirectional text in the so-called
<em class="dfn">logical</em> (or <em class="dfn">reading</em>) order: the buffer or string position
of the first character you read precedes that of the next character.
Reordering of bidirectional text into the <em class="dfn">visual</em> order happens
at display time.  As a result, character positions no longer increase
monotonically with their positions on display.  Emacs implements the
Unicode Bidirectional Algorithm (UBA) described in the
<a class="uref" href="https://unicode.org/reports/tr9/">Unicode Standard Annex #9</a>, for
reordering of bidirectional text for display.
It deviates from the UBA only in how continuation lines are displayed
when text direction is opposite to the base paragraph direction,
e.g., when a long line of English text appears in a right-to-left
paragraph.
</p>
<a class="index-entry-id" id="index-bidi_002ddisplay_002dreordering"></a>
<p>The buffer-local variable <code class="code">bidi-display-reordering</code> controls
whether text in the buffer is reordered for display.  If its value is
non-<code class="code">nil</code>, Emacs reorders characters that have right-to-left
directionality when they are displayed.  The default value is
<code class="code">t</code>.
</p>
<a class="index-entry-id" id="index-base-direction-of-paragraphs"></a>
<a class="index-entry-id" id="index-paragraph_002c-base-direction"></a>
<a class="index-entry-id" id="index-bidi_002dparagraph_002dstart_002dre"></a>
<a class="index-entry-id" id="index-bidi_002dparagraph_002dseparate_002dre"></a>
<p>Each paragraph of bidirectional text can have its own <em class="dfn">base
direction</em>, either right-to-left or left-to-right.  Text in
left-to-right paragraphs begins on the screen at the left margin of
the window and is truncated or continued when it reaches the right
margin.  By contrast, text in right-to-left paragraphs is displayed
starting at the right margin and is continued or truncated at the left
margin.  By default, paragraph boundaries are empty lines, i.e., lines
consisting entirely of whitespace characters.  To change that, you can
customize the two variables <code class="code">bidi-paragraph-start-re</code> and
<code class="code">bidi-paragraph-separate-re</code>, whose values should be regular
expressions (strings); e.g., to have a single newline start a new
paragraph, set both of these variables to <code class="code">&quot;^&quot;</code>.  These two
variables are buffer-local (see <a class="pxref" href="Customization.xhtml#Locals">Local Variables</a>).
</p>
<a class="index-entry-id" id="index-bidi_002dparagraph_002ddirection"></a>
<p>Emacs determines the base direction of each paragraph dynamically,
based on the text at the beginning of the paragraph.  However,
sometimes a buffer may need to force a certain base direction for its
paragraphs.  The variable <code class="code">bidi-paragraph-direction</code>, if
non-<code class="code">nil</code>, disables the dynamic determination of the base
direction, and instead forces all paragraphs in the buffer to have the
direction specified by its buffer-local value.  The value can be either
<code class="code">right-to-left</code> or <code class="code">left-to-right</code>.  Any other value is
interpreted as <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-LRM"></a>
<a class="index-entry-id" id="index-RLM"></a>
<p>Alternatively, you can control the base direction of a paragraph by
inserting special formatting characters in front of the paragraph.
The special character <code class="code">RIGHT-TO-LEFT MARK</code>, or <small class="sc">RLM</small>, forces
the right-to-left direction on the following paragraph, while
<code class="code">LEFT-TO-RIGHT MARK</code>, or <small class="sc">LRM</small> forces the left-to-right
direction.  (You can use <kbd class="kbd">C-x 8 <kbd class="key">RET</kbd></kbd> to insert these characters.)
In a GUI session, the <small class="sc">LRM</small> and <small class="sc">RLM</small> characters display as very
thin blank characters; on text terminals they display as blanks.
</p>
<p>Because characters are reordered for display, Emacs commands that
operate in the logical order or on stretches of buffer positions may
produce unusual effects.  For example, the commands <kbd class="kbd">C-f</kbd> and
<kbd class="kbd">C-b</kbd> move point in the logical order, so the cursor will
sometimes jump when point traverses reordered bidirectional text.
Similarly, a highlighted region covering a contiguous range of
character positions may look discontinuous if the region spans
reordered text.  This is normal and similar to the behavior of other
programs that support bidirectional text.
</p>
<a class="index-entry-id" id="index-RIGHT_002c-and-bidirectional-text"></a>
<a class="index-entry-id" id="index-LEFT_002c-and-bidirectional-text"></a>
<a class="index-entry-id" id="index-right_002dchar_002c-and-bidirectional-text"></a>
<a class="index-entry-id" id="index-left_002dchar_002c-and-bidirectional-text"></a>
<p>Cursor motion commands bound to arrow keys, such as <kbd class="key">LEFT</kbd> and
<kbd class="kbd">C-<kbd class="key">RIGHT</kbd></kbd>, are sensitive to the base direction of the
current paragraph.  In a left-to-right paragraph, commands bound to
<kbd class="key">RIGHT</kbd> with or without modifiers move <em class="emph">forward</em> through
buffer text, but in a right-to-left paragraph they move
<em class="emph">backward</em> instead.  This reflects the fact that in a
right-to-left paragraph buffer positions predominantly increase when
moving to the left on display.
</p>
<p>When you move out of a paragraph, the meaning of the arrow keys
might change if the base direction of the preceding or the following
paragraph is different from the paragraph out of which you moved.
When that happens, you need to adjust the arrow key you press to the
new base direction.
</p>
<a class="index-entry-id" id="index-visual_002dorder_002dcursor_002dmovement"></a>
<a class="index-entry-id" id="index-cursor_002c-visual_002dorder-motion"></a>
<p>By default, <kbd class="key">LEFT</kbd> and <kbd class="key">RIGHT</kbd> move in the logical order,
but if <code class="code">visual-order-cursor-movement</code> is non-<code class="code">nil</code>, these
commands move to the character that is, correspondingly, to the left
or right of the current screen position, moving to the next or
previous screen line as appropriate.  Note that this might potentially
move point many buffer positions away, depending on the surrounding
bidirectional context.
</p>
<a class="index-entry-id" id="index-bidi-formatting-control-characters"></a>
<p>Bidirectional text sometimes uses special formatting characters to
affect the reordering of text for display.  The <small class="sc">LRM</small> and <small class="sc">RLM</small>
characters, mentioned above, are two such characters, but there are
more of them.  They are by default displayed as thin space glyphs on
GUI frames, and as simple spaces on text-mode frames.  If you want to
be aware of these special control characters, so that their effect on
display does not come as a surprise, you can turn on the
<code class="code">glyphless-display-mode</code> (see <a class="pxref" href="Display.xhtml#Text-Display">How Text Is Displayed</a>).  This minor mode
will cause these formatting characters to be displayed as acronyms
inside a small box, so that they stand out on display, and make their
effect easier to understand.
</p></div>
</div>
<div class="footnotes-segment">
<h4 class="footnotes-heading">Footnotes</h4>

<h5 class="footnote-body-heading"><a id="FOOT8" href="#DOCF8">(8)</a></h5>
<p>It is also specified for
MIME &#8216;<samp class="samp">text/*</samp>&#8217; bodies and in other network transport contexts.  It
is different from the SGML reference syntax record-start/record-end
format, which Emacs doesn&#8217;t support directly.</p>
<h5 class="footnote-body-heading"><a id="FOOT9" href="#DOCF9">(9)</a></h5>
<p>If you run Emacs on X, you may need to
inform the X server about the location of the newly installed fonts
with commands such as:
</p>
<div class="example">
<pre class="example-preformatted"> xset fp+ /usr/local/share/emacs/fonts
 xset fp rehash
</pre></div>
</div>



</body>
</html>
