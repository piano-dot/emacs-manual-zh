<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>28 Compiling and Testing Programs (GNU Emacs Manual)</title>

<meta name="description" content="28 Compiling and Testing Programs (GNU Emacs Manual)"/>
<meta name="keywords" content="28 Compiling and Testing Programs (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Maintaining.xhtml#Maintaining" rel="next" title="29 Maintaining Large Programs"/>
<link href="Programs.xhtml#Programs" rel="prev" title="27 Editing Programs"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
span.r {font-family: initial; font-weight: normal; font-style: normal}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Building">

<h2 class="chapter" id="Compiling-and-Testing-Programs">28 Compiling and Testing Programs</h2>
<a class="index-entry-id" id="index-building-programs"></a>
<a class="index-entry-id" id="index-program-building"></a>
<a class="index-entry-id" id="index-running-Lisp-functions"></a>

<p>The previous chapter discusses the Emacs commands that are useful
for making changes in programs.  This chapter deals with commands that
assist in the process of compiling and testing programs.
</p>

<div class="section-level-extent" id="Compilation">
<h3 class="section" id="Running-Compilations-under-Emacs">28.1 Running Compilations under Emacs</h3>
<a class="index-entry-id" id="index-inferior-process"></a>
<a class="index-entry-id" id="index-make"></a>
<a class="index-entry-id" id="index-compilation-errors"></a>
<a class="index-entry-id" id="index-error-log"></a>

<p>Emacs can run compilers for languages such as C and Fortran, feeding
the compilation log into an Emacs buffer.  It can also parse the error
messages and show you where the errors occurred.
</p>
<dl class="table">
<dt><kbd class="kbd">M-x compile</kbd></dt>
<dd><p>Run a compiler asynchronously under Emacs, with error messages going to
the <samp class="file">*compilation*</samp> buffer.
</p>
</dd>
<dt><kbd class="kbd">M-x recompile</kbd></dt>
<dt><kbd class="kbd">g<span class="r"> (Compilation mode)</span></kbd></dt>
<dd><p>Invoke a compiler with the same command as in the last invocation of
<kbd class="kbd">M-x compile</kbd>.
</p>
</dd>
<dt><kbd class="kbd">M-x kill-compilation</kbd></dt>
<dd><p>Kill the running compilation subprocess.
</p></dd>
</dl>

<a class="index-entry-id" id="index-compile"></a>
<p>To run <code class="code">make</code> or another compilation command, type <kbd class="kbd">M-x
compile</kbd>.  This reads a shell command line using the minibuffer, and
then executes the command by running a shell as a subprocess (or
<em class="dfn">inferior process</em>) of Emacs.  The output is inserted in a buffer
named <samp class="file">*compilation*</samp>.  The current buffer&#8217;s default directory is
used as the working directory for the execution of the command, so by
default compilation takes place in that directory.
</p>
<a class="index-entry-id" id="index-compile_002dcommand"></a>
<p>The default compilation command is &#8216;<samp class="samp">make -k</samp>&#8217;, which is usually
correct for programs compiled using the <code class="command">make</code> utility (the
&#8216;<samp class="samp">-k</samp>&#8217; flag tells <code class="command">make</code> to continue compiling as much as
possible after an error).  See <a href="https://www.gnu.org/software/make/manual/html_node/index.html#Top">Make</a> in <cite class="cite">GNU Make Manual</cite>.
If you have done <kbd class="kbd">M-x compile</kbd> before, the command that you
specified is automatically stored in the variable
<code class="code">compile-command</code>; this is used as the default the next time you
type <kbd class="kbd">M-x compile</kbd>.  A file can also specify a file-local value
for <code class="code">compile-command</code> (see <a class="pxref" href="Customization.xhtml#File-Variables">Local Variables in Files</a>).
</p>
<p>Starting a compilation displays the <samp class="file">*compilation*</samp> buffer in
another window but does not select it.  While the compilation is
running, the word &#8216;<samp class="samp">run</samp>&#8217; is shown in the major mode indicator for
the <samp class="file">*compilation*</samp> buffer, and the word &#8216;<samp class="samp">Compiling</samp>&#8217; appears
in all mode lines.  You do not have to keep the <samp class="file">*compilation*</samp>
buffer visible while compilation is running; it continues in any case.
When the compilation ends, for whatever reason, the mode line of the
<samp class="file">*compilation*</samp> buffer changes to say &#8216;<samp class="samp">exit</samp>&#8217; (followed by
the exit code: &#8216;<samp class="samp">[0]</samp>&#8217; for a normal exit), or &#8216;<samp class="samp">signal</samp>&#8217; (if a
signal terminated the process).
</p>
<p>If you want to watch the compilation transcript as it appears,
switch to the <samp class="file">*compilation*</samp> buffer and move point to the end of
the buffer.  When point is at the end, new compilation output is
inserted above point, which remains at the end.  Otherwise, point
remains fixed while compilation output is added at the end of the
buffer.
</p>
<p>While compilation proceeds, the mode line shows the number of
errors, warnings, and informational messages emitted by the compiler
so far.
</p>
<a class="index-entry-id" id="index-compilation-buffer_002c-keeping-point-at-end"></a>
<a class="index-entry-id" id="index-compilation_002dscroll_002doutput"></a>
<p>If you change the variable <code class="code">compilation-scroll-output</code> to a
non-<code class="code">nil</code> value, the <samp class="file">*compilation*</samp> buffer scrolls
automatically to follow the output.  If the value is
<code class="code">first-error</code>, scrolling stops when the first error appears,
leaving point at that error.  For any other non-<code class="code">nil</code> value,
scrolling continues until there is no more output.
</p>
<a class="index-entry-id" id="index-recompile"></a>
<p>To rerun the last compilation with the same command, type <kbd class="kbd">M-x
recompile</kbd>.  This reuses the compilation command from the last
invocation of <kbd class="kbd">M-x compile</kbd>.  It also reuses the
<samp class="file">*compilation*</samp> buffer and starts the compilation in its default
directory, which is the directory in which the previous compilation
was started.  In <samp class="file">*compilation*</samp> buffers this command is bound to
<kbd class="kbd">g</kbd>.
</p>
<a class="index-entry-id" id="index-kill_002dcompilation"></a>
<a class="index-entry-id" id="index-compilation_002dalways_002dkill"></a>
<p>Starting a new compilation also kills any compilation already
running in <samp class="file">*compilation*</samp>, as the buffer can only handle one
compilation at any time.  However, <kbd class="kbd">M-x compile</kbd> and <kbd class="kbd">M-x
recompile</kbd> ask for confirmation before actually killing a compilation
that is running; to always automatically kill the compilation without
asking, change the variable <code class="code">compilation-always-kill</code> to
<code class="code">t</code>.  You can also kill a compilation process with the command
<kbd class="kbd">M-x kill-compilation</kbd>.
</p>
<p>To run two compilations at once, start the first one, then rename
the <samp class="file">*compilation*</samp> buffer (perhaps using <code class="code">rename-uniquely</code>;
see <a class="pxref" href="Buffers.xhtml#Misc-Buffer">Miscellaneous Buffer Operations</a>), then switch buffers and start the other
compilation.  This will create a new <samp class="file">*compilation*</samp> buffer.
</p>
<a class="index-entry-id" id="index-compilation_002denvironment"></a>
<p>You can control the environment passed to the compilation command
with the variable <code class="code">compilation-environment</code>.  Its value is a list
of environment variable settings; each element should be a string of
the form <code class="code">&quot;<var class="var">envvarname</var>=<var class="var">value</var>&quot;</code>.  These environment
variable settings override the usual ones.
</p>
<a class="index-entry-id" id="index-compilation_002dmax_002doutput_002dline_002dlength"></a>
<p>Displaying extremely long lines in compilation output can slow Emacs
down.  Lines that are longer than
<code class="code">compilation-max-output-line-length</code> will have the portion that&#8217;s
exceeds that limit hidden behind a button that can be clicked on to
reveal the hidden portion.  Set this variable to <code class="code">nil</code> to never
hide anything.
</p>
</div>
<div class="section-level-extent" id="Compilation-Mode">
<h3 class="section" id="Compilation-Mode-1">28.2 Compilation Mode</h3>

<a class="index-entry-id" id="index-Compilation-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Compilation"></a>
<a class="index-entry-id" id="index-locus"></a>
<p>The <samp class="file">*compilation*</samp> buffer uses a major mode called Compilation
mode.  Compilation mode turns each error message in the buffer into a
hyperlink; you can move point to it and type <kbd class="key">RET</kbd>, or click on it
with the mouse (see <a class="pxref" href="Frames.xhtml#Mouse-References">Following References with the Mouse</a>), to visit the <em class="dfn">locus</em> of
the error message in a separate window.  The locus is the specific
position in a file where that error occurred.
</p>
<a class="index-entry-id" id="index-compilation-mode-faces"></a>
<a class="index-entry-id" id="index-compilation_002derror"></a>
<a class="index-entry-id" id="index-compilation_002dwarning"></a>
<p>The appearance of the <samp class="file">*compilation*</samp> buffer can be controlled
by customizing the faces which are used to highlight parts of the
<samp class="file">*compilation*</samp> buffer, e.g., <code class="code">compilation-error</code> or
<code class="code">compilation-warning</code>, for error and warning messages
respectively.  Note that since those faces inherit from the
<code class="code">error</code> and <code class="code">warning</code> faces, it is also possible to
customize the parent face directly instead.
</p>
<p>Use <kbd class="kbd">M-x&#160;customize-group&#160;RET&#160;compilation</kbd><!-- /@w --> to see the entire
list of customization variables and faces.
</p>
<a class="index-entry-id" id="index-compile_002dgoto_002derror"></a>
<a class="index-entry-id" id="index-compilation_002dauto_002djump_002dto_002dfirst_002derror"></a>
<p>If you change the variable
<code class="code">compilation-auto-jump-to-first-error</code> to a non-<code class="code">nil</code> value,
Emacs automatically visits the locus of the first error message that
appears in the <samp class="file">*compilation*</samp> buffer.  (This variable can also
have the values <code class="code">if-location-known</code> and <code class="code">first-known</code>, which
modify the conditions for automatically visiting the error locus.)
</p>
<p>Compilation mode provides the following additional commands.  These
commands can also be used in <samp class="file">*grep*</samp> buffers, where the
hyperlinks are search matches rather than error messages (see <a class="pxref" href="#Grep-Searching">Searching with Grep under Emacs</a>).
</p>
<dl class="table">
<dt><kbd class="kbd">M-g M-n</kbd></dt>
<dt><kbd class="kbd">M-g n</kbd></dt>
<dt><kbd class="kbd">C-x `</kbd></dt>
<dd><p>Visit the locus of the next error message or match (<code class="code">next-error</code>).
</p></dd>
<dt><kbd class="kbd">M-g M-p</kbd></dt>
<dt><kbd class="kbd">M-g p</kbd></dt>
<dd><p>Visit the locus of the previous error message or match
(<code class="code">previous-error</code>).
</p></dd>
<dt><kbd class="kbd">M-n</kbd></dt>
<dd><p>Move point to the next error message or match, without visiting its
locus (<code class="code">compilation-next-error</code>).
</p></dd>
<dt><kbd class="kbd">M-p</kbd></dt>
<dd><p>Move point to the previous error message or match, without visiting
its locus (<code class="code">compilation-previous-error</code>).
</p></dd>
<dt><kbd class="kbd">M-}</kbd></dt>
<dd><p>Move point to the next error message or match occurring in a different
file (<code class="code">compilation-next-file</code>).
</p></dd>
<dt><kbd class="kbd">M-{</kbd></dt>
<dd><p>Move point to the previous error message or match occurring in a
different file (<code class="code">compilation-previous-file</code>).
</p></dd>
<dt><kbd class="kbd">C-c C-f</kbd></dt>
<dd><p>Toggle Next Error Follow minor mode, which makes cursor motion in the
compilation buffer produce automatic source display.
</p></dd>
<dt><kbd class="kbd">g</kbd></dt>
<dd><p>Re-run the last command whose output is shown in the
<samp class="file">*compilation*</samp> buffer.
</p></dd>
<dt><kbd class="kbd">M-x next-error-select-buffer</kbd></dt>
<dd><p>Select a buffer to be used by next invocation of <code class="code">next-error</code> and
<code class="code">previous-error</code>.
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002dg-M_002dn"></a>
<a class="index-entry-id" id="index-M_002dg-n"></a>
<a class="index-entry-id" id="index-C_002dx-_0060"></a>
<a class="index-entry-id" id="index-next_002derror"></a>
<a class="index-entry-id" id="index-next_002derror_002dmessage_002dhighlight"></a>
<a class="index-entry-id" id="index-next_002derror_002dhighlight"></a>
<a class="index-entry-id" id="index-next_002derror_002dhighlight_002dno_002dselect"></a>
<p>To visit errors sequentially, type <kbd class="kbd">C-x&#160;`</kbd><!-- /@w -->
(<code class="code">next-error</code>), or equivalently <kbd class="kbd">M-g M-n</kbd> or <kbd class="kbd">M-g n</kbd>.
This command can be invoked from any buffer, not just a Compilation
mode buffer.  The first time you invoke it after a compilation, it
visits the locus of the first error message.  Each subsequent
<kbd class="kbd">M-g&#160;M-n</kbd><!-- /@w --> visits the next error, in a similar fashion.  If you
visit a specific error with <kbd class="key">RET</kbd> or a mouse click in the
<samp class="file">*compilation*</samp> buffer, subsequent <kbd class="kbd">M-g&#160;M-n</kbd><!-- /@w --> commands
advance from there.  When <kbd class="kbd">M-g&#160;M-n</kbd><!-- /@w --> finds no more error messages
to visit, it signals an error.  <kbd class="kbd">C-u&#160;M-g&#160;M-n</kbd><!-- /@w --> starts again from
the beginning of the compilation buffer, and visits the first locus.
</p>
<p><kbd class="kbd">M-g M-p</kbd> or <kbd class="kbd">M-g p</kbd> (<code class="code">previous-error</code>) iterates
through errors in the opposite direction.
</p>
<a class="index-entry-id" id="index-next_002derror_002dfind_002dbuffer_002dfunction"></a>
<a class="index-entry-id" id="index-next_002derror_002dselect_002dbuffer"></a>
<p>The <code class="code">next-error</code> and <code class="code">previous-error</code> commands don&#8217;t just
act on the errors or matches listed in <samp class="file">*compilation*</samp> and
<samp class="file">*grep*</samp> buffers; they also know how to iterate through error or
match lists produced by other commands, such as <kbd class="kbd">M-x occur</kbd>
(see <a class="pxref" href="Search.xhtml#Other-Repeating-Search">Other Search-and-Loop Commands</a>).  If the current buffer contains
error messages or matches, these commands will iterate through them;
otherwise, Emacs looks for a buffer containing error messages or
matches amongst the windows of the selected frame (if the variable
<code class="code">next-error-find-buffer-function</code> is customized to the value
<code class="code">next-error-buffer-on-selected-frame</code>), then for a buffer used
previously by <code class="code">next-error</code> or <code class="code">previous-error</code>, and finally
all other buffers.  Any buffer these commands iterate through that is
not currently displayed in a window will be displayed.  You can use
the <code class="command">next-error-select-buffer</code> command to switch to
a different buffer to be used by the subsequent invocation of
<code class="code">next-error</code>.
</p>
<a class="index-entry-id" id="index-compilation_002dskip_002dthreshold"></a>
<p>By default, the <code class="code">next-error</code> and <code class="code">previous-error</code> commands
skip less important messages.  The variable
<code class="code">compilation-skip-threshold</code> controls this.  The default value,
1, means to skip anything less important than a warning.  A value of 2
means to skip anything less important than an error, while 0 means not
to skip any messages.
</p>
<p>When Emacs visits the locus of an error message, it momentarily
highlights the relevant source line.  The duration of this highlight
is determined by the variable <code class="code">next-error-highlight</code> for the locus
in the selected buffer, and <code class="code">next-error-highlight-no-select</code> for
the locus in non-selected buffers.  Also you can customize the variable
<code class="code">next-error-message-highlight</code> that defines how to highlight the
current error message in the buffer that contains messages.
</p>
<a class="index-entry-id" id="index-compilation_002dcontext_002dlines"></a>
<p>If the <samp class="file">*compilation*</samp> buffer is shown in a window with a left
fringe (see <a class="pxref" href="Display.xhtml#Fringes">Window Fringes</a>), the locus-visiting commands put an arrow in
the fringe, pointing to the current error message.  If the window has
no left fringe, such as on a text terminal, these commands scroll the
window so that the current message is at the top of the window.  If
you change the variable <code class="code">compilation-context-lines</code> to <code class="code">t</code>,
a visible arrow is inserted before column zero instead.  If you change
the variable to an integer value <var class="var">n</var>, these commands scroll the
window so that the current error message is <var class="var">n</var> lines from the
top, whether or not there is a fringe; the default value, <code class="code">nil</code>,
gives the behavior described above.
</p>
<a class="index-entry-id" id="index-compilation_002dhidden_002doutput"></a>
<p>Compilation output can sometimes be very verbose, and much of it isn&#8217;t
of particular interest to a user.  The
<code class="code">compilation-hidden-output</code> user option should either be a regexp
or a list of regexps, and output that matches will be made invisible.
For instance, to hide the verbose output from recursive makefiles, you
can say something like:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(setq compilation-hidden-output
      '(&quot;^make[^\n]+\n&quot;))
</pre></div>

<a class="index-entry-id" id="index-compilation_002derror_002dregexp_002dalist"></a>
<a class="index-entry-id" id="index-grep_002dregexp_002dalist"></a>
<p>To parse messages from the compiler, Compilation mode uses the
variable <code class="code">compilation-error-regexp-alist</code> which lists various
error message formats and tells Emacs how to extract the locus from
each.  A similar variable, <code class="code">grep-regexp-alist</code>, tells Emacs how
to parse output from a <code class="code">grep</code> command (see <a class="pxref" href="#Grep-Searching">Searching with Grep under Emacs</a>).
</p>
<a class="index-entry-id" id="index-compilation_002dnext_002derror"></a>
<a class="index-entry-id" id="index-compilation_002dprevious_002derror"></a>
<a class="index-entry-id" id="index-compilation_002dnext_002dfile"></a>
<a class="index-entry-id" id="index-compilation_002dprevious_002dfile"></a>
<p>Compilation mode also defines the keys <kbd class="key">SPC</kbd> and <kbd class="key">DEL</kbd> to
scroll by screenfuls; <kbd class="kbd">M-n</kbd> (<code class="code">compilation-next-error</code>) and
<kbd class="kbd">M-p</kbd> (<code class="code">compilation-previous-error</code>) to move to the next or
previous error message; and <kbd class="kbd">M-{</kbd> (<code class="code">compilation-next-file</code>)
and <kbd class="kbd">M-}</kbd> (<code class="code">compilation-previous-file</code>) to move to the next
or previous error message for a different source file.
</p>
<a class="index-entry-id" id="index-Next-Error-Follow-mode"></a>
<a class="index-entry-id" id="index-next_002derror_002dfollow_002dminor_002dmode"></a>
<p>You can type <kbd class="kbd">C-c C-f</kbd> to toggle Next Error Follow mode.  In
this minor mode, ordinary cursor motion in the compilation buffer
automatically updates the source buffer, i.e., moving the cursor over
an error message causes the locus of that error to be displayed.
</p>
<p>The features of Compilation mode are also available in a minor mode
called Compilation Minor mode.  This lets you parse error messages in
any buffer, not just a normal compilation output buffer.  Type
<kbd class="kbd">M-x compilation-minor-mode</kbd> to enable the minor mode.  For
instance, in an Rlogin buffer (see <a class="pxref" href="Shell.xhtml#Remote-Host">Remote Host Shell</a>), Compilation minor
mode automatically accesses remote source files by FTP (see <a class="pxref" href="Files.xhtml#File-Names">File Names</a>).
</p>
</div>
<div class="section-level-extent" id="Compilation-Shell">
<h3 class="section" id="Subshells-for-Compilation">28.3 Subshells for Compilation</h3>

<p>This section includes various techniques and advice for using a
shell and its features in compilation buffers.  This material is
specific to local compilations, and will most probably not work in (or
be irrelevant to) compilation buffers whose default directory is on
remote hosts.
</p>
<p>The <kbd class="kbd">M-x compile</kbd> command uses a shell to run the compilation
command, but specifies the option for a noninteractive shell.  This
means, in particular, that the shell should start with no prompt.  If
you find your usual shell prompt making an unsightly appearance in the
<samp class="file">*compilation*</samp> buffer, it means you have made a mistake in your
shell&#8217;s init file by setting the prompt unconditionally.  (This init
file may be named <samp class="file">.bashrc</samp>, <samp class="file">.profile</samp>, <samp class="file">.cshrc</samp>,
<samp class="file">.shrc</samp>, etc., depending on what shell you use.)  The shell init
file should set the prompt only if there already is a prompt.  Here&#8217;s
how to do it in bash:
</p>
<div class="example">
<pre class="example-preformatted">if [ &quot;${PS1+set}&quot; = set ]
then PS1=...
fi
</pre></div>

<p>And here&#8217;s how to do it in csh:
</p>
<div class="example">
<pre class="example-preformatted">if ($?prompt) set prompt = ...
</pre></div>

<a class="index-entry-id" id="index-TERM_002c-environment-variable_002c-in-compilation-mode"></a>
<p>If you want to customize the value of the <code class="env">TERM</code> environment
variable passed to the compilation subshell, customize the variable
<code class="code">comint-terminfo-terminal</code> (see <a class="pxref" href="Shell.xhtml#Shell-Options">Shell Mode Options</a>).
</p>
<p>Emacs does not expect a compiler process to launch asynchronous
subprocesses; if it does, and they keep running after the main
compiler process has terminated, Emacs may kill them or their output
may not arrive in Emacs.  To avoid this problem, make the main
compilation process wait for its subprocesses to finish.  In a shell
script, you can do this using &#8216;<samp class="samp">$!</samp>&#8217; and &#8216;<samp class="samp">wait</samp>&#8217;, like this:
</p>
<div class="example">
<pre class="example-preformatted">(sleep 10; echo 2nd)&amp; pid=$!  # <span class="r">Record pid of subprocess</span>
echo first message
wait $pid                     # <span class="r">Wait for subprocess</span>
</pre></div>

<p>If the background process does not output to the compilation buffer,
so you only need to prevent it from being killed when the main
compilation process terminates, this is sufficient:
</p>
<div class="example">
<pre class="example-preformatted">nohup <var class="var">command</var>; sleep 1
</pre></div>

<p>On MS-DOS, asynchronous subprocesses are
not supported, so <kbd class="kbd">M-x compile</kbd> runs the compilation command
synchronously (i.e., you must wait until the command finishes before
you can do anything else in Emacs).  See <a class="xref" href="Microsoft-Windows.xhtml#MS_002dDOS">Emacs and MS-DOS</a>.
</p>
</div>
<div class="section-level-extent" id="Grep-Searching">
<h3 class="section" id="Searching-with-Grep-under-Emacs">28.4 Searching with Grep under Emacs</h3>

<p>Just as you can run a compiler from Emacs and then visit the lines
with compilation errors, you can also run <code class="command">grep</code> and then
visit the lines on which matches were found.  This works by treating
the matches reported by <code class="command">grep</code> as if they were errors.
The output buffer uses Grep mode, which is a variant of Compilation
mode (see <a class="pxref" href="#Compilation-Mode">Compilation Mode</a>).
</p>
<dl class="table">
<dt><kbd class="kbd">M-x grep</kbd></dt>
<dt><kbd class="kbd">M-x lgrep</kbd></dt>
<dd><p>Run <code class="command">grep</code> asynchronously under Emacs, listing matching lines in
the buffer named <samp class="file">*grep*</samp>.
</p></dd>
<dt><kbd class="kbd">M-x grep-find</kbd></dt>
<dt><kbd class="kbd">M-x find-grep</kbd></dt>
<dt><kbd class="kbd">M-x rgrep</kbd></dt>
<dd><p>Run <code class="command">grep</code> via <code class="code">find</code>, and collect output in the
<samp class="file">*grep*</samp> buffer.
</p></dd>
<dt><kbd class="kbd">M-x zrgrep</kbd></dt>
<dd><p>Run <code class="code">zgrep</code> and collect output in the <samp class="file">*grep*</samp> buffer.
</p></dd>
<dt><kbd class="kbd">M-x kill-grep</kbd></dt>
<dd><p>Kill the running <code class="command">grep</code> subprocess.
</p></dd>
</dl>

<a class="index-entry-id" id="index-grep"></a>
<p>To run <code class="command">grep</code>, type <kbd class="kbd">M-x grep</kbd>, then enter a command line
that specifies how to run <code class="command">grep</code>.  Use the same arguments you
would give <code class="command">grep</code> when running it normally: a <code class="command">grep</code>-style
regexp (usually in single-quotes to quote the shell&#8217;s special
characters) followed by file names, which may use wildcards.  If you
specify a prefix argument for <kbd class="kbd">M-x grep</kbd>, it finds the identifier
(see <a class="pxref" href="Maintaining.xhtml#Xref">Find Identifier References</a>) in the buffer around point, and puts that into the
default <code class="command">grep</code> command.
</p>
<p>Your command need not simply run <code class="command">grep</code>; you can use any shell
command that produces output in the same format.  For instance, you
can chain <code class="command">grep</code> commands, like this:
</p>
<div class="example">
<pre class="example-preformatted">grep -nH -e foo *.el | grep bar | grep toto
</pre></div>

<p>The output from <code class="command">grep</code> goes in the <samp class="file">*grep*</samp> buffer.  You
can find the corresponding lines in the original files using <kbd class="kbd">M-g&#160;M-n</kbd><!-- /@w -->, <kbd class="key">RET</kbd>, and so forth, just like compilation errors.
See <a class="xref" href="#Compilation-Mode">Compilation Mode</a>, for detailed description of commands and key
bindings available in the <samp class="file">*grep*</samp> buffer.
</p>
<a class="index-entry-id" id="index-grep_002dmatch_002dregexp"></a>
<p>Some grep programs accept a &#8216;<samp class="samp">--color</samp>&#8217; option to output special
markers around matches for the purpose of highlighting.  You can make
use of this feature by setting <code class="code">grep-highlight-matches</code> to
<code class="code">t</code>.  When displaying a match in the source buffer, the exact
match will be highlighted, instead of the entire source line.
Highlighting is provided via matching the <abbr class="acronym">ANSI</abbr> escape
sequences emitted by <code class="command">grep</code>.  The matching of the sequences is
controlled by <code class="code">grep-match-regexp</code>, which can be customized to
accommodate different <code class="command">grep</code> programs.
</p>
<p>As with compilation commands (see <a class="pxref" href="#Compilation">Running Compilations under Emacs</a>), while the grep
command runs, the mode line shows the running number of matches found
and highlighted so far.
</p>
<p>The <code class="command">grep</code> commands will offer to save buffers before
running.  This is controlled by the <code class="code">grep-save-buffers</code> variable.
The possible values are either <code class="code">nil</code> (don&#8217;t save), <code class="code">ask</code>
(ask before saving), or a function which will be used as a predicate
(and is called with the file name as the parameter and should return
non-<code class="code">nil</code> if the buffer is to be saved).  Any other
non-<code class="code">nil</code> value means that all buffers should be saved without
asking.  The default is <code class="code">ask</code>.
</p>
<a class="index-entry-id" id="index-grep_002dfind"></a>
<a class="index-entry-id" id="index-find_002dgrep"></a>
<p>The command <kbd class="kbd">M-x grep-find</kbd> (also available as <kbd class="kbd">M-x
find-grep</kbd>) is similar to <kbd class="kbd">M-x grep</kbd>, but it supplies a different
initial default for the command&#8212;one that runs both <code class="code">find</code> and
<code class="command">grep</code>, so as to search every file in a directory tree.  See also
the <code class="code">find-grep-dired</code> command, in <a class="ref" href="Dired.xhtml#Dired-and-Find">Dired and <code class="code">find</code></a>.
</p>
<a class="index-entry-id" id="index-lgrep"></a>
<a class="index-entry-id" id="index-rgrep"></a>
<a class="index-entry-id" id="index-zrgrep"></a>
<p>The commands <kbd class="kbd">M-x lgrep</kbd> (local grep) and <kbd class="kbd">M-x rgrep</kbd>
(recursive grep) are more user-friendly versions of <code class="command">grep</code> and
<code class="code">grep-find</code>, which prompt separately for the regular expression
to match, the files to search, and the base directory for the search.
Case sensitivity of the search is controlled by the current value of
<code class="code">case-fold-search</code>.  The command <kbd class="kbd">M-x zrgrep</kbd> is similar to
<kbd class="kbd">M-x rgrep</kbd>, but it calls <code class="command">zgrep</code> instead of
<code class="command">grep</code> to search the contents of gzipped files.
</p>
<p>These commands build the shell commands based on the variables
<code class="code">grep-template</code> (for <code class="code">lgrep</code>) and <code class="code">grep-find-template</code>
(for <code class="code">rgrep</code>).  The files to search can use aliases defined in
the variable <code class="code">grep-files-aliases</code>.
</p>
<a class="index-entry-id" id="index-grep_002dfind_002dignored_002ddirectories"></a>
<p>Directories listed in the variable
<code class="code">grep-find-ignored-directories</code> are automatically skipped by
<kbd class="kbd">M-x rgrep</kbd>.  The default value includes the data directories used
by various version control systems.
</p>
<a class="index-entry-id" id="index-grep_002dfind_002dabbreviate"></a>
<a class="index-entry-id" id="index-grep_002dfind_002dtoggle_002dabbreviation"></a>
<p>By default, the shell commands constructed for <code class="code">lgrep</code>,
<code class="code">rgrep</code>, and <code class="code">zgrep</code> are abbreviated for display by
concealing the part that contains a long list of files and directories
to ignore.  You can reveal the concealed part by clicking on the
button with ellipsis, which represents them.  You can also
interactively toggle viewing the concealed part by typing <kbd class="kbd">M-x
grep-find-toggle-abbreviation</kbd>.  To disable this abbreviation of the
shell commands, customize the option <code class="code">grep-find-abbreviate</code> to a
<code class="code">nil</code> value.
</p>
</div>
<div class="section-level-extent" id="Flymake">
<h3 class="section" id="Finding-Syntax-Errors-On-The-Fly">28.5 Finding Syntax Errors On The Fly</h3>
<a class="index-entry-id" id="index-checking-syntax"></a>

<p>Flymake mode is a minor mode that performs on-the-fly syntax
checking for many programming and markup languages, including C, C++,
Perl, HTML, and TeX/LaTeX.  It is somewhat analogous to Flyspell
mode, which performs spell checking for ordinary human languages in a
similar fashion (see <a class="pxref" href="Fixit.xhtml#Spelling">Checking and Correcting Spelling</a>).  As you edit a file, Flymake mode
runs an appropriate syntax checking tool in the background, using a
temporary copy of the buffer.  It then parses the error and warning
messages, and highlights the erroneous lines in the buffer.  The
syntax checking tool used depends on the language; for example, for
C/C++ files this is usually the C compiler.  Flymake can also use
build tools such as <code class="code">make</code> for checking complicated projects.
</p>
<p>To enable Flymake mode, type <kbd class="kbd">M-x flymake-mode</kbd>.  You can jump
to the errors that it finds by using <kbd class="kbd">M-x&#160;flymake-goto-next-error</kbd><!-- /@w --> and <kbd class="kbd">M-x&#160;flymake-goto-prev-error</kbd><!-- /@w -->.
To display a detailed overview of the diagnostics for the current
buffer, use the command <kbd class="kbd">M-x&#160;flymake-show-buffer-diagnostics</kbd><!-- /@w -->;
to display a similar overview of diagnostics for the entire project
(see <a class="pxref" href="Maintaining.xhtml#Projects">Working with Projects</a>), use <kbd class="kbd">M-x&#160;flymake-show-project-diagnostics</kbd><!-- /@w -->.
</p>
<p>For more details about using Flymake,
see <a href="https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top">Flymake</a> in <cite class="cite">The Flymake Manual</cite>.
</p>
</div>
<div class="section-level-extent" id="Debuggers">
<h3 class="section" id="Running-Debuggers-Under-Emacs">28.6 Running Debuggers Under Emacs</h3>
<a class="index-entry-id" id="index-debuggers"></a>
<a class="index-entry-id" id="index-GUD-library"></a>
<a class="index-entry-id" id="index-GDB"></a>
<a class="index-entry-id" id="index-DBX"></a>
<a class="index-entry-id" id="index-SDB"></a>
<a class="index-entry-id" id="index-XDB"></a>
<a class="index-entry-id" id="index-Perldb"></a>
<a class="index-entry-id" id="index-JDB"></a>
<a class="index-entry-id" id="index-PDB"></a>

<p>The GUD (Grand Unified Debugger) library provides an Emacs interface
to a wide variety of symbolic debuggers.  It can run the GNU Debugger
(GDB), as well as DBX, SDB, XDB, Guile REPL debug commands, Perl&#8217;s
debugging mode, the Python debugger PDB, and the Java Debugger JDB.
</p>
<p>Emacs provides a special interface to GDB, which uses extra Emacs
windows to display the state of the debugged program.  See <a class="xref" href="#GDB-Graphical-Interface">GDB Graphical Interface</a>.
</p>
<p>Emacs also has a built-in debugger for Emacs Lisp programs.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Debugging.html#Debugging">The Lisp Debugger</a> in <cite class="cite">the Emacs Lisp Reference
Manual</cite>.
</p>

<div class="subsection-level-extent" id="Starting-GUD">
<h4 class="subsection" id="Starting-GUD-1">28.6.1 Starting GUD</h4>

<p>There are several commands for starting a debugger subprocess, each
corresponding to a particular debugger program.
</p>
<dl class="table">
<dt><a id="index-gdb"></a><kbd class="kbd">M-x gdb</kbd></dt>
<dd><p>Run GDB as a subprocess, and interact with it via an IDE-like Emacs
interface.  See <a class="xref" href="#GDB-Graphical-Interface">GDB Graphical Interface</a>, for more information about
this command.
</p>
</dd>
<dt><a id="index-gud_002dgdb"></a><kbd class="kbd">M-x gud-gdb</kbd></dt>
<dd><p>Run GDB, using a GUD interaction buffer for input and output to the
GDB subprocess (see <a class="pxref" href="#Debugger-Operation">Debugger Operation</a>).  If such a buffer already
exists, switch to it; otherwise, create the buffer and switch to it.
</p>
<p>The other commands in this list do the same, for other debugger
programs.
</p>
</dd>
<dt><a id="index-perldb"></a><kbd class="kbd">M-x perldb</kbd></dt>
<dd><p>Run the Perl interpreter in debug mode.
</p>
</dd>
<dt><a id="index-jdb"></a><kbd class="kbd">M-x jdb</kbd></dt>
<dd><p>Run the Java debugger.
</p>
</dd>
<dt><a id="index-pdb"></a><kbd class="kbd">M-x pdb</kbd></dt>
<dd><p>Run the Python debugger.
</p>
</dd>
<dt><a id="index-guiler"></a><kbd class="kbd">M-x guiler</kbd></dt>
<dd><p>Run Guile REPL for debugging Guile Scheme programs.
</p>
</dd>
<dt><a id="index-dbx"></a><kbd class="kbd">M-x dbx</kbd></dt>
<dd><p>Run the DBX debugger.
</p>
</dd>
<dt><a class="index-entry-id" id="index-gud_002dxdb_002ddirectories"></a>
<a id="index-xdb"></a><kbd class="kbd">M-x xdb</kbd></dt>
<dd><p>Run the XDB debugger.
</p>
</dd>
<dt><a id="index-sdb"></a><kbd class="kbd">M-x sdb</kbd></dt>
<dd><p>Run the SDB debugger.
</p></dd>
</dl>

<p>Each of these commands reads a command line to invoke the debugger,
using the minibuffer.  The minibuffer&#8217;s initial contents contain the
standard executable name and options for the debugger, and sometimes
also a guess for the name of the executable file you want to debug.
Shell wildcards and variables are not allowed in this command line.
Emacs assumes that the first command argument which does not start
with a &#8216;<samp class="samp">-</samp>&#8217; is the executable file name.
</p>
<a class="index-entry-id" id="index-remote-host_002c-debugging-on"></a>
<p>Tramp provides a facility for remote debugging, whereby both the
debugger and the program being debugged are on the same remote host.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/tramp/Running-a-debugger-on-a-remote-host.html#Running-a-debugger-on-a-remote-host">Running a debugger on a remote host</a> in <cite class="cite">The Tramp Manual</cite>,
for details.  This is separate from GDB&#8217;s remote debugging feature,
where the program and the debugger run on different machines
(see <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Remote-Debugging.html#Remote-Debugging">Debugging Remote Programs</a> in <cite class="cite">The GNU
debugger</cite>).
</p>
</div>
<div class="subsection-level-extent" id="Debugger-Operation">
<h4 class="subsection" id="Debugger-Operation-1">28.6.2 Debugger Operation</h4>
<a class="index-entry-id" id="index-GUD-interaction-buffer"></a>

<p>The <em class="dfn">GUD interaction buffer</em> is an Emacs buffer which is used to
send text commands to a debugger subprocess, and record its output.
This is the basic interface for interacting with a debugger, used by
<kbd class="kbd">M-x gud-gdb</kbd> and other commands listed in
<a class="ref" href="#Starting-GUD">Starting GUD</a>.
The <kbd class="kbd">M-x gdb</kbd> command extends this interface with additional
specialized buffers for controlling breakpoints, stack frames, and
other aspects of the debugger state (see <a class="pxref" href="#GDB-Graphical-Interface">GDB Graphical Interface</a>).
</p>
<p>The GUD interaction buffer uses a variant of Shell mode, so the
Emacs commands defined by Shell mode are available (see <a class="pxref" href="Shell.xhtml#Shell-Mode">Shell Mode</a>).  Completion is available for most debugger commands
(see <a class="pxref" href="Minibuffer.xhtml#Completion">Completion</a>), and you can use the usual Shell mode history
commands to repeat them.
See <a class="xref" href="#Commands-of-GUD">Commands of GUD</a>,
for special commands that can be used in the GUD interaction buffer.
</p>
<p>As you debug a program, Emacs displays the relevant source files by
visiting them in Emacs buffers, with an arrow in the left fringe
indicating the current execution line.  (On a text terminal, the arrow
appears as &#8216;<samp class="samp">=&gt;</samp>&#8217;, overlaid on the first two text columns.)  Moving
point in such a buffer does not move the arrow.  You are free to edit
these source files, but note that inserting or deleting lines will
throw off the arrow&#8217;s positioning, as Emacs has no way to figure out
which edited source line corresponds to the line reported by the
debugger subprocess.  To update this information, you typically have
to recompile and restart the program.
</p>
<a class="index-entry-id" id="index-GUD-Tooltip-mode"></a>
<a class="index-entry-id" id="index-mode_002c-GUD-Tooltip"></a>
<a class="index-entry-id" id="index-gud_002dtooltip_002dmode"></a>
<p>GUD Tooltip mode is a global minor mode that adds tooltip support to
GUD.  To toggle this mode, type <kbd class="kbd">M-x gud-tooltip-mode</kbd>.  It is
disabled by default.  If enabled, you can move the mouse pointer over a
variable, a function, or a macro (collectively called
<em class="dfn">identifiers</em>) to show their values in tooltips
(see <a class="pxref" href="Frames.xhtml#Tooltips">Tooltips</a>).  If just placing the mouse pointer over an
expression doesn&#8217;t show the value of the expression you had in mind,
you can tell Emacs more explicitly what expression to evaluate by
dragging the mouse over the expression, then leaving the mouse inside
the marked area.  The GUD Tooltip mode takes effect in the GUD
interaction buffer, and in all source buffers with major modes listed
in the variable <code class="code">gud-tooltip-modes</code>.  If you turned off the
tooltip mode, values are shown in the echo area instead of a tooltip.
</p>
<p>When using GUD Tooltip mode with <kbd class="kbd">M-x gud-gdb</kbd>, displaying an
expression&#8217;s value in GDB can sometimes expand a macro, potentially
causing side effects in the debugged program.  For that reason, using
tooltips in <code class="code">gud-gdb</code> is disabled.  If you use the <kbd class="kbd">M-x gdb</kbd>
interface, this problem does not occur, as there is special code to
avoid side-effects; furthermore, you can display macro definitions
associated with an identifier when the program is not executing.
</p>
</div>
<div class="subsection-level-extent" id="Commands-of-GUD">
<h4 class="subsection" id="Commands-of-GUD-1">28.6.3 Commands of GUD</h4>

<p>GUD provides commands for setting and clearing breakpoints,
selecting stack frames, and stepping through the program.
</p>
<dl class="table">
<dt><a id="index-C_002dx-C_002da-C_002db"></a><kbd class="kbd">C-x C-a C-b</kbd></dt>
<dd><p>Set a breakpoint on the source line that point is on.
</p></dd>
</dl>

<p><kbd class="kbd">C-x C-a C-b</kbd> (<code class="code">gud-break</code>), when called in a source
buffer, sets a debugger breakpoint on the current source line.  This
command is available only after starting GUD.  If you call it in a
buffer that is not associated with any debugger subprocess, it signals
an error.
</p>
<a class="index-entry-id" id="index-C_002dx-C_002da-_0028GUD_0029"></a>
<p>The following commands are available both in the GUD interaction
buffer and globally, but with different key bindings.  The keys
starting with <kbd class="kbd">C-c</kbd> are available only in the GUD interaction
buffer, while those starting with <kbd class="kbd">C-x C-a</kbd> are available
globally.  Some of these commands are also available via the tool bar;
some are not supported by certain debuggers.
</p>
<dl class="table">
<dt><a id="index-gud_002drefresh"></a><kbd class="kbd">C-c C-l</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-C_002dl-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a C-l</kbd></dt>
<dd><p>Display, in another window, the last source line referred to in the
GUD interaction buffer (<code class="code">gud-refresh</code>).
</p>
</dd>
<dt><a id="index-gud_002dstep"></a><kbd class="kbd">C-c C-s</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-C_002ds-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a C-s</kbd></dt>
<dd><p>Execute the next single line of code (<code class="code">gud-step</code>).  If the line
contains a function call, execution stops after entering the called
function.
</p>
</dd>
<dt><a id="index-gud_002dnext"></a><kbd class="kbd">C-c C-n</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-C_002dn-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a C-n</kbd></dt>
<dd><p>Execute the next single line of code, stepping across function calls
without stopping inside the functions (<code class="code">gud-next</code>).
</p>
</dd>
<dt><a id="index-gud_002dstepi"></a><kbd class="kbd">C-c C-i</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-C_002di-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a C-i</kbd></dt>
<dd><p>Execute a single machine instruction (<code class="code">gud-stepi</code>).
</p>
</dd>
<dt><a id="index-gud_002dprint"></a><kbd class="kbd">C-c C-p</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-C_002dp-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a C-p</kbd></dt>
<dd><p>Evaluate the expression at point (<code class="code">gud-print</code>).  If Emacs
does not print the exact expression that you want, mark it as a region
first.
</p>
</dd>
<dt><a id="index-gud_002dcont"></a><kbd class="kbd">C-c C-r</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-C_002dr-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a C-r</kbd></dt>
<dd><p>Continue execution without specifying any stopping point.  The program
will run until it hits a breakpoint, terminates, or gets a signal that
the debugger is checking for (<code class="code">gud-cont</code>).
</p>
</dd>
<dt><a id="index-gud_002dremove"></a><kbd class="kbd">C-c C-d</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-C_002dd-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a C-d</kbd></dt>
<dd><p>Delete the breakpoint(s) on the current source line, if any
(<code class="code">gud-remove</code>).  If you use this command in the GUD interaction
buffer, it applies to the line where the program last stopped.
</p>
</dd>
<dt><a id="index-gud_002dtbreak"></a><kbd class="kbd">C-c C-t</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-C_002dt-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a C-t</kbd></dt>
<dd><p>Set a temporary breakpoint on the current source line, if any
(<code class="code">gud-tbreak</code>).  If you use this command in the GUD interaction
buffer, it applies to the line where the program last stopped.
</p>
</dd>
<dt><a id="index-gud_002dup"></a><kbd class="kbd">C-c &lt;</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-_003c-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a &lt;</kbd></dt>
<dd><p>Select the next enclosing stack frame (<code class="code">gud-up</code>).  This is
equivalent to the GDB command &#8216;<samp class="samp">up</samp>&#8217;.
</p>
</dd>
<dt><a id="index-gud_002ddown"></a><kbd class="kbd">C-c &gt;</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-_003e-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a &gt;</kbd></dt>
<dd><p>Select the next inner stack frame (<code class="code">gud-down</code>).  This is
equivalent to the GDB command &#8216;<samp class="samp">down</samp>&#8217;.
</p>
</dd>
<dt><a id="index-gud_002duntil"></a><kbd class="kbd">C-c C-u</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-C_002du-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a C-u</kbd></dt>
<dd><p>Continue execution to the current line (<code class="code">gud-until</code>).  The
program will run until it hits a breakpoint, terminates, gets a signal
that the debugger is checking for, or reaches the line on which the
cursor currently sits.
</p>
</dd>
<dt><a id="index-gud_002dfinish"></a><kbd class="kbd">C-c C-f</kbd></dt>
<dd><a class="index-entry-id" id="index-C_002dc-C_002df-_0028GUD_0029"></a>
</dd>
<dt><kbd class="kbd">C-x C-a C-f</kbd></dt>
<dd><p>Run the program until the selected stack frame returns or
stops for some other reason (<code class="code">gud-finish</code>).
</p></dd>
</dl>

<p>If you are using GDB, these additional key bindings are available:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-gud_002djump"></a>
<a id="index-C_002dx-C_002da-C_002dj-_0028GUD_0029"></a><kbd class="kbd">C-x C-a C-j</kbd></dt>
<dd><p>Only useful in a source buffer, <code class="code">gud-jump</code> transfers the
program&#8217;s execution point to the current line.  In other words, the
next line that the program executes will be the one where you gave the
command.  If the new execution line is in a different function from
the previously one, GDB prompts for confirmation since the results may
be bizarre.  See the GDB manual entry regarding <code class="code">jump</code> for
details.
</p>
</dd>
<dt><a class="index-entry-id" id="index-gud_002dgdb_002dcomplete_002dcommand"></a>
<a id="index-TAB-_0028GUD_0029"></a><kbd class="kbd"><kbd class="key">TAB</kbd></kbd></dt>
<dd><p>With GDB, complete a symbol name (<code class="code">gud-gdb-complete-command</code>).
This key is available only in the GUD interaction buffer.
</p></dd>
</dl>

<p>These commands interpret a numeric argument as a repeat count, when
that makes sense.
</p>
<p>Because <kbd class="key">TAB</kbd> serves as a completion command, you can&#8217;t use it to
enter a tab as input to the program you are debugging with GDB.
Instead, type <kbd class="kbd">C-q <kbd class="key">TAB</kbd></kbd> to enter a tab.
</p>
</div>
<div class="subsection-level-extent" id="GUD-Customization">
<h4 class="subsection" id="GUD-Customization-1">28.6.4 GUD Customization</h4>

<a class="index-entry-id" id="index-gdb_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-dbx_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-sdb_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-xdb_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-perldb_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-pdb_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-jdb_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-guiler_002dmode_002dhook"></a>
<p>On startup, GUD runs one of the following hooks:
<code class="code">gdb-mode-hook</code>, if you are using GDB; <code class="code">dbx-mode-hook</code>, if
you are using DBX; <code class="code">sdb-mode-hook</code>, if you are using SDB;
<code class="code">xdb-mode-hook</code>, if you are using XDB; <code class="code">guiler-mode-hook</code>
for Guile REPL debugging; <code class="code">perldb-mode-hook</code>, for Perl debugging
mode; <code class="code">pdb-mode-hook</code>, for PDB; <code class="code">jdb-mode-hook</code>, for JDB.
See <a class="xref" href="Customization.xhtml#Hooks">Hooks</a>.
</p>
<p>The <code class="code">gud-def</code> Lisp macro (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Macros.html#Defining-Macros">Defining Macros</a> in <cite class="cite">the
Emacs Lisp Reference Manual</cite>) provides a convenient way to define an
Emacs command that sends a particular command string to the debugger,
and set up a key binding for in the GUD interaction buffer:
</p>
<a class="index-entry-id" id="index-gud_002ddef"></a>
<div class="example">
<pre class="example-preformatted">(gud-def <var class="var">function</var> <var class="var">cmdstring</var> <var class="var">binding</var> <var class="var">docstring</var>)
</pre></div>

<p>This defines a command named <var class="var">function</var> which sends
<var class="var">cmdstring</var> to the debugger process, and gives it the documentation
string <var class="var">docstring</var>.  You can then use the command <var class="var">function</var> in any
buffer.  If <var class="var">binding</var> is non-<code class="code">nil</code>, <code class="code">gud-def</code> also binds
the command to <kbd class="kbd">C-c <var class="var">binding</var></kbd> in the GUD buffer&#8217;s mode and to
<kbd class="kbd">C-x C-a <var class="var">binding</var></kbd> generally.
</p>
<p>The command string <var class="var">cmdstring</var> may contain certain
&#8216;<samp class="samp">%</samp>&#8217;-sequences that stand for data to be filled in at the time
<var class="var">function</var> is called:
</p>
<dl class="table">
<dt>&#8216;<samp class="samp">%f</samp>&#8217;</dt>
<dd><p>The name of the current source file.  If the current buffer is the GUD
buffer, then the current source file is the file that the program
stopped in.
</p>
</dd>
<dt>&#8216;<samp class="samp">%l</samp>&#8217;</dt>
<dd><p>The number of the current source line.  If the current buffer is the GUD
buffer, then the current source line is the line that the program
stopped in.
</p>
</dd>
<dt>&#8216;<samp class="samp">%e</samp>&#8217;</dt>
<dd><p>In transient-mark-mode the text in the region, if it is active.
Otherwise the text of the C lvalue or function-call expression at or
adjacent to point.
</p>
</dd>
<dt>&#8216;<samp class="samp">%a</samp>&#8217;</dt>
<dd><p>The text of the hexadecimal address at or adjacent to point.
</p>
</dd>
<dt>&#8216;<samp class="samp">%p</samp>&#8217;</dt>
<dd><p>The numeric argument of the called function, as a decimal number.  If
the command is used without a numeric argument, &#8216;<samp class="samp">%p</samp>&#8217; stands for the
empty string.
</p>
<p>If you don&#8217;t use &#8216;<samp class="samp">%p</samp>&#8217; in the command string, the command you define
ignores any numeric argument.
</p>
</dd>
<dt>&#8216;<samp class="samp">%d</samp>&#8217;</dt>
<dd><p>The name of the directory of the current source file.
</p>
</dd>
<dt>&#8216;<samp class="samp">%c</samp>&#8217;</dt>
<dd><p>Fully qualified class name derived from the expression surrounding point
(jdb only).
</p></dd>
</dl>

</div>
<div class="subsection-level-extent" id="GDB-Graphical-Interface">
<h4 class="subsection" id="GDB-Graphical-Interface-1">28.6.5 GDB Graphical Interface</h4>

<p>The command <kbd class="kbd">M-x gdb</kbd> starts GDB in an IDE-like interface, with
specialized buffers for controlling breakpoints, stack frames, and
other aspects of the debugger state.  It also provides additional ways
to control the debugging session with the mouse, such as clicking in
the fringe of a source buffer to set a breakpoint there.
</p>
<a class="index-entry-id" id="index-gud_002dgdb_002dcommand_002dname"></a>
<p>To run GDB using just the GUD interaction buffer interface, without
these additional features, use <kbd class="kbd">M-x gud-gdb</kbd> (see <a class="pxref" href="#Starting-GUD">Starting GUD</a>).
</p>
<p>Internally, <kbd class="kbd">M-x gdb</kbd> informs GDB that its screen size is
unlimited; for correct operation, you must not change GDB&#8217;s screen
height and width values during the debugging session.
</p>

<div class="subsubsection-level-extent" id="GDB-User-Interface-Layout">
<h4 class="subsubsection" id="GDB-User-Interface-Layout-1">28.6.5.1 GDB User Interface Layout</h4>
<a class="index-entry-id" id="index-GDB-User-Interface-layout"></a>

<a class="index-entry-id" id="index-gdb_002dmany_002dwindows-1"></a>
<a class="index-entry-id" id="index-gdb_002dshow_002dmain"></a>
<p>If the variable <code class="code">gdb-many-windows</code> is <code class="code">nil</code> (the default),
<kbd class="kbd">M-x gdb</kbd> normally displays only the GUD interaction buffer.
However, if the variable <code class="code">gdb-show-main</code> is also non-<code class="code">nil</code>,
it starts with two windows: one displaying the GUD interaction buffer,
and the other showing the source for the <code class="code">main</code> function of the
program you are debugging.
</p>
<p>If <code class="code">gdb-many-windows</code> is non-<code class="code">nil</code>, then <kbd class="kbd">M-x gdb</kbd>
displays the following frame layout:
</p>
<div class="example smallexample">
<div class="group"><pre class="example-preformatted">+--------------------------------+--------------------------------+
|   GUD interaction buffer       |   Locals/Registers buffer      |
|--------------------------------+--------------------------------+
|   Primary Source buffer        |   I/O buffer for debugged pgm  |
|--------------------------------+--------------------------------+
|   Stack buffer                 |   Breakpoints/Threads buffer   |
+--------------------------------+--------------------------------+
</pre></div></div>

<a class="index-entry-id" id="index-gdb_002dsave_002dwindow_002dconfiguration"></a>
<a class="index-entry-id" id="index-gdb_002dload_002dwindow_002dconfiguration"></a>
<a class="index-entry-id" id="index-gdb_002ddefault_002dwindow_002dconfiguration_002dfile"></a>
<a class="index-entry-id" id="index-gdb_002dwindow_002dconfiguration_002ddirectory"></a>
<p>You can customize the window layout based on the one above and save
that layout to a file using <code class="code">gdb-save-window-configuration</code>.
Then you can later load this layout back using
<code class="code">gdb-load-window-configuration</code>.  (Internally, Emacs uses the
term window configuration instead of window layout.)  You can set your
custom layout as the default one used by <code class="code">gdb-many-windows</code> by
customizing <code class="code">gdb-default-window-configuration-file</code>.  If it is
not an absolute file name, GDB looks under
<code class="code">gdb-window-configuration-directory</code> for the file.
<code class="code">gdb-window-configuration-directory</code> defaults to
<code class="code">user-emacs-directory</code> (see <a class="pxref" href="Customization.xhtml#Find-Init">How Emacs Finds Your Init File</a>).
</p>

<a class="index-entry-id" id="index-gdb_002drestore_002dwindows"></a>
<a class="index-entry-id" id="index-gdb_002dmany_002dwindows"></a>
<a class="index-entry-id" id="index-gdb_002drestore_002dwindow_002dconfiguration_002dafter_002dquit"></a>
<p>If you ever change the window layout, you can restore the default
layout by typing <kbd class="kbd">M-x gdb-restore-windows</kbd>.  To toggle
between the many windows layout and a simple layout with just the GUD
interaction buffer and a source file, type <kbd class="kbd">M-x gdb-many-windows</kbd>.
</p>
<p>If you have an elaborate window setup, and don&#8217;t want
<code class="code">gdb-many-windows</code> to disrupt that, it is better to invoke
<kbd class="kbd">M-x gdb</kbd> in a separate frame to begin with, then the arrangement
of windows on your original frame will not be affected.  A separate
frame for GDB sessions can come in especially handy if you work on a
text-mode terminal, where the screen estate for windows could be at a
premium.  If you choose to start GDB in the same frame, consider
setting <code class="code">gdb-restore-window-configuration-after-quit</code> to a
non-<code class="code">nil</code> value.  Your original layout will then be restored
after GDB quits.  Use <code class="code">t</code> to always restore; use
<code class="code">if-gdb-many-windows</code> to restore only when
<code class="code">gdb-many-windows</code> is non-<code class="code">nil</code>; use <code class="code">if-gdb-show-main</code>
to restore only when <code class="code">gdb-show-main</code> is non-<code class="code">nil</code>.
</p>
<p>You may also specify additional GDB-related buffers to display,
either in the same frame or a different one.  Select the buffers you
want by typing <kbd class="kbd">M-x gdb-display-<var class="var">buffertype</var>-buffer</kbd> or
<kbd class="kbd">M-x gdb-frame-<var class="var">buffertype</var>-buffer</kbd>, where <var class="var">buffertype</var> is
the relevant buffer type, such as &#8216;<samp class="samp">breakpoints</samp>&#8217; or &#8216;<samp class="samp">io</samp>&#8217;.
You can do the same from the menu bar, with the &#8216;<samp class="samp">GDB-Windows</samp>&#8217; and
&#8216;<samp class="samp">GDB-Frames</samp>&#8217; sub-menus of the &#8216;<samp class="samp">GUD</samp>&#8217; menu.
</p>
<a class="index-entry-id" id="index-gdb_002dmax_002dsource_002dwindow_002dcount"></a>
<a class="index-entry-id" id="index-gdb_002ddisplay_002dsource_002dbuffer_002daction"></a>
<p>By default, GDB uses at most one window to display the source file.
You can make it use more windows by customizing
<code class="code">gdb-max-source-window-count</code>.  You can also customize
<code class="code">gdb-display-source-buffer-action</code> to control how GDB displays
source files.
</p>
<p>When you finish debugging, kill the GUD interaction buffer with
<kbd class="kbd">C-x k</kbd>, which will also kill all the buffers associated with the
session.  However you need not do this if, after editing and
re-compiling your source code within Emacs, you wish to continue
debugging.  When you restart execution, GDB automatically finds the
new executable.  Keeping the GUD interaction buffer has the advantage
of keeping the shell history as well as GDB&#8217;s breakpoints.  You do
need to check that the breakpoints in recently edited source files are
still in the right places.
</p>
</div>
<div class="subsubsection-level-extent" id="Source-Buffers">
<h4 class="subsubsection" id="Source-Buffers-1">28.6.5.2 Source Buffers</h4>
<a class="index-entry-id" id="index-fringes_002c-for-debugging"></a>

<dl class="table">
<dt><kbd class="kbd">mouse-1</kbd> (in fringe)</dt>
<dd><p>Set or clear a breakpoint on that line
(<code class="code">gdb-mouse-set-clear-breakpoint</code>).
</p>
</dd>
<dt><kbd class="kbd">C-mouse-1</kbd> (in fringe)</dt>
<dd><p>Enable or disable a breakpoint on that line
(<code class="code">gdb-mouse-toggle-breakpoint-margin</code>).
</p>
</dd>
<dt><kbd class="kbd">mouse-3</kbd> (in fringe)</dt>
<dd><p>Continue execution to that line (<code class="code">gdb-mouse-until</code>).
</p>
</dd>
<dt><kbd class="kbd">C-mouse-3</kbd> (in fringe)</dt>
<dd><p>Jump to that line (<code class="code">gdb-mouse-jump</code>).
</p></dd>
</dl>

<p>On a graphical display, you can click <kbd class="kbd">mouse-1</kbd> in the fringe of
a source buffer, to set a breakpoint on that line (see <a class="pxref" href="Display.xhtml#Fringes">Window Fringes</a>).
A red dot appears in the fringe, where you clicked.  If a breakpoint
already exists there, the click removes it.  A <kbd class="kbd">C-mouse-1</kbd> click
enables or disables an existing breakpoint; a breakpoint that is
disabled, but not unset, is indicated by a gray dot.
</p>
<p>On a text terminal, or when fringes are disabled, enabled
breakpoints are indicated with a &#8216;<samp class="samp">B</samp>&#8217; character in the left margin
of the window.  Disabled breakpoints are indicated with &#8216;<samp class="samp">b</samp>&#8217;.
(The margin is only displayed if a breakpoint is present.)
</p>
<p>A solid arrow in the left fringe of a source buffer indicates the
line of the innermost frame where the debugged program has stopped.  A
hollow arrow indicates the current execution line of a higher-level
frame.  If you drag the arrow in the fringe with <kbd class="kbd">mouse-1</kbd>, that
causes execution to advance to the line where you release the button.
Alternatively, you can click <kbd class="kbd">mouse-3</kbd> in the fringe to advance to
that line.  You can click <kbd class="kbd">C-mouse-3</kbd> in the fringe to jump to
that line without executing the intermediate lines.  This command
allows you to go backwards, which can be useful for running through
code that has already executed, in order to examine its execution in
more detail.
</p>
<a class="index-entry-id" id="index-gdb_002dmi_002ddecode_002dstrings"></a>
<p>By default, source file names and non-ASCII strings in the program
being debugged are decoded using the default coding-system.  If you
prefer a different decoding, perhaps because the program being
debugged uses a different character encoding, set the variable
<code class="code">gdb-mi-decode-strings</code> to the appropriate coding-system, or to
<code class="code">nil</code> to leave non-ASCII characters as undecoded octal escapes.
</p>
</div>
<div class="subsubsection-level-extent" id="Breakpoints-Buffer">
<h4 class="subsubsection" id="Breakpoints-Buffer-1">28.6.5.3 Breakpoints Buffer</h4>

<p>The GDB Breakpoints buffer shows the breakpoints, watchpoints and
catchpoints in the debugger session.  See <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Breakpoints.html#Breakpoints">Breakpoints</a> in <cite class="cite">The
GNU debugger</cite>.  It provides the following commands, which mostly apply
to the <em class="dfn">current breakpoint</em> (the breakpoint which point is on):
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-gdb_002dtoggle_002dbreakpoint"></a>
<a id="index-SPC-_0028GDB-Breakpoints-buffer_0029"></a><kbd class="kbd"><kbd class="key">SPC</kbd></kbd></dt>
<dd><p>Enable/disable current breakpoint (<code class="code">gdb-toggle-breakpoint</code>).  On
a graphical display, this changes the color of the dot in the fringe
of the source buffer at that line.  The dot is red when the breakpoint
is enabled, and gray when it is disabled.
</p>
</dd>
<dt><a class="index-entry-id" id="index-gdb_002ddelete_002dbreakpoint"></a>
<a id="index-D-_0028GDB-Breakpoints-buffer_0029"></a><kbd class="kbd">D</kbd></dt>
<dd><p>Delete the current breakpoint (<code class="code">gdb-delete-breakpoint</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-gdb_002dgoto_002dbreakpoint"></a>
<a id="index-RET-_0028GDB-Breakpoints-buffer_0029"></a><kbd class="kbd"><kbd class="key">RET</kbd></kbd></dt>
<dd><p>Visit the source line for the current breakpoint
(<code class="code">gdb-goto-breakpoint</code>).
</p>
</dd>
<dt><a id="index-mouse_002d2-_0028GDB-Breakpoints-buffer_0029"></a><kbd class="kbd">mouse-2</kbd></dt>
<dd><p>Visit the source line for the breakpoint you click on
(<code class="code">gdb-goto-breakpoint</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-gdb_002dshow_002dthreads_002dby_002ddefault"></a>
<p>When <code class="code">gdb-many-windows</code> is non-<code class="code">nil</code>, the GDB Breakpoints
buffer shares its window with the GDB Threads buffer.  To switch from
one to the other click with <kbd class="kbd">mouse-1</kbd> on the relevant button in
the header line.  If <code class="code">gdb-show-threads-by-default</code> is
non-<code class="code">nil</code>, the GDB Threads buffer is the one shown by default.
</p>
</div>
<div class="subsubsection-level-extent" id="Threads-Buffer">
<h4 class="subsubsection" id="Threads-Buffer-1">28.6.5.4 Threads Buffer</h4>

<a class="index-entry-id" id="index-gdb_002dselect_002dthread"></a>
<p>The GDB Threads buffer displays a summary of the threads in the
debugged program.  See <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Threads.html#Threads">Debugging programs with
multiple threads</a> in <cite class="cite">The GNU debugger</cite>.  To select a thread, move
point there and press <kbd class="key">RET</kbd> (<code class="code">gdb-select-thread</code>), or click on
it with <kbd class="kbd">mouse-2</kbd>.  This also displays the associated source
buffer, and updates the contents of the other GDB buffers.
</p>
<p>You can customize variables in the <code class="code">gdb-buffers</code> group to
select fields included in GDB Threads buffer.
</p>
<dl class="table">
<dt><a id="index-gdb_002dthread_002dbuffer_002dverbose_002dnames"></a><code class="code">gdb-thread-buffer-verbose-names</code></dt>
<dd><p>Show long thread names like &#8216;<samp class="samp">Thread 0x4e2ab70 (LWP 1983)</samp>&#8217;.
</p>
</dd>
<dt><a id="index-gdb_002dthread_002dbuffer_002darguments"></a><code class="code">gdb-thread-buffer-arguments</code></dt>
<dd><p>Show arguments of thread top frames.
</p>
</dd>
<dt><a id="index-gdb_002dthread_002dbuffer_002dlocations"></a><code class="code">gdb-thread-buffer-locations</code></dt>
<dd><p>Show file information or library names.
</p>
</dd>
<dt><a id="index-gdb_002dthread_002dbuffer_002daddresses"></a><code class="code">gdb-thread-buffer-addresses</code></dt>
<dd><p>Show addresses for thread frames in threads buffer.
</p></dd>
</dl>

<p>To view information for several threads simultaneously, use the
following commands from the GDB Threads buffer.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-gdb_002ddisplay_002ddisassembly_002dfor_002dthread"></a>
<a id="index-d-_0028GDB-threads-buffer_0029"></a><kbd class="kbd">d</kbd></dt>
<dd><p>Display disassembly buffer for the thread at current line
(<code class="code">gdb-display-disassembly-for-thread</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-gdb_002ddisplay_002dstack_002dfor_002dthread"></a>
<a id="index-f-_0028GDB-threads-buffer_0029"></a><kbd class="kbd">f</kbd></dt>
<dd><p>Display the GDB Stack buffer for the thread at current line
(<code class="code">gdb-display-stack-for-thread</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-gdb_002ddisplay_002dlocals_002dfor_002dthread"></a>
<a id="index-l-_0028GDB-threads-buffer_0029"></a><kbd class="kbd">l</kbd></dt>
<dd><p>Display the GDB Locals buffer for the thread at current line
(<code class="code">gdb-display-locals-for-thread</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-gdb_002ddisplay_002dregisters_002dfor_002dthread"></a>
<a id="index-r-_0028GDB-threads-buffer_0029"></a><kbd class="kbd">r</kbd></dt>
<dd><p>Display the GDB Registers buffer for the thread at current line
(<code class="code">gdb-display-registers-for-thread</code>).
</p></dd>
</dl>

<p>Their upper-case counterparts, <kbd class="kbd">D</kbd>, <kbd class="kbd">F</kbd> ,<kbd class="kbd">L</kbd> and <kbd class="kbd">R</kbd>,
display the corresponding buffer in a new frame.
</p>
<p>When you create a buffer showing information about some specific
thread, it becomes bound to that thread and keeps showing actual
information while you debug your program.  The mode indicator for each
GDB buffer shows the number of the thread whose information that
buffer displays.  The thread number is also included in the name of
each bound buffer.
</p>
<p>Further commands are available in the GDB Threads buffer which
depend on the mode of GDB that is used for controlling execution of
your program.  See <a class="xref" href="#Multithreaded-Debugging">Multithreaded Debugging</a>.
</p>
</div>
<div class="subsubsection-level-extent" id="Stack-Buffer">
<h4 class="subsubsection" id="Stack-Buffer-1">28.6.5.5 Stack Buffer</h4>

<p>The GDB Stack buffer displays a <em class="dfn">call stack</em>, with one line for
each of the nested subroutine calls (<em class="dfn">stack frames</em>) in the
debugger session.  See <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Backtrace.html#Backtrace">Backtraces</a> in <cite class="cite">The GNU
debugger</cite>.
</p>
<a class="index-entry-id" id="index-gdb_002dframes_002dselect"></a>
<p>On graphical displays, the selected stack frame is indicated by an
arrow in the fringe.  On text terminals, or when fringes are disabled,
the selected stack frame is displayed in reverse contrast.  To select
a stack frame, move point in its line and type <kbd class="key">RET</kbd>
(<code class="code">gdb-frames-select</code>), or click <kbd class="kbd">mouse-2</kbd> on it.  Doing so
also updates the Locals buffer
(see <a class="pxref" href="#Other-GDB-Buffers">Other GDB Buffers</a>).
</p>
<a class="index-entry-id" id="index-gdb_002dstack_002dbuffer_002daddresses"></a>
<p>If you want the frame address to be shown each stack frame,
customize the variable <code class="code">gdb-stack-buffer-addresses</code> to a
non-<code class="code">nil</code> value.
</p>
</div>
<div class="subsubsection-level-extent" id="Other-GDB-Buffers">
<h4 class="subsubsection" id="Other-GDB-Buffers-1">28.6.5.6 Other GDB Buffers</h4>

<p>Other buffers provided by <kbd class="kbd">M-x gdb</kbd> whose display you can
optionally request include:
</p>
<dl class="table">
<dt><a id="index-gdb_002ddisplay_002dlocals_002dbuffer"></a>Locals Buffer</dt>
<dd><p>This buffer displays the values of local variables of the current
stack frame for simple data types (see <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Frame-Info.html#Frame-Info">Information on a frame</a> in <cite class="cite">The GNU debugger</cite>).  Press <kbd class="key">RET</kbd> or
click <kbd class="kbd">mouse-2</kbd> on the value if you want to edit it.
</p>
<p>Arrays and structures display their type only.  With GDB 6.4 or later,
you can examine the value of the local variable at point by typing
<kbd class="key">RET</kbd>, or with a <kbd class="kbd">mouse-2</kbd> click.  With earlier versions of
GDB, use <kbd class="key">RET</kbd> or <kbd class="kbd">mouse-2</kbd> on the type description
(&#8216;<samp class="samp">[struct/union]</samp>&#8217; or &#8216;<samp class="samp">[array]</samp>&#8217;).  See <a class="xref" href="#Watch-Expressions">Watch Expressions</a>.
</p>
<p>To display the Locals buffer, type <kbd class="kbd">M-x gdb-display-locals-buffer</kbd>.
</p>
</dd>
<dt><a id="index-gdb_002ddisplay_002dio_002dbuffer"></a>I/O Buffer</dt>
<dd><p>If the program you are debugging uses standard input and output
streams for interaction with the user, or emits a significant amount
of output to its standard output, you may wish to separate its I/O
from interaction with GDB.  Use the command <kbd class="kbd">M-x&#160;gdb-display-io-buffer</kbd><!-- /@w --> to show a window with a buffer to which Emacs
redirects the input and output from the program you are debugging.
</p>
</dd>
<dt><a id="index-gdb_002ddisplay_002dregisters_002dbuffer"></a>Registers Buffer</dt>
<dd><p>This buffer displays the values held by the registers
(see <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Registers.html#Registers">Registers</a> in <cite class="cite">The GNU debugger</cite>).  Request the display of
this buffer with the command <kbd class="kbd">M-x gdb-display-registers-buffer</kbd>.
Press <kbd class="key">RET</kbd> or click <kbd class="kbd">mouse-2</kbd> on a register if you want to
edit its value.  With GDB 6.4 or later, recently changed register
values display with <code class="code">font-lock-warning-face</code>.
</p>
</dd>
<dt><a id="index-gdb_002ddisplay_002ddisassembly_002dbuffer"></a>Assembler Buffer</dt>
<dd><p>The assembler buffer displays the current frame as machine code.  An
arrow points to the current instruction, and you can set and remove
breakpoints as in a source buffer.  Breakpoint icons also appear in
the fringe or margin.  To request the display of this buffer, use
<kbd class="kbd">M-x gdb-display-disassembly-buffer</kbd>.
</p>
</dd>
<dt><a id="index-gdb_002ddisplay_002dmemory_002dbuffer"></a>Memory Buffer</dt>
<dd><p>The memory buffer lets you examine sections of program memory
(see <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Memory.html#Memory">Examining memory</a> in <cite class="cite">The GNU debugger</cite>).
Click <kbd class="kbd">mouse-1</kbd> on the appropriate part of the header line to
change the starting address or number of data items that the buffer
displays.  Alternatively, use <kbd class="kbd">S</kbd> or <kbd class="kbd">N</kbd> respectively.  Click
<kbd class="kbd">mouse-3</kbd> on the header line to select the display format or unit
size for these data items.  Use <kbd class="kbd">M-x&#160;gdb-display-memory-buffer</kbd><!-- /@w --> to request display of this buffer.
</p></dd>
</dl>

<p>When <code class="code">gdb-many-windows</code> is non-<code class="code">nil</code>, the locals buffer
shares its window with the registers buffer, just like breakpoints and
threads buffers.  To switch from one to the other, click with
<kbd class="kbd">mouse-1</kbd> on the relevant button in the header line.
</p>
</div>
<div class="subsubsection-level-extent" id="Watch-Expressions">
<h4 class="subsubsection" id="Watch-Expressions-1">28.6.5.7 Watch Expressions</h4>
<a class="index-entry-id" id="index-Watching-expressions-in-GDB"></a>

<a class="index-entry-id" id="index-gud_002dwatch"></a>
<a class="index-entry-id" id="index-C_002dx-C_002da-C_002dw-_0028GUD_0029"></a>
<p>If you want to see how a variable changes each time your program
stops, move point into the variable name and click on the watch icon
in the tool bar (<code class="code">gud-watch</code>) or type <kbd class="kbd">C-x C-a C-w</kbd>.  If you
specify a prefix argument, you can enter the variable name in the
minibuffer.
</p>
<p>Each watch expression is displayed in the speedbar
(see <a class="pxref" href="Frames.xhtml#Speedbar">Speedbar Frames</a>).  Complex data types, such as arrays, structures
and unions are represented in a tree format.  Leaves and simple data
types show the name of the expression and its value and, when the
speedbar frame is selected, display the type as a tooltip.  Higher
levels show the name, type and address value for pointers and just the
name and type otherwise.  Root expressions also display the frame
address as a tooltip to help identify the frame in which they were
defined.
</p>
<p>To expand or contract a complex data type, click <kbd class="kbd">mouse-2</kbd> or
press <kbd class="key">SPC</kbd> on the tag to the left of the expression.  Emacs asks
for confirmation before expanding the expression if its number of
immediate children exceeds the value of the variable
<code class="code">gdb-max-children</code>.
</p>
<a class="index-entry-id" id="index-D-_0028GDB-speedbar_0029"></a>
<a class="index-entry-id" id="index-gdb_002dvar_002ddelete"></a>
<p>To delete a complex watch expression, move point to the root
expression in the speedbar and type <kbd class="kbd">D</kbd> (<code class="code">gdb-var-delete</code>).
</p>
<a class="index-entry-id" id="index-RET-_0028GDB-speedbar_0029"></a>
<a class="index-entry-id" id="index-gdb_002dedit_002dvalue"></a>
<p>To edit a variable with a simple data type, or a simple element of a
complex data type, move point there in the speedbar and type <kbd class="key">RET</kbd>
(<code class="code">gdb-edit-value</code>).  Or you can click <kbd class="kbd">mouse-2</kbd> on a value to
edit it.  Either way, this reads the new value using the minibuffer.
</p>
<a class="index-entry-id" id="index-gdb_002dshow_002dchanged_002dvalues"></a>
<p>If you set the variable <code class="code">gdb-show-changed-values</code> to
non-<code class="code">nil</code> (the default value), Emacs uses
<code class="code">font-lock-warning-face</code> to highlight values that have recently
changed and <code class="code">shadow</code> face to make variables which have gone out of
scope less noticeable.  When a variable goes out of scope you can&#8217;t
edit its value.
</p>
<a class="index-entry-id" id="index-gdb_002ddelete_002dout_002dof_002dscope"></a>
<p>If the variable <code class="code">gdb-delete-out-of-scope</code> is non-<code class="code">nil</code>
(the default value), Emacs automatically deletes watch expressions
which go out of scope.  Sometimes, when your program re-enters the
same function many times, it may be useful to set this value to
<code class="code">nil</code> so that you don&#8217;t need to recreate the watch expression.
</p>
<a class="index-entry-id" id="index-gdb_002duse_002dcolon_002dcolon_002dnotation"></a>
<p>If the variable <code class="code">gdb-use-colon-colon-notation</code> is
non-<code class="code">nil</code>, Emacs uses the &#8216;<samp class="samp"><var class="var">function</var>::<var class="var">variable</var></samp>&#8217;
format.  This allows the user to display watch expressions which share
the same variable name.  The default value is <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-gdb_002dspeedbar_002dauto_002draise"></a>
<p>To automatically raise the speedbar every time the display of watch
expressions updates, set <code class="code">gdb-speedbar-auto-raise</code> to
non-<code class="code">nil</code>.  This can be useful if you are debugging with a full
screen Emacs frame.
</p>
</div>
<div class="subsubsection-level-extent" id="Multithreaded-Debugging">
<h4 class="subsubsection" id="Multithreaded-Debugging-1">28.6.5.8 Multithreaded Debugging</h4>
<a class="index-entry-id" id="index-Multithreaded-debugging-in-GDB"></a>
<a class="index-entry-id" id="index-Non_002dstop-debugging-in-GDB"></a>

<p>In GDB&#8217;s <em class="dfn">all-stop mode</em>, whenever your program stops, all
execution threads stop.  Likewise, whenever you restart the program,
all threads start executing.  See <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/All_002dStop-Mode.html#All_002dStop-Mode">All-Stop Mode</a> in <cite class="cite">The GNU debugger</cite>.  For some multi-threaded targets, GDB supports
a further mode of operation, called <em class="dfn">non-stop mode</em>, in which you
can examine stopped program threads in the debugger while other
threads continue to execute freely.  See <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Non_002dStop-Mode.html#Non_002dStop-Mode">Non-Stop
Mode</a> in <cite class="cite">The GNU debugger</cite>.  Versions of GDB prior to 7.0 do not
support non-stop mode, and it does not work on all targets.
</p>
<a class="index-entry-id" id="index-gdb_002dnon_002dstop_002dsetting"></a>
<p>The variable <code class="code">gdb-non-stop-setting</code> determines whether Emacs
runs GDB in all-stop mode or non-stop mode.  The default is <code class="code">t</code>,
which means it tries to use non-stop mode if that is available.  If
you change the value to <code class="code">nil</code>, or if non-stop mode is
unavailable, Emacs runs GDB in all-stop mode.  The variable takes
effect when Emacs begins a debugging session; if you change its value,
you should restart any active debugging session.
</p>
<a class="index-entry-id" id="index-gdb_002dswitch_002dwhen_002danother_002dstopped"></a>
<p>When a thread stops in non-stop mode, Emacs usually switches to that
thread.  If you don&#8217;t want Emacs to do this switch if another stopped
thread is already selected, change the variable
<code class="code">gdb-switch-when-another-stopped</code> to <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-gdb_002dswitch_002dreasons"></a>
<p>Emacs can decide whether or not to switch to the stopped thread
depending on the reason which caused the stop.  Customize the variable
<code class="code">gdb-switch-reasons</code> to select the stop reasons which will cause
a thread switch.
</p>
<a class="index-entry-id" id="index-gdb_002dstopped_002dfunctions"></a>
<p>The variable <code class="code">gdb-stopped-functions</code> allows you to execute your
functions whenever some thread stops.
</p>
<p>In non-stop mode, you can switch between different modes for GUD
execution control commands.
</p>
<a class="index-entry-id" id="index-gdb_002dgud_002dcontrol_002dall_002dthreads"></a>
<dl class="table">
<dt><em class="dfn">Non-stop/A</em></dt>
<dd>
<p>When <code class="code">gdb-gud-control-all-threads</code> is <code class="code">t</code> (the default
value), interruption and continuation commands apply to all threads,
so you can halt or continue all your threads with one command using
<code class="code">gud-stop-subjob</code> and <code class="code">gud-cont</code>, respectively.  The
&#8216;<samp class="samp">Go</samp>&#8217; button is shown on the tool bar when at least one thread is
stopped, whereas &#8216;<samp class="samp">Stop</samp>&#8217; button is shown when at least one thread
is running.
</p>
</dd>
<dt><em class="dfn">Non-stop/T</em></dt>
<dd>
<p>When <code class="code">gdb-gud-control-all-threads</code> is <code class="code">nil</code>, only the
current thread is stopped/continued.  &#8216;<samp class="samp">Go</samp>&#8217; and &#8216;<samp class="samp">Stop</samp>&#8217;
buttons on the GUD tool bar are shown depending on the state of
current thread.
</p></dd>
</dl>

<p>You can change the current value of <code class="code">gdb-gud-control-all-threads</code>
from the tool bar or from &#8216;<samp class="samp">GUD-&gt;GDB-MI</samp>&#8217; menu.
</p>
<p>Stepping commands always apply to the current thread.
</p>
<p>In non-stop mode, you can interrupt/continue your threads without
selecting them.  Hitting <kbd class="kbd">i</kbd> in threads buffer interrupts thread
under point, <kbd class="kbd">c</kbd> continues it, <kbd class="kbd">s</kbd> steps through.  More such
commands may be added in the future.
</p>
<p>Note that when you interrupt a thread, it stops with the
&#8216;<samp class="samp">signal received</samp>&#8217; reason.  If that reason is included in your
<code class="code">gdb-switch-reasons</code> (it is by default), Emacs will switch to
that thread.
</p>
</div>
</div>
</div>
<div class="section-level-extent" id="Executing-Lisp">
<h3 class="section" id="Executing-Lisp-Expressions">28.7 Executing Lisp Expressions</h3>

<p>Emacs has major modes for several variants of Lisp.  They use the
same editing commands as other programming language modes
(see <a class="pxref" href="Programs.xhtml#Programs">Editing Programs</a>).  In addition, they provide special commands for
executing Lisp expressions.
</p>
<dl class="table">
<dt>Emacs Lisp mode</dt>
<dd><p>The mode for editing Emacs Lisp source files.  It defines <kbd class="kbd">C-M-x</kbd>
to evaluate the current top-level Lisp expression.  See <a class="xref" href="#Lisp-Eval">Evaluating Emacs Lisp Expressions</a>.
</p>
</dd>
<dt>Lisp Interaction mode</dt>
<dd><p>The mode for an interactive Emacs Lisp session.  It defines <kbd class="kbd">C-j</kbd>
to evaluate the expression before point and insert its value in the
buffer.  See <a class="xref" href="#Lisp-Interaction">Lisp Interaction Buffers</a>.
</p>
</dd>
<dt>Lisp mode</dt>
<dd><p>The mode for editing source files of programs that run in Lisps other
than Emacs Lisp.  It defines <kbd class="kbd">C-M-x</kbd> to evaluate the current
top-level expression in an external Lisp.  See <a class="xref" href="#External-Lisp">Running an External Lisp</a>.
</p>
</dd>
<dt>Inferior Lisp mode</dt>
<dd><p>The mode for an interactive session with an external Lisp which is
being run as a subprocess (or <em class="dfn">inferior process</em>) of Emacs.
See <a class="xref" href="#External-Lisp">Running an External Lisp</a>.
</p>
</dd>
<dt>Scheme mode</dt>
<dd><p>Like Lisp mode, but for Scheme programs.
</p>
</dd>
<dt>Inferior Scheme mode</dt>
<dd><p>Like Inferior Lisp mode, but for Scheme.
</p></dd>
</dl>

</div>
<div class="section-level-extent" id="Lisp-Libraries">
<h3 class="section" id="Libraries-of-Lisp-Code-for-Emacs">28.8 Libraries of Lisp Code for Emacs</h3>
<a class="index-entry-id" id="index-libraries"></a>
<a class="index-entry-id" id="index-loading-Lisp-code"></a>

<p>Emacs Lisp code is stored in files whose names conventionally end in
<samp class="file">.el</samp>.  Such files are automatically visited in Emacs Lisp mode.
</p>
<a class="index-entry-id" id="index-byte-code"></a>
<p>Emacs Lisp code can be compiled into byte-code, which loads faster,
takes up less space, and executes faster.  By convention, compiled
Emacs Lisp code goes in a separate file whose name ends in
&#8216;<samp class="samp">.elc</samp>&#8217;.  For example, the compiled code for <samp class="file">foo.el</samp> goes in
<samp class="file">foo.elc</samp>.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Byte-Compilation.html#Byte-Compilation">Byte Compilation</a> in <cite class="cite">the
Emacs Lisp Reference Manual</cite>.
</p>
<a class="index-entry-id" id="index-native-compilation"></a>
<p>Emacs Lisp code can also be compiled into <em class="dfn">native code</em>: machine
code not unlike the one produced by a C or Fortran compiler.  Native
code runs even faster than byte-code.  Natively-compiled Emacs Lisp
code is stored in files whose names end in &#8216;<samp class="samp">.eln</samp>&#8217;.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Native-Compilation.html#Native-Compilation">Native Compilation</a> in <cite class="cite">the Emacs Lisp Reference Manual</cite>.
</p>
<a class="index-entry-id" id="index-load_002dfile"></a>
<p>To <em class="dfn">load</em> an Emacs Lisp file, type <kbd class="kbd">M-x load-file</kbd>.  This
command reads a file name using the minibuffer, and executes the
contents of that file as Emacs Lisp code.  It is not necessary to
visit the file first; this command reads the file directly from disk,
not from an existing Emacs buffer.
</p>
<a class="index-entry-id" id="index-load"></a>
<a class="index-entry-id" id="index-load_002dlibrary"></a>
<a class="index-entry-id" id="index-load_002dprefer_002dnewer"></a>
<a class="index-entry-id" id="index-load-path-for-Emacs-Lisp"></a>
<p>If an Emacs Lisp file is installed in the Emacs Lisp <em class="dfn">load path</em>
(defined below), you can load it by typing <kbd class="kbd">M-x load-library</kbd>,
instead of using <kbd class="kbd">M-x load-file</kbd>.  The <kbd class="kbd">M-x load-library</kbd>
command prompts for a <em class="dfn">library name</em> rather than a file name; it
searches through each directory in the Emacs Lisp load path, trying to
find a file matching that library name.  If the library name is
&#8216;<samp class="samp"><var class="var">foo</var></samp>&#8217;, it tries looking for files named
<samp class="file"><var class="var">foo</var>.elc</samp>, <samp class="file"><var class="var">foo</var>.el</samp>, and <samp class="file"><var class="var">foo</var></samp>.  (If
Emacs was built with native compilation enabled, <code class="code">load-library</code>
looks for a &#8216;<samp class="samp">.eln</samp>&#8217; file that corresponds to <samp class="file"><var class="var">foo</var>.el</samp>
and loads it instead of <samp class="file"><var class="var">foo</var>.elc</samp>.)  The default behavior
is to load the first file found.  This command prefers <samp class="file">.eln</samp>
files over <samp class="file">.elc</samp> files, and prefers <samp class="file">.elc</samp> files over
<samp class="file">.el</samp> files, because compiled files load and run faster.  If it
finds that <samp class="file"><var class="var">lib</var>.el</samp> is newer than <samp class="file"><var class="var">lib</var>.elc</samp>, it
issues a warning, in case someone made changes to the <samp class="file">.el</samp> file
and forgot to recompile it, but loads the <samp class="file">.elc</samp> file anyway.
(Due to this behavior, you can save unfinished edits to Emacs Lisp
source files, and not recompile until your changes are ready for use.)
If you set the option <code class="code">load-prefer-newer</code> to a non-<code class="code">nil</code>
value, however, then rather than the procedure described above, Emacs
loads whichever version of the file is newest.  If Emacs was built
with native compilation, and it cannot find the &#8216;<samp class="samp">.eln</samp>&#8217; file
corresponding to <samp class="file"><var class="var">lib</var>.el</samp>, it will load a
<samp class="file"><var class="var">lib</var>.elc</samp> and start native compilation of
<samp class="file"><var class="var">lib</var>.el</samp> in the background, then load the &#8216;<samp class="samp">.eln</samp>&#8217; file
when it finishes compilation.
</p>
<p>Emacs Lisp programs usually load Emacs Lisp files using the
<code class="code">load</code> function.  This is similar to <code class="code">load-library</code>, but is
lower-level and accepts additional arguments.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/How-Programs-Do-Loading.html#How-Programs-Do-Loading">How Programs Do
Loading</a> in <cite class="cite">the Emacs Lisp Reference Manual</cite>.
</p>
<a class="index-entry-id" id="index-load_002dpath"></a>
<p>The Emacs Lisp load path is specified by the variable
<code class="code">load-path</code>.  Its value should be a list of directories
(strings).  These directories are searched, in the specified order, by
the <kbd class="kbd">M-x load-library</kbd> command, the lower-level <code class="code">load</code>
function, and other Emacs functions that find Emacs Lisp libraries.
An entry in <code class="code">load-path</code> can also have the special value
<code class="code">nil</code>, which stands for the current default directory, but it is
almost always a bad idea to use this, because its meaning will depend
on the buffer that is current when <code class="code">load-path</code> is used by Emacs.
(If you find yourself wishing that <code class="code">nil</code> were in the list, most
likely what you really want is to use <kbd class="kbd">M-x load-file</kbd>.)
</p>
<p>The default value of <code class="code">load-path</code> is a list of directories where
the Lisp code for Emacs itself is stored.  If you have libraries of
your own in another directory, you can add that directory to the load
path.  Unlike most other variables described in this manual,
<code class="code">load-path</code> cannot be changed via the Customize interface
(see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>), but you can add a directory to it by
putting a line like this in your init file (see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>):
</p>
<div class="example">
<pre class="example-preformatted">(add-to-list 'load-path &quot;/path/to/my/lisp/library&quot;)
</pre></div>

<p>It is customary to put locally installed libraries in the
<samp class="file">site-lisp</samp> directory that is already in the default value of
<code class="code">load-path</code>, or in some subdirectory of <samp class="file">site-lisp</samp>.  This
way, you don&#8217;t need to modify the default value of <code class="code">load-path</code>.
</p>
<a class="index-entry-id" id="index-native_002dcomp_002deln_002dload_002dpath"></a>
<p>Similarly to <code class="code">load-path</code>, the list of directories where Emacs
looks for <samp class="file">*.eln</samp> files with natively-compiled Lisp code is
specified by the variable <code class="code">native-comp-eln-load-path</code>.
</p>
<a class="index-entry-id" id="index-autoload"></a>
<p>Some commands are <em class="dfn">autoloaded</em>; when you run them, Emacs
automatically loads the associated library first.  For instance, the
<kbd class="kbd">M-x compile</kbd> command (see <a class="pxref" href="#Compilation">Running Compilations under Emacs</a>) is autoloaded; if you
call it, Emacs automatically loads the <code class="code">compile</code> library first.
In contrast, the command <kbd class="kbd">M-x recompile</kbd> is not autoloaded, so it
is unavailable until you load the <code class="code">compile</code> library.
</p>
<a class="index-entry-id" id="index-help_002denable_002dautoload"></a>
<p>Automatic loading can also occur when you look up the documentation
of an autoloaded command (see <a class="pxref" href="Help.xhtml#Name-Help">Help by Command or Variable Name</a>), if the documentation
refers to other functions and variables in its library (loading the
library lets Emacs properly set up the hyperlinks in the <samp class="file">*Help*</samp>
buffer).  To disable this feature, change the variable
<code class="code">help-enable-autoload</code> to <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-help_002denable_002dcompletion_002dautoload"></a>
<p>Automatic loading also occurs when completing names for
<code class="code">describe-variable</code> and <code class="code">describe-function</code>, based on the
prefix being completed.  To disable this feature, change the variable
<code class="code">help-enable-completion-autoload</code> to <code class="code">nil</code>.
</p>
<p>Once you put your library in a directory where Emacs can find and
load it, you may wish to make it available at startup.  This is useful
when the library defines features that should be available
automatically on demand, and manually loading the library is thus
inconvenient.  In these cases, make sure the library will be loaded by
adding suitable forms to your init file: either <code class="code">load</code> or
<code class="code">require</code> (if you always need to load the library at startup), or
<code class="code">autoload</code> if you need Emacs to load the library when some
command or function is invoked.  For example:
</p>
<div class="example smalllisp lisp">
<div class="group"><pre class="lisp-preformatted"> ;; Loads <samp class="file">my-shining-package.elc</samp> unconditionally.
 (require 'my-shining-package)
</pre></div><div class="group"><pre class="lisp-preformatted"> ;; Will load <samp class="file">my-shining-package.elc</samp> when <code class="code">my-func</code> is invoked.
 (autoload 'my-func &quot;my-shining-package&quot;)
</pre></div></div>

<p>Note that installing a package using <code class="code">package-install</code>
(see <a class="pxref" href="Packages.xhtml#Package-Installation">Package Installation</a>) takes care of placing the package&#8217;s
Lisp files in a directory where Emacs will find it, and also writes
the necessary initialization code into your init files, making the
above manual customizations unnecessary.
</p>
</div>
<div class="section-level-extent" id="Lisp-Eval">
<h3 class="section" id="Evaluating-Emacs-Lisp-Expressions">28.9 Evaluating Emacs Lisp Expressions</h3>
<a class="index-entry-id" id="index-Emacs-Lisp-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Emacs-Lisp"></a>
<a class="index-entry-id" id="index-evaluation_002c-Emacs-Lisp"></a>

<a class="index-entry-id" id="index-emacs_002dlisp_002dmode"></a>
<p>Emacs Lisp mode is the major mode for editing Emacs Lisp.  Its mode
command is <kbd class="kbd">M-x emacs-lisp-mode</kbd>.
</p>
<p>Emacs provides several commands for evaluating Emacs Lisp
expressions.  You can use these commands in Emacs Lisp mode, to test
your Emacs Lisp code as it is being written.  For example, after
re-writing a function, you can evaluate the function definition to
make it take effect for subsequent function calls.  These commands are
also available globally, and can be used outside Emacs Lisp mode.
</p>
<dl class="table">
<dt><kbd class="kbd">M-:</kbd></dt>
<dd><p>Read a single Emacs Lisp expression in the minibuffer, evaluate it,
and print the value in the echo area (<code class="code">eval-expression</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-e</kbd></dt>
<dd><p>Evaluate the Emacs Lisp expression before point, and print the value
in the echo area (<code class="code">eval-last-sexp</code>).
</p></dd>
<dt><kbd class="kbd">C-M-x</kbd> <span class="r">(in Emacs Lisp mode)</span></dt>
<dt><kbd class="kbd">M-x eval-defun</kbd></dt>
<dd><p>Evaluate the defun containing or after point, and print the value in
the echo area (<code class="code">eval-defun</code>).
</p></dd>
<dt><kbd class="kbd">M-x eval-region</kbd></dt>
<dd><p>Evaluate all the Emacs Lisp expressions in the region.
</p></dd>
<dt><kbd class="kbd">M-x eval-buffer</kbd></dt>
<dd><p>Evaluate all the Emacs Lisp expressions in the buffer.
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002d_003a"></a>
<a class="index-entry-id" id="index-eval_002dexpression"></a>
<p><kbd class="kbd">M-:</kbd> (<code class="code">eval-expression</code>) reads an expression using the
minibuffer, and evaluates it.  (Before evaluating the expression, the
current buffer switches back to the buffer that was current when you
typed <kbd class="kbd">M-:</kbd>, not the minibuffer into which you typed the
expression.)
</p>
<a class="index-entry-id" id="index-C_002dx-C_002de"></a>
<a class="index-entry-id" id="index-eval_002dlast_002dsexp"></a>
<p>The command <kbd class="kbd">C-x C-e</kbd> (<code class="code">eval-last-sexp</code>) evaluates the
Emacs Lisp expression preceding point in the buffer, and displays the
value in the echo area.  When the result of an evaluation is an
integer, it is displayed together with the value in other formats
(octal, hexadecimal, and character if
<code class="code">eval-expression-print-maximum-character</code>, described below,
allows it).
</p>
<p>If <kbd class="kbd">M-:</kbd> or <kbd class="kbd">C-x C-e</kbd> is given a prefix argument, it inserts
the value into the current buffer at point, rather than displaying it
in the echo area.  If the prefix argument is zero, any integer output
is inserted together with its value in other formats (octal,
hexadecimal, and character).  Such a prefix argument also prevents
abbreviation of the output according to the variables
<code class="code">eval-expression-print-level</code> and
<code class="code">eval-expression-print-length</code> (see below).  Similarly, a prefix
argument of <code class="code">-1</code> overrides the effect of
<code class="code">eval-expression-print-length</code>.
</p>
<p><kbd class="kbd">C-x C-e</kbd> (<code class="code">eval-last-sexp</code>) treats <code class="code">defvar</code>
expressions specially.  Normally, evaluating a <code class="code">defvar</code>
expression does nothing if the variable it defines already has a
value.  But this command unconditionally resets the variable to the
initial value specified by the <code class="code">defvar</code>; this is convenient for
debugging Emacs Lisp programs.  <code class="code">defcustom</code> and <code class="code">defface</code>
expressions are treated similarly.  Note the other commands documented
in this section, except <code class="code">eval-defun</code>, do not have this special
feature.
</p>
<a class="index-entry-id" id="index-C_002dM_002dx-_0028Emacs-Lisp-mode_0029"></a>
<a class="index-entry-id" id="index-eval_002ddefun"></a>
<p>The <code class="code">eval-defun</code> command is bound to <kbd class="kbd">C-M-x</kbd> in Emacs Lisp
mode.  It evaluates the top-level Lisp expression containing or
following point, and prints the value in the echo area.  In this
context, a top-level expression is referred to as a &#8220;defun&#8221;, but it
need not be an actual <code class="code">defun</code> (function definition).
</p>
<p>This command handles <code class="code">defvar</code>/<code class="code">defcustom</code>/<code class="code">defface</code>
forms the same way that <code class="code">eval-last-sexp</code> does.
</p>
<p>With a prefix argument, <kbd class="kbd">C-M-x</kbd> instruments the function
definition for Edebug, the Emacs Lisp Debugger.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Instrumenting.html#Instrumenting">Instrumenting for Edebug</a> in <cite class="cite">the Emacs Lisp Reference Manual</cite>.
</p>
<a class="index-entry-id" id="index-eval_002dregion"></a>
<a class="index-entry-id" id="index-eval_002dbuffer"></a>
<p>The command <kbd class="kbd">M-x eval-region</kbd> parses the text of the region as
one or more Lisp expressions, evaluating them one by one.  <kbd class="kbd">M-x
eval-buffer</kbd> is similar but evaluates the entire buffer.
</p>
<a class="index-entry-id" id="index-eval_002dexpression_002dprint_002dlevel"></a>
<a class="index-entry-id" id="index-eval_002dexpression_002dprint_002dlength"></a>
<a class="index-entry-id" id="index-eval_002dexpression_002dprint_002dmaximum_002dcharacter"></a>
<a class="index-entry-id" id="index-eval_002dexpression_002ddebug_002don_002derror"></a>
<p>The options <code class="code">eval-expression-print-level</code> and
<code class="code">eval-expression-print-length</code> control the maximum depth and
length of lists to print in the result of the evaluation commands
before abbreviating them.  Supplying a zero prefix argument to
<code class="code">eval-expression</code> or <code class="code">eval-last-sexp</code> causes lists to be
printed in full.  <code class="code">eval-expression-debug-on-error</code> controls
whether evaluation errors invoke the debugger when these commands are
used; its default is <code class="code">t</code>.
<code class="code">eval-expression-print-maximum-character</code> prevents integers which
are larger than it from being displayed as characters.
</p>
</div>
<div class="section-level-extent" id="Lisp-Interaction">
<h3 class="section" id="Lisp-Interaction-Buffers">28.10 Lisp Interaction Buffers</h3>

<a class="index-entry-id" id="index-lisp_002dinteraction_002dmode"></a>
<p>When Emacs starts up, it contains a buffer named <samp class="file">*scratch*</samp>,
which is provided for evaluating Emacs Lisp expressions interactively.
Its major mode is Lisp Interaction mode.  You can also enable Lisp
Interaction mode by typing <kbd class="kbd">M-x lisp-interaction-mode</kbd>.
</p>
<a class="index-entry-id" id="index-scratch_002dbuffer"></a>
<p>If you kill the <samp class="file">*scratch*</samp> buffer, you can recreate it with
the <kbd class="kbd">M-x scratch-buffer</kbd> command.
</p>
<a class="index-entry-id" id="index-eval_002dprint_002dlast_002dsexp"></a>
<a class="index-entry-id" id="index-C_002dj-_0028Lisp-Interaction-mode_0029"></a>
<p>In the <samp class="file">*scratch*</samp> buffer, and other Lisp Interaction mode
buffers, <kbd class="kbd">C-j</kbd> (<code class="code">eval-print-last-sexp</code>) evaluates the Lisp
expression before point, and inserts the value at point.  Thus, as you
type expressions into the buffer followed by <kbd class="kbd">C-j</kbd> after each
expression, the buffer records a transcript of the evaluated
expressions and their values.  All other commands in Lisp Interaction
mode are the same as in Emacs Lisp mode.
</p>
<a class="index-entry-id" id="index-initial_002dscratch_002dmessage"></a>
<p>At startup, the <samp class="file">*scratch*</samp> buffer contains a short message, in
the form of a Lisp comment, that explains what it is for.  This
message is controlled by the variable <code class="code">initial-scratch-message</code>,
which should be either a documentation string, or <code class="code">nil</code> (which means to
suppress the message).
</p>
<a class="index-entry-id" id="index-ielm"></a>
<p>An alternative way of evaluating Emacs Lisp expressions
interactively is to use Inferior Emacs Lisp mode, which provides an
interface rather like Shell mode (see <a class="pxref" href="Shell.xhtml#Shell-Mode">Shell Mode</a>) for evaluating
Emacs Lisp expressions.  Type <kbd class="kbd">M-x ielm</kbd> to create an
<samp class="file">*ielm*</samp> buffer which uses this mode.  For more information, see
that command&#8217;s documentation.
</p>
</div>
<div class="section-level-extent" id="External-Lisp">
<h3 class="section" id="Running-an-External-Lisp">28.11 Running an External Lisp</h3>
<a class="index-entry-id" id="index-Lisp-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Lisp"></a>
<a class="index-entry-id" id="index-Common-Lisp"></a>

<p>Lisp mode is the major mode for editing programs written in
general-purpose Lisp dialects, such as Common Lisp.  Its mode command
is <kbd class="kbd">M-x lisp-mode</kbd>.  Emacs uses Lisp mode automatically for files
whose names end in <samp class="file">.l</samp>, <samp class="file">.lsp</samp>, or <samp class="file">.lisp</samp>.
</p>
<a class="index-entry-id" id="index-run_002dlisp"></a>
<a class="index-entry-id" id="index-inferior_002dlisp_002dprogram"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dz"></a>
<p>You can run an external Lisp session as a subprocess or
<em class="dfn">inferior process</em> of Emacs, and pass expressions to it to be
evaluated.  To begin an external Lisp session, type <kbd class="kbd">M-x
run-lisp</kbd>.  This runs the program named <code class="command">lisp</code>, and sets it up
so that both input and output go through an Emacs buffer named
<samp class="file">*inferior-lisp*</samp>.  To change the name of the Lisp program run by
<kbd class="kbd">M-x run-lisp</kbd>, change the variable <code class="code">inferior-lisp-program</code>.
</p>
<p>The major mode for the <samp class="file">*lisp*</samp> buffer is Inferior Lisp mode,
which combines the characteristics of Lisp mode and Shell mode
(see <a class="pxref" href="Shell.xhtml#Shell-Mode">Shell Mode</a>).  To send input to the Lisp session, go to the
end of the <samp class="file">*lisp*</samp> buffer and type the input, followed by
<kbd class="key">RET</kbd>.  Terminal output from the Lisp session is automatically
inserted in the buffer.
</p>
<a class="index-entry-id" id="index-C_002dM_002dx-_0028Lisp-mode_0029"></a>
<a class="index-entry-id" id="index-lisp_002deval_002ddefun"></a>
<p>When you edit a Lisp program in Lisp mode, you can type <kbd class="kbd">C-M-x</kbd>
(<code class="code">lisp-eval-defun</code>) to send an expression from the Lisp mode
buffer to a Lisp session that you had started with <kbd class="kbd">M-x run-lisp</kbd>.
The expression sent is the top-level Lisp expression at or following
point.  The resulting value goes as usual into the
<samp class="file">*inferior-lisp*</samp> buffer.  Note that the effect of <kbd class="kbd">C-M-x</kbd> in
Lisp mode is thus very similar to its effect in Emacs Lisp mode
(see <a class="pxref" href="#Lisp-Eval">Evaluating Emacs Lisp Expressions</a>), except that the expression is sent to a different
Lisp environment instead of being evaluated in Emacs.
</p>
<a class="index-entry-id" id="index-scheme_002dmode"></a>
<a class="index-entry-id" id="index-run_002dscheme"></a>
<a class="index-entry-id" id="index-Scheme-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Scheme"></a>
<a class="index-entry-id" id="index-C_002dM_002dx-_0028Scheme-mode_0029"></a>
<p>The facilities for editing Scheme code, and for sending expressions
to a Scheme subprocess, are very similar.  Scheme source files are
edited in Scheme mode, which can be explicitly enabled with <kbd class="kbd">M-x
scheme-mode</kbd>.  You can initiate a Scheme session by typing <kbd class="kbd">M-x
run-scheme</kbd> (the buffer for interacting with Scheme is named
<samp class="file">*scheme*</samp>), and send expressions to it by typing <kbd class="kbd">C-M-x</kbd>.
</p></div>
</div>



</body>
</html>
