<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>21 Multiple Windows (GNU Emacs Manual)</title>

<meta name="description" content="21 Multiple Windows (GNU Emacs Manual)"/>
<meta name="keywords" content="21 Multiple Windows (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Frames.xhtml#Frames" rel="next" title="22 Frames and Graphical Displays"/>
<link href="Buffers.xhtml#Buffers" rel="prev" title="20 Using Multiple Buffers"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Windows">

<h2 class="chapter" id="Multiple-Windows">21 Multiple Windows</h2>
<a class="index-entry-id" id="index-windows-in-Emacs"></a>
<a class="index-entry-id" id="index-multiple-windows-in-Emacs"></a>

<p>Emacs can split a frame into two or many windows.  Multiple windows
can display parts of different buffers, or different parts of one
buffer.  Multiple frames always imply multiple windows, because each
frame has its own set of windows.  Each window belongs to one and only
one frame.
</p>

<div class="section-level-extent" id="Basic-Window">
<h3 class="section" id="Concepts-of-Emacs-Windows">21.1 Concepts of Emacs Windows</h3>

<p>Each Emacs window displays one Emacs buffer at any time.  A single
buffer may appear in more than one window; if it does, any changes in
its text are displayed in all the windows where it appears.  But these
windows can show different parts of the buffer, because each window
has its own value of point.
</p>
<a class="index-entry-id" id="index-selected-window"></a>
<p>At any time, one Emacs window is the <em class="dfn">selected window</em>; the
buffer this window is displaying is the current buffer.  On graphical
displays, the point is indicated by a solid blinking cursor in the
selected window, and by a hollow box in non-selected windows.  On text
terminals, the cursor is drawn only in the selected window.
See <a class="xref" href="Display.xhtml#Cursor-Display">Displaying the Cursor</a>.
</p>
<p>Commands to move point affect the value of point for the selected
Emacs window only.  They do not change the value of point in other
Emacs windows, even those showing the same buffer.  The same is true
for buffer-switching commands such as <kbd class="kbd">C-x b</kbd>; they do not affect
other windows at all.  However, there are other commands such as
<kbd class="kbd">C-x 4 b</kbd> that select a different window and switch buffers in it.
Also, all commands that display information in a window, including
(for example) <kbd class="kbd">C-h f</kbd> (<code class="code">describe-function</code>) and <kbd class="kbd">C-x C-b</kbd>
(<code class="code">list-buffers</code>), usually work by displaying buffers in a
nonselected window without affecting the selected window.
</p>
<p>When multiple windows show the same buffer, they can have different
regions, because they can have different values of point.  However,
they all have the same value for the mark, because each buffer has
only one mark position.
</p>
<p>Each window has its own mode line, which displays the buffer name,
modification status and major and minor modes of the buffer that is
displayed in the window.  The selected window&#8217;s mode line appears in a
different color.  See <a class="xref" href="Screen.xhtml#Mode-Line">The Mode Line</a>, for details.
</p>
</div>
<div class="section-level-extent" id="Split-Window">
<h3 class="section" id="Splitting-Windows">21.2 Splitting Windows</h3>

<dl class="table">
<dt><kbd class="kbd">C-x 2</kbd></dt>
<dd><p>Split the selected window into two windows, one above the other
(<code class="code">split-window-below</code>).
</p></dd>
<dt><kbd class="kbd">C-x 3</kbd></dt>
<dd><p>Split the selected window into two windows, positioned side by side
(<code class="code">split-window-right</code>).
</p></dd>
<dt><kbd class="kbd">C-mouse-2</kbd></dt>
<dd><p>In the mode line of a window, split that window.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-2"></a>
<a class="index-entry-id" id="index-split_002dwindow_002dbelow"></a>
<p><kbd class="kbd">C-x 2</kbd> (<code class="code">split-window-below</code>) splits the selected window
into two windows, one above the other.  After splitting, the selected
window is the upper one, and the newly split-off window is below.
Both windows have the same value of point as before, and display the
same portion of the buffer (or as close to it as possible).  If
necessary, the windows are scrolled to keep point on-screen.  By
default, the two windows each get half the height of the original
window.  A positive numeric argument specifies how many lines to give
to the top window; a negative numeric argument specifies how many
lines to give to the bottom window.
</p>
<a class="index-entry-id" id="index-split_002dwindow_002dkeep_002dpoint"></a>
<p>If you change the variable <code class="code">split-window-keep-point</code> to
<code class="code">nil</code>, <kbd class="kbd">C-x 2</kbd> instead adjusts the portion of the buffer
displayed by the two windows, as well as the value of point in each
window, in order to keep the text on the screen as close as possible
to what it was before; furthermore, if point was in the lower half of
the original window, the bottom window is selected instead of the
upper one.
</p>
<a class="index-entry-id" id="index-C_002dx-3"></a>
<a class="index-entry-id" id="index-split_002dwindow_002dright"></a>
<p><kbd class="kbd">C-x 3</kbd> (<code class="code">split-window-right</code>) splits the selected window
into two side-by-side windows.  The left window is the selected one;
the right window displays the same portion of the same buffer, and has
the same value of point.  A positive numeric argument specifies how
many columns to give the left window; a negative numeric argument
specifies how many columns to give the right window.
</p>
<a class="index-entry-id" id="index-truncate_002dpartial_002dwidth_002dwindows"></a>
<p>When you split a window with <kbd class="kbd">C-x 3</kbd>, each resulting window
occupies less than the full width of the frame.  If it becomes too
narrow, the buffer may be difficult to read if continuation lines are
in use (see <a class="pxref" href="Basic.xhtml#Continuation-Lines">Continuation Lines</a>).  Therefore, Emacs automatically
switches to line truncation if the window width becomes narrower than
50 columns.  This truncation occurs regardless of the value of the
variable <code class="code">truncate-lines</code> (see <a class="pxref" href="Display.xhtml#Line-Truncation">Line Truncation</a>); it is
instead controlled by the variable
<code class="code">truncate-partial-width-windows</code>.  If the value of this variable
is a positive integer (the default is 50), that specifies the minimum
total width for a partial-width window before automatic line
truncation occurs; if the value is <code class="code">nil</code>, automatic line
truncation is disabled; and for any other non-<code class="code">nil</code> value, Emacs
truncates lines in every partial-width window regardless of its width.
The total width of a window is in column units as reported by
<code class="code">window-total-width</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#Window-Sizes">Window Sizes</a> in <cite class="cite">The Emacs
Lisp Reference Manual</cite>), it includes the fringes, the continuation and
truncation glyphs, the margins, and the scroll bar.
</p>
<p>On text terminals, side-by-side windows are separated by a vertical
divider which is drawn using the <code class="code">vertical-border</code> face.
</p>
<a class="index-entry-id" id="index-C_002dmouse_002d2-_0028mode-line_0029"></a>
<a class="index-entry-id" id="index-C_002dmouse_002d2-_0028scroll-bar_0029"></a>
<p>If you click <kbd class="kbd">C-mouse-2</kbd> in the mode line of a window, that
splits the window, putting a vertical divider where you click.
Depending on how Emacs is compiled, you can also split a window by
clicking <kbd class="kbd">C-mouse-2</kbd> in the scroll bar, which puts a horizontal
divider where you click (this feature does not work when Emacs uses
GTK+ scroll bars).
</p>
<a class="index-entry-id" id="index-window_002dresize_002dpixelwise"></a>
<p>By default, when you split a window, Emacs gives each of the
resulting windows dimensions that are an integral multiple of the
default font size of the frame.  That might subdivide the screen
estate unevenly between the resulting windows.  If you set the
variable <code class="code">window-resize-pixelwise</code> to a non-<code class="code">nil</code> value,
Emacs will give each window the same number of pixels (give or take
one pixel if the initial dimension was an odd number of pixels).  Note
that when a frame&#8217;s pixel size is not a multiple of the frame&#8217;s
character size, at least one window may get resized pixelwise even if
this option is <code class="code">nil</code>.
</p>
</div>
<div class="section-level-extent" id="Other-Window">
<h3 class="section" id="Using-Other-Windows">21.3 Using Other Windows</h3>

<dl class="table">
<dt><kbd class="kbd">C-x o</kbd></dt>
<dd><p>Select another window (<code class="code">other-window</code>).
</p></dd>
<dt><kbd class="kbd">C-M-v</kbd></dt>
<dd><p>Scroll the next window upward (<code class="code">scroll-other-window</code>).
</p></dd>
<dt><kbd class="kbd">C-M-S-v</kbd></dt>
<dd><p>Scroll the next window downward (<code class="code">scroll-other-window-down</code>).
</p></dd>
<dt><kbd class="kbd">C-M-S-l</kbd></dt>
<dd><p>Recenter the next window (<code class="code">recenter-other-window</code>).
</p></dd>
<dt><kbd class="kbd">mouse-1</kbd></dt>
<dd><p><kbd class="kbd">mouse-1</kbd>, in the text area of a window, selects the window and
moves point to the position clicked.  Clicking in the mode line
selects the window without moving point in it.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-o"></a>
<a class="index-entry-id" id="index-other_002dwindow"></a>
<p>With the keyboard, you can switch windows by typing <kbd class="kbd">C-x o</kbd>
(<code class="code">other-window</code>).  That is an <kbd class="kbd">o</kbd>, for &#8220;other&#8221;, not a zero.
When there are more than two windows, this command moves through all the
windows in a cyclic order, generally top to bottom and left to right.
After the rightmost and bottommost window, it goes back to the one at
the upper left corner.  A numeric argument means to move several steps
in the cyclic order of windows.  A negative argument moves around the
cycle in the opposite order.  When the minibuffer is active, the
minibuffer window is the last window in the cycle; you can switch from
the minibuffer window to one of the other windows, and later switch
back and finish supplying the minibuffer argument that is requested.
See <a class="xref" href="Minibuffer.xhtml#Minibuffer-Edit">Editing in the Minibuffer</a>.
</p>
<a class="index-entry-id" id="index-next_002dwindow_002dany_002dframe"></a>
<p>The <code class="code">other-window</code> command will normally only switch to the next
window in the current frame (unless otherwise configured).  If you
work in a multi-frame environment and you want windows in all frames
to be part of the cycle, you can rebind <kbd class="kbd">C-x o</kbd> to the
<code class="code">next-window-any-frame</code> command.  (See <a class="xref" href="Customization.xhtml#Rebinding">Changing Key Bindings Interactively</a>, for how to
rebind a command.)
</p>
<a class="index-entry-id" id="index-C_002dM_002dv"></a>
<a class="index-entry-id" id="index-scroll_002dother_002dwindow"></a>
<a class="index-entry-id" id="index-C_002dM_002dS_002dv"></a>
<a class="index-entry-id" id="index-scroll_002dother_002dwindow_002ddown"></a>
<a class="index-entry-id" id="index-C_002dM_002dS_002dl"></a>
<a class="index-entry-id" id="index-recenter_002dother_002dwindow"></a>
<p>The usual scrolling commands (see <a class="pxref" href="Display.xhtml#Display">Controlling the Display</a>) apply to the selected
window only, but there are also commands to scroll the next window.
<kbd class="kbd">C-M-v</kbd> (<code class="code">scroll-other-window</code>) scrolls the window that
<kbd class="kbd">C-x o</kbd> would select.  In other respects, the command behaves like
<kbd class="kbd">C-v</kbd>; both move the buffer text upward relative to the window, and
take positive and negative arguments.  (In the minibuffer, <kbd class="kbd">C-M-v</kbd>
scrolls the help window associated with the minibuffer, if any, rather
than the next window in the standard cyclic order; see <a class="pxref" href="Minibuffer.xhtml#Minibuffer-Edit">Editing in the Minibuffer</a>.)  <kbd class="kbd">C-M-S-v</kbd> (<code class="code">scroll-other-window-down</code>) scrolls the
next window downward in a similar way.  Likewise, <kbd class="kbd">C-M-S-l</kbd>
(<code class="code">recenter-other-window</code>) behaves like <kbd class="kbd">C-l</kbd>
(<code class="code">recenter-top-bottom</code>) in the next window.
</p>
<a class="index-entry-id" id="index-mouse_002dautoselect_002dwindow"></a>
<p>If you set <code class="code">mouse-autoselect-window</code> to a non-<code class="code">nil</code> value,
moving the mouse over a different window selects that window.  This
feature is off by default.
</p>
</div>
<div class="section-level-extent" id="Pop-Up-Window">
<h3 class="section" id="Displaying-in-Another-Window">21.4 Displaying in Another Window</h3>

<a class="index-entry-id" id="index-selecting-buffers-in-other-windows"></a>
<a class="index-entry-id" id="index-C_002dx-4"></a>
<p><kbd class="kbd">C-x 4</kbd> is a prefix key for a variety of commands that switch to
a buffer in a different window&#8212;either another existing window, or a
new window created by splitting the selected window.  See <a class="xref" href="#Window-Choice">How <code class="code">display-buffer</code> works</a>, for how Emacs picks or creates the window to use.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x 4 b <var class="var">bufname</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Select buffer <var class="var">bufname</var> in another window
(<code class="code">switch-to-buffer-other-window</code>).  See <a class="xref" href="Buffers.xhtml#Select-Buffer">Creating and Selecting Buffers</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-display_002dbuffer-_0028command_0029"></a>
<a id="index-C_002dx-4-C_002do"></a><kbd class="kbd">C-x 4 C-o <var class="var">bufname</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Display buffer <var class="var">bufname</var> in some window, without trying to select
it (<code class="code">display-buffer</code>).  See <a class="xref" href="#Displaying-Buffers">Displaying a Buffer in a Window</a>, for details
about how the window is chosen.
</p>
</dd>
<dt><kbd class="kbd">C-x 4 f <var class="var">filename</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Visit file <var class="var">filename</var> and select its buffer in another window
(<code class="code">find-file-other-window</code>).  See <a class="xref" href="Files.xhtml#Visiting">Visiting Files</a>.
</p>
</dd>
<dt><kbd class="kbd">C-x 4 d <var class="var">directory</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Select a Dired buffer for directory <var class="var">directory</var> in another window
(<code class="code">dired-other-window</code>).  See <a class="xref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>.
</p>
</dd>
<dt><kbd class="kbd">C-x 4 m</kbd></dt>
<dd><p>Start composing a mail message, similar to <kbd class="kbd">C-x m</kbd> (see <a class="pxref" href="Sending-Mail.xhtml#Sending-Mail">Sending Mail</a>), but in another window (<code class="code">compose-mail-other-window</code>).
</p>
</dd>
<dt><a id="index-find_002dtag_002dother_002dwindow"></a><kbd class="kbd">C-x 4 .</kbd></dt>
<dd><p>Find the definition of an identifier, similar to <kbd class="kbd">M-.</kbd>
(see <a class="pxref" href="Maintaining.xhtml#Xref">Find Identifier References</a>), but in another window
(<code class="code">xref-find-definitions-other-window</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x 4 r <var class="var">filename</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Visit file <var class="var">filename</var> read-only, and select its buffer in another
window (<code class="code">find-file-read-only-other-window</code>).  See <a class="xref" href="Files.xhtml#Visiting">Visiting Files</a>.
</p>
</dd>
<dt><kbd class="kbd">C-x 4 4</kbd></dt>
<dd><p>A more general prefix command affects the buffer displayed by the next
command invoked immediately after this prefix command.  It requests
the buffer of the next command to be displayed in another window.
</p>
</dd>
<dt><kbd class="kbd">C-x 4 1</kbd></dt>
<dd><p>This general prefix command requests the buffer of the next command
to be displayed in the same window.
</p></dd>
</dl>

</div>
<div class="section-level-extent" id="Change-Window">
<h3 class="section" id="Deleting-and-Resizing-Windows">21.5 Deleting and Resizing Windows</h3>

<a class="index-entry-id" id="index-delete-window"></a>
<a class="index-entry-id" id="index-deleting-windows"></a>
<dl class="table">
<dt><kbd class="kbd">C-x 0</kbd></dt>
<dd><p>Delete the selected window (<code class="code">delete-window</code>).
</p></dd>
<dt><kbd class="kbd">C-x 1</kbd></dt>
<dd><p>Delete all windows in the selected frame except the selected window
(<code class="code">delete-other-windows</code>).
</p></dd>
<dt><kbd class="kbd">C-x 4 0</kbd></dt>
<dd><p>Delete the selected window and kill the buffer that was showing in it
(<code class="code">kill-buffer-and-window</code>).  The last character in this key
sequence is a zero.
</p></dd>
<dt><kbd class="kbd">C-x w 0 <kbd class="key">RET</kbd> <var class="var">buffer</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Delete windows showing the specified <var class="var">buffer</var>.
</p></dd>
<dt><kbd class="kbd">C-x ^</kbd></dt>
<dd><p>Make selected window taller (<code class="code">enlarge-window</code>).
</p></dd>
<dt><kbd class="kbd">C-x }</kbd></dt>
<dd><p>Make selected window wider (<code class="code">enlarge-window-horizontally</code>).
</p></dd>
<dt><kbd class="kbd">C-x {</kbd></dt>
<dd><p>Make selected window narrower (<code class="code">shrink-window-horizontally</code>).
</p></dd>
<dt><kbd class="kbd">C-x -</kbd></dt>
<dd><p>Shrink this window if its buffer doesn&#8217;t need so many lines
(<code class="code">shrink-window-if-larger-than-buffer</code>).
</p></dd>
<dt><kbd class="kbd">C-x +</kbd></dt>
<dd><p>Make all windows the same height (<code class="code">balance-windows</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-0"></a>
<a class="index-entry-id" id="index-delete_002dwindow"></a>
<p>To delete the selected window, type <kbd class="kbd">C-x 0</kbd>
(<code class="code">delete-window</code>).  (That is a zero.)  Once a window is deleted,
the space that it occupied is given to an adjacent window (but not the
minibuffer window, even if that is active at the time).  Deleting the
window has no effect on the buffer it used to display; the buffer
continues to exist, and you can still switch to it with <kbd class="kbd">C-x b</kbd>.
The option <code class="code">delete-window-choose-selected</code> controls which
window is chosen as the new selected window instead (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Deleting-Windows.html#Deleting-Windows">Deleting
Windows</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).
</p>
<a class="index-entry-id" id="index-kill_002dbuffer_002dand_002dwindow"></a>
<a class="index-entry-id" id="index-C_002dx-4-0"></a>
<p><kbd class="kbd">C-x 4 0</kbd> (<code class="code">kill-buffer-and-window</code>) is a stronger command
than <kbd class="kbd">C-x 0</kbd>; it kills the current buffer and then deletes the
selected window.
</p>
<a class="index-entry-id" id="index-C_002dx-1"></a>
<a class="index-entry-id" id="index-delete_002dother_002dwindows"></a>
<p><kbd class="kbd">C-x 1</kbd> (<code class="code">delete-other-windows</code>) deletes all the windows,
<em class="emph">except</em> the selected one; the selected window expands to use the
whole frame.  (This command cannot be used while the minibuffer window
is active; attempting to do so signals an error.)
</p>
<p><kbd class="kbd">M-x delete-windows-on</kbd> deletes windows that show a specific
buffer.  It prompts for the buffer, defaulting to the current buffer.
With prefix argument of zero, <kbd class="kbd">C-u 0</kbd>, this command deletes
windows only on the current display&#8217;s frames.
</p>
<a class="index-entry-id" id="index-resize-window"></a>
<a class="index-entry-id" id="index-resizing-windows"></a>
<a class="index-entry-id" id="index-C_002dx-_005e"></a>
<a class="index-entry-id" id="index-enlarge_002dwindow"></a>
<a class="index-entry-id" id="index-C_002dx-_007d"></a>
<a class="index-entry-id" id="index-window_002dmin_002dheight"></a>
<p>The command <kbd class="kbd">C-x ^</kbd> (<code class="code">enlarge-window</code>) makes the selected
window one line taller, taking space from a vertically adjacent window
without changing the height of the frame.  With a positive numeric
argument, this command increases the window height by that many lines;
with a negative argument, it reduces the height by that many lines.
If there are no vertically adjacent windows (i.e., the window is at the
full frame height), that signals an error.  The command also signals
an error if you attempt to reduce the height of any window below a
certain minimum number of lines, specified by the variable
<code class="code">window-min-height</code> (the default is 4).
</p>
<a class="index-entry-id" id="index-enlarge_002dwindow_002dhorizontally"></a>
<a class="index-entry-id" id="index-shrink_002dwindow_002dhorizontally"></a>
<a class="index-entry-id" id="index-window_002dmin_002dwidth"></a>
<p>Similarly, <kbd class="kbd">C-x }</kbd> (<code class="code">enlarge-window-horizontally</code>) makes
the selected window wider, and <kbd class="kbd">C-x {</kbd>
(<code class="code">shrink-window-horizontally</code>) makes it narrower.  These commands
signal an error if you attempt to reduce the width of any window below
a certain minimum number of columns, specified by the variable
<code class="code">window-min-width</code> (the default is 10).
</p>
<p>Mouse clicks on the mode line (see <a class="pxref" href="Frames.xhtml#Mode-Line-Mouse">Mode Line Mouse Commands</a>) or on window
dividers (see <a class="pxref" href="Frames.xhtml#Window-Dividers">Window Dividers</a>) provide another way to change window
heights and to split or delete windows.
</p>
<a class="index-entry-id" id="index-C_002dx-_002d"></a>
<a class="index-entry-id" id="index-shrink_002dwindow_002dif_002dlarger_002dthan_002dbuffer"></a>
<p><kbd class="kbd">C-x -</kbd> (<code class="code">shrink-window-if-larger-than-buffer</code>) reduces the
height of the selected window, if it is taller than necessary to show
the whole text of the buffer it is displaying.  It gives the extra
lines to other windows in the frame.
</p>
<a class="index-entry-id" id="index-C_002dx-_002b"></a>
<a class="index-entry-id" id="index-balance_002dwindows"></a>
<p>You can also use <kbd class="kbd">C-x +</kbd> (<code class="code">balance-windows</code>) to even out the
heights of all the windows in the selected frame.
</p>
</div>
<div class="section-level-extent" id="Displaying-Buffers">
<h3 class="section" id="Displaying-a-Buffer-in-a-Window">21.6 Displaying a Buffer in a Window</h3>

<p>It is a common Emacs operation to display or pop up some buffer
in response to a user command.  There are several different ways in
which commands do this.
</p>
<p>Many commands, like <kbd class="kbd">C-x C-f</kbd> (<code class="code">find-file</code>), by default
display the buffer by &#8220;taking over&#8221; the selected window, expecting
that the user&#8217;s attention will be diverted to that buffer.
</p>
<p>Some commands try to display intelligently, trying not to take
over the selected window, e.g., by splitting off a new window and
displaying the desired buffer there.  Such commands, which include the
various help commands (see <a class="pxref" href="Help.xhtml#Help">Help</a>), work by calling
<code class="code">display-buffer</code> internally.  See <a class="xref" href="#Window-Choice">How <code class="code">display-buffer</code> works</a>, for details.
</p>
<p>Other commands do the same as <code class="code">display-buffer</code>, and
additionally select the displaying window so that you can begin
editing its buffer.  The command <kbd class="kbd">M-g M-n</kbd> (<code class="code">next-error</code>) is
one example (see <a class="pxref" href="Building.xhtml#Compilation-Mode">Compilation Mode</a>).  Such commands work by calling
the function <code class="code">pop-to-buffer</code> internally.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Switching-Buffers.html#Switching-Buffers">Switching to a Buffer in a Window</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>.
</p>
<p>Commands with names ending in <code class="code">-other-window</code> behave like
<code class="code">display-buffer</code>, except that they never display in the selected
window.  Several of these commands are bound in the <kbd class="kbd">C-x 4</kbd> prefix
key (see <a class="pxref" href="#Pop-Up-Window">Displaying in Another Window</a>).
</p>
<p>Commands with names ending in <code class="code">-other-frame</code> behave like
<code class="code">display-buffer</code>, except that they (i) never display in the
selected window and (ii) prefer to either create a new frame or use a
window on some other frame to display the desired buffer.  Several of
these commands are bound in the <kbd class="kbd">C-x 5</kbd> prefix key.
</p>

<div class="subsection-level-extent" id="Window-Choice">
<h4 class="subsection" id="How-display_002dbuffer-works">21.6.1 How <code class="code">display-buffer</code> works</h4>
<a class="index-entry-id" id="index-display_002dbuffer_002c-detailed-description"></a>

<p>The <code class="code">display-buffer</code> command (as well as commands that call it
internally) chooses a window to display by following the steps given
below.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window.html#Choosing-Window">Choosing a Window for Displaying a
Buffer</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>, for details about how
to alter this sequence of steps.
</p>
<ul class="itemize mark-bullet">
<li>If the buffer should be displayed in the selected window regardless of
other considerations, reuse the selected window.  By default, this
step is skipped, but you can tell Emacs not to skip it by adding a
regular expression matching the buffer&#8217;s name together with a
reference to the <code class="code">display-buffer-same-window</code> action function
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Display-Action-Functions.html#Buffer-Display-Action-Functions">Action Functions for Buffer
Display</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>) to the option
<code class="code">display-buffer-alist</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window.html#Choosing-Window">Choosing a Window
for Displaying a Buffer</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).
For example, to display the buffer <samp class="file">*scratch*</samp> preferably in the
selected window write:

<div class="example">
<div class="group"><pre class="example-preformatted">(setopt
 display-buffer-alist
 '((&quot;\\*scratch\\*&quot; (display-buffer-same-window))))
</pre></div></div>

<p>By default, <code class="code">display-buffer-alist</code> is <code class="code">nil</code>.
</p>
</li><li>Otherwise, if the buffer is already displayed in an existing window,
reuse that window.  Normally, only windows on the selected frame are
considered, but windows on other frames are also reusable if you use
the corresponding <code class="code">reusable-frames</code> action alist entry
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Display-Action-Alists.html#Buffer-Display-Action-Alists">Action Alists for Buffer
Display</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).  See the
next step for an example of how to do that.

</li><li>Otherwise, optionally create a new frame and display the buffer there.
By default, this step is skipped.  To enable it, change the value of
the option <code class="code">display-buffer-base-action</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window.html#Choosing-Window">Choosing a Window for Displaying a Buffer</a> in <cite class="cite">The Emacs
Lisp Reference Manual</cite>) as follows:

<div class="example">
<div class="group"><pre class="example-preformatted">(setopt
 display-buffer-base-action
 '((display-buffer-reuse-window display-buffer-pop-up-frame)
   (reusable-frames . 0)))
</pre></div></div>

<p>This customization will also try to make the preceding step search for
a reusable window on all visible or iconified frames.
</p>
</li><li>Otherwise, try to create a new window by splitting a window on the
selected frame, and display the buffer in that new window.

<a class="index-entry-id" id="index-split_002dheight_002dthreshold"></a>
<a class="index-entry-id" id="index-split_002dwidth_002dthreshold"></a>
<p>The split can be either vertical or horizontal, depending on the
variables <code class="code">split-height-threshold</code> and
<code class="code">split-width-threshold</code>.  These variables should have integer
values.  If <code class="code">split-height-threshold</code> is smaller than the chosen
window&#8217;s height, the split puts the new window below.  Otherwise, if
<code class="code">split-width-threshold</code> is smaller than the window&#8217;s width, the
split puts the new window on the right.  If neither condition holds,
Emacs tries to split so that the new window is below&#8212;but only if the
window was not split before (to avoid excessive splitting).
</p>
</li><li>Otherwise, display the buffer in a window previously showing it.
Normally, only windows on the selected frame are considered, but with
a suitable <code class="code">reusable-frames</code> action alist entry (see above) the
window may be also on another frame.

</li><li>Otherwise, display the buffer in an existing window on the selected
frame.

</li><li>If all the above methods fail for whatever reason, create a new frame
and display the buffer there.
</li></ul>


</div>
<div class="subsection-level-extent" id="Temporary-Displays">
<h4 class="subsection" id="Displaying-non_002deditable-buffers_002e">21.6.2 Displaying non-editable buffers.</h4>
<a class="index-entry-id" id="index-temporary-windows"></a>

<p>Some buffers are shown in windows for perusal rather than for editing.
Help commands (see <a class="pxref" href="Help.xhtml#Help">Help</a>) typically use a buffer called <samp class="file">*Help*</samp>
for that purpose, minibuffer completion (see <a class="pxref" href="Minibuffer.xhtml#Completion">Completion</a>) uses a
buffer called <samp class="file">*Completions*</samp>, etc.  Such buffers are usually
displayed only for a short period of time.
</p>
<p>Normally, Emacs chooses the window for such temporary displays via
<code class="code">display-buffer</code>, as described in the previous subsection.  The
<samp class="file">*Completions*</samp> buffer, on the other hand, is normally displayed
in a window at the bottom of the selected frame, regardless of the
number of windows already shown on that frame.
</p>
<p>If you prefer Emacs to display a temporary buffer in a different
fashion, customize the variable <code class="code">display-buffer-alist</code>
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window.html#Choosing-Window">Choosing a Window for Displaying a Buffer</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>) appropriately.  For example,
to display <samp class="file">*Completions*</samp> always below the selected window, use
the following form in your initialization file (see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>):
</p>
<div class="example">
<div class="group"><pre class="example-preformatted">(setopt
 display-buffer-alist
 '((&quot;\\*Completions\\*&quot; display-buffer-below-selected)))
</pre></div></div>

<a class="index-entry-id" id="index-temp_002dbuffer_002dresize_002dmode"></a>
<p>The <samp class="file">*Completions*</samp> buffer is also special in the sense that
Emacs usually tries to make its window just as large as necessary to
display all of its contents.  To resize windows showing other
temporary displays, like, for example, the <samp class="file">*Help*</samp> buffer, turn
on the minor mode (see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>) <code class="code">temp-buffer-resize-mode</code>
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Temporary-Displays.html#Temporary-Displays">Temporary Displays</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>).
</p>
<a class="index-entry-id" id="index-temp_002dbuffer_002dmax_002dheight"></a>
<a class="index-entry-id" id="index-temp_002dbuffer_002dmax_002dwidth"></a>
<p>The maximum size of windows resized by <code class="code">temp-buffer-resize-mode</code>
can be controlled by customizing the options
<code class="code">temp-buffer-max-height</code> and <code class="code">temp-buffer-max-width</code>
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Temporary-Displays.html#Temporary-Displays">Temporary Displays</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>), and cannot exceed the size of the containing frame.
</p>

</div>
</div>
<div class="section-level-extent" id="Window-Convenience">
<h3 class="section" id="Convenience-Features-for-Window-Handling">21.7 Convenience Features for Window Handling</h3>

<a class="index-entry-id" id="index-winner_002dmode"></a>
<a class="index-entry-id" id="index-winner_002ddont_002dbind_002dmy_002dkeys"></a>
<a class="index-entry-id" id="index-winner_002dring_002dsize"></a>
<a class="index-entry-id" id="index-winner_002dboring_002dbuffers"></a>
<a class="index-entry-id" id="index-winner_002dboring_002dbuffers_002dregexp"></a>
<a class="index-entry-id" id="index-Winner-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Winner"></a>
<a class="index-entry-id" id="index-undoing-window-configuration-changes"></a>
<a class="index-entry-id" id="index-window-configuration-changes_002c-undoing"></a>
<p>Winner mode is a global minor mode that records the changes in the
window configuration (i.e., how the frames are partitioned into
windows), so that you can undo them.  You can toggle Winner mode
with <kbd class="kbd">M-x winner-mode</kbd>, or by customizing the variable
<code class="code">winner-mode</code>.  When the mode is enabled, <kbd class="kbd">C-c left</kbd>
(<code class="code">winner-undo</code>) undoes the last window configuration change.  If
you change your mind while undoing, you can redo the changes you had
undone using <kbd class="kbd">C-c right</kbd> (<code class="code">M-x winner-redo</code>).  To prevent
Winner mode from binding <kbd class="kbd">C-c left</kbd> and <kbd class="kbd">C-c right</kbd>, you can
customize the variable <code class="code">winner-dont-bind-my-keys</code> to a
non-<code class="code">nil</code> value.  By default, Winner mode stores a maximum of 200
window configurations per frame, but you can change that by modifying
the variable <code class="code">winner-ring-size</code>.  If there are some buffers whose
windows you wouldn&#8217;t want Winner mode to restore, add their names to
the list variable <code class="code">winner-boring-buffers</code> or to the regexp
<code class="code">winner-boring-buffers-regexp</code>.
</p>
<p>Follow mode (<kbd class="kbd">M-x follow-mode</kbd>) synchronizes several windows on
the same buffer so that they always display adjacent sections of that
buffer.  See <a class="xref" href="Display.xhtml#Follow-Mode">Follow Mode</a>.
</p>
<a class="index-entry-id" id="index-Windmove-package"></a>
<a class="index-entry-id" id="index-directional-window-selection"></a>
<a class="index-entry-id" id="index-windmove_002dright"></a>
<a class="index-entry-id" id="index-windmove_002ddefault_002dkeybindings"></a>
<a class="index-entry-id" id="index-windmove_002ddisplay_002ddefault_002dkeybindings"></a>
<a class="index-entry-id" id="index-windmove_002ddelete_002ddefault_002dkeybindings"></a>
<a class="index-entry-id" id="index-windmove_002dswap_002dstates_002ddefault_002dkeybindings"></a>
<p>The Windmove package defines commands for moving directionally
between neighboring windows in a frame.  <kbd class="kbd">M-x windmove-right</kbd>
selects the window immediately to the right of the currently selected
one, and similarly for the left, up, and down counterparts.
<code class="code">windmove-default-keybindings</code> binds these commands to
<kbd class="kbd">S-right</kbd> etc.; doing so disables shift selection for those keys
(see <a class="pxref" href="Mark.xhtml#Shift-Selection">Shift Selection</a>).  In the same way as key bindings can be
defined for commands that select windows directionally, you can use
<code class="code">windmove-display-default-keybindings</code> to define keybindings for
commands that specify in what direction to display the window for the
buffer that the next command is going to display.  Also there is
<code class="code">windmove-delete-default-keybindings</code> to define keybindings for
commands that delete windows directionally, and
<code class="code">windmove-swap-states-default-keybindings</code> that defines
key bindings for commands that swap the window contents of the selected
window with the window in the specified direction.
</p>
<p>The command <kbd class="kbd">M-x compare-windows</kbd> lets you compare the text
shown in different windows.  See <a class="xref" href="Files.xhtml#Comparing-Files">Comparing Files</a>.
</p>
<a class="index-entry-id" id="index-scroll_002dall_002dmode"></a>
<a class="index-entry-id" id="index-scrolling-windows-together"></a>
<a class="index-entry-id" id="index-Scroll_002dall-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Scroll_002dall"></a>
<p>Scroll All mode (<kbd class="kbd">M-x scroll-all-mode</kbd>) is a global minor mode
that causes scrolling commands and point motion commands to apply to
every single window.
</p>

</div>
<div class="section-level-extent" id="Tab-Line">
<h3 class="section" id="Window-Tab-Line">21.8 Window Tab Line</h3>

<a class="index-entry-id" id="index-global_002dtab_002dline_002dmode"></a>
<a class="index-entry-id" id="index-tab-line"></a>
<p>The command <code class="code">global-tab-line-mode</code> toggles the display of
a <em class="dfn">tab line</em> on the top screen line of each window.  The Tab Line
shows special buttons (&#8220;tabs&#8221;) for each buffer that was displayed in
a window, and allows switching to any of these buffers by clicking the
corresponding button.  Clicking on the <kbd class="kbd">+</kbd> icon adds a new buffer
to the window-local tab line of buffers, and clicking on the <kbd class="kbd">x</kbd>
icon of a tab deletes it.  The mouse wheel on the tab line scrolls
the tabs horizontally.
</p>
<p>Selecting the previous window-local tab is the same as typing <kbd class="kbd">C-x
<kbd class="key">LEFT</kbd></kbd> (<code class="code">previous-buffer</code>), selecting the next tab is the
same as <kbd class="kbd">C-x <kbd class="key">RIGHT</kbd></kbd> (<code class="code">next-buffer</code>).  Both commands
support a numeric prefix argument as a repeat count.
</p>
<p>You can customize the variable <code class="code">tab-line-tabs-function</code> to define
the preferred contents of the tab line.  By default, it displays all
buffers previously visited in the window, as described above.  But you
can also set it to display a list of buffers with the same major mode
as the current buffer, or to display buffers grouped by their major
mode, where clicking on the mode name in the first tab displays a list
of all major modes where you can select another group of buffers.
</p>
<p>Note that the Tab Line is different from the Tab Bar (see <a class="pxref" href="Frames.xhtml#Tab-Bars">Tab Bars</a>).
Whereas tabs on the Tab Bar at the top of each frame are used to
switch between window configurations containing several windows with buffers,
tabs on the Tab Line at the top of each window are used to switch
between buffers in the window.
</p></div>
</div>



</body>
</html>
