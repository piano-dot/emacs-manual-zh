<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>43 Editing Pictures (GNU Emacs Manual)</title>

<meta name="description" content="43 Editing Pictures (GNU Emacs Manual)"/>
<meta name="keywords" content="43 Editing Pictures (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Editing-Binary-Files.xhtml" rel="next" title="44 Editing Binary Files"/>
<link href="Sorting.xhtml" rel="prev" title="42 Sorting Text"/>
<style type="text/css">
<!--
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Picture-Mode">

<h2 class="chapter section-level-set-chapter" id="Editing-Pictures">43 Editing Pictures</h2>
<a class="index-entry-id" id="index-pictures"></a>
<a class="index-entry-id" id="index-making-pictures-out-of-text-characters"></a>
<a class="index-entry-id" id="index-picture_002dmode"></a>

<p>To edit a picture made out of text characters (for example, a picture
of the division of a register into fields, as a comment in a program),
use the command <kbd class="kbd">M-x picture-mode</kbd> to enter Picture mode.
</p>
<p>In Picture mode, editing is based on the <em class="dfn">quarter-plane</em> model of
text, according to which the text characters lie studded on an area that
stretches infinitely far to the right and downward.  The concept of the end
of a line does not exist in this model; the most you can say is where the
last nonblank character on the line is found.
</p>
<p>Of course, Emacs really always considers text as a sequence of
characters, and lines really do have ends.  But Picture mode replaces
the most frequently-used commands with variants that simulate the
quarter-plane model of text.  They do this by inserting spaces or by
converting tabs to spaces.
</p>
<p>Most of the basic editing commands of Emacs are redefined by Picture mode
to do essentially the same thing but in a quarter-plane way.  In addition,
Picture mode defines various keys starting with the <kbd class="kbd">C-c</kbd> prefix to
run special picture editing commands.
</p>
<p>One of these keys, <kbd class="kbd">C-c C-c</kbd>, is particularly important.  Often
a picture is part of a larger file that is usually edited in some
other major mode.  Picture mode records the name of the previous major
mode so you can use the <kbd class="kbd">C-c C-c</kbd> command
(<code class="code">picture-mode-exit</code>) later to go back to that mode.  <kbd class="kbd">C-c
C-c</kbd> also deletes spaces from the ends of lines, unless given a
numeric argument.
</p>
<p>The special commands of Picture mode all work in other modes (provided
the <samp class="file">picture</samp> library is loaded), but are not bound to keys except
in Picture mode.  The descriptions below talk of moving &#8220;one column&#8221;
and so on, but all the picture mode commands handle numeric arguments as
their normal equivalents do.
</p>
<a class="index-entry-id" id="index-picture_002dmode_002dhook"></a>
<p>Turning on Picture mode runs the hook <code class="code">picture-mode-hook</code>.
Additional extensions to Picture mode can be found in
<samp class="file">artist.el</samp>.
</p>

<div class="section-level-extent" id="Basic-Picture">
<h3 class="section subsection-level-set-section" id="Basic-Editing-in-Picture-Mode">43.1 Basic Editing in Picture Mode</h3>

<a class="index-entry-id" id="index-picture_002dforward_002dcolumn"></a>
<a class="index-entry-id" id="index-picture_002dbackward_002dcolumn"></a>
<a class="index-entry-id" id="index-picture_002dmove_002ddown"></a>
<a class="index-entry-id" id="index-picture_002dmove_002dup"></a>
<a class="index-entry-id" id="index-editing-in-Picture-mode"></a>

<p>Most keys do the same thing in Picture mode that they usually do, but
do it in a quarter-plane style.  For example, <kbd class="kbd">C-f</kbd> is rebound to
run <code class="code">picture-forward-column</code>, a command which moves point one
column to the right, inserting a space if necessary so that the actual
end of the line makes no difference.  <kbd class="kbd">C-b</kbd> is rebound to run
<code class="code">picture-backward-column</code>, which always moves point left one
column, converting a tab to multiple spaces if necessary.  <kbd class="kbd">C-n</kbd> and
<kbd class="kbd">C-p</kbd> are rebound to run <code class="code">picture-move-down</code> and
<code class="code">picture-move-up</code>, which can either insert spaces or convert tabs
as necessary to make sure that point stays in exactly the same column.
<kbd class="kbd">C-e</kbd> runs <code class="code">picture-end-of-line</code>, which moves to after the last
nonblank character on the line.  <kbd class="kbd">C-a</kbd> runs
<code class="code">picture-beginning-of-line</code>.  (The choice of screen model does not
affect beginnings of lines; the only extra thing this command does is
update the current picture column to 0.)
</p>
<a class="index-entry-id" id="index-picture_002dnewline"></a>
<p>Insertion of text is adapted to the quarter-plane screen model
through the use of Overwrite mode
(see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>.)
Self-inserting characters replace existing text, column by column,
rather than pushing existing text to the right.  <kbd class="key">RET</kbd> runs
<code class="code">picture-newline</code>, which just moves to the beginning of the
following line so that new text will replace that line.
</p>
<a class="index-entry-id" id="index-picture_002dbackward_002dclear_002dcolumn"></a>
<a class="index-entry-id" id="index-picture_002dclear_002dcolumn"></a>
<a class="index-entry-id" id="index-picture_002dclear_002dline"></a>
<p>In Picture mode, the commands that normally delete or kill text,
instead erase text (replacing it with spaces).  <kbd class="key">DEL</kbd>
(<code class="code">picture-backward-clear-column</code>) replaces the preceding
character with a space rather than removing it; this moves point
backwards.  <kbd class="kbd">C-d</kbd> (<code class="code">picture-clear-column</code>) replaces the next
character or characters with spaces, but does not move point.  (If you
want to clear characters to spaces and move forward over them, use
<kbd class="key">SPC</kbd>.)  <kbd class="kbd">C-k</kbd> (<code class="code">picture-clear-line</code>) really kills the
contents of lines, but does not delete the newlines from the buffer.
</p>
<a class="index-entry-id" id="index-picture_002dopen_002dline"></a>
<p>To do actual insertion, you must use special commands.  <kbd class="kbd">C-o</kbd>
(<code class="code">picture-open-line</code>) creates a blank line after the current
line; it never splits a line.  <kbd class="kbd">C-M-o</kbd> (<code class="code">split-line</code>) makes
sense in Picture mode, so it is not changed.  <kbd class="kbd">C-j</kbd>
(<code class="code">picture-duplicate-line</code>) inserts another line with the same
contents below the current line.
</p>
<a class="index-entry-id" id="index-C_002dc-C_002dd-_0028Picture-mode_0029"></a>
<p>To do actual deletion in Picture mode, use <kbd class="kbd">C-w</kbd>, <kbd class="kbd">C-c C-d</kbd>
(which is defined as <code class="code">delete-char</code>, as <kbd class="kbd">C-d</kbd> is in other
modes), or one of the picture rectangle commands (see <a class="pxref" href="#Rectangles-in-Picture">Picture Mode Rectangle Commands</a>).
</p>
</div>
<div class="section-level-extent" id="Insert-in-Picture">
<h3 class="section subsection-level-set-section" id="Controlling-Motion-after-Insert">43.2 Controlling Motion after Insert</h3>

<a class="index-entry-id" id="index-picture_002dmovement_002dup"></a>
<a class="index-entry-id" id="index-picture_002dmovement_002ddown"></a>
<a class="index-entry-id" id="index-picture_002dmovement_002dleft"></a>
<a class="index-entry-id" id="index-picture_002dmovement_002dright"></a>
<a class="index-entry-id" id="index-picture_002dmovement_002dnw"></a>
<a class="index-entry-id" id="index-picture_002dmovement_002dne"></a>
<a class="index-entry-id" id="index-picture_002dmovement_002dsw"></a>
<a class="index-entry-id" id="index-picture_002dmovement_002dse"></a>
<a class="index-entry-id" id="index-C_002dc-_003c-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-LEFT-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-_003e-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-RIGHT-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-_005e-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-UP-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-_002e-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-DOWN-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-_0060-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-Home-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-_0027-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-PageUp-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-prior-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-_002f-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-End-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-_005c-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-PageDown-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-next-_0028Picture-mode_0029"></a>
<p>Since self-inserting characters in Picture mode overwrite and move
point, there is no essential restriction on how point should be moved.
Normally point moves right, but you can specify any of the eight
orthogonal or diagonal directions for motion after a self-inserting
character.  This is useful for drawing lines in the buffer.
</p>
<dl class="table">
<dt><kbd class="kbd">C-c &lt;</kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">LEFT</kbd></kbd></dt>
<dd><p>Move left after insertion (<code class="code">picture-movement-left</code>).
</p></dd>
<dt><kbd class="kbd">C-c &gt;</kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">RIGHT</kbd></kbd></dt>
<dd><p>Move right after insertion (<code class="code">picture-movement-right</code>).
</p></dd>
<dt><kbd class="kbd">C-c ^</kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">UP</kbd></kbd></dt>
<dd><p>Move up after insertion (<code class="code">picture-movement-up</code>).
</p></dd>
<dt><kbd class="kbd">C-c .</kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">DOWN</kbd></kbd></dt>
<dd><p>Move down after insertion (<code class="code">picture-movement-down</code>).
</p></dd>
<dt><kbd class="kbd">C-c `</kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">Home</kbd></kbd></dt>
<dd><p>Move up and left (&#8220;northwest&#8221;) after insertion (<code class="code">picture-movement-nw</code>).
</p></dd>
<dt><kbd class="kbd">C-c '</kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">PageUp</kbd></kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">prior</kbd></kbd></dt>
<dd><p>Move up and right (&#8220;northeast&#8221;) after insertion
(<code class="code">picture-movement-ne</code>).
</p></dd>
<dt><kbd class="kbd">C-c /</kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">End</kbd></kbd></dt>
<dd><p>Move down and left (&#8220;southwest&#8221;) after insertion
<br/>(<code class="code">picture-movement-sw</code>).
</p></dd>
<dt><kbd class="kbd">C-c \</kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">PageDown</kbd></kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">next</kbd></kbd></dt>
<dd><p>Move down and right (&#8220;southeast&#8221;) after insertion
<br/>(<code class="code">picture-movement-se</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dc-C_002df-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002db-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-picture_002dmotion"></a>
<a class="index-entry-id" id="index-picture_002dmotion_002dreverse"></a>
<p>Two motion commands move based on the current Picture insertion
direction.  The command <kbd class="kbd">C-c C-f</kbd> (<code class="code">picture-motion</code>) moves in the
same direction as motion after insertion currently does, while <kbd class="kbd">C-c
C-b</kbd> (<code class="code">picture-motion-reverse</code>) moves in the opposite direction.
</p>
</div>
<div class="section-level-extent" id="Tabs-in-Picture">
<h3 class="section subsection-level-set-section" id="Picture-Mode-Tabs">43.3 Picture Mode Tabs</h3>

<a class="index-entry-id" id="index-M_002dTAB-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-picture_002dtab_002dsearch"></a>
<a class="index-entry-id" id="index-picture_002dtab_002dchars"></a>
<p>Two kinds of tab-like action are provided in Picture mode.  Use
<kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> (<code class="code">picture-tab-search</code>) for context-based tabbing.
With no argument, it moves to a point underneath the next
&#8220;interesting&#8221; character that follows whitespace in the previous
nonblank line.  &#8220;Next&#8221; here means &#8220;appearing at a horizontal position
greater than the one point starts out at&#8221;.  With prefix argument, as in
<kbd class="kbd">C-u M-<kbd class="key">TAB</kbd></kbd>, this command moves to the next such interesting
character in the current line.  <kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> does not change the
text; it only moves point.  &#8220;Interesting&#8221; characters are defined by
the variable <code class="code">picture-tab-chars</code>, which should define a set of
characters.  The syntax for this variable is like the syntax used inside
of &#8216;<samp class="samp">[&#8230;]</samp>&#8217; in a regular expression&#8212;but without the &#8216;<samp class="samp">[</samp>&#8217;
and the &#8216;<samp class="samp">]</samp>&#8217;.  Its default value is <code class="code">&quot;!-~&quot;</code>.
</p>
<a class="index-entry-id" id="index-picture_002dtab"></a>
<p><kbd class="key">TAB</kbd> itself runs <code class="code">picture-tab</code>, which operates based on the
current tab stop settings; it is the Picture mode equivalent of
<code class="code">tab-to-tab-stop</code>.  Normally it just moves point, but with a numeric
argument it clears the text that it moves over.
</p>
<a class="index-entry-id" id="index-C_002dc-TAB-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-picture_002dset_002dtab_002dstops"></a>
<p>The context-based and tab-stop-based forms of tabbing are brought
together by the command <kbd class="kbd">C-c <kbd class="key">TAB</kbd></kbd> (<code class="code">picture-set-tab-stops</code>).
This command sets the tab stops to the positions which <kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd>
would consider significant in the current line.  The use of this command,
together with <kbd class="key">TAB</kbd>, can get the effect of context-based tabbing.  But
<kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> is more convenient in the cases where it is sufficient.
</p>
<p>It may be convenient to prevent use of actual tab characters in
pictures.  For example, this prevents <kbd class="kbd">C-x <kbd class="key">TAB</kbd></kbd> from messing
up the picture.  You can do this by setting the variable
<code class="code">indent-tabs-mode</code> to <code class="code">nil</code>.
</p>
</div>
<div class="section-level-extent" id="Rectangles-in-Picture">
<h3 class="section subsection-level-set-section" id="Picture-Mode-Rectangle-Commands">43.4 Picture Mode Rectangle Commands</h3>
<a class="index-entry-id" id="index-rectangles-and-Picture-mode"></a>
<a class="index-entry-id" id="index-Picture-mode-and-rectangles"></a>

<p>Picture mode defines commands for working on rectangular pieces of
the text in ways that fit with the quarter-plane model.  The standard
rectangle commands may also be useful.
See <a class="xref" href="Killing.xhtml#Rectangles">Rectangles</a>.
</p>
<dl class="table">
<dt><kbd class="kbd">C-c C-k</kbd></dt>
<dd><p>Clear out the region-rectangle with spaces
(<code class="code">picture-clear-rectangle</code>).  With a prefix argument, delete the
text.
</p></dd>
<dt><kbd class="kbd">C-c C-w <var class="var">r</var></kbd></dt>
<dd><p>Similar, but save rectangle contents in register <var class="var">r</var> first
(<code class="code">picture-clear-rectangle-to-register</code>).
See <a class="xref" href="Registers.xhtml#Registers">Registers</a>.
</p>
</dd>
<dt><kbd class="kbd">C-c C-y</kbd></dt>
<dd><p>Copy last killed rectangle into the buffer by overwriting, with upper
left corner at point (<code class="code">picture-yank-rectangle</code>).  With argument,
insert instead.
</p></dd>
<dt><kbd class="kbd">C-c C-x <var class="var">r</var></kbd></dt>
<dd><p>Similar, but use the rectangle in register <var class="var">r</var>
(<code class="code">picture-yank-rectangle-from-register</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dc-C_002dk-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dw-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-picture_002dclear_002drectangle"></a>
<a class="index-entry-id" id="index-picture_002dclear_002drectangle_002dto_002dregister"></a>
<p>The picture rectangle commands <kbd class="kbd">C-c C-k</kbd>
(<code class="code">picture-clear-rectangle</code>) and <kbd class="kbd">C-c C-w</kbd>
(<code class="code">picture-clear-rectangle-to-register</code>) differ from the standard
rectangle commands in that they normally clear the rectangle instead of
deleting it; this is analogous with the way <kbd class="kbd">C-d</kbd> is changed in Picture
mode.
</p>
<p>However, deletion of rectangles can be useful in Picture mode, so
these commands delete the rectangle if given a numeric argument.
<kbd class="kbd">C-c C-k</kbd> either with or without a numeric argument saves the
rectangle for <kbd class="kbd">C-c C-y</kbd>.
</p>
<a class="index-entry-id" id="index-C_002dc-C_002dy-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dx-_0028Picture-mode_0029"></a>
<a class="index-entry-id" id="index-picture_002dyank_002drectangle"></a>
<a class="index-entry-id" id="index-picture_002dyank_002drectangle_002dfrom_002dregister"></a>
<p>The Picture mode commands for yanking rectangles differ from the
standard ones in that they overwrite instead of inserting.  This is
the same way that Picture mode insertion of other text differs from
other modes.  <kbd class="kbd">C-c C-y</kbd> (<code class="code">picture-yank-rectangle</code>) inserts
(by overwriting) the rectangle that was most recently killed, while
<kbd class="kbd">C-c C-x</kbd> (<code class="code">picture-yank-rectangle-from-register</code>) does
likewise for the rectangle found in a specified register.
</p>

</div>
</div>



</body>
</html>
