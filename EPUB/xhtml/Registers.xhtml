<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>14 Registers (GNU Emacs Manual)</title>

<meta name="description" content="14 Registers (GNU Emacs Manual)"/>
<meta name="keywords" content="14 Registers (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Display.xhtml#Display" rel="next" title="15 Controlling the Display"/>
<link href="Killing.xhtml#Killing" rel="prev" title="13 Killing and Moving Text"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Registers">

<h2 class="chapter" id="Registers-1">14 Registers</h2>
<a class="index-entry-id" id="index-registers"></a>

<p>Emacs <em class="dfn">registers</em> are compartments where you can save text,
rectangles, positions, and other things for later use.  Once you save
text or a rectangle in a register, you can copy it into the buffer
once or many times; once you save a position in a register, you can
jump back to that position once or many times.
</p>
<p>Each register has a name that consists of a single character, which
we will denote by <var class="var">r</var>; <var class="var">r</var> can be a letter (such as &#8216;<samp class="samp">a</samp>&#8217;)
or a number (such as &#8216;<samp class="samp">1</samp>&#8217;); case matters, so register &#8216;<samp class="samp">a</samp>&#8217; is
not the same as register &#8216;<samp class="samp">A</samp>&#8217;.  You can also set a register in
non-alphanumeric characters, for instance &#8216;<samp class="samp">*</samp>&#8217; or &#8216;<samp class="samp">C-d</samp>&#8217;.
Note, it&#8217;s not possible to set a register in &#8216;<samp class="samp">C-g</samp>&#8217; or &#8216;<samp class="samp">ESC</samp>&#8217;,
because these keys are reserved for quitting (see <a class="pxref" href="Quitting.xhtml">Quitting and Aborting</a>).
</p>
<a class="index-entry-id" id="index-view_002dregister"></a>
<p>A register can store a position, a piece of text, a rectangle, a
number, a window or frame configuration, a buffer name, or a file
name, but only one thing at any given time.  Whatever you store in a
register remains there until you store something else in that
register.  To see what register <var class="var">r</var> contains, use <kbd class="kbd">M-x
view-register</kbd>:
</p>
<dl class="table">
<dt><kbd class="kbd">M-x view-register <kbd class="key">RET</kbd> <var class="var">r</var></kbd></dt>
<dd><p>Display a description of what register <var class="var">r</var> contains.
</p></dd>
</dl>

<a class="index-entry-id" id="index-register_002dpreview_002ddelay"></a>
<a class="index-entry-id" id="index-preview-of-registers"></a>
<p>All of the commands that prompt for a register will display a
preview window that lists the existing registers (if there are
any) after a short delay.  To change the length of the delay,
customize <code class="code">register-preview-delay</code>.  To prevent this display, set
that option to <code class="code">nil</code>.  You can explicitly request a preview
window by pressing <kbd class="kbd">C-h</kbd> or <kbd class="key">F1</kbd>.
</p>
<p><em class="dfn">Bookmarks</em> record files and positions in them, so you can
return to those positions when you look at the file again.  Bookmarks
are similar in spirit to registers, so they are also documented in
this chapter.
</p>

<div class="section-level-extent" id="Position-Registers">
<h3 class="section" id="Saving-Positions-in-Registers">14.1 Saving Positions in Registers</h3>
<a class="index-entry-id" id="index-saving-position-in-a-register"></a>

<dl class="table">
<dt><kbd class="kbd">C-x r <kbd class="key">SPC</kbd> <var class="var">r</var></kbd></dt>
<dd><p>Record the position of point and the current buffer in register
<var class="var">r</var> (<code class="code">point-to-register</code>).
</p></dd>
<dt><kbd class="kbd">C-x r j <var class="var">r</var></kbd></dt>
<dd><p>Jump to the position and buffer saved in register <var class="var">r</var>
(<code class="code">jump-to-register</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-r-SPC"></a>
<a class="index-entry-id" id="index-point_002dto_002dregister"></a>
<p>Typing <kbd class="kbd">C-x r <kbd class="key">SPC</kbd></kbd> (<code class="code">point-to-register</code>), followed by
a character <kbd class="kbd"><var class="var">r</var></kbd>, saves both the position of point and the
current buffer in register <var class="var">r</var>.  The register retains this
information until you store something else in it.
</p>
<a class="index-entry-id" id="index-C_002dx-r-j"></a>
<a class="index-entry-id" id="index-jump_002dto_002dregister"></a>
<p>The command <kbd class="kbd">C-x r j <var class="var">r</var></kbd> switches to the buffer recorded in
register <var class="var">r</var>, pushes a mark, and moves point to the recorded
position.  (The mark is not pushed if point was already at the
recorded position, or in successive calls to the command.)  The
contents of the register are not changed, so you can jump to the saved
position any number of times.
</p>
<p>If you use <kbd class="kbd">C-x r j</kbd> to go to a saved position, but the buffer it
was saved from has been killed, <kbd class="kbd">C-x r j</kbd> tries to create the buffer
again by visiting the same file.  Of course, this works only for buffers
that were visiting files.
</p>
</div>
<div class="section-level-extent" id="Text-Registers">
<h3 class="section" id="Saving-Text-in-Registers">14.2 Saving Text in Registers</h3>
<a class="index-entry-id" id="index-saving-text-in-a-register"></a>

<p>When you want to insert a copy of the same piece of text several
times, it may be inconvenient to yank it from the kill ring, since each
subsequent kill moves that entry further down the ring.  An alternative
is to store the text in a register and later retrieve it.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x r s <var class="var">r</var></kbd></dt>
<dd><p>Copy region into register <var class="var">r</var> (<code class="code">copy-to-register</code>).
</p></dd>
<dt><kbd class="kbd">C-x r i <var class="var">r</var></kbd></dt>
<dd><p>Insert text from register <var class="var">r</var> (<code class="code">insert-register</code>).
</p></dd>
<dt><kbd class="kbd">M-x append-to-register <kbd class="key">RET</kbd> <var class="var">r</var></kbd></dt>
<dd><p>Append region to text in register <var class="var">r</var>.
</p>
<p>When register <var class="var">r</var> contains text, you can use <kbd class="kbd">C-x r +</kbd>
(<code class="code">increment-register</code>) to append to that register.  Note that
command <kbd class="kbd">C-x r +</kbd> behaves differently if <var class="var">r</var> contains a
number.  See <a class="xref" href="#Number-Registers">Keeping Numbers in Registers</a>.
</p>
</dd>
<dt><kbd class="kbd">M-x prepend-to-register <kbd class="key">RET</kbd> <var class="var">r</var></kbd></dt>
<dd><p>Prepend region to text in register <var class="var">r</var>.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-r-s"></a>
<a class="index-entry-id" id="index-copy_002dto_002dregister"></a>
<p><kbd class="kbd">C-x r s <var class="var">r</var></kbd> stores a copy of the text of the region into
the register named <var class="var">r</var>.  If the mark is inactive, Emacs first
reactivates the mark where it was last set.  The mark is deactivated
at the end of this command.  See <a class="xref" href="Mark.xhtml#Mark">The Mark and the Region</a>.  <kbd class="kbd">C-u C-x r s <var class="var">r</var></kbd>,
the same command with a prefix argument, copies the text into register
<var class="var">r</var> and deletes the text from the buffer as well; you can think of
this as moving the region text into the register.
</p>
<a class="index-entry-id" id="index-append_002dto_002dregister"></a>
<a class="index-entry-id" id="index-prepend_002dto_002dregister"></a>
<p><kbd class="kbd">M-x append-to-register <kbd class="key">RET</kbd> <var class="var">r</var></kbd> appends the copy of
the text in the region to the text already stored in the register
named <var class="var">r</var>.  If invoked with a prefix argument, it deletes the
region after appending it to the register.  The command
<code class="code">prepend-to-register</code> is similar, except that it <em class="emph">prepends</em>
the region text to the text in the register instead of
<em class="emph">appending</em> it.
</p>
<a class="index-entry-id" id="index-register_002dseparator"></a>
<p>When you are collecting text using <code class="code">append-to-register</code> and
<code class="code">prepend-to-register</code>, you may want to separate individual
collected pieces using a separator.  In that case, configure a
<code class="code">register-separator</code> and store the separator text in to that
register.  For example, to get double newlines as text separator
during the collection process, you can use the following setting.
</p>
<div class="example">
<pre class="example-preformatted">(setq register-separator ?+)
(set-register register-separator &quot;\n\n&quot;)
</pre></div>

<a class="index-entry-id" id="index-C_002dx-r-i"></a>
<a class="index-entry-id" id="index-insert_002dregister"></a>
<p><kbd class="kbd">C-x r i <var class="var">r</var></kbd> inserts in the buffer the text from register
<var class="var">r</var>.  Normally it leaves point after the text and sets the mark
before, without activating it.  With a prefix argument, it instead
puts point before the text and the mark after.
</p>
</div>
<div class="section-level-extent" id="Rectangle-Registers">
<h3 class="section" id="Saving-Rectangles-in-Registers">14.3 Saving Rectangles in Registers</h3>
<a class="index-entry-id" id="index-saving-rectangle-in-a-register"></a>

<p>A register can contain a rectangle instead of linear text.
See <a class="xref" href="Killing.xhtml#Rectangles">Rectangles</a>, for basic information on how to specify a rectangle
in the buffer.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-C_002dx-r-r"></a>
<a id="index-copy_002drectangle_002dto_002dregister"></a><kbd class="kbd">C-x r r <var class="var">r</var></kbd></dt>
<dd><p>Copy the region-rectangle into register <var class="var">r</var>
(<code class="code">copy-rectangle-to-register</code>).  With prefix argument, delete it as
well.
</p></dd>
<dt><kbd class="kbd">C-x r i <var class="var">r</var></kbd></dt>
<dd><p>Insert the rectangle stored in register <var class="var">r</var> (if it contains a
rectangle) (<code class="code">insert-register</code>).
</p></dd>
</dl>

<p>The <kbd class="kbd">C-x r i <var class="var">r</var></kbd> (<code class="code">insert-register</code>) command,
previously documented in <a class="ref" href="#Text-Registers">Saving Text in Registers</a>, inserts a rectangle
rather than a text string, if the register contains a rectangle.
</p>
</div>
<div class="section-level-extent" id="Configuration-Registers">
<h3 class="section" id="Saving-Window-and-Frame-Configurations-in-Registers">14.4 Saving Window and Frame Configurations in Registers</h3>
<a class="index-entry-id" id="index-saving-window-configuration-in-a-register"></a>
<a class="index-entry-id" id="index-saving-frame-configuration-in-a-register"></a>
<a class="index-entry-id" id="index-frameset_002c-saving-in-a-register"></a>

<a class="index-entry-id" id="index-window_002dconfiguration_002dto_002dregister"></a>
<a class="index-entry-id" id="index-frameset_002dto_002dregister"></a>
<a class="index-entry-id" id="index-C_002dx-r-w"></a>
<a class="index-entry-id" id="index-C_002dx-r-f"></a>
<p>You can save the window configuration of the selected frame in a
register, or even the configuration of all windows in all frames, and
restore the configuration later.  See <a class="xref" href="Windows.xhtml#Window-Convenience">Convenience Features for Window Handling</a>, for
information about window configurations.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x r w <var class="var">r</var></kbd></dt>
<dd><p>Save the state of the selected frame&#8217;s windows in register <var class="var">r</var>
(<code class="code">window-configuration-to-register</code>).
<a class="index-entry-id" id="index-frameset"></a>
</p></dd>
<dt><kbd class="kbd">C-x r f <var class="var">r</var></kbd></dt>
<dd><p>Save the state of all frames, including all their windows (a.k.a.
<em class="dfn">frameset</em>), in register <var class="var">r</var> (<code class="code">frameset-to-register</code>).
</p></dd>
</dl>

<p>Use <kbd class="kbd">C-x r j <var class="var">r</var></kbd> to restore a window or frame configuration.
This is the same command used to restore a cursor position.  When you
restore a frame configuration, any existing frames not included in the
configuration become invisible.  If you wish to delete these frames
instead, use <kbd class="kbd">C-u C-x r j <var class="var">r</var></kbd>.
</p>
</div>
<div class="section-level-extent" id="Number-Registers">
<h3 class="section" id="Keeping-Numbers-in-Registers">14.5 Keeping Numbers in Registers</h3>
<a class="index-entry-id" id="index-saving-number-in-a-register"></a>

<p>There are commands to store a number in a register, to insert
the number in the buffer in decimal, and to increment it.  These commands
can be useful in keyboard macros (see <a class="pxref" href="Keyboard-Macros.xhtml#Keyboard-Macros">Keyboard Macros</a>).
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-number_002dto_002dregister"></a>
<a id="index-C_002dx-r-n"></a><kbd class="kbd">C-u <var class="var">number</var> C-x r n <var class="var">r</var></kbd></dt>
<dd><p>Store <var class="var">number</var> into register <var class="var">r</var> (<code class="code">number-to-register</code>).
</p></dd>
<dt><a class="index-entry-id" id="index-increment_002dregister"></a>
<a id="index-C_002dx-r-_002b"></a><kbd class="kbd">C-u <var class="var">number</var> C-x r + <var class="var">r</var></kbd></dt>
<dd><p>If <var class="var">r</var> contains a number, increment the number in that register by
<var class="var">number</var>.  Note that command <kbd class="kbd">C-x r +</kbd>
(<code class="code">increment-register</code>) behaves differently if <var class="var">r</var> contains
text.  See <a class="xref" href="#Text-Registers">Saving Text in Registers</a>.
</p></dd>
<dt><kbd class="kbd">C-x r i <var class="var">r</var></kbd></dt>
<dd><p>Insert the number from register <var class="var">r</var> into the buffer.
</p></dd>
</dl>

<p><kbd class="kbd">C-x r i</kbd> is the same command used to insert any other sort of
register contents into the buffer.  <kbd class="kbd">C-x r +</kbd> with no numeric
argument increments the register value by 1; <kbd class="kbd">C-x r n</kbd> with no
numeric argument stores zero in the register.
</p>
</div>
<div class="section-level-extent" id="File-and-Buffer-Registers">
<h3 class="section" id="Keeping-File-and-Buffer-Names-in-Registers">14.6 Keeping File and Buffer Names in Registers</h3>
<a class="index-entry-id" id="index-saving-file-name-in-a-register"></a>
<a class="index-entry-id" id="index-saving-buffer-name-in-a-register"></a>

<p>If you visit certain file names frequently, you can visit them more
conveniently if you put their names in registers.  Here&#8217;s the Lisp code
used to put a file <var class="var">name</var> into register <var class="var">r</var>:
</p>
<div class="example smallexample">
<pre class="example-preformatted">(set-register <var class="var">r</var> '(file . <var class="var">name</var>))
</pre></div>

<p>For example,
</p>
<div class="example smallexample">
<pre class="example-preformatted">(set-register ?z '(file . &quot;/gd/gnu/emacs/19.0/src/ChangeLog&quot;))
</pre></div>

<p>puts the file name shown in register &#8216;<samp class="samp">z</samp>&#8217;.
</p>
<p>To visit the file whose name is in register <var class="var">r</var>, type <kbd class="kbd">C-x r j
<var class="var">r</var></kbd>.  (This is the same command used to jump to a position or
restore a frame configuration.)
</p>
<p>Similarly, if there are certain buffers you visit frequently, you
can put their names in registers.  For instance, if you visit the
&#8216;<samp class="samp">*Messages*</samp>&#8217; buffer often, you can use the following snippet to
put that buffer into the &#8216;<samp class="samp">m</samp>&#8217; register:
</p>
<div class="example smallexample">
<pre class="example-preformatted">(set-register ?m '(buffer . &quot;*Messages*&quot;))
</pre></div>

<p>To switch to the buffer whose name is in register <var class="var">r</var>, type
<kbd class="kbd">C-x r j <var class="var">r</var></kbd>.
</p>
</div>
<div class="section-level-extent" id="Keyboard-Macro-Registers">
<h3 class="section" id="Keyboard-Macro-Registers-1">14.7 Keyboard Macro Registers</h3>
<a class="index-entry-id" id="index-saving-keyboard-macro-in-a-register"></a>
<a class="index-entry-id" id="index-keyboard-macros_002c-in-registers"></a>

<a class="index-entry-id" id="index-C_002dx-C_002dk-x"></a>
<a class="index-entry-id" id="index-kmacro_002dto_002dregister"></a>
<p>If you need to execute a keyboard macro (see <a class="pxref" href="Keyboard-Macros.xhtml#Keyboard-Macros">Keyboard Macros</a>)
frequently, it is more convenient to put it in a register or save it
(see <a class="pxref" href="Keyboard-Macros.xhtml#Save-Keyboard-Macro">Naming and Saving Keyboard Macros</a>).  <kbd class="kbd">C-x C-k x <var class="var">r</var></kbd>
(<code class="code">kmacro-to-register</code>) stores the last keyboard macro in register
<var class="var">r</var>.
</p>
<p>To execute the keyboard macro in register <var class="var">r</var>, type <kbd class="kbd">C-x r j
<var class="var">r</var></kbd>.  (This is the same command used to jump to a position or
restore a frameset.)
</p>
</div>
<div class="section-level-extent" id="Bookmarks">
<h3 class="section" id="Bookmarks-1">14.8 Bookmarks</h3>
<a class="index-entry-id" id="index-bookmarks"></a>

<p><em class="dfn">Bookmarks</em> are somewhat like registers in that they record
positions you can jump to.  Unlike registers, they have long names, and
they persist automatically from one Emacs session to the next.  The
prototypical use of bookmarks is to record where you were reading in
various files.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x r m <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Set the bookmark for the visited file, at point.
</p>
</dd>
<dt><kbd class="kbd">C-x r m <var class="var">bookmark</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Set the bookmark named <var class="var">bookmark</var> at point (<code class="code">bookmark-set</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x r M <var class="var">bookmark</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Like <kbd class="kbd">C-x r m</kbd>, but don&#8217;t overwrite an existing bookmark.
</p>
</dd>
<dt><kbd class="kbd">C-x r b <var class="var">bookmark</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Jump to the bookmark named <var class="var">bookmark</var> (<code class="code">bookmark-jump</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x r l</kbd></dt>
<dd><p>List all bookmarks (<code class="code">list-bookmarks</code>).
</p>
</dd>
<dt><kbd class="kbd">M-x bookmark-save</kbd></dt>
<dd><p>Save all the current bookmark values in the default bookmark file.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-r-m"></a>
<a class="index-entry-id" id="index-bookmark_002dset"></a>
<a class="index-entry-id" id="index-C_002dx-r-b"></a>
<a class="index-entry-id" id="index-bookmark_002djump"></a>
<p>To record the current position in the visited file, use the command
<kbd class="kbd">C-x r m</kbd>, which sets a bookmark using the visited file name as
the default for the bookmark name.  If you name each bookmark after
the file it points to, then you can conveniently revisit any of those
files with <kbd class="kbd">C-x r b</kbd>, and move to the position of the bookmark at
the same time.
</p>
<a class="index-entry-id" id="index-C_002dx-r-M"></a>
<a class="index-entry-id" id="index-bookmark_002dset_002dno_002doverwrite"></a>
<p>The command <kbd class="kbd">C-x r M</kbd> (<code class="code">bookmark-set-no-overwrite</code>) works
like <kbd class="kbd">C-x&#160;r&#160;m</kbd><!-- /@w -->, but it signals an error if the specified
bookmark already exists, instead of overwriting it.
</p>
<a class="index-entry-id" id="index-C_002dx-r-l"></a>
<a class="index-entry-id" id="index-list_002dbookmarks"></a>
<p>To display a list of all your bookmarks in a separate buffer, type
<kbd class="kbd">C-x r l</kbd> (<code class="code">list-bookmarks</code>).  If you switch to that buffer,
you can use it to edit your bookmark definitions or annotate the
bookmarks.  Type <kbd class="kbd">C-h m</kbd> in the bookmark buffer for more
information about its special editing commands.
</p>
<a class="index-entry-id" id="index-bookmark_002dsave"></a>
<p>When you kill Emacs, Emacs saves your bookmarks, if
you have changed any bookmark values.  You can also save the bookmarks
at any time with the <kbd class="kbd">M-x bookmark-save</kbd> command.  Bookmarks are
saved to the file <samp class="file">~/.emacs.d/bookmarks</samp> (for compatibility with
older versions of Emacs, if you have a file named <samp class="file">~/.emacs.bmk</samp>,
that is used instead).  The bookmark commands load your default
bookmark file automatically.  This saving and loading is how bookmarks
persist from one Emacs session to the next.
</p>
<a class="index-entry-id" id="index-bookmark_002dsave_002dflag"></a>
<p>If you set the variable <code class="code">bookmark-save-flag</code> to 1, each command
that sets a bookmark will also save your bookmarks; this way, you
don&#8217;t lose any bookmark values even if Emacs crashes.  The value, if
a number, says how many bookmark modifications should go by between
saving.  If you set this variable to <code class="code">nil</code>, Emacs only
saves bookmarks if you explicitly use <kbd class="kbd">M-x bookmark-save</kbd>.
</p>
<a class="index-entry-id" id="index-bookmark_002ddefault_002dfile"></a>
<p>The variable <code class="code">bookmark-default-file</code> specifies the file in
which to save bookmarks by default.
</p>
<a class="index-entry-id" id="index-bookmark_002duse_002dannotations"></a>
<a class="index-entry-id" id="index-bookmark-annotations"></a>
<p>If you set the variable <code class="code">bookmark-use-annotations</code> to <code class="code">t</code>,
setting a bookmark will query for an annotation.  If a bookmark has an
annotation, it is automatically shown in a separate window when you
jump to the bookmark.
</p>
<a class="index-entry-id" id="index-bookmark_002dsearch_002dsize"></a>
<p>Bookmark position values are saved with surrounding context, so that
<code class="code">bookmark-jump</code> can find the proper position even if the file is
modified slightly.  The variable <code class="code">bookmark-search-size</code> says how
many characters of context to record on each side of the bookmark&#8217;s
position.  (In buffers that are visiting encrypted files, no context
is saved in the bookmarks file no matter the value of this variable.)
</p>
<p>Here are some additional commands for working with bookmarks:
</p>
<dl class="table">
<dt><a id="index-bookmark_002dload"></a><kbd class="kbd">M-x bookmark-load <kbd class="key">RET</kbd> <var class="var">filename</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Load a file named <var class="var">filename</var> that contains a list of bookmark
values.  You can use this command, as well as <code class="code">bookmark-write</code>, to
work with other files of bookmark values in addition to your default
bookmark file.
</p>
</dd>
<dt><a id="index-bookmark_002dwrite"></a><kbd class="kbd">M-x bookmark-write <kbd class="key">RET</kbd> <var class="var">filename</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Save all the current bookmark values in the file <var class="var">filename</var>.
</p>
</dd>
<dt><a id="index-bookmark_002ddelete"></a><kbd class="kbd">M-x bookmark-delete <kbd class="key">RET</kbd> <var class="var">bookmark</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Delete the bookmark named <var class="var">bookmark</var>.
</p>
</dd>
<dt><a id="index-bookmark_002dinsert_002dlocation"></a><kbd class="kbd">M-x bookmark-insert-location <kbd class="key">RET</kbd> <var class="var">bookmark</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Insert in the buffer the name of the file that bookmark <var class="var">bookmark</var>
points to.
</p>
</dd>
<dt><a id="index-bookmark_002dinsert"></a><kbd class="kbd">M-x bookmark-insert <kbd class="key">RET</kbd> <var class="var">bookmark</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Insert in the buffer the <em class="emph">contents</em> of the file that bookmark
<var class="var">bookmark</var> points to.
</p></dd>
</dl>

</div>
</div>



</body>
</html>
