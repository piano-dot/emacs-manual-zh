<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>9 The Minibuffer (GNU Emacs Manual)</title>

<meta name="description" content="9 The Minibuffer (GNU Emacs Manual)"/>
<meta name="keywords" content="9 The Minibuffer (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="M_002dx.xhtml" rel="next" title="10 Running Commands by Name"/>
<link href="Basic.xhtml#Basic" rel="prev" title="8 Basic Editing Commands"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Minibuffer">

<h2 class="chapter" id="The-Minibuffer">9 The Minibuffer</h2>
<a class="index-entry-id" id="index-minibuffer"></a>

<p>The <em class="dfn">minibuffer</em> is where Emacs commands read complicated
arguments, such as file names, buffer names, Emacs command names, or
Lisp expressions.  We call it the &#8220;minibuffer&#8221; because it&#8217;s a
special-purpose buffer with a small amount of screen space.  You can
use the usual Emacs editing commands in the minibuffer to edit the
argument text.
</p>

<div class="section-level-extent" id="Basic-Minibuffer">
<h3 class="section" id="Using-the-Minibuffer">9.1 Using the Minibuffer</h3>

<a class="index-entry-id" id="index-prompt"></a>
<p>When the minibuffer is in use, it appears in the echo area, with a
cursor.  The minibuffer starts with a <em class="dfn">prompt</em>, usually ending
with a colon.  The prompt states what kind of input is expected, and
how it will be used.  The prompt is highlighted using the
<code class="code">minibuffer-prompt</code> face (see <a class="pxref" href="Display.xhtml#Faces">Text Faces</a>).
</p>
<p>The simplest way to enter a minibuffer argument is to type the text,
then <kbd class="key">RET</kbd> to submit the argument and exit the minibuffer.
Alternatively, you can type <kbd class="kbd">C-g</kbd> to exit the minibuffer by
canceling the command asking for the argument (see <a class="pxref" href="Quitting.xhtml">Quitting and Aborting</a>).
</p>
<a class="index-entry-id" id="index-default-argument"></a>
<a class="index-entry-id" id="index-minibuffer_002ddefault_002dprompt_002dformat"></a>
<p>Sometimes, the prompt shows a <em class="dfn">default argument</em>, inside
parentheses before the colon.  This default will be used as the
argument if you just type <kbd class="key">RET</kbd>.  For example, commands that read
buffer names usually show a buffer name as the default; you can type
<kbd class="key">RET</kbd> to operate on that default buffer.  You can customize how
the default argument is shown with the user option
<code class="code">minibuffer-default-prompt-format</code>.
</p>
<a class="index-entry-id" id="index-Minibuffer-Electric-Default-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Minibuffer-Electric-Default"></a>
<a class="index-entry-id" id="index-minibuffer_002delectric_002ddefault_002dmode"></a>
<a class="index-entry-id" id="index-minibuffer_002deldef_002dshorten_002ddefault"></a>
<p>If you enable Minibuffer Electric Default mode, a global minor mode,
Emacs hides the default argument as soon as you modify the contents of
the minibuffer (since typing <kbd class="key">RET</kbd> would no longer submit that
default).  If you ever bring back the original minibuffer text, the
prompt again shows the default.  To enable this minor mode, type
<kbd class="kbd">M-x minibuffer-electric-default-mode</kbd>.
</p>
<p>Since the minibuffer appears in the echo area, it can conflict with
other uses of the echo area.  If an error message or an informative
message is emitted while the minibuffer is active, the message is
displayed in brackets after the minibuffer text for a few seconds, or
until you type something; then the message disappears.  While the
minibuffer is in use, Emacs does not echo keystrokes.
</p>
<a class="index-entry-id" id="index-minibuffer_002dfollows_002dselected_002dframe"></a>
<p>While using the minibuffer, you can switch to a different frame,
perhaps to note text you need to enter (see <a class="pxref" href="Frames.xhtml#Frame-Commands">Frame Commands</a>).  By
default, the active minibuffer moves to this new frame.  If you set
the user option <code class="code">minibuffer-follows-selected-frame</code> to
<code class="code">nil</code>, then the minibuffer stays in the frame where you opened
it, and you must switch back to that frame in order to complete (or
abort) the current command.  If you set that option to a value which
is neither <code class="code">nil</code> nor <code class="code">t</code>, the minibuffer moves frame only
after a recursive minibuffer has been opened in the current command
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Mini.html#Recursive-Mini">(elisp)Recursive Mini</a>).  This option is mainly to retain
(approximately) the behavior prior to Emacs 28.1.  Note that the
effect of the command, when you finally finish using the minibuffer,
always takes place in the frame where you first opened it.  The sole
exception is that when that frame no longer exists, the action takes
place in the currently selected frame.
</p>
</div>
<div class="section-level-extent" id="Minibuffer-File">
<h3 class="section" id="Minibuffers-for-File-Names">9.2 Minibuffers for File Names</h3>

<a class="index-entry-id" id="index-default-directory"></a>
<p>Commands such as <kbd class="kbd">C-x C-f</kbd> (<code class="code">find-file</code>) use the minibuffer
to read a file name argument (see <a class="pxref" href="Basic.xhtml#Basic-Files">Files</a>).  When the
minibuffer is used to read a file name, it typically starts out with
some initial text ending in a slash.  This is the <em class="dfn">default
directory</em>.  For example, it may start out like this:
</p>
<div class="example">
<pre class="example-preformatted">Find file: /u2/emacs/src/
</pre></div>

<p>Here, &#8216;<samp class="samp">Find file: </samp>&#8217; is the prompt and &#8216;<samp class="samp">/u2/emacs/src/</samp>&#8217; is
the default directory.  If you now type <kbd class="kbd">buffer.c</kbd> as input, that
specifies the file <samp class="file">/u2/emacs/src/buffer.c</samp>.  See <a class="xref" href="Files.xhtml#File-Names">File Names</a>,
for information about the default directory.
</p>
<p>Alternative defaults for the file name you may want are available by
typing <kbd class="kbd">M-n</kbd>, see <a class="ref" href="#Minibuffer-History">Minibuffer History</a>.
</p>
<p>You can specify a file in the parent directory with <samp class="file">..</samp>:
<samp class="file">/a/b/../foo.el</samp> is equivalent to <samp class="file">/a/foo.el</samp>.
Alternatively, you can use <kbd class="kbd">M-<kbd class="key">DEL</kbd></kbd> to kill directory names
backwards (see <a class="pxref" href="Text.xhtml#Words">Words</a>).
</p>
<p>To specify a file in a completely different directory, you can kill
the entire default with <kbd class="kbd">C-a C-k</kbd> (see <a class="pxref" href="#Minibuffer-Edit">Editing in the Minibuffer</a>).
Alternatively, you can ignore the default, and enter an absolute file
name starting with a slash or a tilde after the default directory.
For example, you can specify <samp class="file">/etc/termcap</samp> as follows:
</p>
<div class="example">
<pre class="example-preformatted">Find file: /u2/emacs/src//etc/termcap
</pre></div>

<a class="index-entry-id" id="index-_002f_002f-in-file-name"></a>
<a class="index-entry-id" id="index-double-slash-in-file-name"></a>
<a class="index-entry-id" id="index-slashes-repeated-in-file-name"></a>
<a class="index-entry-id" id="index-file_002dname_002dshadow_002dmode"></a>
<p>A double slash causes Emacs to ignore everything before the
second slash in the pair.  In the example above,
<samp class="file">/u2/emacs/src/</samp> is ignored, so the argument you supplied is
<samp class="file">/etc/termcap</samp>.  The ignored part of the file name is dimmed if
the terminal allows it.  (To disable this dimming, turn off File Name
Shadow mode with the command <kbd class="kbd">M-x&#160;file-name-shadow-mode</kbd><!-- /@w -->.)
</p>
<p>When completing remote file names (see <a class="pxref" href="Files.xhtml#Remote-Files">Remote Files</a>), a double
slash behaves slightly differently: it causes Emacs to ignore only the
file-name part, leaving the rest (method, host and username, etc.)
intact.  Typing three slashes in a row ignores everything in remote
file names.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/tramp/File-name-completion.html#File-name-completion">File name completion</a> in <cite class="cite">The Tramp Manual</cite>.
</p>
<a class="index-entry-id" id="index-home-directory-shorthand"></a>
<p>Emacs interprets <samp class="file">~/</samp> as your home directory.  Thus,
<samp class="file">~/foo/bar.txt</samp> specifies a file named <samp class="file">bar.txt</samp>, inside a
directory named <samp class="file">foo</samp>, which is in turn located in your home
directory.  In addition, <samp class="file">~<var class="var">user-id</var>/</samp> means the home
directory of a user whose login name is <var class="var">user-id</var>.  Any leading
directory name in front of the <samp class="file">~</samp> is ignored: thus,
<samp class="file">/u2/emacs/~/foo/bar.txt</samp> is equivalent to <samp class="file">~/foo/bar.txt</samp>.
</p>
<p>On MS-Windows and MS-DOS systems, where a user doesn&#8217;t always have a
home directory, Emacs uses several alternatives.  For MS-Windows, see
<a class="ref" href="Microsoft-Windows.xhtml#Windows-HOME">HOME and Startup Directories on MS-Windows</a>; for MS-DOS, see
<a class="ref" href="Microsoft-Windows.xhtml#MS_002dDOS-File-Names">File Names on MS-DOS</a>.
On these systems, the <samp class="file">~<var class="var">user-id</var>/</samp> construct is supported
only for the current user, i.e., only if <var class="var">user-id</var> is the current
user&#8217;s login name.
</p>
<a class="index-entry-id" id="index-insert_002ddefault_002ddirectory"></a>
<p>To prevent Emacs from inserting the default directory when reading
file names, change the variable <code class="code">insert-default-directory</code> to
<code class="code">nil</code>.  In that case, the minibuffer starts out empty.
Nonetheless, relative file name arguments are still interpreted based
on the same default directory.
</p>
<p>You can also enter remote file names in the minibuffer.
See <a class="xref" href="Files.xhtml#Remote-Files">Remote Files</a>.
</p>
</div>
<div class="section-level-extent" id="Minibuffer-Edit">
<h3 class="section" id="Editing-in-the-Minibuffer">9.3 Editing in the Minibuffer</h3>

<p>The minibuffer is an Emacs buffer, albeit a peculiar one, and the
usual Emacs commands are available for editing the argument text.
(The prompt, however, is <em class="dfn">read-only</em>, and cannot be changed.)
</p>
<p>Since <kbd class="key">RET</kbd> in the minibuffer submits the argument, you can&#8217;t
use it to insert a newline.  You can do that with <kbd class="kbd">C-q C-j</kbd>, which
inserts a <kbd class="kbd">C-j</kbd> control character, which is formally equivalent to
a newline character (see <a class="pxref" href="Basic.xhtml#Inserting-Text">Inserting Text</a>).  Alternatively, you can
use the <kbd class="kbd">C-o</kbd> (<code class="code">open-line</code>) command (see <a class="pxref" href="Basic.xhtml#Blank-Lines">Blank Lines</a>).
</p>
<p>Inside a minibuffer, the keys <kbd class="key">TAB</kbd>, <kbd class="key">SPC</kbd>, and <kbd class="kbd">?</kbd> are
often bound to <em class="dfn">completion commands</em>, which allow you to easily
fill in the desired text without typing all of it.  See <a class="xref" href="#Completion">Completion</a>.
As with <kbd class="key">RET</kbd>, you can use <kbd class="kbd">C-q</kbd> to insert a <kbd class="key">TAB</kbd>,
<kbd class="key">SPC</kbd>, or &#8216;<samp class="samp">?</samp>&#8217; character.  If you want to make <kbd class="key">SPC</kbd> and
<kbd class="key">?</kbd> insert normally instead of starting completion, you can put
the following in your init file:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(keymap-unset minibuffer-local-completion-map &quot;SPC&quot;)
(keymap-unset minibuffer-local-completion-map &quot;?&quot;)
</pre></div>

<p>For convenience, <kbd class="kbd">C-a</kbd> (<code class="code">move-beginning-of-line</code>) in a
minibuffer moves point to the beginning of the argument text, not the
beginning of the prompt.  For example, this allows you to erase the
entire argument with <kbd class="kbd">C-a C-k</kbd>.
</p>
<a class="index-entry-id" id="index-height-of-minibuffer"></a>
<a class="index-entry-id" id="index-size-of-minibuffer"></a>
<a class="index-entry-id" id="index-growing-minibuffer"></a>
<a class="index-entry-id" id="index-resizing-minibuffer"></a>
<p>When the minibuffer is active, the echo area is treated much like an
ordinary Emacs window.  For instance, you can switch to another window
(with <kbd class="kbd">C-x o</kbd>), edit text there, then return to the minibuffer
window to finish the argument.  You can even kill text in another
window, return to the minibuffer window, and yank the text into the
argument.  There are some restrictions on the minibuffer window,
however: for instance, you cannot split it.  See <a class="xref" href="Windows.xhtml#Windows">Multiple Windows</a>.
</p>
<a class="index-entry-id" id="index-resize_002dmini_002dwindows"></a>
<p>Normally, the minibuffer window occupies a single screen line.
However, if you add two or more lines&#8217; worth of text into the
minibuffer, it expands automatically to accommodate the text.  The
variable <code class="code">resize-mini-windows</code> controls the resizing of the
minibuffer.  The default value is <code class="code">grow-only</code>, which means the
behavior we have just described.  If the value is <code class="code">t</code>, the
minibuffer window will also shrink automatically if you remove some
lines of text from the minibuffer, down to a minimum of one screen
line.  If the value is <code class="code">nil</code>, the minibuffer window never changes
size automatically, but you can use the usual window-resizing commands
on it (see <a class="pxref" href="Windows.xhtml#Windows">Multiple Windows</a>).
</p>
<a class="index-entry-id" id="index-max_002dmini_002dwindow_002dheight"></a>
<p>The variable <code class="code">max-mini-window-height</code> controls the maximum
height for resizing the minibuffer window.  A floating-point number
specifies a fraction of the frame&#8217;s height; an integer specifies the
maximum number of lines; <code class="code">nil</code> means do not resize the minibuffer
window automatically.  The default value is 0.25.
</p>
<p>The <kbd class="kbd">C-M-v</kbd> command in the minibuffer scrolls the help text from
commands that display help text of any sort in another window.  You
can also scroll the help text with <kbd class="kbd">M-<kbd class="key">PageUp</kbd></kbd> and
<kbd class="kbd">M-<kbd class="key">PageDown</kbd></kbd> (or, equivalently, <kbd class="kbd">M-<kbd class="key">prior</kbd></kbd> and
<kbd class="kbd">M-<kbd class="key">next</kbd></kbd>).  This is especially useful with long lists of
possible completions.  See <a class="xref" href="Windows.xhtml#Other-Window">Using Other Windows</a>.
</p>
<a class="index-entry-id" id="index-enable_002drecursive_002dminibuffers"></a>
<a class="index-entry-id" id="index-minibuffer_002ddepth_002dindicate_002dmode"></a>
<p>Emacs normally disallows most commands that use the minibuffer while
the minibuffer is active.  To allow such commands in the minibuffer,
set the variable <code class="code">enable-recursive-minibuffers</code> to <code class="code">t</code>.
You might need also to enable <code class="code">minibuffer-depth-indicate-mode</code>
to show the current recursion depth in the minibuffer prompt
on recursive use of the minibuffer.
</p>
<p>When active, the minibuffer is usually in <code class="code">minibuffer-mode</code>.
This is an internal Emacs mode without any special features.
</p>
<a class="index-entry-id" id="index-minibuffer_002dinactive_002dmode"></a>
<p>When not active, the minibuffer is in <code class="code">minibuffer-inactive-mode</code>,
and clicking <kbd class="kbd">mouse-1</kbd> there shows the <samp class="file">*Messages*</samp> buffer.
If you use a dedicated frame for minibuffers, Emacs also recognizes
certain keys there, for example, <kbd class="kbd">n</kbd> to make a new frame.
</p>
</div>
<div class="section-level-extent" id="Completion">
<h3 class="section" id="Completion-1">9.4 Completion</h3>
<a class="index-entry-id" id="index-completion"></a>

<p>You can often use a feature called <em class="dfn">completion</em> to help enter
arguments.  This means that after you type part of the argument, Emacs
can fill in the rest, or some of it, based on what was typed so far.
</p>
<a class="index-entry-id" id="index-completion-alternative"></a>
<p>When completion is available, certain keys (usually <kbd class="key">TAB</kbd>,
<kbd class="key">RET</kbd>, and <kbd class="key">SPC</kbd>) are rebound in the minibuffer to special
completion commands (see <a class="pxref" href="#Completion-Commands">Completion Commands</a>).  These commands
attempt to complete the text in the minibuffer, based on a set of
<em class="dfn">completion alternatives</em> provided by the command that requested
the argument.  You can usually type <kbd class="kbd">?</kbd> to see a list of
completion alternatives.
</p>
<p>Although completion is usually done in the minibuffer, the feature
is sometimes available in ordinary buffers too.  See <a class="xref" href="Programs.xhtml#Symbol-Completion">Completion for Symbol Names</a>.
</p>

<div class="subsection-level-extent" id="Completion-Example">
<h4 class="subsection" id="Completion-Example-1">9.4.1 Completion Example</h4>

<a class="index-entry-id" id="index-TAB-_0028completion-example_0029"></a>
<p>A simple example may help here.  <kbd class="kbd">M-x</kbd> uses the minibuffer to
read the name of a command, so completion works by matching the
minibuffer text against the names of existing Emacs commands.  Suppose
you wish to run the command <code class="code">auto-fill-mode</code>.  You can do that by
typing <kbd class="kbd">M-x auto-fill-mode <kbd class="key">RET</kbd></kbd>, but it is easier to use
completion.
</p>
<p>If you type <kbd class="kbd">M-x a u <kbd class="key">TAB</kbd></kbd>, the <kbd class="key">TAB</kbd> looks for
completion alternatives (in this case, command names) that start with
&#8216;<samp class="samp">au</samp>&#8217;.  There are several, including <code class="code">auto-fill-mode</code> and
<code class="code">autoconf-mode</code>, but they all begin with <code class="code">auto</code>, so the
&#8216;<samp class="samp">au</samp>&#8217; in the minibuffer completes to &#8216;<samp class="samp">auto</samp>&#8217;.  (More commands
may be defined in your Emacs session.  For example, if a command
called <code class="code">authorize-me</code> was defined, Emacs could only complete
as far as &#8216;<samp class="samp">aut</samp>&#8217;.)
</p>
<p>If you type <kbd class="kbd"><kbd class="key">TAB</kbd></kbd> again immediately, it cannot determine
the next character; it could be &#8216;<samp class="samp">-</samp>&#8217;, &#8216;<samp class="samp">a</samp>&#8217;, or &#8216;<samp class="samp">c</samp>&#8217;.  So
it does not add any characters; instead, <kbd class="key">TAB</kbd> displays a list of
all possible completions in another window.
</p>
<p>Next, type <kbd class="kbd">-f</kbd>.  The minibuffer now contains &#8216;<samp class="samp">auto-f</samp>&#8217;, and
the only command name that starts with this is <code class="code">auto-fill-mode</code>.
If you now type <kbd class="kbd"><kbd class="key">TAB</kbd></kbd>, completion fills in the rest of the
argument &#8216;<samp class="samp">auto-fill-mode</samp>&#8217; into the minibuffer.
</p>
<p>Hence, typing just <kbd class="kbd">a u <kbd class="key">TAB</kbd> - f <kbd class="key">TAB</kbd></kbd> allows you to
enter &#8216;<samp class="samp">auto-fill-mode</samp>&#8217;.
</p>
<p><kbd class="key">TAB</kbd> also works while point is not at the end of the
minibuffer.  In that case, it will fill in text both at point and at
the end of the minibuffer.  If you type <kbd class="kbd">M-x autocm</kbd>, then press
<kbd class="kbd">C-b</kbd> to move point before the &#8216;<samp class="samp">m</samp>&#8217;, you can type
<kbd class="kbd"><kbd class="key">TAB</kbd></kbd> to insert the text &#8216;<samp class="samp">onf-</samp>&#8217; at point and &#8216;<samp class="samp">ode</samp>&#8217;
at the end of the minibuffer, so that the minibuffer contains
&#8216;<samp class="samp">autoconf-mode</samp>&#8217;.
</p>
</div>
<div class="subsection-level-extent" id="Completion-Commands">
<h4 class="subsection" id="Completion-Commands-1">9.4.2 Completion Commands</h4>

<p>Here is a list of the completion commands defined in the minibuffer
when completion is allowed.
</p>
<dl class="table">
<dt><kbd class="kbd"><kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Complete the text in the minibuffer as much as possible; if unable to
complete, display a list of possible completions
(<code class="code">minibuffer-complete</code>).
</p></dd>
<dt><kbd class="kbd"><kbd class="key">SPC</kbd></kbd></dt>
<dd><p>Complete up to one word from the minibuffer text before point
(<code class="code">minibuffer-complete-word</code>).  This command is not available for
arguments that often include spaces, such as file names.
</p></dd>
<dt><kbd class="kbd"><kbd class="key">RET</kbd></kbd></dt>
<dd><p>Submit the text in the minibuffer as the argument, possibly completing
first (<code class="code">minibuffer-complete-and-exit</code>).  See <a class="xref" href="#Completion-Exit">Completion Exit</a>.
</p></dd>
<dt><kbd class="kbd">?</kbd></dt>
<dd><p>Display a list of completions (<code class="code">minibuffer-completion-help</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-TAB-_0028completion_0029"></a>
<a class="index-entry-id" id="index-minibuffer_002dcomplete"></a>
<p><kbd class="key">TAB</kbd> (<code class="code">minibuffer-complete</code>) is the most fundamental
completion command.  It searches for all possible completions that
match the existing minibuffer text, and attempts to complete as much
as it can.  See <a class="xref" href="#Completion-Styles">How Completion Alternatives Are Chosen</a>, for how completion alternatives
are chosen.
</p>
<a class="index-entry-id" id="index-SPC-_0028completion_0029"></a>
<a class="index-entry-id" id="index-minibuffer_002dcomplete_002dword"></a>
<p><kbd class="key">SPC</kbd> (<code class="code">minibuffer-complete-word</code>) completes like
<kbd class="key">TAB</kbd>, but only up to the next hyphen or space.  If you have
&#8216;<samp class="samp">auto-f</samp>&#8217; in the minibuffer and type <kbd class="key">SPC</kbd>, it finds that the
completion is &#8216;<samp class="samp">auto-fill-mode</samp>&#8217;, but it only inserts &#8216;<samp class="samp">ill-</samp>&#8217;,
giving &#8216;<samp class="samp">auto-fill-</samp>&#8217;.  Another <kbd class="key">SPC</kbd> at this point completes
all the way to &#8216;<samp class="samp">auto-fill-mode</samp>&#8217;.
</p>
<a class="index-entry-id" id="index-_003f-_0028completion_0029"></a>
<a class="index-entry-id" id="index-completion-list"></a>
<p>If <kbd class="key">TAB</kbd> or <kbd class="key">SPC</kbd> is unable to complete, it displays a list
of matching completion alternatives (if there are any) in another
window.  You can display the same list with <kbd class="kbd">?</kbd>
(<code class="code">minibuffer-completion-help</code>).  The following commands can be
used with the completion list:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-M_002dDOWN"></a>
<a class="index-entry-id" id="index-M_002dUP"></a>
<a class="index-entry-id" id="index-M_002dRET"></a>
<a class="index-entry-id" id="index-minibuffer_002dnext_002dcompletion"></a>
<a class="index-entry-id" id="index-minibuffer_002dprevious_002dcompletion"></a>
<a class="index-entry-id" id="index-minibuffer_002dchoose_002dcompletion"></a>
<a id="index-minibuffer_002dcompletion_002dauto_002dchoose"></a><kbd class="kbd">M-<kbd class="key">DOWN</kbd></kbd></dt>
<dt><kbd class="kbd">M-<kbd class="key">UP</kbd></kbd></dt>
<dd><p>While in the minibuffer, <kbd class="kbd">M-<kbd class="key">DOWN</kbd></kbd>
(<code class="code">minibuffer-next-completion</code> and <kbd class="kbd">M-<kbd class="key">UP</kbd></kbd>
(<code class="code">minibuffer-previous-completion</code>) navigate through the
completions and displayed in the completions buffer.  When
<code class="code">minibuffer-completion-auto-choose</code> is non-<code class="code">nil</code> (which is
the default), using these commands also inserts the current completion
candidate into the minibuffer.  If
<code class="code">minibuffer-completion-auto-choose</code> is <code class="code">nil</code>, you can use
the <kbd class="kbd">M-<kbd class="key">RET</kbd></kbd> command (<code class="code">minibuffer-choose-completion</code>) to
insert the completion candidates into the minibuffer.  By default,
that exits the minibuffer, but with a prefix argument, <kbd class="kbd">C-u
M-<kbd class="key">RET</kbd></kbd> inserts the currently active candidate without exiting
the minibuffer.
</p>
</dd>
<dt><a id="index-switch_002dto_002dcompletions"></a><kbd class="kbd">M-v</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">PageUp</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">prior</kbd></kbd></dt>
<dd><p>Typing <kbd class="kbd">M-v</kbd>, while in the minibuffer, selects the window showing
the completion list (<code class="code">switch-to-completions</code>).  This paves the
way for using the commands below.  <kbd class="key">PageUp</kbd>, <kbd class="key">prior</kbd> and
<kbd class="kbd">M-g M-c</kbd> do the same.  You can also select the window in other
ways (see <a class="pxref" href="Windows.xhtml#Windows">Multiple Windows</a>).
</p>
</dd>
<dt><a id="index-choose_002dcompletion"></a><kbd class="kbd"><kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">mouse-1</kbd></dt>
<dt><kbd class="kbd">mouse-2</kbd></dt>
<dd><p>While in the completion list buffer, this chooses the completion at
point (<code class="code">choose-completion</code>).  With a prefix argument, <kbd class="kbd">C-u
<kbd class="key">RET</kbd></kbd> inserts the completion at point into the minibuffer, but
doesn&#8217;t exit the minibuffer&#8212;thus, you can change your mind and
choose another candidate.
</p>
</dd>
<dt><a id="index-next_002dcompletion"></a><kbd class="kbd"><kbd class="key">TAB</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">RIGHT</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">n</kbd></kbd></dt>
<dd><p>While in the completion list buffer, these keys move point to the
following completion alternative (<code class="code">next-completion</code>).
</p>
</dd>
<dt><a id="index-previous_002dcompletion"></a><kbd class="kbd"><kbd class="key">S-TAB</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">LEFT</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">p</kbd></kbd></dt>
<dd><p>While in the completion list buffer, these keys move point to the
previous completion alternative (<code class="code">previous-completion</code>).
</p>
</dd>
<dt><a id="index-quit_002dwindow"></a><kbd class="kbd"><kbd class="kbd">q</kbd></kbd></dt>
<dd><p>While in the completion list buffer, this quits the window showing it
and selects the window showing the minibuffer (<code class="code">quit-window</code>).
</p>
</dd>
<dt><a id="index-kill_002dcurrent_002dbuffer"></a><kbd class="kbd"><kbd class="kbd">z</kbd></kbd></dt>
<dd><p>While in the completion list buffer, kill it and delete the window
showing it (<code class="code">kill-current-buffer</code>).
</p></dd>
</dl>

</div>
<div class="subsection-level-extent" id="Completion-Exit">
<h4 class="subsection" id="Completion-Exit-1">9.4.3 Completion Exit</h4>

<a class="index-entry-id" id="index-RET-_0028completion-in-minibuffer_0029"></a>
<a class="index-entry-id" id="index-minibuffer_002dcomplete_002dand_002dexit"></a>
<p>When a command reads an argument using the minibuffer with
completion, it also controls what happens when you type <kbd class="key">RET</kbd>
(<code class="code">minibuffer-complete-and-exit</code>) to submit the argument.  There
are four types of behavior:
</p>
<ul class="itemize mark-bullet">
<li><em class="dfn">Strict completion</em> accepts only exact completion matches.  Typing
<kbd class="key">RET</kbd> exits the minibuffer only if the minibuffer text is an exact
match, or completes to one.  Otherwise, Emacs refuses to exit the
minibuffer; instead it tries to complete, and if no completion can be
done it momentarily displays &#8216;<samp class="samp">[No match]</samp>&#8217; after the minibuffer
text.  (You can still leave the minibuffer by typing <kbd class="kbd">C-g</kbd> to
cancel the command.)

<p>An example of a command that uses this behavior is <kbd class="kbd">M-x</kbd>, since it
is meaningless for it to accept a non-existent command name.
</p>
</li><li><em class="dfn">Cautious completion</em> is like strict completion, except <kbd class="key">RET</kbd>
exits only if the text is already an exact match.  If the text
completes to an exact match, <kbd class="key">RET</kbd> performs that completion but
does not exit yet; you must type a second <kbd class="key">RET</kbd> to exit.

<p>Cautious completion is used for reading file names for files that must
already exist, for example.
</p>
</li><li><em class="dfn">Permissive completion</em> allows any input; the completion
candidates are just suggestions.  Typing <kbd class="key">RET</kbd> does not complete,
it just submits the argument as you have entered it.

</li><li><a class="index-entry-id" id="index-minibuffer-confirmation"></a>
<a class="index-entry-id" id="index-confirming-in-the-minibuffer"></a>
<em class="dfn">Permissive completion with confirmation</em> is like permissive
completion, with an exception: if you typed <kbd class="key">TAB</kbd> and this
completed the text up to some intermediate state (i.e., one that is not
yet an exact completion match), typing <kbd class="key">RET</kbd> right afterward does
not submit the argument.  Instead, Emacs asks for confirmation by
momentarily displaying &#8216;<samp class="samp">[Confirm]</samp>&#8217; after the text; type <kbd class="key">RET</kbd>
again to confirm and submit the text.  This catches a common mistake,
in which one types <kbd class="key">RET</kbd> before realizing that <kbd class="key">TAB</kbd> did not
complete as far as desired.

<a class="index-entry-id" id="index-confirm_002dnonexistent_002dfile_002dor_002dbuffer"></a>
<p>You can tweak the confirmation behavior by customizing the variable
<code class="code">confirm-nonexistent-file-or-buffer</code>.  The default value,
<code class="code">after-completion</code>, gives the behavior we have just described.
If you change it to <code class="code">nil</code>, Emacs does not ask for confirmation,
falling back on permissive completion.  If you change it to any other
non-<code class="code">nil</code> value, Emacs asks for confirmation whether or not the
preceding command was <kbd class="key">TAB</kbd>.
</p>
<p>This behavior is used by most commands that read file names, like
<kbd class="kbd">C-x C-f</kbd>, and commands that read buffer names, like <kbd class="kbd">C-x b</kbd>.
</p></li></ul>

</div>
<div class="subsection-level-extent" id="Completion-Styles">
<h4 class="subsection" id="How-Completion-Alternatives-Are-Chosen">9.4.4 How Completion Alternatives Are Chosen</h4>
<a class="index-entry-id" id="index-completion-style"></a>

<p>Completion commands work by narrowing a large list of possible
completion alternatives to a smaller subset that matches what you
have typed in the minibuffer.  In <a class="ref" href="#Completion-Example">Completion Example</a>, we gave a
simple example of such matching.  The procedure of determining what
constitutes a match is quite intricate.  Emacs attempts to offer
plausible completions under most circumstances.
</p>
<p>Emacs performs completion using one or more <em class="dfn">completion
styles</em>&#8212;sets of criteria for matching minibuffer text to completion
alternatives.  During completion, Emacs tries each completion style in
turn.  If a style yields one or more matches, that is used as the list
of completion alternatives.  If a style produces no matches, Emacs
falls back on the next style.
</p>
<a class="index-entry-id" id="index-completion_002dstyles"></a>
<p>The list variable <code class="code">completion-styles</code> specifies the completion
styles to use.  Each list element is the name of a completion style (a
Lisp symbol).  The available style symbols are stored in the variable
<code class="code">completion-styles-alist</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-Variables.html#Completion-Variables">Completion Variables</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).  The default completion styles are
(in order):
</p>
<dl class="table">
<dt><a id="index-basic_002c-completion-style"></a><code class="code">basic</code></dt>
<dd><p>A matching completion alternative must have the same beginning as the
text in the minibuffer before point.  Furthermore, if there is any
text in the minibuffer after point, the rest of the completion
alternative must contain that text as a substring.
</p>
</dd>
<dt><a class="index-entry-id" id="index-partial_002dcompletion_002c-completion-style"></a>
<a id="index-partial-completion"></a><code class="code">partial-completion</code></dt>
<dd><p>This aggressive completion style divides the minibuffer text into
words separated by hyphens or spaces, and completes each word
separately.  (For example, when completing command names,
&#8216;<samp class="samp">em-l-m</samp>&#8217; completes to &#8216;<samp class="samp">emacs-lisp-mode</samp>&#8217;.)
</p>
<p>Furthermore, a &#8216;<samp class="samp">*</samp>&#8217; in the minibuffer text is treated as a
<em class="dfn">wildcard</em>&#8212;it matches any string of characters at the
corresponding position in the completion alternative.
</p>
</dd>
<dt><a id="index-emacs22_002c-completion-style"></a><code class="code">emacs22</code></dt>
<dd><p>This completion style is similar to <code class="code">basic</code>, except that it
ignores the text in the minibuffer after point.  It is so-named
because it corresponds to the completion behavior in Emacs 22.
</p></dd>
</dl>

<p>The following additional completion styles are also defined, and you
can add them to <code class="code">completion-styles</code> if you wish
(see <a class="pxref" href="Customization.xhtml#Customization">Customization</a>):
</p>
<dl class="table">
<dt><a id="index-substring_002c-completion-style"></a><code class="code">substring</code></dt>
<dd><p>A matching completion alternative must contain the text in the
minibuffer before point, and the text in the minibuffer after point,
as substrings (in that same order).
</p>
<p>Thus, if the text in the minibuffer is &#8216;<samp class="samp">foobar</samp>&#8217;, with point
between &#8216;<samp class="samp">foo</samp>&#8217; and &#8216;<samp class="samp">bar</samp>&#8217;, that matches
&#8216;<samp class="samp"><var class="var">a</var>foo<var class="var">b</var>bar<var class="var">c</var></samp>&#8217;, where <var class="var">a</var>, <var class="var">b</var>, and
<var class="var">c</var> can be any string including the empty string.
</p>
</dd>
<dt><a id="index-flex_002c-completion-style"></a><code class="code">flex</code></dt>
<dd><p>This aggressive completion style, also known as <code class="code">flx</code> or
<code class="code">fuzzy</code> or <code class="code">scatter</code> completion, attempts to complete using
in-order substrings.  For example, it can consider &#8216;<samp class="samp">foo</samp>&#8217; to match
&#8216;<samp class="samp">frodo</samp>&#8217; or &#8216;<samp class="samp">fbarbazoo</samp>&#8217;.
</p>
</dd>
<dt><a id="index-initials_002c-completion-style"></a><code class="code">initials</code></dt>
<dd><p>This very aggressive completion style attempts to complete acronyms
and initialisms.  For example, when completing command names, it
matches &#8216;<samp class="samp">lch</samp>&#8217; to &#8216;<samp class="samp">list-command-history</samp>&#8217;.
</p></dd>
</dl>

<p>There is also a very simple completion style called <code class="code">emacs21</code>.
In this style, if the text in the minibuffer is &#8216;<samp class="samp">foobar</samp>&#8217;,
only matches starting with &#8216;<samp class="samp">foobar</samp>&#8217; are considered.
</p>
<a class="index-entry-id" id="index-completion_002dcategory_002doverrides"></a>
<p>You can use different completion styles in different situations,
by setting the variable <code class="code">completion-category-overrides</code>.
For example, the default setting says to use only <code class="code">basic</code>
and <code class="code">substring</code> completion for buffer names.
</p>

</div>
<div class="subsection-level-extent" id="Completion-Options">
<h4 class="subsection" id="Completion-Options-1">9.4.5 Completion Options</h4>

<a class="index-entry-id" id="index-case_002dsensitivity-and-completion"></a>
<a class="index-entry-id" id="index-case-in-completion"></a>
<p>Case is significant when completing case-sensitive arguments, such
as command names.  For example, when completing command names,
&#8216;<samp class="samp">AU</samp>&#8217; does not complete to &#8216;<samp class="samp">auto-fill-mode</samp>&#8217;.  Case
differences are ignored when completing arguments in which case does
not matter.
</p>
<a class="index-entry-id" id="index-read_002dfile_002dname_002dcompletion_002dignore_002dcase"></a>
<a class="index-entry-id" id="index-read_002dbuffer_002dcompletion_002dignore_002dcase"></a>
<p>When completing file names, case differences are ignored if the
variable <code class="code">read-file-name-completion-ignore-case</code> is
non-<code class="code">nil</code>.  The default value is <code class="code">nil</code> on systems that have
case-sensitive file-names, such as GNU/Linux; it is non-<code class="code">nil</code> on
systems that have case-insensitive file-names, such as Microsoft
Windows.  When completing buffer names, case differences are ignored
if the variable <code class="code">read-buffer-completion-ignore-case</code> is
non-<code class="code">nil</code>; the default is <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-completion_002dignored_002dextensions"></a>
<a class="index-entry-id" id="index-ignored-file-names_002c-in-completion"></a>
<p>When completing file names, Emacs usually omits certain alternatives
that are considered unlikely to be chosen, as determined by the list
variable <code class="code">completion-ignored-extensions</code>.  Each element in the
list should be a string; any file name ending in such a string is
ignored as a completion alternative.  Any element ending in a slash
(<samp class="file">/</samp>) represents a subdirectory name.  The standard value of
<code class="code">completion-ignored-extensions</code> has several elements including
<code class="code">&quot;.o&quot;</code>, <code class="code">&quot;.elc&quot;</code>, and <code class="code">&quot;~&quot;</code>.  For example, if a
directory contains &#8216;<samp class="samp">foo.c</samp>&#8217; and &#8216;<samp class="samp">foo.elc</samp>&#8217;, &#8216;<samp class="samp">foo</samp>&#8217;
completes to &#8216;<samp class="samp">foo.c</samp>&#8217;.  However, if <em class="emph">all</em> possible
completions end in otherwise-ignored strings, they are not ignored: in the
previous example, &#8216;<samp class="samp">foo.e</samp>&#8217; completes to &#8216;<samp class="samp">foo.elc</samp>&#8217;.  Emacs
disregards <code class="code">completion-ignored-extensions</code> when showing
completion alternatives in the completion list.
</p>
<p>Shell completion is an extended version of filename completion,
see <a class="pxref" href="Shell.xhtml#Shell-Options">Shell Mode Options</a>.
</p>
<a class="index-entry-id" id="index-completion_002dauto_002dhelp"></a>
<p>If <code class="code">completion-auto-help</code> is set to <code class="code">nil</code>, the completion
commands never display the completion list buffer; you must type
<kbd class="kbd">?</kbd> to display the list.  If the value is <code class="code">lazy</code>, Emacs only
shows the completion list buffer on the second attempt to complete.
In other words, if there is nothing to complete, the first <kbd class="key">TAB</kbd>
echoes &#8216;<samp class="samp">Next char not unique</samp>&#8217;; the second <kbd class="key">TAB</kbd> shows the
completion list buffer.  If the value is <code class="code">always</code>, the completion
list buffer is always shown when completion is attempted.
</p>
<p>The display of the completion list buffer after it is shown for the
first time is also controlled by <code class="code">completion-auto-help</code>.  If the
value is <code class="code">t</code> or <code class="code">lazy</code>, the window showing the completions
pops down when Emacs is able to complete (and may pop up again if
Emacs is again unable to complete after you type some more text); if
the value is <code class="code">always</code>, the window pops down only when you exit
the completion.  The value <code class="code">visible</code> is a hybrid: it behaves like
<code class="code">t</code> when it decides whether to pop up the window showing the
completion list buffer, and like <code class="code">always</code> when it decides whether
to pop it down.
</p>
<a class="index-entry-id" id="index-completion_002dauto_002dselect"></a>
<p>Emacs can optionally select the window showing the completions when
it shows that window.  To enable this behavior, customize the user
option <code class="code">completion-auto-select</code> to <code class="code">t</code>, which changes the
behavior of <kbd class="key">TAB</kbd> when Emacs pops up the completions: pressing
<kbd class="kbd"><kbd class="key">TAB</kbd></kbd> will switch to the completion list buffer, and you can
then move to a candidate by cursor motion commands and select it with
<kbd class="kbd"><kbd class="key">RET</kbd></kbd>.  If the value of <code class="code">completion-auto-select</code> is
<code class="code">second-tab</code>, then the first <kbd class="kbd"><kbd class="key">TAB</kbd></kbd> will pop up the
completions list buffer, and the second one will switch to it.
</p>
<a class="index-entry-id" id="index-completion_002dcycle_002dthreshold"></a>
<p>If <code class="code">completion-cycle-threshold</code> is non-<code class="code">nil</code>, completion
commands can cycle through completion alternatives.  Normally, if
there is more than one completion alternative for the text in the
minibuffer, a completion command completes up to the longest common
substring.  If you change <code class="code">completion-cycle-threshold</code> to
<code class="code">t</code>, the completion command instead completes to the first of
those completion alternatives; each subsequent invocation of the
completion command replaces that with the next completion alternative,
in a cyclic manner.  If you give <code class="code">completion-cycle-threshold</code> a
numeric value <var class="var">n</var>, completion commands switch to this cycling
behavior only when there are <var class="var">n</var> or fewer alternatives.
</p>
<a class="index-entry-id" id="index-completions_002dformat"></a>
<p>When displaying completions, Emacs will normally pop up a new buffer
to display the completions.  The completions will by default be sorted
horizontally, using as many columns as will fit in the window-width,
but this can be changed by customizing the <code class="code">completions-format</code>
user option.  If its value is <code class="code">vertical</code>, Emacs will sort the
completions vertically instead, and if it&#8217;s <code class="code">one-column</code>, Emacs
will use just one column.
</p>
<a class="index-entry-id" id="index-completions_002dsort"></a>
<p>The <code class="code">completions-sort</code> user option controls the order in which
the completions are sorted in the &#8216;<samp class="samp">*Completions*</samp>&#8217; buffer.  The
default is <code class="code">alphabetical</code>, which sorts in alphabetical order.
The value <code class="code">nil</code> disables sorting.  The value can also be a
function, which will be called with the list of completions, and
should return the list in the desired order.
</p>
<a class="index-entry-id" id="index-completions_002dmax_002dheight"></a>
<p>When <code class="code">completions-max-height</code> is non-<code class="code">nil</code>, it limits the
size of the completions window.  It is specified in lines and include
mode, header line and a bottom divider, if any.  For a more complex
control of the Completion window display properties, you can use
<code class="code">display-buffer-alist</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Display-Action-Alists.html#Buffer-Display-Action-Alists">Action Alists for Buffer Display</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>).
</p>
<a class="index-entry-id" id="index-completions_002dheader_002dformat"></a>
<p>The variable <code class="code">completions-header-format</code> is a format spec string to
control the informative line shown before the completions list of
candidates.  If it contains a &#8216;<samp class="samp">%s</samp>&#8217; construct, that get replaced
by the number of completions shown in the completion list buffer.  To
suppress the display of the heading line, customize this variable to
<code class="code">nil</code>.  The string that is the value of this variable can have
text properties to change the visual appearance of the heading line;
some useful properties <code class="code">face</code> or <code class="code">cursor-intangible</code>
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Special-Properties.html#Special-Properties">Properties with Special Meanings</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).
</p>
<a class="index-entry-id" id="index-completions_002dhighlight_002dface"></a>
<p>When <code class="code">completions-highlight-face</code> names a face, the current
completion candidate, the one that will be selected by typing
<kbd class="kbd"><kbd class="key">RET</kbd></kbd> or clicking the mouse, will be highlighted using that
face.  The default value of this variable is
<code class="code">completions-highlight</code>; the value is <code class="code">nil</code> disables this
highlighting.  This feature uses the special text property
<code class="code">cursor-face</code>.
</p>
</div>
</div>
<div class="section-level-extent" id="Minibuffer-History">
<h3 class="section" id="Minibuffer-History-1">9.5 Minibuffer History</h3>
<a class="index-entry-id" id="index-minibuffer-history"></a>
<a class="index-entry-id" id="index-history-of-minibuffer-input"></a>
<a class="index-entry-id" id="index-completion_002c-walking-through-candidates"></a>

<p>Everything you type in the minibuffer is saved in a <em class="dfn">minibuffer
history list</em> so you can easily use it again later.  This includes
completion candidates (such as file names, buffer names, command
names, etc.) and any other kind of minibuffer input.  You can use
the following commands to quickly fetch an earlier or alternative
response into the minibuffer:
</p>
<dl class="table">
<dt><kbd class="kbd">M-p</kbd></dt>
<dd><p>Move to the previous item in the minibuffer history, an earlier
argument (<code class="code">previous-history-element</code>).
</p></dd>
<dt><kbd class="kbd">M-n</kbd></dt>
<dd><p>Move to the next item in the minibuffer history
(<code class="code">next-history-element</code>).
</p></dd>
<dt><kbd class="kbd"><kbd class="key">UP</kbd></kbd></dt>
<dt><kbd class="kbd"><kbd class="key">DOWN</kbd></kbd></dt>
<dd><p>Like <kbd class="kbd">M-p</kbd> and <kbd class="kbd">M-n</kbd>, but move to the previous or next line of
a multi-line item before going to the previous history item
(<code class="code">previous-line-or-history-element</code> and
<code class="code">next-line-or-history-element</code>) .
</p></dd>
<dt><kbd class="kbd">M-r <var class="var">regexp</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Move to an earlier item in the minibuffer history that
matches <var class="var">regexp</var> (<code class="code">previous-matching-history-element</code>).
</p></dd>
<dt><kbd class="kbd">M-s <var class="var">regexp</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Move to a later item in the minibuffer history that matches
<var class="var">regexp</var> (<code class="code">next-matching-history-element</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002dp-_0028minibuffer-history_0029"></a>
<a class="index-entry-id" id="index-M_002dn-_0028minibuffer-history_0029"></a>
<a class="index-entry-id" id="index-next_002dhistory_002delement"></a>
<a class="index-entry-id" id="index-previous_002dhistory_002delement"></a>
<p>While in the minibuffer, <kbd class="kbd">M-p</kbd> (<code class="code">previous-history-element</code>)
moves through the minibuffer history list, one item at a time.  Each
<kbd class="kbd">M-p</kbd> fetches an earlier item from the history list into the
minibuffer, replacing its existing contents.  Typing <kbd class="kbd">M-n</kbd>
(<code class="code">next-history-element</code>) moves through the minibuffer history
list in the opposite direction, fetching later entries into the
minibuffer.
</p>
<p>If you type <kbd class="kbd">M-n</kbd> in the minibuffer when there are no later
entries in the minibuffer history (e.g., if you haven&#8217;t previously
typed <kbd class="kbd">M-p</kbd>), Emacs tries fetching from a list of default
arguments: values that you are likely to enter.  You can think of this
as moving through the &#8220;future history&#8221;.
</p>
<a class="index-entry-id" id="index-future-history-for-file-names"></a>
<a class="index-entry-id" id="index-minibuffer-defaults-for-file-names"></a>
<a class="index-entry-id" id="index-file_002dname_002dat_002dpoint_002dfunctions"></a>
<p>The &#8220;future history&#8221; for file names includes several possible
alternatives you may find useful, such as the file name or the URL at
point in the current buffer.  The defaults put into the &#8220;future
history&#8221; in this case are controlled by the functions mentioned in
the value of the option <code class="code">file-name-at-point-functions</code>.  By
default, its value invokes the <code class="code">ffap</code> package (see <a class="pxref" href="Hyperlinking.xhtml#FFAP">Finding Files and URLs at Point</a>),
which tries to guess the default file or URL from the text around
point.  To disable this guessing, customize the option to a <code class="code">nil</code>
value, then the &#8220;future history&#8221; of file names will include only the
file, if any, visited by the current buffer, and the default
directory.
</p>
<a class="index-entry-id" id="index-previous_002dline_002dor_002dhistory_002delement"></a>
<a class="index-entry-id" id="index-next_002dline_002dor_002dhistory_002delement"></a>
<a class="index-entry-id" id="index-UP-_0028minibuffer-history_0029"></a>
<a class="index-entry-id" id="index-DOWN-_0028minibuffer-history_0029"></a>
<p>The arrow keys <kbd class="kbd"><kbd class="key">UP</kbd></kbd> and <kbd class="kbd"><kbd class="key">DOWN</kbd></kbd> work like
<kbd class="kbd">M-p</kbd> and <kbd class="kbd">M-n</kbd>, but if the current history item is longer
than a single line, they allow you to move to the previous or next
line of the current history item before going to the previous or next
history item.
</p>
<p>If you edit the text inserted by the <kbd class="kbd">M-p</kbd> or <kbd class="kbd">M-n</kbd>
minibuffer history commands, this does not change its entry in the
history list.  However, the edited argument does go at the end of the
history list when you submit it.
</p>
<a class="index-entry-id" id="index-previous_002dmatching_002dhistory_002delement"></a>
<a class="index-entry-id" id="index-next_002dmatching_002dhistory_002delement"></a>
<a class="index-entry-id" id="index-M_002dr-_0028minibuffer-history_0029"></a>
<a class="index-entry-id" id="index-M_002ds-_0028minibuffer-history_0029"></a>
<p>You can use <kbd class="kbd">M-r</kbd> (<code class="code">previous-matching-history-element</code>) to
search through older elements in the history list, and <kbd class="kbd">M-s</kbd>
(<code class="code">next-matching-history-element</code>) to search through newer
entries.  Each of these commands asks for a <em class="dfn">regular expression</em>
as an argument, and fetches the first matching entry into the
minibuffer.  See <a class="xref" href="Search.xhtml#Regexps">Syntax of Regular Expressions</a>, for an explanation of regular
expressions.  A numeric prefix argument <var class="var">n</var> means to fetch the
<var class="var">n</var>th matching entry.  These commands are unusual, in that they
use the minibuffer to read the regular expression argument, even
though they are invoked from the minibuffer.  An upper-case letter in
the regular expression makes the search case-sensitive (see <a class="pxref" href="Search.xhtml#Lax-Search">Lax Matching During Searching</a>).
</p>
<p>You can also search through the history using an incremental search.
See <a class="xref" href="Search.xhtml#Isearch-Minibuffer">Searching the Minibuffer</a>.
</p>
<p>Emacs keeps separate history lists for several different kinds of
arguments.  For example, there is a list for file names, used by all
the commands that read file names.  Other history lists include buffer
names, command names (used by <kbd class="kbd">M-x</kbd>), and command arguments (used
by commands like <code class="code">query-replace</code>).
</p>
<a class="index-entry-id" id="index-history_002dlength"></a>
<p>The variable <code class="code">history-length</code> specifies the maximum length of a
minibuffer history list; adding a new element deletes the oldest
element if the list gets too long.  If the value is <code class="code">t</code>, there is
no maximum length.
</p>
<a class="index-entry-id" id="index-history_002ddelete_002dduplicates"></a>
<p>The variable <code class="code">history-delete-duplicates</code> specifies whether to
delete duplicates in history.  If it is non-<code class="code">nil</code>, adding a new
element deletes from the list all other elements that are equal to it.
The default is <code class="code">nil</code>.
</p>
</div>
<div class="section-level-extent" id="Repetition">
<h3 class="section" id="Repeating-Minibuffer-Commands">9.6 Repeating Minibuffer Commands</h3>
<a class="index-entry-id" id="index-command-history"></a>
<a class="index-entry-id" id="index-history-of-commands"></a>

<p>Every command that uses the minibuffer once is recorded on a special
history list, the <em class="dfn">command history</em>, together with the values of
its arguments, so that you can repeat the entire command.  In
particular, every use of <kbd class="kbd">M-x</kbd> is recorded there, since <kbd class="kbd">M-x</kbd>
uses the minibuffer to read the command name.
</p>
<a class="index-entry-id" id="index-list_002dcommand_002dhistory"></a>
<dl class="table">
<dt><kbd class="kbd">C-x <kbd class="key">ESC</kbd> <kbd class="key">ESC</kbd></kbd></dt>
<dd><p>Re-execute a recent minibuffer command from the command history
 (<code class="code">repeat-complex-command</code>).
</p></dd>
<dt><kbd class="kbd">M-x list-command-history</kbd></dt>
<dd><p>Display the entire command history, showing all the commands
<kbd class="kbd">C-x <kbd class="key">ESC</kbd> <kbd class="key">ESC</kbd></kbd> can repeat, most recent first.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-ESC-ESC"></a>
<a class="index-entry-id" id="index-repeat_002dcomplex_002dcommand"></a>
<p><kbd class="kbd">C-x <kbd class="key">ESC</kbd> <kbd class="key">ESC</kbd></kbd> re-executes a recent command that used
the minibuffer.  With no argument, it repeats the last such command.
A numeric argument specifies which command to repeat; 1 means the last
one, 2 the previous, and so on.
</p>
<p><kbd class="kbd">C-x <kbd class="key">ESC</kbd> <kbd class="key">ESC</kbd></kbd> works by turning the previous command
into a Lisp expression and then entering a minibuffer initialized with
the text for that expression.  Even if you don&#8217;t know Lisp, it will
probably be obvious which command is displayed for repetition.  If you
type just <kbd class="key">RET</kbd>, that repeats the command unchanged.  You can also
change the command by editing the Lisp expression before you execute
it.  The executed command is added to the front of the command history
unless it is identical to the most recent item.
</p>
<p>Once inside the minibuffer for <kbd class="kbd">C-x <kbd class="key">ESC</kbd> <kbd class="key">ESC</kbd></kbd>, you
can use the usual minibuffer history commands (see <a class="pxref" href="#Minibuffer-History">Minibuffer History</a>) to move through the history list.  After finding the desired
previous command, you can edit its expression as usual and then execute
it by typing <kbd class="key">RET</kbd>.
</p>
<a class="index-entry-id" id="index-isearch_002dresume_002din_002dcommand_002dhistory"></a>
<p>Incremental search does not, strictly speaking, use the minibuffer.
Therefore, although it behaves like a complex command, it normally
does not appear in the history list for <kbd class="kbd">C-x&#160;<kbd class="key">ESC</kbd>&#160;<kbd class="key">ESC</kbd></kbd><!-- /@w -->.
You can make incremental search commands appear in the history by
setting <code class="code">isearch-resume-in-command-history</code> to a non-<code class="code">nil</code>
value.  See <a class="xref" href="Search.xhtml#Incremental-Search">Incremental Search</a>.
</p>
<a class="index-entry-id" id="index-command_002dhistory"></a>
<p>The list of previous minibuffer-using commands is stored as a Lisp
list in the variable <code class="code">command-history</code>.  Each element is a Lisp
expression that describes one command and its arguments.  Lisp programs
can re-execute a command by calling <code class="code">eval</code> with the
<code class="code">command-history</code> element.
</p>
</div>
<div class="section-level-extent" id="Passwords">
<h3 class="section" id="Entering-passwords">9.7 Entering passwords</h3>
<a class="index-entry-id" id="index-entering-passwords"></a>

<p>Sometimes, you may need to enter a password into Emacs.  For instance,
when you tell Emacs to visit a file on another machine via a network
protocol such as FTP, you often need to supply a password to gain
access to the machine (see <a class="pxref" href="Files.xhtml#Remote-Files">Remote Files</a>).
</p>
<p>Entering a password is similar to using a minibuffer.  Emacs
displays a prompt in the echo area (such as &#8216;<samp class="samp">Password: </samp>&#8217;); after
you type the required password, press <kbd class="key">RET</kbd> to submit it.  To
prevent others from seeing your password, every character you type is
displayed as an asterisk (&#8216;<samp class="samp">*</samp>&#8217;) instead of its usual form.
</p>
<p>Most of the features and commands associated with the minibuffer
<em class="emph">cannot</em> be used when entering a password.  There is no history
or completion, and you cannot change windows or perform any other
action with Emacs until you have submitted the password.
</p>
<p>While you are typing the password, you may press <kbd class="key">DEL</kbd> to delete
backwards, removing the last character entered.  <kbd class="kbd">C-u</kbd> deletes
everything you have typed so far.  <kbd class="kbd">C-g</kbd> quits the password prompt
(see <a class="pxref" href="Quitting.xhtml">Quitting and Aborting</a>).  <kbd class="kbd">C-y</kbd> inserts the current kill into the
password (see <a class="pxref" href="Killing.xhtml#Killing">Killing and Moving Text</a>).  You may type either <kbd class="key">RET</kbd> or
<kbd class="key">ESC</kbd> to submit the password.  Any other self-inserting character
key inserts the associated character into the password, and all other
input is ignored.
</p>
</div>
<div class="section-level-extent" id="Yes-or-No-Prompts">
<h3 class="section" id="Yes-or-No-Prompts-1">9.8 Yes or No Prompts</h3>

<p>An Emacs command may require you to answer a yes-or-no question
during the course of its execution.  Such queries come in two main
varieties.
</p>
<a class="index-entry-id" id="index-y-or-n-prompt"></a>
<p>For the first type of yes-or-no query, the prompt ends with
&#8216;<samp class="samp">(y&#160;or&#160;n)</samp>&#8217;<!-- /@w -->.  You answer the query by typing a single key,
either &#8216;<samp class="samp">y</samp>&#8217; or &#8216;<samp class="samp">n</samp>&#8217;, which immediately exits the minibuffer
and delivers the response.  For example, if you type <kbd class="kbd">C-x C-w</kbd>
(<kbd class="kbd">write-file</kbd>) to save a buffer, and enter the name of an existing
file, Emacs issues a prompt like this:
</p>
<div class="example smallexample">
<pre class="example-preformatted">File ‘foo.el’ exists; overwrite? (y or n)
</pre></div>

<a class="index-entry-id" id="index-yes-or-no-prompt"></a>
<p>The second type of yes-or-no query is typically employed if giving
the wrong answer would have serious consequences; it thus features a
longer prompt ending with &#8216;<samp class="samp">(yes or no)</samp>&#8217;.  For example, if you
invoke <kbd class="kbd">C-x k</kbd> (<code class="code">kill-buffer</code>) on a file-visiting buffer with
unsaved changes, Emacs activates the minibuffer with a prompt like
this:
</p>
<div class="example smallexample">
<pre class="example-preformatted">Buffer foo.el modified; kill anyway? (yes or no)
</pre></div>

<p>To answer, you must type &#8216;<samp class="samp">yes</samp>&#8217; or &#8216;<samp class="samp">no</samp>&#8217; into the minibuffer,
followed by <kbd class="key">RET</kbd>.
</p>
<p>With both types of yes-or-no query the minibuffer behaves as described
in the previous sections; you can recenter the selected window with
<kbd class="kbd">C-l</kbd>, scroll that window (<kbd class="kbd">C-v</kbd> or <kbd class="kbd">PageDown</kbd> scrolls
forward, <kbd class="kbd">M-v</kbd> or <kbd class="kbd">PageUp</kbd> scrolls backward), switch to
another window with <kbd class="kbd">C-x o</kbd>, use the history commands <kbd class="kbd">M-p</kbd>
and <kbd class="kbd">M-n</kbd>, etc.  Type <kbd class="kbd">C-g</kbd> to dismiss the query, and quit the
minibuffer and the querying command (see <a class="pxref" href="Quitting.xhtml">Quitting and Aborting</a>).
</p></div>
</div>



</body>
</html>
