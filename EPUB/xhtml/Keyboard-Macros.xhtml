<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>18 Keyboard Macros (GNU Emacs Manual)</title>

<meta name="description" content="18 Keyboard Macros (GNU Emacs Manual)"/>
<meta name="keywords" content="18 Keyboard Macros (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Files.xhtml#Files" rel="next" title="19 File Handling"/>
<link href="Fixit.xhtml#Fixit" rel="prev" title="17 Commands for Fixing Typos"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Keyboard-Macros">

<h2 class="chapter" id="Keyboard-Macros-1">18 Keyboard Macros</h2>
<a class="index-entry-id" id="index-defining-keyboard-macros"></a>
<a class="index-entry-id" id="index-keyboard-macro"></a>

<p>In this chapter we describe how to record a sequence of editing
commands so you can repeat it conveniently later.
</p>
<p>A <em class="dfn">keyboard macro</em> is a command defined by an Emacs user to stand for
another sequence of keys.  For example, if you discover that you are
about to type <kbd class="kbd">C-n M-d C-d</kbd> forty times, you can speed your work by
defining a keyboard macro to do <kbd class="kbd">C-n M-d C-d</kbd>, and then executing
it 39 more times.
</p>
<p>You define a keyboard macro by executing and recording the commands
which are its definition.  Put differently, as you define a keyboard
macro, the definition is being executed for the first time.  This way,
you can see the effects of your commands, so that you don&#8217;t have to
figure them out in your head.  When you close the definition, the
keyboard macro is defined and also has been, in effect, executed once.
You can then do the whole thing over again by invoking the macro.
</p>
<p>Keyboard macros differ from ordinary Emacs commands in that they are
written in the Emacs command language rather than in Lisp.  This makes it
easier for the novice to write them, and makes them more convenient as
temporary hacks.  However, the Emacs command language is not powerful
enough as a programming language to be useful for writing anything
intelligent or general.  For such things, Lisp must be used.
</p>

<div class="section-level-extent" id="Basic-Keyboard-Macro">
<h3 class="section" id="Basic-Use">18.1 Basic Use</h3>

<dl class="table">
<dt><kbd class="kbd"><kbd class="key">F3</kbd></kbd></dt>
<dd><p>Start defining a keyboard macro
(<code class="code">kmacro-start-macro-or-insert-counter</code>).
</p></dd>
<dt><kbd class="kbd"><kbd class="key">F4</kbd></kbd></dt>
<dd><p>If a keyboard macro is being defined, end the definition; otherwise,
execute the most recent keyboard macro
(<code class="code">kmacro-end-or-call-macro</code>).
</p></dd>
<dt><kbd class="kbd">C-u <kbd class="key">F3</kbd></kbd></dt>
<dd><p>Re-execute last keyboard macro, then append keys to its definition.
</p></dd>
<dt><kbd class="kbd">C-u C-u <kbd class="key">F3</kbd></kbd></dt>
<dd><p>Append keys to the last keyboard macro without re-executing it.
</p></dd>
<dt><kbd class="kbd">C-x C-k r</kbd></dt>
<dd><p>Run the last keyboard macro on each line that begins in the region
(<code class="code">apply-macro-to-region-lines</code>).
</p></dd>
<dt><kbd class="kbd">C-x (</kbd></dt>
<dd><p>Start defining a keyboard macro (old style)
(<code class="code">kmacro-start-macro</code>); with a prefix argument, append keys to
the last macro.
</p></dd>
<dt><kbd class="kbd">C-x )</kbd></dt>
<dd><p>End a macro definition (old style) (<code class="code">kmacro-end-macro</code>); prefix
argument serves as the repeat count for executing the macro.
</p></dd>
<dt><kbd class="kbd">C-x e</kbd></dt>
<dd><p>Execute the most recently defined keyboard macro
(<code class="code">kmacro-end-and-call-macro</code>); prefix argument serves as repeat
count.
</p></dd>
</dl>

<a class="index-entry-id" id="index-F3"></a>
<a class="index-entry-id" id="index-F4"></a>
<a class="index-entry-id" id="index-kmacro_002dstart_002dmacro_002dor_002dinsert_002dcounter"></a>
<a class="index-entry-id" id="index-kmacro_002dend_002dor_002dcall_002dmacro"></a>
<a class="index-entry-id" id="index-kmacro_002dend_002dand_002dcall_002dmacro"></a>
<p>To start defining a keyboard macro, type <kbd class="key">F3</kbd>.  From then on,
your keys continue to be executed, but also become part of the
definition of the macro.  &#8216;<samp class="samp">Def</samp>&#8217; appears in the mode line to
remind you of what is going on.  When you are finished, type <kbd class="key">F4</kbd>
(<code class="code">kmacro-end-or-call-macro</code>) to terminate the definition.  For
example,
</p>
<div class="example">
<pre class="example-preformatted"><kbd class="key">F3</kbd> M-f foo <kbd class="key">F4</kbd>
</pre></div>

<p>defines a macro to move forward a word and then insert &#8216;<samp class="samp">foo</samp>&#8217;.
Note that <kbd class="key">F3</kbd> and <kbd class="key">F4</kbd> do not become part of the macro.
</p>
<p>After defining the macro, you can call it with <kbd class="key">F4</kbd>.  For the
above example, this has the same effect as typing <kbd class="kbd">M-f foo</kbd> again.
(Note the two roles of the <kbd class="key">F4</kbd> command: it ends the macro if you
are in the process of defining one, or calls the last macro
otherwise.)  You can also supply <kbd class="key">F4</kbd> with a numeric prefix
argument &#8216;<samp class="samp">n</samp>&#8217;, which means to invoke the macro &#8216;<samp class="samp">n</samp>&#8217; times.  An
argument of zero repeats the macro indefinitely, until it gets an
error or you type <kbd class="kbd">C-g</kbd> (or, on MS-DOS, <kbd class="kbd">C-<kbd class="key">Break</kbd></kbd>).
</p>
<p>The above example demonstrates a handy trick that you can employ
with keyboard macros: if you wish to repeat an operation at regularly
spaced places in the text, include a motion command as part of the
macro.  In this case, repeating the macro inserts the string
&#8216;<samp class="samp">foo</samp>&#8217; after each successive word.
</p>
<p>After terminating the definition of a keyboard macro, you can append
more keystrokes to its definition by typing <kbd class="kbd">C-u <kbd class="key">F3</kbd></kbd>.  This
is equivalent to plain <kbd class="key">F3</kbd> followed by retyping the whole
definition so far.  As a consequence, it re-executes the macro as
previously defined.  If you change the variable
<code class="code">kmacro-execute-before-append</code> to <code class="code">nil</code>, the existing macro
will not be re-executed before appending to it (the default is
<code class="code">t</code>).  You can also add to the end of the definition of the last
keyboard macro without re-executing it by typing <kbd class="kbd">C-u C-u
<kbd class="key">F3</kbd></kbd>.
</p>
<p>When a command reads an argument with the minibuffer, your
minibuffer input becomes part of the macro along with the command.  So
when you replay the macro, the command gets the same argument as when
you entered the macro.  For example,
</p>
<div class="example">
<pre class="example-preformatted"><kbd class="key">F3</kbd> C-a C-k C-x b foo <kbd class="key">RET</kbd> C-y C-x b <kbd class="key">RET</kbd> <kbd class="key">F4</kbd>
</pre></div>

<p>defines a macro that kills the current line, yanks it into the buffer
&#8216;<samp class="samp">foo</samp>&#8217;, then returns to the original buffer.
</p>
<p>Most keyboard commands work as usual in a keyboard macro definition,
with some exceptions.  Typing <kbd class="kbd">C-g</kbd> (<code class="code">keyboard-quit</code>) quits
the keyboard macro definition.  Typing <kbd class="kbd">C-M-c</kbd>
(<code class="code">exit-recursive-edit</code>) can be unreliable: it works as you&#8217;d
expect if exiting a recursive edit that started within the macro, but
if it exits a recursive edit that started before you invoked the
keyboard macro, it also necessarily exits the keyboard macro too.
Mouse events are also unreliable, even though you can use them in a
keyboard macro: when the macro replays the mouse event, it uses the
original mouse position of that event, the position that the mouse had
while you were defining the macro.  The effect of this may be hard to
predict.
</p>
<a class="index-entry-id" id="index-apply_002dmacro_002dto_002dregion_002dlines"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-r"></a>
<p>The command <kbd class="kbd">C-x C-k r</kbd> (<code class="code">apply-macro-to-region-lines</code>)
repeats the last defined keyboard macro on each line that begins in
the region.  It does this line by line, by moving point to the
beginning of the line and then executing the macro.
</p>
<a class="index-entry-id" id="index-C_002dx-_0028"></a>
<a class="index-entry-id" id="index-C_002dx-_0029"></a>
<a class="index-entry-id" id="index-C_002dx-e"></a>
<a class="index-entry-id" id="index-kmacro_002dstart_002dmacro"></a>
<a class="index-entry-id" id="index-kmacro_002dend_002dmacro"></a>
<p>In addition to the <kbd class="key">F3</kbd> and <kbd class="key">F4</kbd> commands described above,
Emacs also supports an older set of key bindings for defining and
executing keyboard macros.  To begin a macro definition, type <kbd class="kbd">C-x
(</kbd> (<code class="code">kmacro-start-macro</code>); as with <kbd class="key">F3</kbd>, a prefix argument
appends this definition to the last keyboard macro.  To end a macro
definition, type <kbd class="kbd">C-x )</kbd> (<code class="code">kmacro-end-macro</code>).  To execute
the most recent macro, type <kbd class="kbd">C-x e</kbd>
(<code class="code">kmacro-end-and-call-macro</code>).  If you enter <kbd class="kbd">C-x e</kbd> while
defining a macro, the macro is terminated and executed immediately.
Immediately after typing <kbd class="kbd">C-x e</kbd>, you can type <kbd class="kbd">e</kbd> repeatedly
to immediately repeat the macro one or more times.  You can also give
<kbd class="kbd">C-x e</kbd> a repeat argument, just like <kbd class="key">F4</kbd> (when it is used to
execute a macro).
</p>
<p><kbd class="kbd">C-x )</kbd> can be given a repeat count as an argument.  This means
to repeat the macro right after defining it.  The macro definition
itself counts as the first repetition, since it is executed as you
define it, so <kbd class="kbd">C-u 4 C-x )</kbd> executes the macro immediately 3
additional times.
</p>
<a class="index-entry-id" id="index-kmacro_002dredisplay"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-d"></a>
<p>While executing a long-running keyboard macro, it can sometimes be
useful to trigger a redisplay (to show how far we&#8217;ve gotten).  The
<kbd class="kbd">C-x C-k d</kbd> command can be used for this.  As a not very useful
example, <kbd class="kbd">C-x ( M-f C-x C-k d C-x )</kbd> will create a macro that will
redisplay once per iteration when saying <kbd class="kbd">C-u 42 C-x e</kbd>.
</p>
</div>
<div class="section-level-extent" id="Keyboard-Macro-Ring">
<h3 class="section" id="The-Keyboard-Macro-Ring">18.2 The Keyboard Macro Ring</h3>

<p>All defined keyboard macros are recorded in the <em class="dfn">keyboard macro
ring</em>.  There is only one keyboard macro ring, shared by all buffers.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x C-k C-k</kbd></dt>
<dd><p>Execute the keyboard macro at the head of the ring (<code class="code">kmacro-end-or-call-macro-repeat</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-k C-n</kbd></dt>
<dd><p>Rotate the keyboard macro ring to the next macro (defined earlier)
(<code class="code">kmacro-cycle-ring-next</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-k C-p</kbd></dt>
<dd><p>Rotate the keyboard macro ring to the previous macro (defined later)
(<code class="code">kmacro-cycle-ring-previous</code>).
</p></dd>
</dl>

<p>All commands which operate on the keyboard macro ring use the
same <kbd class="kbd">C-x C-k</kbd> prefix.  Most of these commands can be executed and
repeated immediately after each other without repeating the <kbd class="kbd">C-x
C-k</kbd> prefix.  For example,
</p>
<div class="example">
<pre class="example-preformatted">C-x C-k C-p C-p C-k C-k C-k C-n C-n C-k C-p C-k C-d
</pre></div>

<p>will rotate the keyboard macro ring to the second-previous macro,
execute the resulting head macro three times, rotate back to the
original head macro, execute that once, rotate to the previous
macro, execute that, and finally delete it from the macro ring.
</p>
<a class="index-entry-id" id="index-kmacro_002dend_002dor_002dcall_002dmacro_002drepeat"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-C_002dk"></a>
<p>The command <kbd class="kbd">C-x C-k C-k</kbd> (<code class="code">kmacro-end-or-call-macro-repeat</code>)
executes the keyboard macro at the head of the macro ring.  You can
repeat the macro immediately by typing another <kbd class="kbd">C-k</kbd>, or you can
rotate the macro ring immediately by typing <kbd class="kbd">C-n</kbd> or <kbd class="kbd">C-p</kbd>.
</p>
<p>When a keyboard macro is being defined, <kbd class="kbd">C-x C-k C-k</kbd> behaves
like <kbd class="key">F4</kbd> except that, immediately afterward, you can use most key
bindings of this section without the <kbd class="kbd">C-x C-k</kbd> prefix.  For
instance, another <kbd class="kbd">C-k</kbd> will re-execute the macro.
</p>
<a class="index-entry-id" id="index-kmacro_002dcycle_002dring_002dnext"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-C_002dn"></a>
<a class="index-entry-id" id="index-kmacro_002dcycle_002dring_002dprevious"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-C_002dp"></a>
<p>The commands <kbd class="kbd">C-x C-k C-n</kbd> (<code class="code">kmacro-cycle-ring-next</code>) and
<kbd class="kbd">C-x C-k C-p</kbd> (<code class="code">kmacro-cycle-ring-previous</code>) rotate the
macro ring, bringing the next or previous keyboard macro to the head
of the macro ring.  The definition of the new head macro is displayed
in the echo area.  You can continue to rotate the macro ring
immediately by repeating just <kbd class="kbd">C-n</kbd> and <kbd class="kbd">C-p</kbd> until the
desired macro is at the head of the ring.  To execute the new macro
ring head immediately, just type <kbd class="kbd">C-k</kbd>.
</p>
<p>Note that Emacs treats the head of the macro ring as the last
defined keyboard macro.  For instance, <kbd class="key">F4</kbd> will execute that
macro, and <kbd class="kbd">C-x C-k n</kbd> will give it a name.
</p>
<a class="index-entry-id" id="index-kmacro_002dring_002dmax"></a>
<p>The maximum number of macros stored in the keyboard macro ring is
determined by the customizable variable <code class="code">kmacro-ring-max</code>.
</p>
</div>
<div class="section-level-extent" id="Keyboard-Macro-Counter">
<h3 class="section" id="The-Keyboard-Macro-Counter">18.3 The Keyboard Macro Counter</h3>

<p>Each keyboard macro has an associated counter, which is initialized
to 0 when you start defining the macro.  This <em class="dfn">current counter</em>
allows you to insert a number into the buffer that depends on the
number of times the macro has been called.  The counter is normally
incremented each time its value is inserted into the buffer.
</p>
<p>In addition to the current counter, keyboard macros also maintain the
<em class="dfn">previous counter</em>, which records the value the current counter
had last time it was incremented or set.  Note that incrementing the
current counter by zero, e.g., with <kbd class="kbd">C-u&#160;0&#160;C-x&#160;C-k&#160;C-i</kbd><!-- /@w -->, also
records the value of the current counter as the previous counter
value.
</p>
<dl class="table">
<dt><kbd class="kbd"><kbd class="key">F3</kbd></kbd></dt>
<dd><p>In a keyboard macro definition, insert the keyboard macro counter
value in the buffer (<code class="code">kmacro-start-macro-or-insert-counter</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-k C-i</kbd></dt>
<dd><p>Insert the keyboard macro counter value in the buffer
(<code class="code">kmacro-insert-counter</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-k C-c</kbd></dt>
<dd><p>Set the keyboard macro counter (<code class="code">kmacro-set-counter</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-k C-a</kbd></dt>
<dd><p>Add the prefix arg to the keyboard macro counter (<code class="code">kmacro-add-counter</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-k C-f</kbd></dt>
<dd><p>Specify the format for inserting the keyboard macro counter
(<code class="code">kmacro-set-format</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-kmacro_002dinsert_002dcounter"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-C_002di"></a>
<p>When you are defining a keyboard macro, the command <kbd class="key">F3</kbd>
(<code class="code">kmacro-start-macro-or-insert-counter</code>) inserts the current
value of the keyboard macro&#8217;s counter into the buffer, and increments
the counter by 1.  (If you are not defining a macro, <kbd class="key">F3</kbd> begins a
macro definition instead.  See <a class="xref" href="#Basic-Keyboard-Macro">Basic Use</a>.)  You can use
a numeric prefix argument to specify a different increment.  If you
just specify a <kbd class="kbd">C-u</kbd> prefix, that inserts the previous counter
value, and doesn&#8217;t change the current value.
</p>
<p>As an example, let us show how the keyboard macro counter can be
used to build a numbered list.  Consider the following key sequence:
</p>
<div class="example">
<pre class="example-preformatted"><kbd class="key">F3</kbd> C-a <kbd class="key">F3</kbd> . <kbd class="key">SPC</kbd> <kbd class="key">F4</kbd>
</pre></div>

<p>As part of this keyboard macro definition, the string &#8216;<samp class="samp">0. </samp>&#8217; was
inserted into the beginning of the current line.  If you now move
somewhere else in the buffer and type <kbd class="key">F4</kbd> to invoke the macro,
the string &#8216;<samp class="samp">1. </samp>&#8217; is inserted at the beginning of that line.
Subsequent invocations insert &#8216;<samp class="samp">2. </samp>&#8217;, &#8216;<samp class="samp">3. </samp>&#8217;, and so forth.
</p>
<p>The command <kbd class="kbd">C-x C-k C-i</kbd> (<code class="code">kmacro-insert-counter</code>) does
the same thing as <kbd class="key">F3</kbd>, but it can be used outside a keyboard
macro definition.  When no keyboard macro is being defined or
executed, it inserts and increments the counter of the macro at the
head of the keyboard macro ring.
</p>
<a class="index-entry-id" id="index-kmacro_002dset_002dcounter"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-C_002dc"></a>
<p>The command <kbd class="kbd">C-x C-k C-c</kbd> (<code class="code">kmacro-set-counter</code>) sets the
current macro counter to the value of the numeric argument.  If you use
it inside the macro, it operates on each repetition of the macro.  If
you specify just <kbd class="kbd">C-u</kbd> as the prefix, while executing the macro,
that resets the counter to the value it had at the beginning of the
current repetition of the macro (undoing any increments so far in this
repetition).
</p>
<a class="index-entry-id" id="index-kmacro_002dadd_002dcounter"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-C_002da"></a>
<p>The command <kbd class="kbd">C-x C-k C-a</kbd> (<code class="code">kmacro-add-counter</code>) adds the
prefix argument to the current macro counter.  With just <kbd class="kbd">C-u</kbd> as
argument, it resets the counter to the last value inserted by any
keyboard macro.  (Normally, when you use this, the last insertion
will be in the same macro and it will be the same counter.)
</p>
<a class="index-entry-id" id="index-kmacro_002dset_002dformat"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-C_002df"></a>
<p>The command <kbd class="kbd">C-x C-k C-f</kbd> (<code class="code">kmacro-set-format</code>) prompts for
the format to use when inserting the macro counter.  The default
format is &#8216;<samp class="samp">%d</samp>&#8217;, which means to insert the number in decimal
without any padding.  You can exit with empty minibuffer to reset the
format to this default.  You can specify any format string that the
<code class="code">format</code> function accepts and that makes sense with a single
integer extra argument (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Formatting-Strings.html#Formatting-Strings">Formatting Strings</a> in <cite class="cite">The Emacs
Lisp Reference Manual</cite>).  Do not put the format string inside double
quotes when you insert it in the minibuffer.
</p>
<p>If you use this command while no keyboard macro is being defined or
executed, the new format affects all subsequent macro definitions.
Existing macros continue to use the format in effect when they were
defined.  If you set the format while defining a keyboard macro, this
affects the macro being defined from that point on, but it does not
affect subsequent macros.  Execution of the macro will, at each step,
use the format in effect at that step during its definition.  Changes
to the macro format during execution of a macro, like the
corresponding changes during its definition, have no effect on
subsequent macros.
</p>
<p>The format set by <kbd class="kbd">C-x C-k C-f</kbd> does not affect insertion of
numbers stored in registers.
</p>
<p>If you use a register as a counter, incrementing it on each
repetition of the macro, that accomplishes the same thing as a
keyboard macro counter.  See <a class="xref" href="Registers.xhtml#Number-Registers">Keeping Numbers in Registers</a>.  For most purposes,
it is simpler to use a keyboard macro counter.
</p>
</div>
<div class="section-level-extent" id="Keyboard-Macro-Query">
<h3 class="section" id="Executing-Macros-with-Variations">18.4 Executing Macros with Variations</h3>

<p>In a keyboard macro, you can create an effect similar to that of
<code class="code">query-replace</code>, in that the macro asks you each time around
whether to make a change.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x q</kbd></dt>
<dd><p>When this point is reached during macro execution, ask for confirmation
(<code class="code">kbd-macro-query</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-q"></a>
<a class="index-entry-id" id="index-kbd_002dmacro_002dquery"></a>
<p>While defining the macro, type <kbd class="kbd">C-x q</kbd> at the point where you
want the query to occur.  During macro definition, the <kbd class="kbd">C-x q</kbd>
does nothing, but when you run the macro later, <kbd class="kbd">C-x q</kbd> asks you
interactively whether to continue.
</p>
<p>The valid responses when <kbd class="kbd">C-x q</kbd> asks are:
</p>
<dl class="table">
<dt><kbd class="key">SPC</kbd> (or <kbd class="kbd">y</kbd>)</dt>
<dd><p>Continue executing the keyboard macro.
</p>
</dd>
<dt><kbd class="key">DEL</kbd> (or <kbd class="kbd">n</kbd>)</dt>
<dd><p>Skip the remainder of this repetition of the macro, and start right
away with the next repetition.
</p>
</dd>
<dt><kbd class="key">RET</kbd> (or <kbd class="kbd">q</kbd>)</dt>
<dd><p>Skip the remainder of this repetition and cancel further repetitions.
</p>
</dd>
<dt><kbd class="kbd">C-r</kbd></dt>
<dd><p>Enter a recursive editing level, in which you can perform editing
which is not part of the macro.  When you exit the recursive edit
using <kbd class="kbd">C-M-c</kbd>, you are asked again how to continue with the
keyboard macro.  If you type a <kbd class="key">SPC</kbd> at this time, the rest of the
macro definition is executed.  It is up to you to leave point and the
text in a state such that the rest of the macro will do what you want.
</p></dd>
</dl>

<p><kbd class="kbd">C-u C-x q</kbd>, which is <kbd class="kbd">C-x q</kbd> with a prefix argument,
performs a completely different function.  It enters a recursive edit
reading input from the keyboard, both when you type it during the
definition of the macro, and when it is executed from the macro.  During
definition, the editing you do inside the recursive edit does not become
part of the macro.  During macro execution, the recursive edit gives you
a chance to do some particularized editing on each repetition.
See <a class="xref" href="Recursive-Edit.xhtml">Recursive Editing Levels</a>.
</p>
</div>
<div class="section-level-extent" id="Save-Keyboard-Macro">
<h3 class="section" id="Naming-and-Saving-Keyboard-Macros">18.5 Naming and Saving Keyboard Macros</h3>

<dl class="table">
<dt><kbd class="kbd">C-x C-k n</kbd></dt>
<dd><p>Give a command name (for the duration of the Emacs session) to the most
recently defined keyboard macro (<code class="code">kmacro-name-last-macro</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-k b</kbd></dt>
<dd><p>Bind the most recently defined keyboard macro to a key sequence (for
the duration of the session) (<code class="code">kmacro-bind-to-key</code>).
</p></dd>
<dt><kbd class="kbd">M-x insert-kbd-macro</kbd></dt>
<dd><p>Insert in the buffer a keyboard macro&#8217;s definition, as Lisp code.
</p></dd>
</dl>

<a class="index-entry-id" id="index-saving-keyboard-macros"></a>
<a class="index-entry-id" id="index-kmacro_002dname_002dlast_002dmacro"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-n"></a>
<p>If you wish to save a keyboard macro for later use, you can give it
a name using <kbd class="kbd">C-x C-k n</kbd> (<code class="code">kmacro-name-last-macro</code>).
This reads a name as an argument using the minibuffer and defines that
name to execute the last keyboard macro, in its current form.  (If you
later add to the definition of this macro, that does not alter the
name&#8217;s definition as a macro.)  The macro name is a Lisp symbol, and
defining it in this way makes it a valid command name for calling with
<kbd class="kbd">M-x</kbd> or for binding a key to with <code class="code">keymap-global-set</code>
(see <a class="pxref" href="Customization.xhtml#Keymaps">Keymaps</a>).  If you specify a name that has a prior definition
other than a keyboard macro, an error message is shown and nothing is
changed.
</p>
<a class="index-entry-id" id="index-binding-keyboard-macros"></a>
<a class="index-entry-id" id="index-kmacro_002dbind_002dto_002dkey"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-b"></a>
<p>You can also bind the last keyboard macro (in its current form) to a
key, using <kbd class="kbd">C-x C-k b</kbd> (<code class="code">kmacro-bind-to-key</code>) followed by the
key sequence you want to bind.  You can bind to any key sequence in
the global keymap, but since most key sequences already have other
bindings, you should select the key sequence carefully.  If you try to
bind to a key sequence with an existing binding (in any keymap), this
command asks you for confirmation before replacing the existing binding.
</p>
<p>To avoid problems caused by overriding existing bindings, the key
sequences <kbd class="kbd">C-x C-k 0</kbd> through <kbd class="kbd">C-x C-k 9</kbd> and <kbd class="kbd">C-x C-k A</kbd>
through <kbd class="kbd">C-x C-k Z</kbd> are reserved for your own keyboard macro
bindings.  In fact, to bind to one of these key sequences, you only
need to type the digit or letter rather than the whole key sequences.
For example,
</p>
<div class="example">
<pre class="example-preformatted">C-x C-k b 4
</pre></div>

<p>will bind the last keyboard macro to the key sequence <kbd class="kbd">C-x C-k 4</kbd>.
</p>
<a class="index-entry-id" id="index-insert_002dkbd_002dmacro"></a>
<p>Once a macro has a command name, you can save its definition in a file.
Then it can be used in another editing session.  First, visit the file
you want to save the definition in.  Then use this command:
</p>
<div class="example">
<pre class="example-preformatted">M-x insert-kbd-macro <kbd class="key">RET</kbd> <var class="var">macroname</var> <kbd class="key">RET</kbd>
</pre></div>

<p>This inserts some Lisp code that, when executed later, will define the
same macro with the same definition it has now.  (You don&#8217;t need to
understand Lisp code to do this, because <code class="code">insert-kbd-macro</code> writes
the Lisp code for you.)  Then save the file.  You can load the file
later with <code class="code">load-file</code> (see <a class="pxref" href="Building.xhtml#Lisp-Libraries">Libraries of Lisp Code for Emacs</a>).  If the file you
save in is your init file <samp class="file">~/.emacs</samp> (see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>) then the
macro will be defined each time you run Emacs.
</p>
<p>If you give <code class="code">insert-kbd-macro</code> a prefix argument, it makes
additional Lisp code to record the keys (if any) that you have bound
to <var class="var">macroname</var>, so that the macro will be reassigned the same keys
when you load the file.
</p>
</div>
<div class="section-level-extent" id="Edit-Keyboard-Macro">
<h3 class="section" id="Editing-a-Keyboard-Macro">18.6 Editing a Keyboard Macro</h3>

<dl class="table">
<dt><kbd class="kbd">C-x C-k C-e</kbd></dt>
<dd><p>Edit the last defined keyboard macro (<code class="code">kmacro-edit-macro</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-k e <var class="var">name</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Edit a previously defined keyboard macro <var class="var">name</var> (<code class="code">edit-kbd-macro</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-k l</kbd></dt>
<dd><p>Edit the last 300 keystrokes as a keyboard macro
(<code class="code">kmacro-edit-lossage</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-kmacro_002dedit_002dmacro"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-C_002de"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-RET"></a>
<p>You can edit the last keyboard macro by typing <kbd class="kbd">C-x C-k C-e</kbd> or
<kbd class="kbd">C-x C-k <kbd class="key">RET</kbd></kbd> (<code class="code">kmacro-edit-macro</code>).  This formats the
macro definition in a buffer and enters a specialized major mode for
editing it.  Type <kbd class="kbd">C-h m</kbd> once in that buffer to display details
of how to edit the macro.  When you are finished editing, type
<kbd class="kbd">C-c C-c</kbd>.
</p>
<a class="index-entry-id" id="index-edit_002dkbd_002dmacro"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-e"></a>
<p>You can edit a named keyboard macro or a macro bound to a key by typing
<kbd class="kbd">C-x C-k e</kbd> (<code class="code">edit-kbd-macro</code>).  Follow that with the
keyboard input that you would use to invoke the macro&#8212;<kbd class="kbd">C-x e</kbd> or
<kbd class="kbd">M-x <var class="var">name</var></kbd> or some other key sequence.
</p>
<a class="index-entry-id" id="index-kmacro_002dedit_002dlossage"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-l"></a>
<p>You can edit the last 300 keystrokes as a macro by typing
<kbd class="kbd">C-x C-k l</kbd> (<code class="code">kmacro-edit-lossage</code>).
</p>
</div>
<div class="section-level-extent" id="Keyboard-Macro-Step_002dEdit">
<h3 class="section" id="Stepwise-Editing-a-Keyboard-Macro">18.7 Stepwise Editing a Keyboard Macro</h3>

<a class="index-entry-id" id="index-kmacro_002dstep_002dedit_002dmacro"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dk-SPC"></a>
<p>You can interactively replay and edit the last keyboard
macro, one command at a time, by typing <kbd class="kbd">C-x C-k <kbd class="key">SPC</kbd></kbd>
(<code class="code">kmacro-step-edit-macro</code>).  Unless you quit the macro using
<kbd class="kbd">q</kbd> or <kbd class="kbd">C-g</kbd>, the edited macro replaces the last macro on the
macro ring.
</p>
<p>This macro editing feature shows the last macro in the minibuffer
together with the first (or next) command to be executed, and prompts
you for an action.  You can enter <kbd class="kbd">?</kbd> to get a summary of your
options.  These actions are available:
</p>
<ul class="itemize mark-bullet">
<li><kbd class="key">SPC</kbd> and <kbd class="kbd">y</kbd> execute the current command, and advance to the
next command in the keyboard macro.
</li><li><kbd class="kbd">n</kbd>, <kbd class="kbd">d</kbd>, and <kbd class="key">DEL</kbd> skip and delete the current command.
</li><li><kbd class="kbd">f</kbd> skips the current command in this execution of the keyboard
macro, but doesn&#8217;t delete it from the macro.
</li><li><kbd class="key">TAB</kbd> executes the current command, as well as all similar
commands immediately following the current command; for example, <kbd class="key">TAB</kbd>
may be used to insert a sequence of characters (corresponding to a
sequence of <code class="code">self-insert-command</code> commands).
</li><li><kbd class="kbd">c</kbd> continues execution (without further editing) until the end of
the keyboard macro.  If execution terminates normally, the edited
macro replaces the original keyboard macro.
</li><li><kbd class="kbd">C-k</kbd> skips and deletes the rest of the keyboard macro,
terminates step-editing, and replaces the original keyboard macro
with the edited macro.
</li><li><kbd class="kbd">q</kbd> and <kbd class="kbd">C-g</kbd> cancels the step-editing of the keyboard macro;
discarding any changes made to the keyboard macro.
</li><li><kbd class="kbd">i <var class="var">key</var>&#8230; C-j</kbd> reads and executes a series of key sequences (not
including the final <kbd class="kbd">C-j</kbd>), and inserts them before the current
command in the keyboard macro, without advancing over the current
command.
</li><li><kbd class="kbd">I <var class="var">key</var>&#8230;</kbd> reads one key sequence, executes it, and inserts it
before the current command in the keyboard macro, without advancing
over the current command.
</li><li><kbd class="kbd">r <var class="var">key</var>&#8230; C-j</kbd> reads and executes a series of key sequences (not
including the final <kbd class="kbd">C-j</kbd>), and replaces the current command in
the keyboard macro with them, advancing over the inserted key
sequences.
</li><li><kbd class="kbd">R <var class="var">key</var>&#8230;</kbd> reads one key sequence, executes it, and replaces the
current command in the keyboard macro with that key sequence,
advancing over the inserted key sequence.
</li><li><kbd class="kbd">a <var class="var">key</var>&#8230; C-j</kbd> executes the current command, then reads and
executes a series of key sequences (not including the final
<kbd class="kbd">C-j</kbd>), and inserts them after the current command in the keyboard
macro; it then advances over the current command and the inserted key
sequences.
</li><li><kbd class="kbd">A <var class="var">key</var>&#8230; C-j</kbd> executes the rest of the commands in the keyboard
macro, then reads and executes a series of key sequences (not
including the final <kbd class="kbd">C-j</kbd>), and appends them at the end of the
keyboard macro; it then terminates the step-editing and replaces the
original keyboard macro with the edited macro.
</li></ul>
</div>
</div>



</body>
</html>
