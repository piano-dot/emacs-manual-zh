<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>30 Abbrevs (GNU Emacs Manual)</title>

<meta name="description" content="30 Abbrevs (GNU Emacs Manual)"/>
<meta name="keywords" content="30 Abbrevs (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Dired.xhtml#Dired" rel="next" title="31 Dired, the Directory Editor"/>
<link href="Maintaining.xhtml#Maintaining" rel="prev" title="29 Maintaining Large Programs"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Abbrevs">

<h2 class="chapter" id="Abbrevs-1">30 Abbrevs</h2>
<a class="index-entry-id" id="index-abbrevs"></a>
<a class="index-entry-id" id="index-expansion-_0028of-abbrevs_0029"></a>

<p>A defined <em class="dfn">abbrev</em> is a word which <em class="dfn">expands</em>, if you insert
it, into some different text.  Abbrevs are defined by the user to expand
in specific ways.  For example, you might define &#8216;<samp class="samp">foo</samp>&#8217; as an abbrev
expanding to &#8216;<samp class="samp">find outer otter</samp>&#8217;.  Then you could insert
&#8216;<samp class="samp">find outer otter </samp>&#8217; into the buffer by typing <kbd class="kbd">f o o
<kbd class="key">SPC</kbd></kbd>.
</p>
<p>A second kind of abbreviation facility is called <em class="dfn">dynamic abbrev
expansion</em>.  You use dynamic abbrev expansion with an explicit command
to expand the letters in the buffer before point by looking for other
words in the buffer that start with those letters.  See <a class="xref" href="#Dynamic-Abbrevs">Dynamic Abbrev Expansion</a>.
</p>
<p>A third kind, <em class="dfn">hippie expansion</em>, generalizes abbreviation expansion.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/autotype/Hippie-Expand.html#Hippie-Expand">Hippie Expansion</a> in <cite class="cite">Features for
Automatic Typing</cite>.
</p>

<div class="section-level-extent" id="Abbrev-Concepts">
<h3 class="section" id="Abbrev-Concepts-1">30.1 Abbrev Concepts</h3>

<p>An <em class="dfn">abbrev</em> is a word that has been defined to <em class="dfn">expand</em> into
a specified <em class="dfn">expansion</em>.  When you insert a word-separator character
following the abbrev, that expands the abbrev&#8212;replacing the abbrev
with its expansion.  For example, if &#8216;<samp class="samp">foo</samp>&#8217; is defined as an abbrev
expanding to &#8216;<samp class="samp">find outer otter</samp>&#8217;, then typing <kbd class="kbd">f o o .</kbd> will
insert &#8216;<samp class="samp">find outer otter.</samp>&#8217;.
</p>
<a class="index-entry-id" id="index-abbrev_002dmode"></a>
<a class="index-entry-id" id="index-Abbrev-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Abbrev"></a>
<p>Abbrevs expand only when Abbrev mode, a buffer-local minor mode, is
enabled.  Disabling Abbrev mode does not cause abbrev definitions to
be forgotten, but they do not expand until Abbrev mode is enabled
again.  The command <kbd class="kbd">M-x abbrev-mode</kbd> toggles Abbrev mode; with a
numeric argument, it turns Abbrev mode on if the argument is positive,
off otherwise.  See <a class="xref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>.
</p>
<p>Abbrevs can have <em class="dfn">mode-specific</em> definitions, active only in one major
mode.  Abbrevs can also have <em class="dfn">global</em> definitions that are active in
all major modes.  The same abbrev can have a global definition and various
mode-specific definitions for different major modes.  A mode-specific
definition for the current major mode overrides a global definition.
</p>
<p>You can define abbrevs interactively during the editing session,
irrespective of whether Abbrev mode is enabled.  You can also save
lists of abbrev definitions in files, which you can then reload for
use in later sessions.
</p>
</div>
<div class="section-level-extent" id="Defining-Abbrevs">
<h3 class="section" id="Defining-Abbrevs-1">30.2 Defining Abbrevs</h3>

<dl class="table">
<dt><kbd class="kbd">C-x a g</kbd></dt>
<dd><p>Define an abbrev, using one or more words before point as its expansion
(<code class="code">add-global-abbrev</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x a l</kbd></dt>
<dd><p>Similar, but define an abbrev specific to the current major mode
(<code class="code">add-mode-abbrev</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x a i g</kbd></dt>
<dd><p>Define a word in the buffer as an abbrev (<code class="code">inverse-add-global-abbrev</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x a i l</kbd></dt>
<dd><p>Define a word in the buffer as a mode-specific abbrev
(<code class="code">inverse-add-mode-abbrev</code>).
</p>
</dd>
<dt><kbd class="kbd">M-x define-global-abbrev <kbd class="key">RET</kbd> <var class="var">abbrev</var> <kbd class="key">RET</kbd> <var class="var">exp</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Define <var class="var">abbrev</var> as an abbrev expanding into <var class="var">exp</var>.
</p>
</dd>
<dt><kbd class="kbd">M-x define-mode-abbrev <kbd class="key">RET</kbd> <var class="var">abbrev</var> <kbd class="key">RET</kbd> <var class="var">exp</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Define <var class="var">abbrev</var> as a mode-specific abbrev expanding into <var class="var">exp</var>.
</p>
</dd>
<dt><kbd class="kbd">M-x kill-all-abbrevs</kbd></dt>
<dd><p>Discard all abbrev definitions, leaving a blank slate.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-a-g"></a>
<a class="index-entry-id" id="index-add_002dglobal_002dabbrev"></a>
<p>The usual way to define an abbrev is to enter the text you want the
abbrev to expand to, position point after it, and type <kbd class="kbd">C-x a g</kbd>
(<code class="code">add-global-abbrev</code>).  This reads the abbrev itself using the
minibuffer, and then defines it as an abbrev for one or more words before
point.  Use a numeric argument to say how many words before point should be
taken as the expansion.  For example, to define the abbrev &#8216;<samp class="samp">foo</samp>&#8217; as
mentioned above, insert the text &#8216;<samp class="samp">find outer otter</samp>&#8217; and then type
<kbd class="kbd">C-u 3 C-x a g f o o <kbd class="key">RET</kbd></kbd>.
</p>
<p>If you&#8217;re using <code class="code">transient-mark-mode</code> (which is the default),
the active region will be used as the expansion of the abbrev being
defined.  If not, an argument of zero to <kbd class="kbd">C-x a g</kbd> means to use
the contents of the region.
</p>
<a class="index-entry-id" id="index-C_002dx-a-l"></a>
<a class="index-entry-id" id="index-add_002dmode_002dabbrev"></a>
<p>The command <kbd class="kbd">C-x a l</kbd> (<code class="code">add-mode-abbrev</code>) is similar, but
defines a mode-specific abbrev for the current major mode.  The
arguments work the same as for <kbd class="kbd">C-x a g</kbd>.
</p>
<a class="index-entry-id" id="index-C_002dx-a-i-g"></a>
<a class="index-entry-id" id="index-inverse_002dadd_002dglobal_002dabbrev"></a>
<a class="index-entry-id" id="index-C_002dx-a-i-l"></a>
<a class="index-entry-id" id="index-inverse_002dadd_002dmode_002dabbrev"></a>
<p><kbd class="kbd">C-x a i g</kbd> (<code class="code">inverse-add-global-abbrev</code>) and <kbd class="kbd">C-x a i
l</kbd> (<code class="code">inverse-add-mode-abbrev</code>) perform the opposite task: if the
abbrev text is already in the buffer, you use these commands to define
an abbrev by specifying the expansion in the minibuffer.  These
commands will expand the abbrev text used for the definition.
</p>
<a class="index-entry-id" id="index-define_002dmode_002dabbrev"></a>
<a class="index-entry-id" id="index-define_002dglobal_002dabbrev"></a>
<p>You can define an abbrev without inserting either the abbrev or its
expansion in the buffer using the command <code class="code">define-global-abbrev</code>.
It reads two arguments&#8212;the abbrev, and its expansion.  The command
<code class="code">define-mode-abbrev</code> does likewise for a mode-specific abbrev.
</p>
<p>To change the definition of an abbrev, just make a new definition.
When an abbrev has a prior definition, the abbrev definition commands
ask for confirmation before replacing it.
</p>
<a class="index-entry-id" id="index-kill_002dall_002dabbrevs"></a>
<p>To remove an abbrev definition, give a negative argument to the
abbrev definition command: <kbd class="kbd">C-u - C-x a g</kbd> or <kbd class="kbd">C-u - C-x a l</kbd>.
The former removes a global definition, while the latter removes a
mode-specific definition.  <kbd class="kbd">M-x kill-all-abbrevs</kbd> removes all
abbrev definitions, both global and local.
</p>
</div>
<div class="section-level-extent" id="Expanding-Abbrevs">
<h3 class="section" id="Controlling-Abbrev-Expansion">30.3 Controlling Abbrev Expansion</h3>

<p>When Abbrev mode is enabled, an abbrev expands whenever it is
present in the buffer just before point and you type a self-inserting
whitespace or punctuation character (<kbd class="key">SPC</kbd>, comma, etc.).  More
precisely, any character that is not a word constituent expands an
abbrev, and any word-constituent character can be part of an abbrev.
The most common way to use an abbrev is to insert it and then insert a
punctuation or whitespace character to expand it.
</p>
<a class="index-entry-id" id="index-abbrev_002dall_002dcaps"></a>
<p>Abbrev expansion preserves case: &#8216;<samp class="samp">foo</samp>&#8217; expands to &#8216;<samp class="samp">find
outer otter</samp>&#8217;, and &#8216;<samp class="samp">Foo</samp>&#8217; to &#8216;<samp class="samp">Find outer otter</samp>&#8217;.  &#8216;<samp class="samp">FOO</samp>&#8217;
expands to &#8216;<samp class="samp">Find Outer Otter</samp>&#8217; by default, but if you change the
variable <code class="code">abbrev-all-caps</code> to a non-<code class="code">nil</code> value, it expands
to &#8216;<samp class="samp">FIND OUTER OTTER</samp>&#8217;.
</p>
<p>These commands are used to control abbrev expansion:
</p>
<dl class="table">
<dt><kbd class="kbd">M-'</kbd></dt>
<dd><p>Separate a prefix from a following abbrev to be expanded
(<code class="code">abbrev-prefix-mark</code>).
</p>
</dd>
<dt><a id="index-expand_002dabbrev"></a><kbd class="kbd">C-x a e</kbd></dt>
<dd><p>Expand the abbrev before point (<code class="code">expand-abbrev</code>).
This is effective even when Abbrev mode is not enabled.
</p>
</dd>
<dt><a id="index-unexpand_002dabbrev"></a><kbd class="kbd">M-x unexpand-abbrev</kbd></dt>
<dd><p>Undo the expansion of the last expanded abbrev.
</p>
</dd>
<dt><kbd class="kbd">M-x expand-region-abbrevs</kbd></dt>
<dd><p>Expand some or all abbrevs found in the region.
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002d_0027"></a>
<a class="index-entry-id" id="index-abbrev_002dprefix_002dmark"></a>
<p>You may wish to expand an abbrev and attach a prefix to the expansion;
for example, if &#8216;<samp class="samp">cnst</samp>&#8217; expands into &#8216;<samp class="samp">construction</samp>&#8217;, you might want
to use it to enter &#8216;<samp class="samp">reconstruction</samp>&#8217;.  It does not work to type
<kbd class="kbd">recnst</kbd>, because that is not necessarily a defined abbrev.  What
you can do is use the command <kbd class="kbd">M-'</kbd> (<code class="code">abbrev-prefix-mark</code>) in
between the prefix &#8216;<samp class="samp">re</samp>&#8217; and the abbrev &#8216;<samp class="samp">cnst</samp>&#8217;.  First, insert
&#8216;<samp class="samp">re</samp>&#8217;.  Then type <kbd class="kbd">M-'</kbd>; this inserts a hyphen in the buffer to
indicate that it has done its work.  Then insert the abbrev &#8216;<samp class="samp">cnst</samp>&#8217;;
the buffer now contains &#8216;<samp class="samp">re-cnst</samp>&#8217;.  Now insert a non-word character
to expand the abbrev &#8216;<samp class="samp">cnst</samp>&#8217; into &#8216;<samp class="samp">construction</samp>&#8217;.  This
expansion step also deletes the hyphen that indicated <kbd class="kbd">M-'</kbd> had been
used.  The result is the desired &#8216;<samp class="samp">reconstruction</samp>&#8217;.
</p>
<p>If you actually want the text of the abbrev in the buffer, rather than
its expansion, you can accomplish this by inserting the following
punctuation with <kbd class="kbd">C-q</kbd>.  Thus, <kbd class="kbd">foo C-q ,</kbd> leaves &#8216;<samp class="samp">foo,</samp>&#8217; in
the buffer, not expanding it.
</p>
<p>If you expand an abbrev by mistake, you can undo the expansion by
typing <kbd class="kbd">C-/</kbd> (<code class="code">undo</code>).  See <a class="xref" href="Fixit.xhtml#Undo">Undo</a>.  This undoes the
insertion of the abbrev expansion and brings back the abbrev text.  If
the result you want is the terminating non-word character plus the
unexpanded abbrev, you must reinsert the terminating character,
quoting it with <kbd class="kbd">C-q</kbd>.  You can also use the command <kbd class="kbd">M-x
unexpand-abbrev</kbd> to cancel the last expansion without deleting the
terminating character.
</p>
<a class="index-entry-id" id="index-expand_002dregion_002dabbrevs"></a>
<p><kbd class="kbd">M-x expand-region-abbrevs</kbd> searches through the region for defined
abbrevs, and for each one found offers to replace it with its expansion.
This command is useful if you have typed in text using abbrevs but forgot
to turn on Abbrev mode first.  It may also be useful together with a
special set of abbrev definitions for making several global replacements at
once.  This command is effective even if Abbrev mode is not enabled.
</p>
<p>The function <code class="code">expand-abbrev</code> performs the expansion by calling
the function that <code class="code">abbrev-expand-function</code> specifies.  By
changing this function you can make arbitrary changes to
the abbrev expansion.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Expansion.html#Abbrev-Expansion">Abbrev Expansion</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>.
</p>
</div>
<div class="section-level-extent" id="Abbrevs-Suggestions">
<h3 class="section" id="Abbrevs-Suggestions-1">30.4 Abbrevs Suggestions</h3>

<p>You can get abbrev suggestions when you manually type text for which
there is currently an active defined abbrev.  For example, if there is
an abbrev &#8216;<samp class="samp">foo</samp>&#8217; with the expansion &#8216;<samp class="samp">find outer otter</samp>&#8217;, and
you manually type &#8216;<samp class="samp">find outer otter</samp>&#8217;, Emacs can notice this and
show a hint in the echo area when you have stopped typing.
</p>
<a class="index-entry-id" id="index-abbrev_002dsuggest"></a>
<p>To enable the abbrev suggestion feature, customize the option
<code class="code">abbrev-suggest</code> to a non-<code class="code">nil</code> value.
</p>
<a class="index-entry-id" id="index-abbrev_002dsuggest_002dhint_002dthreshold"></a>
<p>The variable <code class="code">abbrev-suggest-hint-threshold</code> controls when to
suggest an abbrev to the user.  This variable defines the minimum
savings (in terms of the number of characters the user will not have
to type) required for Emacs to suggest using an abbrev.  For example,
if the user types &#8216;<samp class="samp">foo bar</samp>&#8217; (seven characters) and there is an
abbrev &#8216;<samp class="samp">fubar</samp>&#8217; defined (five characters), the user will not get
any suggestion unless the threshold is set to the number 2 or lower.
With the default value 3, the user would not get any suggestion in
this example, because the savings in using the abbrev are below
the threshold.  If you always want to get abbrev suggestions, set this
variable&#8217;s value to zero.
</p>
<a class="index-entry-id" id="index-abbrev_002dsuggest_002dshow_002dreport"></a>
<p>The command <code class="code">abbrev-suggest-show-report</code> displays a buffer with
all the abbrev suggestions shown during the current editing session.
This can be useful if you get several abbrev suggestions and don&#8217;t
remember them all.
</p>
</div>
<div class="section-level-extent" id="Editing-Abbrevs">
<h3 class="section" id="Examining-and-Editing-Abbrevs">30.5 Examining and Editing Abbrevs</h3>

<dl class="table">
<dt><kbd class="kbd">M-x list-abbrevs</kbd></dt>
<dd><p>Display a list of all abbrev definitions.  With a numeric argument, list
only local abbrevs.
</p>
</dd>
<dt><kbd class="kbd">M-x edit-abbrevs</kbd></dt>
<dd><p>Edit a list of abbrevs; you can add, alter or remove definitions.
</p></dd>
</dl>

<a class="index-entry-id" id="index-list_002dabbrevs"></a>
<p>The output from <kbd class="kbd">M-x list-abbrevs</kbd> looks like this:
</p>
<div class="example">
<pre class="example-preformatted"><var class="var">various other tables...</var>
(python-mode-skeleton-abbrev-table)
&quot;class&quot; (sys)	    0 &quot;&quot; python-skeleton-class
(lisp-mode-abbrev-table)
&quot;ks&quot;          0    &quot;keymap-set&quot;
(global-abbrev-table)
&quot;dfn&quot;         0    &quot;definition&quot;
</pre></div>

<p>(Some blank lines of no semantic significance, and some other abbrev
tables, have been omitted.)
</p>
<p>A line containing a name in parentheses is the header for abbrevs in a
particular abbrev table; <code class="code">global-abbrev-table</code> contains all the global
abbrevs, and the other abbrev tables that are named after major modes
contain the mode-specific abbrevs.
</p>
<p>Within each abbrev table, each nonblank line defines one abbrev.  The
word at the beginning of the line is the abbrev.  The number that
follows is the number of times the abbrev has been expanded.  Emacs
keeps track of this to help you see which abbrevs you actually use, so
that you can eliminate those that you don&#8217;t use often.  The string at
the end of the line is the expansion.
</p>
<p>Some abbrevs are marked with &#8216;<samp class="samp">(sys)</samp>&#8217;.  These <em class="dfn">system
abbrevs</em> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrevs.html#Abbrevs">Abbrevs</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>)
are pre-defined by various modes, and are not saved to your abbrev
file.  To disable a system abbrev, define an abbrev of the same name
that expands to itself, and save it to your abbrev file.  The system
abbrevs have an associated hook function, which is called to perform
the abbrev expansion; the name of that function follows the abbrev
expansion in the buffer shown by <code class="code">list-abbrevs</code>.
</p>
<a class="index-entry-id" id="index-edit_002dabbrevs"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dc-_0028Edit-Abbrevs_0029"></a>
<p><kbd class="kbd">M-x edit-abbrevs</kbd> allows you to add, change or kill abbrev
definitions by editing a list of them in an Emacs buffer.  The list has
the same format described above.  The buffer of abbrevs is called
<samp class="file">*Abbrevs*</samp>, and is in Edit-Abbrevs mode.  Type <kbd class="kbd">C-c C-c</kbd> in
this buffer to install the abbrev definitions as specified in the
buffer&#8212;and delete any abbrev definitions not listed.
</p>
<p>The command <code class="code">edit-abbrevs</code> is actually the same as
<code class="code">list-abbrevs</code> except that it selects the buffer <samp class="file">*Abbrevs*</samp>
whereas <code class="code">list-abbrevs</code> merely displays it in another window.
</p>
</div>
<div class="section-level-extent" id="Saving-Abbrevs">
<h3 class="section" id="Saving-Abbrevs-1">30.6 Saving Abbrevs</h3>

<p>These commands allow you to keep abbrev definitions between editing
sessions.
</p>
<dl class="table">
<dt><kbd class="kbd">M-x write-abbrev-file <kbd class="key">RET</kbd> <var class="var">file</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Write a file <var class="var">file</var> describing all defined abbrevs.
</p>
</dd>
<dt><kbd class="kbd">M-x read-abbrev-file <kbd class="key">RET</kbd> <var class="var">file</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Read the file <var class="var">file</var> and define abbrevs as specified therein.
</p>
</dd>
<dt><kbd class="kbd">M-x define-abbrevs</kbd></dt>
<dd><p>Define abbrevs from definitions in current buffer.
</p>
</dd>
<dt><kbd class="kbd">M-x insert-abbrevs</kbd></dt>
<dd><p>Insert all abbrevs and their expansions into current buffer.
</p></dd>
</dl>

<a class="index-entry-id" id="index-write_002dabbrev_002dfile"></a>
<p><kbd class="kbd">M-x write-abbrev-file</kbd> reads a file name using the minibuffer and
then writes a description of all current abbrev definitions into that
file.  This is used to save abbrev definitions for use in a later
session.  The text stored in the file is a series of Lisp expressions
that, when executed, define the same abbrevs that you currently have.
</p>
<a class="index-entry-id" id="index-read_002dabbrev_002dfile"></a>
<a class="index-entry-id" id="index-quietly_002dread_002dabbrev_002dfile"></a>
<a class="index-entry-id" id="index-abbrev_002dfile_002dname"></a>
<a class="index-entry-id" id="index-abbrev-file"></a>
<p><kbd class="kbd">M-x read-abbrev-file</kbd> reads a file name using the minibuffer
and then reads the file, defining abbrevs according to the contents of
the file.  The function <code class="code">quietly-read-abbrev-file</code> is similar
except that it does not display a message in the echo area; you cannot
invoke it interactively, and it is used primarily in your init file
(see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>).  If either of these functions is called with
<code class="code">nil</code> as the argument, it uses the file given by the variable
<code class="code">abbrev-file-name</code>, which is <samp class="file">~/.emacs.d/abbrev_defs</samp> by
default.  This is your standard abbrev definition file, and Emacs
loads abbrevs from it automatically when it starts up.  (As an
exception, Emacs does not load the abbrev file when it is started in
batch mode.  See <a class="xref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>, for a description of batch mode.)
</p>
<a class="index-entry-id" id="index-save_002dabbrevs"></a>
<p>Emacs will offer to save abbrevs automatically if you have changed
any of them, whenever it offers to save all files (for <kbd class="kbd">C-x s</kbd> or
<kbd class="kbd">C-x C-c</kbd>).  It saves them in the file specified by
<code class="code">abbrev-file-name</code>.  This feature can be inhibited by setting the
variable <code class="code">save-abbrevs</code> to <code class="code">nil</code>; setting it to
<code class="code">silently</code> will save the abbrevs automatically without asking.
</p>
<a class="index-entry-id" id="index-insert_002dabbrevs"></a>
<a class="index-entry-id" id="index-define_002dabbrevs"></a>
<p>The commands <kbd class="kbd">M-x insert-abbrevs</kbd> and <kbd class="kbd">M-x define-abbrevs</kbd> are
similar to the previous commands but work on text in an Emacs buffer.
<kbd class="kbd">M-x insert-abbrevs</kbd> inserts text into the current buffer after point,
describing all current abbrev definitions; <kbd class="kbd">M-x define-abbrevs</kbd> parses
the entire current buffer and defines abbrevs accordingly.
</p>
</div>
<div class="section-level-extent" id="Dynamic-Abbrevs">
<h3 class="section" id="Dynamic-Abbrev-Expansion">30.7 Dynamic Abbrev Expansion</h3>

<p>The abbrev facility described above operates automatically as you
insert text, but all abbrevs must be defined explicitly.  By contrast,
<em class="dfn">dynamic abbrevs</em> allow the meanings of abbreviations to be
determined automatically from the contents of the buffer, but dynamic
abbrev expansion happens only when you request it explicitly.
</p>
<a class="index-entry-id" id="index-M_002d_002f"></a>
<a class="index-entry-id" id="index-C_002dM_002d_002f"></a>
<a class="index-entry-id" id="index-dabbrev_002dexpand"></a>
<a class="index-entry-id" id="index-dabbrev_002dcompletion"></a>
<dl class="table">
<dt><kbd class="kbd">M-/</kbd></dt>
<dd><p>Expand the word in the buffer before point as a <em class="dfn">dynamic abbrev</em>,
by searching for words starting with that abbreviation
(<code class="code">dabbrev-expand</code>).
</p>
</dd>
<dt><kbd class="kbd">C-M-/</kbd></dt>
<dd><p>Complete the word before point as a dynamic abbrev
(<code class="code">dabbrev-completion</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-dabbrev_002dlimit"></a>
<p>For example, if the buffer contains &#8216;<samp class="samp">does this follow </samp>&#8217; and you
type <kbd class="kbd">f o M-/</kbd>, the effect is to insert &#8216;<samp class="samp">follow</samp>&#8217; because that
is the last word in the buffer that starts with &#8216;<samp class="samp">fo</samp>&#8217;.  A numeric
argument to <kbd class="kbd">M-/</kbd> says to take the second, third, etc. distinct
expansion found looking backward from point.  Repeating <kbd class="kbd">M-/</kbd>
searches for an alternative expansion by looking farther back.  After
scanning all the text before point, it searches the text after point.
The variable <code class="code">dabbrev-limit</code>, if non-<code class="code">nil</code>, specifies how far
away in the buffer to search for an expansion.
</p>
<a class="index-entry-id" id="index-dabbrev_002dcheck_002dall_002dbuffers"></a>
<a class="index-entry-id" id="index-dabbrev_002dcheck_002dother_002dbuffers"></a>
<a class="index-entry-id" id="index-dabbrev_002dignored_002dbuffer_002dmodes"></a>
<p>After scanning the current buffer, <kbd class="kbd">M-/</kbd> normally searches other
buffers.  The variables <code class="code">dabbrev-check-all-buffers</code> and
<code class="code">dabbrev-check-other-buffers</code> can be used to determine which
other buffers, if any, are searched.  Buffers that have major modes
derived from any of the modes in <code class="code">dabbrev-ignored-buffer-modes</code>
are ignored.
</p>
<a class="index-entry-id" id="index-dabbrev_002dignored_002dbuffer_002dnames"></a>
<a class="index-entry-id" id="index-dabbrev_002dignored_002dbuffer_002dregexps"></a>
<p>For finer control over which buffers to scan, customize the
variables <code class="code">dabbrev-ignored-buffer-names</code> and
<code class="code">dabbrev-ignored-buffer-regexps</code>.  The value of the former is a
list of buffer names to skip.  The value of the latter is a list of
regular expressions; if a buffer&#8217;s name matches any of these regular
expressions, dynamic abbrev expansion skips that buffer.
</p>
<p>A negative argument to <kbd class="kbd">M-/</kbd>, as in <kbd class="kbd">C-u - M-/</kbd>, says to
search first for expansions after point, then other buffers, and
consider expansions before point only as a last resort.  If you repeat
the <kbd class="kbd">M-/</kbd> to look for another expansion, do not specify an
argument.  Repeating <kbd class="kbd">M-/</kbd> cycles through all the expansions after
point and then the expansions before point.
</p>
<p>After you have expanded a dynamic abbrev, you can copy additional
words that follow the expansion in its original context.  Simply type
<kbd class="kbd"><kbd class="key">SPC</kbd> M-/</kbd> for each additional word you want to copy.  The
spacing and punctuation between words is copied along with the words.
</p>
<p>You can control the way <kbd class="kbd">M-/</kbd> determines the word to expand and
how to expand it, see <a class="ref" href="#Dabbrev-Customization">Customizing Dynamic Abbreviation</a>.
</p>
<p>The command <kbd class="kbd">C-M-/</kbd> (<code class="code">dabbrev-completion</code>) performs
completion of a dynamic abbrev.  Instead of trying the possible
expansions one by one, it finds all of them, then inserts the text
that they have in common.  If they have nothing in common, <kbd class="kbd">C-M-/</kbd>
displays a list of completions, from which you can select a choice in
the usual manner.  See <a class="xref" href="Minibuffer.xhtml#Completion">Completion</a>.
</p>
<p>Dynamic abbrev expansion is completely independent of Abbrev mode; the
expansion of a word with <kbd class="kbd">M-/</kbd> is completely independent of whether
it has a definition as an ordinary abbrev.
</p>
</div>
<div class="section-level-extent" id="Dabbrev-Customization">
<h3 class="section" id="Customizing-Dynamic-Abbreviation">30.8 Customizing Dynamic Abbreviation</h3>

<p>Normally, dynamic abbrev expansion ignores case when searching for
expansions.  That is, the expansion need not agree in case with the word
you are expanding.
</p>
<a class="index-entry-id" id="index-dabbrev_002dcase_002dfold_002dsearch"></a>
<p>This feature is controlled by the variable
<code class="code">dabbrev-case-fold-search</code>.  If it is <code class="code">t</code>, case is ignored
in this search; if it is <code class="code">nil</code>, the word and the expansion must
match in case.  If the value is <code class="code">case-fold-search</code> (the default),
then the variable <code class="code">case-fold-search</code> controls whether to ignore
case while searching for expansions (see <a class="pxref" href="Search.xhtml#Lax-Search">Lax Matching During Searching</a>).
</p>
<p>Normally, dynamic abbrev expansion preserves the case pattern
<em class="emph">of the dynamic abbrev you are expanding</em>, by converting the
expansion to that case pattern.
</p>
<a class="index-entry-id" id="index-dabbrev_002dcase_002dreplace"></a>
<p>The variable <code class="code">dabbrev-case-replace</code> controls whether to
preserve the case pattern of the dynamic abbrev.  If it is <code class="code">t</code>,
the dynamic abbrev&#8217;s case pattern is preserved in most cases; if it is
<code class="code">nil</code>, the expansion is always copied verbatim.  If the value is
<code class="code">case-replace</code> (the default), then the variable
<code class="code">case-replace</code> controls whether to copy the expansion verbatim
(see <a class="pxref" href="Search.xhtml#Replacement-and-Lax-Matches">Replace Commands and Lax Matches</a>).
</p>
<p>However, if the expansion contains a complex mixed case pattern, and
the dynamic abbrev matches this pattern as far as it goes, then the
expansion is always copied verbatim, regardless of those variables.
Thus, for example, if the buffer contains
<code class="code">variableWithSillyCasePattern</code>, and you type <kbd class="kbd">v a M-/</kbd>, it
copies the expansion verbatim including its case pattern.
</p>
<a class="index-entry-id" id="index-dabbrev_002dabbrev_002dchar_002dregexp"></a>
<p>The variable <code class="code">dabbrev-abbrev-char-regexp</code>, if non-<code class="code">nil</code>,
controls which characters are considered part of a word, for dynamic
expansion purposes.  The regular expression must match just one
character, never two or more.  The same regular expression also
determines which characters are part of an expansion.  The (default)
value <code class="code">nil</code> has a special meaning: dynamic abbrevs (i.e. the
word at point) are made of word characters, but their expansions are
looked for as sequences of word and symbol characters.  This is
generally appropriate for expanding symbols in a program source and
also for human-readable text in many languages, but may not be what
you want in a text buffer that includes unusual punctuation characters;
in that case, the value <code class="code">&quot;\\sw&quot;</code> might produce better results.
</p>
<a class="index-entry-id" id="index-dabbrev_002dabbrev_002dskip_002dleading_002dregexp"></a>
<p>In shell scripts and makefiles, a variable name is sometimes prefixed
with &#8216;<samp class="samp">$</samp>&#8217; and sometimes not.  Major modes for this kind of text can
customize dynamic abbrev expansion to handle optional prefixes by setting
the variable <code class="code">dabbrev-abbrev-skip-leading-regexp</code>.  Its value
should be a regular expression that matches the optional prefix that
dynamic abbrev expression should ignore.  The default is <code class="code">nil</code>,
which means no characters should be skipped.
</p></div>
</div>



</body>
</html>
