<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>29 Maintaining Large Programs (GNU Emacs Manual)</title>

<meta name="description" content="29 Maintaining Large Programs (GNU Emacs Manual)"/>
<meta name="keywords" content="29 Maintaining Large Programs (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Abbrevs.xhtml#Abbrevs" rel="next" title="30 Abbrevs"/>
<link href="Building.xhtml#Building" rel="prev" title="28 Compiling and Testing Programs"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
ul.mark-minus {list-style-type: "\2212"}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Maintaining">

<h2 class="chapter" id="Maintaining-Large-Programs">29 Maintaining Large Programs</h2>
<a class="index-entry-id" id="index-maintaining-large-programs"></a>
<a class="index-entry-id" id="index-large-programming-projects_002c-maintaining"></a>

<p>This chapter describes Emacs features for maintaining medium- to
large-size programs and packages.  These features include:
</p>
<ul class="itemize mark-minus">
<li>Unified interface to Support for Version Control Systems
(<abbr class="acronym">VCS</abbr>) that record the history of changes to source files.

</li><li>Commands for handling programming projects.

</li><li>A specialized mode for maintaining <samp class="file">ChangeLog</samp> files that provide
a chronological log of program changes.

</li><li><abbr class="acronym">Xref</abbr>, a set of commands for displaying definitions of
symbols (a.k.a. &#8220;identifiers&#8221;) and their references.

</li><li><abbr class="acronym">EDE</abbr>, the Emacs&#8217;s own IDE.

</li><li>A mode for merging changes to program sources made on separate
branches of development.

</li><li>A minor-mode for highlighting bug references and visiting the
referenced bug reports in their issue tracker.
</li></ul>

<p>If you are maintaining a large Lisp program, then in addition to the
features described here, you may find the Emacs Lisp Regression
Testing (<abbr class="acronym">ERT</abbr>) library useful (see <a href="https://www.gnu.org/software/emacs/manual/html_node/ert/index.html#Top">ERT</a> in <cite class="cite">Emacs
Lisp Regression Testing</cite>).
</p>

<div class="section-level-extent" id="Version-Control">
<h3 class="section" id="Version-Control-1">29.1 Version Control</h3>
<a class="index-entry-id" id="index-version-control"></a>

<p>A <em class="dfn">version control system</em> is a program that can record multiple
versions of a source file, storing information such as the creation
time of each version, who made it, and a description of what was
changed.
</p>
<a class="index-entry-id" id="index-VC"></a>
<p>The Emacs version control interface is called <em class="dfn">VC</em>.  VC
commands work with several different version control systems;
currently, it supports Bazaar, CVS, Git, Mercurial, Monotone, RCS,
SRC, SCCS/CSSC, and Subversion.  Of these, the GNU project distributes
CVS, RCS, and Bazaar.
</p>
<p>VC is enabled automatically whenever you visit a file governed by a
version control system.  To disable VC entirely, set the customizable
variable <code class="code">vc-handled-backends</code> to <code class="code">nil</code>
(see <a class="pxref" href="#Customizing-VC">Customizing VC</a>).
</p>
<a class="index-entry-id" id="index-vc_002drefresh_002dstate"></a>
<a class="index-entry-id" id="index-vc_002dstate_002drefresh"></a>
<p>To update the VC state information for the file visited in the
current buffer, use the command <code class="code">vc-refresh-state</code>.  This command
is useful when you perform version control commands outside Emacs
(e.g., from the shell prompt), or if you put the buffer&#8217;s file under a
different version control system, or remove it from version control
entirely.
</p>
<a class="index-entry-id" id="index-VC-commands_002c-in-Dired-buffers"></a>
<a class="index-entry-id" id="index-filesets_002c-VC_002c-in-Dired-buffers"></a>
<p>VC is also enabled automatically in Dired buffers (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>)
showing directories whose files are controlled by a VCS.  All VC
commands described in this section can be invoked from any Dired
buffer showing a directory with VC-controlled files; any files that
are marked in a Dired buffer (see <a class="pxref" href="Dired.xhtml#Marks-vs-Flags">Dired Marks vs. Flags</a>) are considered
to belong to the current fileset, and VC commands operate on the files
in this fileset.  This allows you to construct VC filesets including
any files you want, regardless of their VC state.  (If no files are
marked when a VC command is invoked from a Dired buffer, the file
shown on the current line in the buffer is considered the only file in
the fileset.)
</p>

<div class="subsection-level-extent" id="Introduction-to-VC">
<h4 class="subsection" id="Introduction-to-Version-Control">29.1.1 Introduction to Version Control</h4>

<p>VC allows you to use a version control system from within Emacs,
integrating the version control operations smoothly with editing.  It
provides a uniform interface for common operations in many version
control operations.
</p>
<p>Some uncommon or intricate version control operations, such as
altering repository settings, are not supported in VC.  You should
perform such tasks outside VC, e.g., via the command line.
</p>
<p>This section provides a general overview of version control, and
describes the version control systems that VC supports.  You can skip
this section if you are already familiar with the version control system
you want to use.
</p>

<div class="subsubsection-level-extent" id="Why-Version-Control_003f">
<h4 class="subsubsection" id="Understanding-the-Problems-it-Addresses">29.1.1.1 Understanding the Problems it Addresses</h4>

<p>Version control systems provide you with three important
capabilities:
</p>
<ul class="itemize mark-bullet">
<li><em class="dfn">Reversibility</em>: the ability to back up to a previous state if you
discover that some modification you did was a mistake or a bad idea.

</li><li><em class="dfn">Concurrency</em>: the ability to have many people modifying the same
collection of files knowing that conflicting modifications can be
detected and resolved.

</li><li><em class="dfn">History</em>: the ability to attach historical data to your data,
such as explanatory comments about the intention behind each change.
Even for a programmer working solo, change histories are an important
aid to memory; for a multi-person project, they are a vitally
important form of communication among developers.
</li></ul>

</div>
<div class="subsubsection-level-extent" id="Version-Control-Systems">
<h4 class="subsubsection" id="Supported-Version-Control-Systems">29.1.1.2 Supported Version Control Systems</h4>

<a class="index-entry-id" id="index-back-end-_0028version-control_0029"></a>
<p>VC currently works with many different version control systems,
which it refers to as <em class="dfn">back ends</em>:
</p>
<ul class="itemize mark-bullet">
<li><a class="index-entry-id" id="index-git"></a>
Git is a decentralized version control system originally invented by
Linus Torvalds to support development of Linux (his kernel).  VC
supports many common Git operations, but others, such as repository
syncing, must be done from the command line.

</li><li><a class="index-entry-id" id="index-CVS"></a>
CVS is the free version control system that was, until circa 2008,
used by the majority of free software projects.  Since then, it has
been superseded by newer systems.  CVS allows concurrent multi-user
development either locally or over the network.  Unlike newer systems,
it lacks support for atomic commits and file moving/renaming.  VC
supports all basic editing operations under CVS.

</li><li><a class="index-entry-id" id="index-SVN"></a>
<a class="index-entry-id" id="index-Subversion"></a>
Subversion (svn) is a free version control system designed to be
similar to CVS but without its problems (e.g., it supports atomic
commits of filesets, and versioning of directories, symbolic links,
meta-data, renames, copies, and deletes).

</li><li><a class="index-entry-id" id="index-SCCS"></a>
SCCS was the first version control system ever built, and was long ago
superseded by more advanced ones.  VC compensates for certain features
missing in SCCS (e.g., tag names for releases) by implementing them
itself.  Other VC features, such as multiple branches, are simply
unavailable.  Since SCCS is non-free, we recommend avoiding it.

</li><li><a class="index-entry-id" id="index-CSSC"></a>
CSSC is a free replacement for SCCS.  You should use CSSC only if, for
some reason, you cannot use a more recent and better-designed version
control system.

</li><li><a class="index-entry-id" id="index-RCS"></a>
RCS is the free version control system around which VC was initially
built.  It is relatively primitive: it cannot be used over the
network, and works at the level of individual files.  Almost
everything you can do with RCS can be done through VC.

</li><li><a class="index-entry-id" id="index-hg"></a>
<a class="index-entry-id" id="index-Mercurial"></a>
Mercurial (hg) is a decentralized version control system broadly
resembling Git.  VC supports most Mercurial commands, with the
exception of repository sync operations.

</li><li><a class="index-entry-id" id="index-bzr"></a>
<a class="index-entry-id" id="index-Bazaar"></a>
Bazaar (bzr) is a decentralized version control system that supports
both repository-based and decentralized versioning.  VC supports most
basic editing operations under Bazaar.

</li><li><a class="index-entry-id" id="index-SRC"></a>
<a class="index-entry-id" id="index-src"></a>
SRC (src) is RCS, reloaded&#8212;a specialized version-control system
designed for single-file projects worked on by only one person.  It
allows multiple files with independent version-control histories to
exist in one directory, and is thus particularly well suited for
maintaining small documents, scripts, and dotfiles.  While it uses RCS
for revision storage, it presents a modern user interface featuring
lockless operation and integer sequential version numbers.  VC
supports almost all SRC operations.
</li></ul>

</div>
<div class="subsubsection-level-extent" id="VCS-Concepts">
<h4 class="subsubsection" id="Concepts-of-Version-Control">29.1.1.3 Concepts of Version Control</h4>

<a class="index-entry-id" id="index-repository"></a>
<a class="index-entry-id" id="index-registered-file"></a>
<p>When a file is under version control, we say that it is
<em class="dfn">registered</em> in the version control system.  The system has a
<em class="dfn">repository</em> which stores both the file&#8217;s present state and its
change history&#8212;enough to reconstruct the current version or any
earlier version.  The repository also contains other information, such
as <em class="dfn">log entries</em> that describe the changes made to each file.
</p>
<a class="index-entry-id" id="index-work-file"></a>
<a class="index-entry-id" id="index-checking-out-files"></a>
<p>The copy of a version-controlled file that you actually edit is
called the <em class="dfn">work file</em>.  You can change each work file as you
would an ordinary file.  After you are done with a set of changes, you
may <em class="dfn">commit</em> (or <em class="dfn">check in</em>) the changes; this records the
changes in the repository, along with a descriptive log entry.
</p>
<a class="index-entry-id" id="index-working-tree"></a>
<p>A directory tree of work files is called a <em class="dfn">working tree</em>.
</p>
<a class="index-entry-id" id="index-revision"></a>
<a class="index-entry-id" id="index-revision-ID"></a>
<p>Each commit creates a new <em class="dfn">revision</em> in the repository.  The
version control system keeps track of all past revisions and the
changes that were made in each revision.  Each revision is named by a
<em class="dfn">revision ID</em>, whose format depends on the version control system;
in the simplest case, it is just an integer.
</p>
<p>To go beyond these basic concepts, you will need to understand three
aspects in which version control systems differ.  As explained in the
next three sections, they can be lock-based or merge-based; file-based
or changeset-based; and centralized or decentralized.  VC handles all
these modes of operation, but it cannot hide the differences.
</p>
</div>
<div class="subsubsection-level-extent" id="VCS-Merging">
<h4 class="subsubsection" id="Merge_002dbased-vs-Lock_002dbased-Version-Control">29.1.1.4 Merge-based vs Lock-based Version Control</h4>

<p>A version control system typically has some mechanism to coordinate
between users who want to change the same file.  There are two ways to
do this: merging and locking.
</p>
<a class="index-entry-id" id="index-merging_002dbased-version"></a>
<p>In a version control system that uses merging, each user may modify
a work file at any time.  The system lets you <em class="dfn">merge</em> your work
file, which may contain changes that have not been committed, with the
latest changes that others have committed.
</p>
<a class="index-entry-id" id="index-locking_002dbased-version"></a>
<p>Older version control systems use a <em class="dfn">locking</em> scheme instead.
Here, work files are normally read-only.  To edit a file, you ask the
version control system to make it writable for you by <em class="dfn">locking</em>
it; only one user can lock a given file at any given time.  This
procedure is analogous to, but different from, the locking that Emacs
uses to detect simultaneous editing of ordinary files
(see <a class="pxref" href="Files.xhtml#Interlocking">Protection against Simultaneous Editing</a>).  When you commit your changes, that unlocks
the file, and the work file becomes read-only again.  Other users may
then lock the file to make their own changes.
</p>
<p>Both locking and merging systems can have problems when multiple
users try to modify the same file at the same time.  Locking systems
have <em class="dfn">lock conflicts</em>; a user may try to check a file out and be
unable to because it is locked.  In merging systems, <em class="dfn">merge
conflicts</em> happen when you commit a change to a file that conflicts
with a change committed by someone else after your checkout.  Both
kinds of conflict have to be resolved by human judgment and
communication.  Experience has shown that merging is superior to
locking, both in convenience to developers and in minimizing the
number and severity of conflicts that actually occur.
</p>
<p>SCCS always uses locking.  RCS is lock-based by default but can be
told to operate in a merging style.  CVS and Subversion are
merge-based by default but can be told to operate in a locking mode.
Decentralized version control systems, such as Git and Mercurial, are
exclusively merging-based.
</p>
<p>VC mode supports both locking and merging version control.  The
terms &#8220;commit&#8221; and &#8220;update&#8221; are used in newer version control
systems; older lock-based systems use the terms &#8220;check in&#8221; and
&#8220;check out&#8221;.  VC hides the differences between them as much as
possible.
</p>
</div>
<div class="subsubsection-level-extent" id="VCS-Changesets">
<h4 class="subsubsection" id="Changeset_002dbased-vs-File_002dbased-Version-Control">29.1.1.5 Changeset-based vs File-based Version Control</h4>

<a class="index-entry-id" id="index-file_002dbased-version-control"></a>
<p>On SCCS, RCS, CVS, and other early version control systems (and also
in SRC), version control operations are <em class="dfn">file-based</em>: each file
has its own comment and revision history separate from that of all
other files.  Newer systems, beginning with Subversion, are
<em class="dfn">changeset-based</em>: a commit may include changes to several files,
and the entire set of changes is handled as a unit.  Any comment
associated with the change does not belong to a single file, but to
the changeset itself.
</p>
<a class="index-entry-id" id="index-changeset_002dbased-version-control"></a>
<p>Changeset-based version control is more flexible and powerful than
file-based version control; usually, when a change to multiple files
has to be reversed, it&#8217;s good to be able to easily identify and remove
all of it.
</p>
</div>
<div class="subsubsection-level-extent" id="VCS-Repositories">
<h4 class="subsubsection" id="Decentralized-vs-Centralized-Repositories">29.1.1.6 Decentralized vs Centralized Repositories</h4>

<a class="index-entry-id" id="index-centralized-version-control"></a>
<a class="index-entry-id" id="index-decentralized-version-control"></a>
<a class="index-entry-id" id="index-distributed-version-control"></a>
<p>Early version control systems were designed around a
<em class="dfn">centralized</em> model in which each project has only one repository
used by all developers.  SCCS, RCS, CVS, Subversion, and SRC share this
kind of model.  One of its drawbacks is that the repository is a choke
point for reliability and efficiency.
</p>
<p>GNU Arch pioneered the concept of <em class="dfn">distributed</em> or
<em class="dfn">decentralized</em> version control, later implemented in Git,
Mercurial, and Bazaar.  A project may have several different
repositories, and these systems support a sort of super-merge between
repositories that tries to reconcile their change histories.  In
effect, there is one repository for each developer, and repository
merges take the place of commit operations.
</p>
<p>VC helps you manage the traffic between your personal workfiles and
a repository.  Whether the repository is a single master, or one of a
network of peer repositories, is not something VC has to care about.
</p>
</div>
<div class="subsubsection-level-extent" id="Types-of-Log-File">
<h4 class="subsubsection" id="Types-of-Log-File-1">29.1.1.7 Types of Log File</h4>
<a class="index-entry-id" id="index-types-of-log-file"></a>
<a class="index-entry-id" id="index-log-File_002c-types-of"></a>
<a class="index-entry-id" id="index-version-control-log"></a>

<p>Projects that use a version control system can have two types of log
for changes.  One is the log maintained by the version control system:
each time you commit a change, you fill out a <em class="dfn">log entry</em> for the
change (see <a class="pxref" href="#Log-Buffer">Features of the Log Entry Buffer</a>).  This is called the <em class="dfn">version control
log</em>.
</p>
<p>The other kind of log is the file <samp class="file">ChangeLog</samp> (see <a class="pxref" href="#Change-Log">Change Logs</a>).  It provides a chronological record of all changes to a large
portion of a program&#8212;typically one directory and its subdirectories.
A small program would use one <samp class="file">ChangeLog</samp> file; a large program
may have a <samp class="file">ChangeLog</samp> file in each major directory.
See <a class="xref" href="#Change-Log">Change Logs</a>.  Programmers have used change logs since long
before version control systems.
</p>
<p>Changeset-based version systems typically maintain a changeset-based
modification log for the entire system, which makes change log files
somewhat redundant.  One advantage that they retain is that it is
sometimes useful to be able to view the transaction history of a
single directory separately from those of other directories.  Another
advantage is that commit logs can&#8217;t be fixed in many version control
systems.
</p>
<p>A project maintained with version control can use just the version
control log, or it can use both kinds of logs.  It can handle some
files one way and some files the other way.  Each project has its
policy, which you should follow.
</p>
<p>When the policy is to use both, you typically want to write an entry
for each change just once, then put it into both logs.  You can write
the entry in <samp class="file">ChangeLog</samp>, then copy it to the log buffer with
<kbd class="kbd">C-c C-a</kbd> when committing the change (see <a class="pxref" href="#Log-Buffer">Features of the Log Entry Buffer</a>).  Or you
can write the entry in the log buffer while committing the change
(with the help of <kbd class="kbd">C-c C-w</kbd>), and later use the <kbd class="kbd">C-x v a</kbd>
command to copy it to <samp class="file">ChangeLog</samp>
(see <a class="pxref" href="#Change-Logs-and-VC">Change Logs and VC</a>).
</p>
</div>
</div>
<div class="subsection-level-extent" id="VC-Mode-Line">
<h4 class="subsection" id="Version-Control-and-the-Mode-Line">29.1.2 Version Control and the Mode Line</h4>
<a class="index-entry-id" id="index-VC-mode-line-indicator"></a>

<p>When you visit a file that is under version control, Emacs indicates
this on the mode line.  For example, &#8216;<samp class="samp">Bzr-1223</samp>&#8217; says that Bazaar
is used for that file, and the current revision ID is 1223.
</p>
<a class="index-entry-id" id="index-version-control-status"></a>
<p>The character between the back-end name and the revision ID
indicates the <em class="dfn">version control status</em> of the work file.  In a
merge-based version control system, a &#8216;<samp class="samp">-</samp>&#8217; character indicates
that the work file is unmodified, and &#8216;<samp class="samp">:</samp>&#8217; indicates that it has
been modified.  &#8216;<samp class="samp">!</samp>&#8217; indicates that the file contains conflicts as
result of a recent merge operation (see <a class="pxref" href="#Merging">Merging Branches</a>), or that the file
was removed from the version control.  Finally, &#8216;<samp class="samp">?</samp>&#8217; means that
the file is under version control, but is missing from the working
tree.
</p>
<p>In a lock-based system, &#8216;<samp class="samp">-</samp>&#8217; indicates an unlocked file, and
&#8216;<samp class="samp">:</samp>&#8217; a locked file; if the file is locked by another user (for
instance, &#8216;<samp class="samp">jim</samp>&#8217;), that is displayed as &#8216;<samp class="samp">RCS:jim:1.3</samp>&#8217;.
&#8216;<samp class="samp">@</samp>&#8217; means that the file was locally added, but not yet committed
to the master repository.
</p>
<p>On a graphical display, you can move the mouse over this mode line
indicator to pop up a tool-tip, which displays a more verbose
description of the version control status.  Pressing <kbd class="kbd">mouse-1</kbd>
over the indicator pops up a menu of VC commands, identical to
&#8216;<samp class="samp">Tools / Version Control</samp>&#8217; on the menu bar.
</p>
<a class="index-entry-id" id="index-auto_002drevert_002dcheck_002dvc_002dinfo"></a>
<p>When Auto Revert mode (see <a class="pxref" href="Files.xhtml#Reverting">Reverting a Buffer</a>) reverts a buffer that is
under version control, it updates the version control information in
the mode line.  However, Auto Revert mode may not properly update this
information if the version control status changes without changes to
the work file, from outside the current Emacs session.  If you set
<code class="code">auto-revert-check-vc-info</code> to <code class="code">t</code>, Auto Revert mode updates
the version control status information every
<code class="code">auto-revert-interval</code> seconds, even if the work file itself is
unchanged.  The resulting CPU usage depends on the version control
system, but is usually not excessive.
</p>
</div>
<div class="subsection-level-extent" id="Basic-VC-Editing">
<h4 class="subsection" id="Basic-Editing-under-Version-Control">29.1.3 Basic Editing under Version Control</h4>

<a class="index-entry-id" id="index-filesets_002c-VC"></a>
<a class="index-entry-id" id="index-VC-filesets"></a>
<p>Most VC commands operate on <em class="dfn">VC filesets</em>.  A VC fileset is a
collection of one or more files that a VC operation acts upon.  When
you type VC commands in a buffer visiting a version-controlled file,
the VC fileset is simply that one file.  When you type them in a VC
Directory buffer, and some files in it are marked, the VC fileset
consists of the marked files (see <a class="pxref" href="#VC-Directory-Mode">VC Directory Mode</a>).  Likewise,
when you invoke a VC command from a Dired buffer, the VC fileset
consists of the marked files (see <a class="pxref" href="Dired.xhtml#Marks-vs-Flags">Dired Marks vs. Flags</a>), defaulting to
the file shown on the current line if no files are marked.
</p>
<p>With modern changeset-based version control systems (see <a class="pxref" href="#VCS-Changesets">Changeset-based vs File-based Version Control</a>), such as Git, Mercurial, and Bazaar, VC commands handle
multi-file VC filesets as a group.  For example, committing a
multi-file VC fileset generates a single revision, containing the
changes to all those files.  On older file-based version control
systems like CVS, each file in a multi-file VC fileset is handled
individually; thus, committing a fileset generates one revision for
each changed file in the fileset.
</p>
<dl class="table">
<dt><kbd class="kbd">C-x v v</kbd></dt>
<dd><p>Perform the next appropriate version control operation on the current
VC fileset.
</p></dd>
</dl>

<a class="index-entry-id" id="index-vc_002dnext_002daction"></a>
<a class="index-entry-id" id="index-C_002dx-v-v"></a>
<p>The principal VC command is a multi-purpose command, <kbd class="kbd">C-x v v</kbd>
(<code class="code">vc-next-action</code>), which performs the most appropriate action on
the current VC fileset: either registering it with a version control
system, or committing it, or unlocking it, or merging changes into it.
The precise actions for each situation are described in detail in the
following subsections.  You can use <kbd class="kbd">C-x v v</kbd> either in a
file-visiting buffer, in a Dired buffer, or in a VC Directory buffer;
in the latter two cases the command operates on the fileset consisting
of the marked files.  You can also use <kbd class="kbd">C-x v v</kbd>, in a buffer with
patches under Diff Mode (see <a class="pxref" href="Files.xhtml#Diff-Mode">Diff Mode</a>), in which case the command
operates on the files whose diffs are shown in the buffer.
</p>
<p>Note that VC filesets are distinct from the named filesets used
for viewing and visiting files in functional groups
(see <a class="pxref" href="Files.xhtml#Filesets">Filesets</a>).  Unlike named filesets, VC filesets are not named
and don&#8217;t persist across sessions.
</p>

<div class="subsubsection-level-extent" id="VC-With-A-Merging-VCS">
<h4 class="subsubsection" id="Basic-Version-Control-with-Merging">29.1.3.1 Basic Version Control with Merging</h4>

<p>With a modern merging-based version control system (such as Git and Hg;
see <a class="pxref" href="#VCS-Merging">Merge-based vs Lock-based Version Control</a>), <kbd class="kbd">C-x v v</kbd> does the following when invoked
from a buffer that visits a version-controlled file or a VC Directory
or Dired buffer:
</p>
<ul class="itemize mark-bullet">
<li>If there is more than one file in the VC fileset and the files have
inconsistent version control statuses, signal an error.  (Note,
however, that a fileset is allowed to include both newly-added files
and modified files; see <a class="pxref" href="#Registering">Registering a File for Version Control</a>.)  Also signal an error if the
files in the fileset are missing (removed from the filesystem, but
still tracked by version control), or are ignored by version control.

</li><li>If every file in the VC fileset is registered and unchanged with
respect to the last revision, do nothing.

</li><li>If none of the files in the VC fileset are registered with a version
control system, register the newly-added files in the VC fileset,
i.e., place them under version control.  See <a class="xref" href="#Registering">Registering a File for Version Control</a>.  If Emacs
cannot find a system to register under, it prompts for a repository
type, creates a new repository, and registers the VC fileset with it.
You can also specify the system explicitly, see <a class="ref" href="#Advanced-C_002dx-v-v">Advanced Control in <kbd class="kbd">C-x v v</kbd></a>.  Note that registering the files doesn&#8217;t commit them; you must
invoke <kbd class="kbd">C-x&#160;v&#160;v</kbd><!-- /@w --> again to commit, see below.

</li><li>If every file in the VC fileset has been either newly-added or
modified, commit the changed files.  To do this, Emacs pops up a
<samp class="file">*vc-log*</samp> buffer; type the desired log entry for the changes,
followed by <kbd class="kbd">C-c C-c</kbd> to commit.  See <a class="xref" href="#Log-Buffer">Features of the Log Entry Buffer</a>.

<p>With modern decentralized version control systems (Git, Mercurial,
etc.), the changes are committed locally and not automatically
propagated to the upstream repository (which is usually on a remote
host).  In these cases, if the repository has been changed since your
last update, the commit may fail.  In that case, you must update from
upstream and then try again.  Use <kbd class="kbd">C-x v +</kbd> (see <a class="pxref" href="#Pulling-_002f-Pushing">Pulling/Pushing Changes into/from a Branch</a>) or <kbd class="kbd">C-x v m</kbd> (see <a class="pxref" href="#Merging">Merging Branches</a>) for that.
</p>
<p>With a centralized version control system, if the commit fails due to
upstream changes, type <kbd class="kbd">C-x v v</kbd> again to merge in the upstream
repository changes.
</p>
</li><li>Finally, if you are using a centralized version control system, if any
file in the VC fileset is outdated with respect to the upstream
repository, offer to update the fileset from the repository.
</li></ul>

<p>These rules also apply when you use RCS in its non-locking mode,
except that changes are not automatically merged from the repository.
Nothing informs you if another user has committed changes in the same
file since you began editing it; when you commit your revision, that
other user&#8217;s changes are removed (however, they remain in the
repository and are thus not irrevocably lost).  Therefore, you must
verify that the current revision is unchanged before committing your
changes.  In addition, locking is possible with RCS even in this mode:
<kbd class="kbd">C-x v v</kbd> with an unmodified file locks the file, just as it does
with RCS in its normal locking mode (see <a class="pxref" href="#VC-With-A-Locking-VCS">Basic Version Control with Locking</a>).
</p>
<p>If <kbd class="kbd">C-x v v</kbd> is invoked from a buffer under Diff Mode, the
command assumes the buffer holds a set of patches for one or more
files.  It then applies the changes to the respective files and
commits the changes after popping up the <samp class="file">*vc-log*</samp> buffer to
allow you to type a suitable commit log message.
</p>
</div>
<div class="subsubsection-level-extent" id="VC-With-A-Locking-VCS">
<h4 class="subsubsection" id="Basic-Version-Control-with-Locking">29.1.3.2 Basic Version Control with Locking</h4>

<p>With a locking-based version control system (such as SCCS, and RCS in
its default mode), <kbd class="kbd">C-x v v</kbd> does the following:
</p>
<ul class="itemize mark-bullet">
<li>If there is more than one file in the VC fileset and the files have
inconsistent version control statuses, signal an error.  Also signal
an error if the files in the fileset are missing (removed from the
filesystem, but still tracked by version control).

</li><li>If each file in the VC fileset is not registered with a version
control system, register the newly-added files in the fileset.
See <a class="xref" href="#Registering">Registering a File for Version Control</a>.  If Emacs cannot find a system to register under,
it prompts for a repository type, creates a new repository, and
registers the VC fileset with it.  You can also specify the system
explicitly, see <a class="ref" href="#Advanced-C_002dx-v-v">Advanced Control in <kbd class="kbd">C-x v v</kbd></a>.

</li><li>If each file is registered and unlocked, check the files out: lock
each one and make it writable, so that you can begin to edit it.

</li><li>If each file is locked by you and contains changes, commit (a.k.a.
&#8220;check-in&#8221;) the changes.  To do this, Emacs pops up a
<samp class="file">*vc-log*</samp> buffer; type the desired log entry for the new
revision, followed by <kbd class="kbd">C-c C-c</kbd> to commit (see <a class="pxref" href="#Log-Buffer">Features of the Log Entry Buffer</a>).

</li><li>If each file is locked by you, but you have not changed it, release
the lock and make the file read-only again.  This undoes previous
check-out operation for files that were not changed since the
checkout.

</li><li>If each file is locked by another user, ask whether you want to
steal the lock.  If you say yes, the file becomes locked by you,
and a warning message is sent to the user who had formerly locked the
file.

</li><li>If files in the fileset are unlocked, but have changes with respect to
their last revision, offer to claim the lock for each such file or to
revert the file to the last checked-in revision.  (This situation is
exceptional and should not normally happen.)
</li></ul>

<p>These rules also apply when you use CVS in locking mode, except
that CVS does not support stealing locks.
</p>
</div>
<div class="subsubsection-level-extent" id="Advanced-C_002dx-v-v">
<h4 class="subsubsection" id="Advanced-Control-in-C_002dx-v-v">29.1.3.3 Advanced Control in <kbd class="kbd">C-x v v</kbd></h4>

<a class="index-entry-id" id="index-revision-ID-in-version-control"></a>
<p>When you give a prefix argument to <code class="code">vc-next-action</code> (<kbd class="kbd">C-u
C-x v v</kbd>), it still performs the next logical version control
operation, but accepts additional arguments to specify precisely how
to do the operation.
</p>
<ul class="itemize mark-bullet">
<li><a class="index-entry-id" id="index-specific-version-control-system"></a>
You can specify the name of a version control system.  This is useful
if the fileset can be managed by more than one version control system,
and Emacs fails to detect the correct one.

</li><li>Otherwise, if using CVS, RCS or SRC, you can specify a revision ID.

<p>If the fileset is modified (or locked), this makes Emacs commit the
files with that revision ID.  You can create a new branch by
supplying an appropriate revision ID (see <a class="pxref" href="#Branches">Version Control Branches</a>).
</p>
<p>If the fileset is unmodified (and unlocked), this checks out the
specified revision into the working tree.  You can also specify a
revision on another branch by giving its revision or branch ID
(see <a class="pxref" href="#Switching-Branches">Switching between Branches</a>).  An empty argument (i.e., <kbd class="kbd">C-u C-x v
v <kbd class="key">RET</kbd></kbd>) checks out the latest (a.k.a. &#8220;head&#8221;) revision on
the current branch.
</p>
<p>Specifying revision ID in this manner is silently ignored by a
decentralized version control system.  Those systems do not let you
specify your own revision IDs, nor do they use the concept of checking
out individual files.
</p></li></ul>

</div>
</div>
<div class="subsection-level-extent" id="Log-Buffer">
<h4 class="subsection" id="Features-of-the-Log-Entry-Buffer">29.1.4 Features of the Log Entry Buffer</h4>

<a class="index-entry-id" id="index-C_002dc-C_002dc-_0028Log-Edit-mode_0029"></a>
<a class="index-entry-id" id="index-log_002dedit_002ddone"></a>
<p>When you tell VC to commit a change, it pops up a buffer named
<samp class="file">*vc-log*</samp>.  In this buffer, you should write a <em class="dfn">log entry</em>
describing the changes you have made (see <a class="pxref" href="#Why-Version-Control_003f">Understanding the Problems it Addresses</a>).
After you are done, type <kbd class="kbd">C-c C-c</kbd> (<code class="code">log-edit-done</code>) to exit
the buffer and commit the change, together with your log entry.
</p>
<a class="index-entry-id" id="index-Log-Edit-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Log-Edit"></a>
<a class="index-entry-id" id="index-vc_002dlog_002dmode_002dhook"></a>
<p>The major mode for the <samp class="file">*vc-log*</samp> buffer is Log Edit mode, a
variant of Text mode (see <a class="pxref" href="Text.xhtml#Text-Mode">Text Mode</a>).  On entering Log Edit mode,
Emacs runs the hooks <code class="code">text-mode-hook</code> and <code class="code">vc-log-mode-hook</code>
(see <a class="pxref" href="Customization.xhtml#Hooks">Hooks</a>).
</p>
<p>In the <samp class="file">*vc-log*</samp> buffer, you can write one or more <em class="dfn">header
lines</em>, specifying additional information to be supplied to the
version control system.  Each header line must occupy a single line at
the top of the buffer; the first line that is not a header line is
treated as the start of the log entry.  For example, the following
header line states that the present change was not written by you, but
by another developer:
</p>
<div class="example smallexample">
<pre class="example-preformatted">Author: J. R. Hacker &lt;jrh@example.com&gt;
</pre></div>

<p>Apart from the &#8216;<samp class="samp">Author</samp>&#8217; header, Emacs recognizes the headers
&#8216;<samp class="samp">Summary</samp>&#8217; (a one-line summary of the changeset), &#8216;<samp class="samp">Date</samp>&#8217; (a
manually-specified commit time), and &#8216;<samp class="samp">Fixes</samp>&#8217; (a reference to a
bug fixed by the change).  Not all version control systems recognize
all headers.  If you specify a header for a system that does not
support it, the header is treated as part of the log entry.
</p>
<a class="index-entry-id" id="index-C_002dc-C_002df-_0028Log-Edit-mode_0029"></a>
<a class="index-entry-id" id="index-log_002dedit_002dshow_002dfiles"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dd-_0028Log-Edit-mode_0029"></a>
<a class="index-entry-id" id="index-log_002dedit_002dshow_002ddiff"></a>
<p>While in the <samp class="file">*vc-log*</samp> buffer, the current VC fileset is
considered to be the fileset that will be committed if you type
<kbd class="kbd">C-c&#160;C-c</kbd><!-- /@w -->.  To view a list of the files in the VC fileset,
type <kbd class="kbd">C-c&#160;C-f</kbd><!-- /@w --> (<code class="code">log-edit-show-files</code>).  To view a diff
of changes between the VC fileset and the version from which you
started editing (see <a class="pxref" href="#Old-Revisions">Examining And Comparing Old Revisions</a>), type <kbd class="kbd">C-c C-d</kbd>
(<code class="code">log-edit-show-diff</code>).
</p>
<a class="index-entry-id" id="index-C_002dc-C_002dw-_0028Log-Edit-mode_0029"></a>
<a class="index-entry-id" id="index-log_002dedit_002dgenerate_002dchangelog_002dfrom_002ddiff"></a>
<a class="index-entry-id" id="index-diff_002dadd_002dlog_002duse_002drelative_002dnames"></a>
<p>To help generate ChangeLog entries, type <kbd class="kbd">C-c C-w</kbd>
(<code class="code">log-edit-generate-changelog-from-diff</code>), to generate skeleton
ChangeLog entries, listing all changed file and function names based
on the diff of the VC fileset.  Consecutive entries left empty will be
combined by <kbd class="kbd">M-q</kbd> (<code class="code">fill-paragraph</code>).  By default the
skeleton will just include the file name, without any leading
directories.  If you wish to prepend the leading directories up to the
VC root, customize <code class="code">diff-add-log-use-relative-names</code>.
</p>
<a class="index-entry-id" id="index-C_002dc-C_002da-_0028Log-Edit-mode_0029"></a>
<a class="index-entry-id" id="index-log_002dedit_002dinsert_002dchangelog"></a>
<p>If the VC fileset includes one or more <samp class="file">ChangeLog</samp> files
(see <a class="pxref" href="#Change-Log">Change Logs</a>), type <kbd class="kbd">C-c C-a</kbd>
(<code class="code">log-edit-insert-changelog</code>) to pull the relevant entries into
the <samp class="file">*vc-log*</samp> buffer.  If the topmost item in each
<samp class="file">ChangeLog</samp> was made under your user name on the current date,
this command searches that item for entries matching the file(s) to be
committed, and inserts them.
If you are using CVS or RCS, see <a class="ref" href="#Change-Logs-and-VC">Change Logs and VC</a>, for the
opposite way of working&#8212;generating ChangeLog entries from the Log
Edit buffer.
</p>
<p>To abort a commit, just <em class="emph">don&#8217;t</em> type <kbd class="kbd">C-c C-c</kbd> in that
buffer.  You can switch buffers and do other editing.  As long as you
don&#8217;t try to make another commit, the entry you were editing remains
in the <samp class="file">*vc-log*</samp> buffer, and you can go back to that buffer at
any time to complete the commit.
</p>
<a class="index-entry-id" id="index-M_002dn-_0028Log-Edit-mode_0029"></a>
<a class="index-entry-id" id="index-M_002dp-_0028Log-Edit-mode_0029"></a>
<a class="index-entry-id" id="index-M_002ds-_0028Log-Edit-mode_0029"></a>
<a class="index-entry-id" id="index-M_002dr-_0028Log-Edit-mode_0029"></a>
<p>You can also browse the history of previous log entries to duplicate
a commit comment.  This can be useful when you want to make several
commits with similar comments.  The commands <kbd class="kbd">M-n</kbd>, <kbd class="kbd">M-p</kbd>,
<kbd class="kbd">M-s</kbd> and <kbd class="kbd">M-r</kbd> for doing this work just like the minibuffer
history commands (see <a class="pxref" href="Minibuffer.xhtml#Minibuffer-History">Minibuffer History</a>), except that they are
used outside the minibuffer.
</p>
</div>
<div class="subsection-level-extent" id="Registering">
<h4 class="subsection" id="Registering-a-File-for-Version-Control">29.1.5 Registering a File for Version Control</h4>

<dl class="table">
<dt><kbd class="kbd">C-x v i</kbd></dt>
<dd><p>Register the visited file for version control.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-v-i"></a>
<a class="index-entry-id" id="index-vc_002dregister"></a>
<p>The command <kbd class="kbd">C-x v i</kbd> (<code class="code">vc-register</code>) <em class="dfn">registers</em> each
file in the current VC fileset, placing it under version control.
This is essentially equivalent to the action of <kbd class="kbd">C-x v v</kbd> on an
unregistered VC fileset (see <a class="pxref" href="#Basic-VC-Editing">Basic Editing under Version Control</a>), except that if the
VC fileset is already registered, <kbd class="kbd">C-x v i</kbd> signals an error
whereas <kbd class="kbd">C-x v v</kbd> performs some other action.
</p>
<p>To register a file, Emacs must choose a version control system.  For
a multi-file VC fileset, the VC Directory buffer specifies the system
to use (see <a class="pxref" href="#VC-Directory-Mode">VC Directory Mode</a>).  For a single-file VC fileset, if
the file&#8217;s directory already contains files registered in a version
control system, or if the directory is part of a directory tree
controlled by a version control system, Emacs chooses that system.  In
the event that more than one version control system is applicable,
Emacs uses the one that appears first in the variable
<code class="code">vc-handled-backends</code> (see <a class="pxref" href="#Customizing-VC">Customizing VC</a>).
If Emacs cannot find a version control system to register the file
under, it prompts for a repository type, creates a new repository, and
registers the file into that repository.
</p>
<a class="index-entry-id" id="index-added-files_002c-VC"></a>
<a class="index-entry-id" id="index-files-added-to-VCS"></a>
<p>With most version control systems, registering a file with
<kbd class="kbd">C-x&#160;v&#160;i</kbd><!-- /@w --> or <kbd class="kbd">C-x&#160;v&#160;v</kbd><!-- /@w --> adds it to the working tree,
but does not commit it, i.e., doesn&#8217;t add it to the repository.  Such
files are labeled as <em class="dfn">added</em> in the VC Directory buffer, and the
mode line of the buffers visiting such files shows a revision ID of
&#8216;<samp class="samp">@@</samp>&#8217;.  To make the registration take effect in the repository,
you must commit the newly-added files (see <a class="pxref" href="#Basic-VC-Editing">Basic Editing under Version Control</a>).
Note that a single commit can include both file additions and edits to
files already known to the VCS.
</p>
<p>With a locking-based version control system (see <a class="pxref" href="#VCS-Merging">Merge-based vs Lock-based Version Control</a>),
registering a file leaves it unlocked and read-only.  Type <kbd class="kbd">C-x v
v</kbd> to check-out the file and start editing it.
</p>
</div>
<div class="subsection-level-extent" id="Old-Revisions">
<h4 class="subsection" id="Examining-And-Comparing-Old-Revisions">29.1.6 Examining And Comparing Old Revisions</h4>

<dl class="table">
<dt><kbd class="kbd">C-x v =</kbd></dt>
<dd><p>Compare the work files in the current VC fileset with the versions you
started from (<code class="code">vc-diff</code>).  With a prefix argument, prompt for two
revisions of the current VC fileset and compare them.  You can also
call this command from a Dired buffer (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>).
</p>
</dd>
<dt><kbd class="kbd">M-x vc-ediff</kbd></dt>
<dd><p>Like <kbd class="kbd">C-x v =</kbd>, but using Ediff.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/ediff/index.html#Top">Ediff</a> in <cite class="cite">The
Ediff Manual</cite>.
</p>
</dd>
<dt><kbd class="kbd">C-x v D</kbd></dt>
<dd><p>Compare the entire working tree to the revision you started from
(<code class="code">vc-root-diff</code>).  With a prefix argument, prompt for two
revisions and compare their trees.
</p>
</dd>
<dt><kbd class="kbd">C-x v ~</kbd></dt>
<dd><p>Prompt for a revision of the current file, and visit it in a separate
buffer (<code class="code">vc-revision-other-window</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x v g</kbd></dt>
<dd><p>Display an annotated version of the current file: for each line, show
the latest revision in which it was modified (<code class="code">vc-annotate</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-vc_002ddiff"></a>
<a class="index-entry-id" id="index-C_002dx-v-_003d"></a>
<p><kbd class="kbd">C-x v =</kbd> (<code class="code">vc-diff</code>) displays a <em class="dfn">diff</em> which compares
each work file in the current VC fileset to the version(s) from which
you started editing.  The diff is displayed in another window, in a
Diff mode buffer (see <a class="pxref" href="Files.xhtml#Diff-Mode">Diff Mode</a>) named <samp class="file">*vc-diff*</samp>.  The
usual Diff mode commands are available in this buffer.  In particular,
the <kbd class="kbd">g</kbd> (<code class="code">revert-buffer</code>) command performs the file
comparison again, generating a new diff.
</p>
<a class="index-entry-id" id="index-C_002du-C_002dx-v-_003d"></a>
<p>To compare two arbitrary revisions of the current VC fileset, call
<code class="code">vc-diff</code> with a prefix argument: <kbd class="kbd">C-u C-x v =</kbd>.  This
prompts for two revision IDs (see <a class="pxref" href="#VCS-Concepts">Concepts of Version Control</a>), and displays a
diff between those versions of the fileset.  This will not work
reliably for multi-file VC filesets, if the version control system is
file-based rather than changeset-based (e.g., CVS), since then
revision IDs for different files would not be related in any
meaningful way.
</p>
<p>Instead of the revision ID, some version control systems let you
specify revisions in other formats.  For instance, under Bazaar you
can enter &#8216;<samp class="samp">date:yesterday</samp>&#8217; for the argument to <kbd class="kbd">C-u C-x v =</kbd>
(and related commands) to specify the first revision committed after
yesterday.  See the documentation of the version control system for
details.
</p>
<p>If you invoke <kbd class="kbd">C-x v =</kbd> or <kbd class="kbd">C-u C-x v =</kbd> from a Dired buffer
(see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>), the file listed on the current line is treated as the
current VC fileset.  The VC fileset can also include several marked files.
</p>
<a class="index-entry-id" id="index-vc_002dediff"></a>
<p><kbd class="kbd">M-x vc-ediff</kbd> works like <kbd class="kbd">C-x v =</kbd>, except that it uses an
Ediff session.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/ediff/index.html#Top">Ediff</a> in <cite class="cite">The Ediff Manual</cite>.
</p>
<a class="index-entry-id" id="index-vc_002droot_002ddiff"></a>
<a class="index-entry-id" id="index-C_002dx-v-D"></a>
<p><kbd class="kbd">C-x v D</kbd> (<code class="code">vc-root-diff</code>) is similar to <kbd class="kbd">C-x v =</kbd>, but
it displays the changes in the entire current working tree (i.e., the
working tree containing the current VC fileset).  If you invoke this
command from a Dired buffer, it applies to the working tree containing
the directory.
</p>
<a class="index-entry-id" id="index-vc_002droot_002dversion_002ddiff"></a>
<a class="index-entry-id" id="index-C_002du-C_002dx-v-D"></a>
<p>To compare two arbitrary revisions of the whole trees, call
<code class="code">vc-root-diff</code> with a prefix argument: <kbd class="kbd">C-u C-x v D</kbd>.  This
prompts for two revision IDs (see <a class="pxref" href="#VCS-Concepts">Concepts of Version Control</a>), and displays a
diff between those versions of the entire version-controlled directory
trees (RCS, SCCS, CVS, and SRC do not support this feature).
</p>
<a class="index-entry-id" id="index-vc_002ddiff_002dswitches"></a>
<p>You can customize the <code class="command">diff</code> options that <kbd class="kbd">C-x v =</kbd> and
<kbd class="kbd">C-x v D</kbd> use for generating diffs.  The options used are taken
from the first non-<code class="code">nil</code> value amongst the variables
<code class="code">vc-<var class="var">backend</var>-diff-switches</code>, <code class="code">vc-diff-switches</code>, and
<code class="code">diff-switches</code> (see <a class="pxref" href="Files.xhtml#Comparing-Files">Comparing Files</a>), in that order.  Here,
<var class="var">backend</var> stands for the relevant version control system,
e.g., <code class="code">bzr</code> for Bazaar.  Since <code class="code">nil</code> means to check the
next variable in the sequence, either of the first two may use the
value <code class="code">t</code> to mean no switches at all.  Most of the
<code class="code">vc-<var class="var">backend</var>-diff-switches</code> variables default to <code class="code">nil</code>,
but some default to <code class="code">t</code>; these are for version control systems
whose <code class="code">diff</code> implementations do not accept common diff options,
such as Subversion.
</p>
<a class="index-entry-id" id="index-vc_002drevision_002dother_002dwindow"></a>
<a class="index-entry-id" id="index-C_002dx-v-_007e"></a>
<p>To directly examine an older version of a file, visit the work file
and type <kbd class="kbd">C-x v ~ <var class="var">revision</var> <kbd class="key">RET</kbd></kbd>
(<code class="code">vc-revision-other-window</code>).  This retrieves the file version
corresponding to <var class="var">revision</var>, saves it to
<samp class="file"><var class="var">filename</var>.~<var class="var">revision</var>~</samp>, and visits it in a separate
window.
</p>
<a class="index-entry-id" id="index-vc_002dannotate"></a>
<a class="index-entry-id" id="index-vc_002dannotate_002dbackground_002dmode"></a>
<a class="index-entry-id" id="index-C_002dx-v-g"></a>
<p>Many version control systems allow you to view files <em class="dfn">annotated</em>
with per-line revision information, by typing <kbd class="kbd">C-x v g</kbd>
(<code class="code">vc-annotate</code>).  This creates a new &#8220;annotate&#8221; buffer
displaying the file&#8217;s text, with each line colored to show how old it
is.  Red text is new, blue is old, and intermediate colors indicate
intermediate ages.  By default, the color is scaled over the full
range of ages, such that the oldest changes are blue, and the newest
changes are red.  If the variable <code class="code">vc-annotate-background-mode</code>
is non-<code class="code">nil</code>, the colors expressing the age of each line are
applied to the background color, leaving the foreground at its default
color.
</p>
<a class="index-entry-id" id="index-vc_002dannotate_002dswitches"></a>
<p>You can customize the <code class="code">annotate</code> options that <kbd class="kbd">C-x v g</kbd>
uses by customizing <code class="code">vc-<var class="var">backend</var>-annotate-switches</code> and
<code class="code">vc-annotate-switches</code>.  They function similarly to
<code class="code">vc-<var class="var">backend</var>-diff-switches</code> and <code class="code">vc-diff-switches</code>,
described above.
</p>
<p>When you give a prefix argument to <kbd class="kbd">C-x v g</kbd>, Emacs reads two
arguments using the minibuffer: the revision to display and annotate
(instead of the current file contents), and the time span in days the
color range should cover.
</p>
<p>From the &#8220;annotate&#8221; buffer, these and other color scaling options are
available from the &#8216;<samp class="samp">VC-Annotate</samp>&#8217; menu.  In this buffer, you can
also use the following keys to browse the annotations of past revisions,
view diffs, or view log entries:
</p>
<dl class="table">
<dt><kbd class="kbd">p</kbd></dt>
<dd><p>Annotate the previous revision, i.e., the revision before the one
currently annotated.  A numeric prefix argument is a repeat count, so
<kbd class="kbd">C-u 10 p</kbd> would take you back 10 revisions.
</p>
</dd>
<dt><kbd class="kbd">n</kbd></dt>
<dd><p>Annotate the next revision, i.e., the revision after the one
currently annotated.  A numeric prefix argument is a repeat count.
</p>
</dd>
<dt><kbd class="kbd">j</kbd></dt>
<dd><p>Annotate the revision indicated by the current line.
</p>
</dd>
<dt><kbd class="kbd">a</kbd></dt>
<dd><p>Annotate the revision before the one indicated by the current line.
This is useful to see the state the file was in before the change on
the current line was made.
</p>
</dd>
<dt><kbd class="kbd">f</kbd></dt>
<dd><p>Show in a buffer the file revision indicated by the current line.
</p>
</dd>
<dt><kbd class="kbd">d</kbd></dt>
<dd><p>Display the diff between the current line&#8217;s revision and the previous
revision.  This is useful to see what the current line&#8217;s revision
actually changed in the file.
</p>
</dd>
<dt><kbd class="kbd">D</kbd></dt>
<dd><p>Display the diff between the current line&#8217;s revision and the previous
revision for all files in the changeset (for VC systems that support
changesets).  This is useful to see what the current line&#8217;s revision
actually changed in the tree.
</p>
</dd>
<dt><kbd class="kbd">l</kbd></dt>
<dd><p>Show the log of the current line&#8217;s revision.  This is useful to see
the author&#8217;s description of the changes in the revision on the current
line.
</p>
</dd>
<dt><kbd class="kbd">w</kbd></dt>
<dd><p>Annotate the working revision&#8212;the one you are editing.  If you used
<kbd class="kbd">p</kbd> and <kbd class="kbd">n</kbd> to browse to other revisions, use this key to
return to your working revision.
</p>
</dd>
<dt><kbd class="kbd">v</kbd></dt>
<dd><p>Toggle the annotation visibility.  This is useful for looking just at
the file contents without distraction from the annotations.
</p></dd>
</dl>

</div>
<div class="subsection-level-extent" id="VC-Change-Log">
<h4 class="subsection" id="VC-Change-Log-1">29.1.7 VC Change Log</h4>
<a class="index-entry-id" id="index-VC-change-log"></a>

<dl class="table">
<dt><kbd class="kbd">C-x v l</kbd></dt>
<dd><p>Display the change history for the current fileset
(<code class="code">vc-print-log</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x v L</kbd></dt>
<dd><p>Display the change history for the current repository
(<code class="code">vc-print-root-log</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x v b l</kbd></dt>
<dd><p>Display the change history for another branch
(<code class="code">vc-print-branch-log</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x v I</kbd></dt>
<dd><p>Display the changes that a &#8220;pull&#8221; operation will retrieve
(<code class="code">vc-log-incoming</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x v O</kbd></dt>
<dd><p>Display the changes that will be sent by the next &#8220;push&#8221; operation
(<code class="code">vc-log-outgoing</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x v h</kbd></dt>
<dd><p>Display the history of changes made in the region of file visited by
the current buffer (<code class="code">vc-region-history</code>).
</p>
</dd>
<dt><kbd class="kbd">M-x vc-log-search <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Search the change history for a specified pattern.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-v-l"></a>
<a class="index-entry-id" id="index-vc_002dprint_002dlog"></a>
<p><kbd class="kbd">C-x v l</kbd> (<code class="code">vc-print-log</code>) displays a buffer named
<samp class="file">*vc-change-log*</samp>, showing the history of changes made to the
current fileset in the long form, including who made the changes, the
dates, and the log entry for each change (these are the same log
entries you would enter via the <samp class="file">*vc-log*</samp> buffer; see <a class="pxref" href="#Log-Buffer">Features of the Log Entry Buffer</a>).  When invoked from a buffer visiting a file, the current
fileset consists of that single file, and point in the displayed
<samp class="file">*vc-change-log*</samp> buffer is centered at the revision of that
file.  When invoked from a VC Directory buffer (see <a class="pxref" href="#VC-Directory-Mode">VC Directory Mode</a>) or from a Dired buffer (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>), the fileset consists of
all the marked files, defaulting to the file shown on the current line
in the directory buffer if no file is marked.
</p>
<p>If the fileset includes one or more directories, the resulting
<samp class="file">*vc-change-log*</samp> buffer shows a short log of changes (one line
for each change), if the VC backend supports that; otherwise it shows
the log in the long form.
</p>
<p>With a prefix argument, the command prompts for the revision to
center on in the <samp class="file">*vc-change-log*</samp> buffer and for the maximum
number of revisions to display.
</p>
<a class="index-entry-id" id="index-C_002dx-v-L"></a>
<a class="index-entry-id" id="index-vc_002dprint_002droot_002dlog"></a>
<a class="index-entry-id" id="index-log_002dview_002dtoggle_002dentry_002ddisplay"></a>
<p><kbd class="kbd">C-x v L</kbd> (<code class="code">vc-print-root-log</code>) displays a
<samp class="file">*vc-change-log*</samp> buffer showing the history of the entire
version-controlled directory tree (RCS, SCCS, CVS, and SRC do not
support this feature).  With a prefix argument, the command prompts
for the maximum number of revisions to display.  A numeric prefix
argument specifies the maximum number of revisions without prompting.
When the numeric prefix argument is 1, as in <kbd class="kbd">C-1&#160;C-x&#160;v&#160;L</kbd><!-- /@w --> or
<kbd class="kbd">C-u&#160;1&#160;C-x&#160;v&#160;L</kbd><!-- /@w -->, the command prompts for the revision ID, and
displays the log entry of that revision together with the changes
(diffs) it introduced.  (Some less capable version control systems,
such as RCS and CVS, don&#8217;t have commands to show a revision log with
its diffs; for them the command displays only the log entry, and you
can request to show the diffs by typing <kbd class="kbd">d</kbd> or <kbd class="kbd">D</kbd>, see
below.)
</p>
<p>The <kbd class="kbd">C-x v L</kbd> history is shown in a compact form, usually
showing only the first line of each log entry.  However, you can type
<kbd class="key">RET</kbd> (<code class="code">log-view-toggle-entry-display</code>) in the
<samp class="file">*vc-change-log*</samp> buffer to reveal the entire log entry for the
revision at point.  A second <kbd class="key">RET</kbd> hides it again.
</p>
<a class="index-entry-id" id="index-C_002dx-v-b-l"></a>
<a class="index-entry-id" id="index-vc_002dprint_002dbranch_002dlog"></a>
<p><kbd class="kbd">C-x v b l <var class="var">branch-name</var> <kbd class="key">RET</kbd></kbd> (<code class="code">vc-print-branch-log</code>)
displays a <samp class="file">*vc-change-log*</samp> buffer showing the history of the
version-controlled directory tree, like <code class="code">vc-print-root-log</code> does,
but it shows the history of a branch other than the current one; it
prompts for the branch whose history to display.
</p>
<a class="index-entry-id" id="index-C_002dx-v-I"></a>
<a class="index-entry-id" id="index-C_002dx-v-O"></a>
<a class="index-entry-id" id="index-vc_002dlog_002dincoming"></a>
<a class="index-entry-id" id="index-vc_002dlog_002doutgoing"></a>
<p>On a decentralized version control system, the <kbd class="kbd">C-x v I</kbd>
(<code class="code">vc-log-incoming</code>) command displays a log buffer showing the
changes that will be applied, the next time you run the version
control system&#8217;s pull command to get new revisions from another
remote location (see <a class="pxref" href="#Pulling-_002f-Pushing">Pulling/Pushing Changes into/from a Branch</a>).  This other remote location is the default
one from which changes are pulled, as defined by the version control
system; with a prefix argument, <code class="code">vc-log-incoming</code> prompts for a
specific remote location.  Similarly, <kbd class="kbd">C-x v O</kbd>
(<code class="code">vc-log-outgoing</code>) shows the changes that will be sent to
another remote location, the next time you run the push command; with a
prefix argument, it prompts for a specific destination that
in case of some version control system can be a branch name.
</p>
<a class="index-entry-id" id="index-VC-log-buffer_002c-commands-in"></a>
<a class="index-entry-id" id="index-vc_002dlog-buffer"></a>
<p>In the <samp class="file">*vc-change-log*</samp> buffer, you can use the following keys
to move between the logs of revisions and of files, and to examine and
compare past revisions (see <a class="pxref" href="#Old-Revisions">Examining And Comparing Old Revisions</a>):
</p>
<dl class="table">
<dt><kbd class="kbd">p</kbd></dt>
<dd><p>Move to the previous revision entry.  (Revision entries in the log
buffer are usually in reverse-chronological order, so the previous
revision-item usually corresponds to a newer revision.)  A numeric
prefix argument is a repeat count.
</p>
</dd>
<dt><kbd class="kbd">n</kbd></dt>
<dd><p>Move to the next revision entry.  A numeric prefix argument is a
repeat count.
</p>
</dd>
<dt><kbd class="kbd">a</kbd></dt>
<dd><p>Annotate the revision on the current line (see <a class="pxref" href="#Old-Revisions">Examining And Comparing Old Revisions</a>).
</p>
</dd>
<dt><kbd class="kbd">e</kbd></dt>
<dd><p>Modify the change comment displayed at point.  Note that not all VC
systems support modifying change comments.
</p>
</dd>
<dt><kbd class="kbd">f</kbd></dt>
<dd><p>Visit the revision indicated at the current line.
</p>
</dd>
<dt><kbd class="kbd">d</kbd></dt>
<dd><p>Display a diff between the revision at point and the next earlier
revision, for the specific file.
</p>
</dd>
<dt><kbd class="kbd">D</kbd></dt>
<dd><p>Display the changeset diff between the revision at point and the next
earlier revision.  This shows the changes to all files made in that
revision.
</p>
</dd>
<dt><kbd class="kbd"><kbd class="key">RET</kbd></kbd></dt>
<dd><p>In a compact-style log buffer (e.g., the one created by <kbd class="kbd">C-x v
L</kbd>), toggle between showing and hiding the full log entry for the
revision at point.
</p></dd>
</dl>

<a class="index-entry-id" id="index-vc_002dlog_002dshow_002dlimit"></a>
<p>Because fetching many log entries can be slow, the
<samp class="file">*vc-change-log*</samp> buffer displays no more than 2000 revisions by
default.  The variable <code class="code">vc-log-show-limit</code> specifies this limit;
if you set the value to zero, that removes the limit.  You can also
increase the number of revisions shown in an existing
<samp class="file">*vc-change-log*</samp> buffer by clicking on the &#8216;<samp class="samp">Show 2X
entries</samp>&#8217; or &#8216;<samp class="samp">Show unlimited entries</samp>&#8217; buttons at the end of the
buffer.  However, RCS, SCCS, CVS, and SRC do not support this feature.
</p>
<a class="index-entry-id" id="index-C_002dx-v-h"></a>
<a class="index-entry-id" id="index-vc_002dregion_002dhistory"></a>
<p>A useful variant of examining history of changes is provided by the command
<kbd class="kbd">vc-region-history</kbd> (by default bound to <kbd class="kbd">C-x v h</kbd>), which shows
a <samp class="file">*VC-history*</samp> buffer with the history of changes made in the region
of the current buffer&#8217;s file between point and the mark (see <a class="pxref" href="Mark.xhtml#Mark">The Mark and the Region</a>).  The
history of changes includes the commit log messages and also the
changes themselves in the Diff format.
</p>
<p>Invoke this command after marking in the current buffer the region in
whose changes you are interested.  In the <samp class="file">*VC-history*</samp> buffer
it pops up, you can use all of the commands available in the
<samp class="file">*vc-change-log*</samp> buffer described above, and also the commands
defined by Diff mode (see <a class="pxref" href="Files.xhtml#Diff-Mode">Diff Mode</a>).
</p>
<p>This command is currently available only with Git and Mercurial (hg).
</p>
<a class="index-entry-id" id="index-vc_002dlog_002dsearch"></a>
<p>The command <code class="code">vc-log-search</code> allows searching for a pattern in the
log of changes.  It prompts for a pattern (a regular expression), and
displays all entries in the change history whose log messages match
the pattern.  When invoked with a prefix argument, the command will
also prompt for a specific VCS shell command to run for this purpose.
</p>
</div>
<div class="subsection-level-extent" id="VC-Undo">
<h4 class="subsection" id="Undoing-Version-Control-Actions">29.1.8 Undoing Version Control Actions</h4>

<dl class="table">
<dt><kbd class="kbd">C-x v u</kbd></dt>
<dd><p>Revert the work file(s) in the current VC fileset to the last revision
(<code class="code">vc-revert</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-v-u"></a>
<a class="index-entry-id" id="index-vc_002drevert"></a>
<a class="index-entry-id" id="index-vc_002drevert_002dshow_002ddiff"></a>
<p>If you want to discard all the changes you have made to the current
VC fileset, type <kbd class="kbd">C-x v u</kbd> (<code class="code">vc-revert</code>).  This will ask you
for confirmation before discarding the changes.  If you agree, the
fileset is reverted.
</p>
<p>If <code class="code">vc-revert-show-diff</code> is non-<code class="code">nil</code>, this command will
show you a diff between the work file(s) and the revision from which
you started editing.  Afterwards, the diff buffer will either be
killed (if this variable is <code class="code">kill</code>), or the buffer will be buried
(any other non-<code class="code">nil</code> value).  If you don&#8217;t want <kbd class="kbd">C-x v u</kbd> to
show a diff, set this variable to <code class="code">nil</code> (you can still view the
diff directly with <kbd class="kbd">C-x v =</kbd>; see <a class="pxref" href="#Old-Revisions">Examining And Comparing Old Revisions</a>).
</p>
<p>On locking-based version control systems, <kbd class="kbd">C-x v u</kbd> leaves files
unlocked; you must lock again to resume editing.  You can also use
<kbd class="kbd">C-x v u</kbd> to unlock a file if you lock it and then decide not to
change it.
</p>
</div>
<div class="subsection-level-extent" id="VC-Ignore">
<h4 class="subsection" id="Ignore-Version-Control-Files">29.1.9 Ignore Version Control Files</h4>

<dl class="table">
<dt><kbd class="kbd">C-x v G</kbd></dt>
<dd><p>Ignore a file under current version control system.  (<code class="code">vc-ignore</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-v-G"></a>
<a class="index-entry-id" id="index-vc_002dignore"></a>
<p>Many source trees contain some files that do not need to be
versioned, such as editor backups, object or bytecode files, and built
programs.  You can simply not add them, but then they&#8217;ll always crop
up as unknown files.  You can also tell the version control system to
ignore these files by adding them to the ignore file at the top of the
tree.  <kbd class="kbd">C-x v G</kbd> (<code class="code">vc-ignore</code>) can help you do this.  When
called with a prefix argument, you can remove a file from the ignored
file list.
</p>
</div>
<div class="subsection-level-extent" id="VC-Directory-Mode">
<h4 class="subsection" id="VC-Directory-Mode-1">29.1.10 VC Directory Mode</h4>

<a class="index-entry-id" id="index-VC-Directory-buffer"></a>
<p>The <em class="dfn">VC Directory buffer</em> is a specialized buffer for viewing
the version control statuses of the files in a directory tree, and
performing version control operations on those files.  In particular,
it is used to specify multi-file VC filesets for commands like
<kbd class="kbd">C-x&#160;v&#160;v</kbd><!-- /@w --> to act on (see <a class="pxref" href="#VC-Directory-Commands">VC Directory Commands</a>).
</p>
<a class="index-entry-id" id="index-C_002dx-v-d"></a>
<a class="index-entry-id" id="index-vc_002ddir"></a>
<p>To use the VC Directory buffer, type <kbd class="kbd">C-x v d</kbd> (<code class="code">vc-dir</code>).
This reads a directory&#8217;s name using the minibuffer, and switches to a VC
Directory buffer for that directory.  By default, the buffer is named
<samp class="file">*vc-dir*</samp>.  Its contents are described
in <a class="ref" href="#VC-Directory-Buffer">The VC Directory Buffer</a>.
</p>
<p>The <code class="code">vc-dir</code> command automatically detects the version control
system to be used in the specified directory.  In the event that more
than one system is being used in the directory, you should invoke the
command with a prefix argument, <kbd class="kbd">C-u C-x v d</kbd>; this prompts for
the version control system which the VC Directory buffer should use.
</p>
<a class="index-entry-id" id="index-PCL_002dCVS"></a>
<a class="index-entry-id" id="index-cvs"></a>
<a class="index-entry-id" id="index-CVS-directory-mode"></a>
<p>In addition to the VC Directory buffer, Emacs has a similar facility
called PCL-CVS which is specialized for CVS.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/pcl-cvs/index.html#Top">About
PCL-CVS</a> in <cite class="cite">PCL-CVS&#8212;The Emacs Front-End to CVS</cite>.
</p>
<p>You can also invoke VC commands from Dired buffers (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>).
In that case, any VC command you invoke considers the marked files as
the current fileset (see <a class="pxref" href="#Basic-VC-Editing">Basic Editing under Version Control</a>), defaulting to the file
on the current line if no files are marked.
</p>

<div class="subsubsection-level-extent" id="VC-Directory-Buffer">
<h4 class="subsubsection" id="The-VC-Directory-Buffer">29.1.10.1 The VC Directory Buffer</h4>

<p>The VC Directory buffer contains a list of version-controlled files
and their version control statuses.  It lists files in the current
directory (the one specified when you called <kbd class="kbd">C-x v d</kbd>) and its
subdirectories, but only those with a noteworthy status.  Files
that are up-to-date (i.e., the same as in the repository) are
omitted.  If all the files in a subdirectory are up-to-date, the
subdirectory is not listed either.  As an exception, if a file has
become up-to-date as a direct result of a VC command, it is listed.
</p>
<p>Here is an example of a VC Directory buffer listing:
</p>
<div class="example smallexample">
<div class="group"><pre class="example-preformatted">                     ./
    edited           configure.ac
*   added            README
    unregistered     temp.txt
                     src/
*   edited           src/main.c
</pre></div></div>

<p>Two work files have been modified but not committed:
<samp class="file">configure.ac</samp> in the current directory, and <samp class="file">main.c</samp> in the
<samp class="file">src/</samp> subdirectory.  The file named <samp class="file">README</samp> has been added
but is not yet committed, while <samp class="file">temp.txt</samp> is not under version
control (see <a class="pxref" href="#Registering">Registering a File for Version Control</a>).
</p>
<p>The &#8216;<samp class="samp">*</samp>&#8217; characters next to the entries for <samp class="file">README</samp> and
<samp class="file">src/main.c</samp> indicate that the user has marked these files as
the current VC fileset
(see <a class="pxref" href="#VC-Directory-Commands">VC Directory Commands</a>).
</p>
<p>The above example is typical for a decentralized version control
system like Bazaar, Git, or Mercurial.  Other systems can show other
statuses.  For instance, CVS shows the &#8216;<samp class="samp">needs-update</samp>&#8217; status if
the repository has changes that have not been applied to the work
file.  RCS and SCCS show the name of the user locking a file as its
status.
</p>
<p>On CVS, the <code class="code">vc-dir</code> command normally contacts the repository,
which may be on a remote machine, to check for updates.  If you change
the variable <code class="code">vc-cvs-stay-local</code> to <code class="code">nil</code> (see <a class="pxref" href="#CVS-Options">Options specific for CVS</a>), then Emacs avoids contacting a remote repository when
generating the VC Directory buffer (it will still contact it when
necessary, e.g., when doing a commit).  This may be desirable if you
are working offline or the network is slow.
</p>
<a class="index-entry-id" id="index-vc_002ddirectory_002dexclusion_002dlist"></a>
<p>The VC Directory buffer omits subdirectories listed in the variable
<code class="code">vc-directory-exclusion-list</code>.  Its default value contains
directories that are used internally by version control systems.
</p>
</div>
<div class="subsubsection-level-extent" id="VC-Directory-Commands">
<h4 class="subsubsection" id="VC-Directory-Commands-1">29.1.10.2 VC Directory Commands</h4>

<p>Emacs provides several commands for navigating the VC Directory
buffer, and for marking files as belonging to the current VC
fileset.
</p>
<dl class="table">
<dt><kbd class="kbd">n</kbd></dt>
<dt><kbd class="kbd"><kbd class="key">SPC</kbd></kbd></dt>
<dd><p>Move point to the next entry (<code class="code">vc-dir-next-line</code>).
</p>
</dd>
<dt><kbd class="kbd">p</kbd></dt>
<dd><p>Move point to the previous entry (<code class="code">vc-dir-previous-line</code>).
</p>
</dd>
<dt><kbd class="kbd"><kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Move to the next directory entry (<code class="code">vc-dir-next-directory</code>).
</p>
</dd>
<dt><kbd class="kbd">S-<kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Move to the previous directory entry
(<code class="code">vc-dir-previous-directory</code>).
</p>
</dd>
<dt><kbd class="kbd"><kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">f</kbd></dt>
<dd><p>Visit the file or directory listed on the current line
(<code class="code">vc-dir-find-file</code>).
</p>
</dd>
<dt><kbd class="kbd">o</kbd></dt>
<dd><p>Visit the file or directory on the current line, in a separate window
(<code class="code">vc-dir-find-file-other-window</code>).
</p>
</dd>
<dt><kbd class="kbd">m</kbd></dt>
<dd><p>Mark the file or directory on the current line (<code class="code">vc-dir-mark</code>),
putting it in the current VC fileset.  If the region is active, mark
all files in the region.
</p>
<p>A file cannot be marked with this command if it is already in a marked
directory, or one of its subdirectories.  Similarly, a directory
cannot be marked with this command if any file in its tree is marked.
</p>
</dd>
<dt><kbd class="kbd">M</kbd></dt>
<dd><p>If point is on a file entry, mark all files with the same status; if
point is on a directory entry, mark all files in that directory tree
(<code class="code">vc-dir-mark-all-files</code>).  With a prefix argument, mark all
listed files and directories.
</p>
</dd>
<dt><a id="index-vc_002ddir_002dmark_002dby_002dregexp"></a><kbd class="kbd">% m</kbd></dt>
<dt><kbd class="kbd">* %</kbd></dt>
<dd><p>You can use this command to mark files by regexp
(<code class="code">vc-dir-mark-by-regexp</code>).  If given a prefix, unmark files
instead.
</p>
</dd>
<dt><a id="index-vc_002ddir_002dmark_002dregistered_002dfiles"></a><kbd class="kbd">* r</kbd></dt>
<dd><p>You can use this command to mark files that are in one of registered
states, including edited, added or removed.
(<code class="code">vc-dir-mark-registered-files</code>).
</p>
</dd>
<dt><kbd class="kbd">G</kbd></dt>
<dd><p>Add the file under point to the list of files that the VC should
ignore (<code class="code">vc-dir-ignore</code>).  For instance, if the VC is Git, it
will append this file to the <samp class="file">.gitignore</samp> file.  If given a
prefix, do this with all the marked files.
</p>
</dd>
<dt><kbd class="kbd">q</kbd></dt>
<dd><p>Quit the VC Directory buffer, and bury it (<code class="code">quit-window</code>).
</p>
</dd>
<dt><kbd class="kbd">u</kbd></dt>
<dd><p>Unmark the file or directory on the current line.  If the region is
active, unmark all the files in the region (<code class="code">vc-dir-unmark</code>).
</p>
</dd>
<dt><kbd class="kbd">U</kbd></dt>
<dd><p>If point is on a file entry, unmark all files with the same status; if
point is on a directory entry, unmark all files in that directory tree
(<code class="code">vc-dir-unmark-all-files</code>).  With a prefix argument, unmark all
files and directories.
</p>
</dd>
<dt><kbd class="kbd">x</kbd></dt>
<dd><p>Hide files with &#8216;<samp class="samp">up-to-date</samp>&#8217; or &#8216;<samp class="samp">ignored</samp>&#8217; status
(<code class="code">vc-dir-hide-up-to-date</code>).  With a prefix argument, hide items
whose state is that of the item at point.
</p></dd>
</dl>

<a class="index-entry-id" id="index-vc_002ddir_002dmark"></a>
<a class="index-entry-id" id="index-vc_002ddir_002dmark_002dall_002dfiles"></a>
<p>While in the VC Directory buffer, all the files that you mark with
<kbd class="kbd">m</kbd> (<code class="code">vc-dir-mark</code>) or <kbd class="kbd">M</kbd> (<code class="code">vc-dir-mark-all-files</code>)
are in the current VC fileset.  If you mark a directory entry with
<kbd class="kbd">m</kbd>, all the listed files in that directory tree are in the
current VC fileset.  The files and directories that belong to the
current VC fileset are indicated with a &#8216;<samp class="samp">*</samp>&#8217; character in the VC
Directory buffer, next to their VC status.  In this way, you can set
up a multi-file VC fileset to be acted on by VC commands like
<kbd class="kbd">C-x&#160;v&#160;v</kbd><!-- /@w --> (see <a class="pxref" href="#Basic-VC-Editing">Basic Editing under Version Control</a>), <kbd class="kbd">C-x&#160;v&#160;=</kbd><!-- /@w -->
(see <a class="pxref" href="#Old-Revisions">Examining And Comparing Old Revisions</a>), and <kbd class="kbd">C-x&#160;v&#160;u</kbd><!-- /@w --> (see <a class="pxref" href="#VC-Undo">Undoing Version Control Actions</a>).
</p>
<p>The VC Directory buffer also defines some single-key shortcuts for
VC commands with the <kbd class="kbd">C-x v</kbd> prefix: <kbd class="kbd">=</kbd>, <kbd class="kbd">+</kbd>, <kbd class="kbd">l</kbd>,
<kbd class="kbd">i</kbd>, <kbd class="kbd">D</kbd>, <kbd class="kbd">L</kbd>, <kbd class="kbd">G</kbd>, <kbd class="kbd">I</kbd>, <kbd class="kbd">O</kbd>, and <kbd class="kbd">v</kbd>.
</p>
<p>For example, you can commit a set of edited files by opening a VC
Directory buffer, where the files are listed with the &#8216;<samp class="samp">edited</samp>&#8217;
status; marking the files; and typing <kbd class="kbd">v</kbd> or <kbd class="kbd">C-x v v</kbd>
(<code class="code">vc-next-action</code>).  If the version control system is
changeset-based, Emacs will commit the files in a single revision.
</p>
<p>While in the VC Directory buffer, you can also perform search and
replace on the current VC fileset, with the following commands:
</p>
<dl class="table">
<dt><kbd class="kbd">S</kbd></dt>
<dd><p>Search the fileset (<code class="code">vc-dir-search</code>).
</p>
</dd>
<dt><kbd class="kbd">Q</kbd></dt>
<dd><p>Do a regular expression query replace on the fileset
(<code class="code">vc-dir-query-replace-regexp</code>).
</p>
</dd>
<dt><kbd class="kbd">M-s a C-s</kbd></dt>
<dd><p>Do an incremental search on the fileset (<code class="code">vc-dir-isearch</code>).
</p>
</dd>
<dt><kbd class="kbd">M-s a C-M-s</kbd></dt>
<dd><p>Do an incremental regular expression search on the fileset
(<code class="code">vc-dir-isearch-regexp</code>).
</p></dd>
</dl>

<p>Apart from acting on multiple files, these commands behave much like
their single-buffer counterparts (see <a class="pxref" href="Search.xhtml#Search">Searching and Replacement</a>).
</p>
<p>The VC Directory buffer additionally defines some branch-related
commands starting with the prefix <kbd class="kbd">b</kbd>:
</p>
<dl class="table">
<dt><kbd class="kbd">b c</kbd></dt>
<dd><p>Create a new branch (<code class="code">vc-create-branch</code>).  See <a class="xref" href="#Creating-Branches">Creating New Branches</a>.
</p>
</dd>
<dt><kbd class="kbd">b l</kbd></dt>
<dd><p>Prompt for the name of a branch and display the change history of that
branch (<code class="code">vc-print-branch-log</code>).
</p>
</dd>
<dt><kbd class="kbd">b s</kbd></dt>
<dd><p>Switch to a branch (<code class="code">vc-switch-branch</code>).  See <a class="xref" href="#Switching-Branches">Switching between Branches</a>.
</p>
</dd>
<dt><kbd class="kbd">d</kbd></dt>
<dd><p>Delete the marked files, or the current file if no marks
(<code class="code">vc-dir-clean-delete)</code>.  The files will not be marked as
deleted in the version control system, so this function is mostly
useful for unregistered files.
</p></dd>
</dl>

<a class="index-entry-id" id="index-stashes-in-version-control"></a>
<a class="index-entry-id" id="index-shelves-in-version-control"></a>
<p>The above commands are also available via the menu bar, and via a
context menu invoked by <kbd class="kbd">mouse-2</kbd>.  Furthermore, some VC backends
use the menu to provide extra backend-specific commands.  For example,
Git and Bazaar allow you to manipulate <em class="dfn">stashes</em> and <em class="dfn">shelves</em>
(which are a way to temporarily put aside uncommitted changes, and
bring them back at a later time).
</p>
</div>
</div>
<div class="subsection-level-extent" id="Branches">
<h4 class="subsection" id="Version-Control-Branches">29.1.11 Version Control Branches</h4>
<a class="index-entry-id" id="index-branch-_0028version-control_0029"></a>

<p>One use of version control is to support multiple independent lines
of development, which are called <em class="dfn">branches</em>.  Amongst other
things, branches can be used for maintaining separate stable and
development versions of a program, and for developing unrelated
features in isolation from one another.
</p>
<p>VC&#8217;s support for branch operations is currently fairly limited.  For
decentralized version control systems, it provides commands for
<em class="dfn">updating</em> one branch with the contents of another, and for
<em class="dfn">merging</em> the changes made to two different branches
(see <a class="pxref" href="#Merging">Merging Branches</a>).  For centralized version control systems, it
supports checking out different branches and committing into new or
different branches.
</p>

<div class="subsubsection-level-extent" id="Switching-Branches">
<h4 class="subsubsection" id="Switching-between-Branches">29.1.11.1 Switching between Branches</h4>

<p>The various version control systems differ in how branches are
implemented, and these differences cannot be entirely concealed by VC.
</p>
<p>On some decentralized version control systems, including Bazaar and
Mercurial in its normal mode of operation, each branch has its own
working directory tree, so switching between branches just involves
switching directories.  On Git, branches are normally <em class="dfn">co-located</em>
in the same directory, and switching between branches is done using
the <kbd class="kbd">git checkout</kbd> command, which changes the contents of the
working tree to match the branch you switch to.  Bazaar also supports
co-located branches, in which case the <kbd class="kbd">bzr switch</kbd> command
will switch branches in the current directory.  With Subversion, you
switch to another branch using the <kbd class="kbd">svn switch</kbd> command.  With
Mercurial, command <kbd class="kbd">hg update</kbd> is used to switch to another
branch.
</p>
<a class="index-entry-id" id="index-C_002dx-v-b-s"></a>
<a class="index-entry-id" id="index-vc_002dswitch_002dbranch"></a>
<p>The VC command to switch to another branch in the current directory
is <kbd class="kbd">C-x v b s <var class="var">branch-name</var> <kbd class="key">RET</kbd></kbd> (<code class="code">vc-switch-branch</code>).
</p>
<p>On centralized version control systems, you can also switch between
branches by typing <kbd class="kbd">C-u C-x v v</kbd> in an up-to-date work file
(see <a class="pxref" href="#Advanced-C_002dx-v-v">Advanced Control in <kbd class="kbd">C-x v v</kbd></a>), and entering the revision ID for a
revision on another branch.  On CVS, for instance, revisions on the
<em class="dfn">trunk</em> (the main line of development) normally have IDs of the
form 1.1, 1.2, 1.3, &#8230;, while the first branch created from (say)
revision 1.2 has revision IDs 1.2.1.1, 1.2.1.2, &#8230;, the second
branch created from revision 1.2 has revision IDs 1.2.2.1, 1.2.2.2,
&#8230;, and so forth.  You can also specify the <em class="dfn">branch ID</em>,
which is a branch revision ID omitting its final component
(e.g., 1.2.1), to switch to the latest revision on that branch.
</p>
<p>On a locking-based system, switching to a different branch also
unlocks (write-protects) the working tree.
</p>
<p>Once you have switched to a branch, VC commands will apply to that
branch until you switch away; for instance, any VC filesets that you
commit will be committed to that specific branch.
</p>
</div>
<div class="subsubsection-level-extent" id="Pulling-_002f-Pushing">
<h4 class="subsubsection" id="Pulling_002fPushing-Changes-into_002ffrom-a-Branch">29.1.11.2 Pulling/Pushing Changes into/from a Branch</h4>

<dl class="table">
<dt><a id="index-push-changes-to-upstream-_0028VC_0029"></a><kbd class="kbd">C-x v P</kbd></dt>
<dd><p>With a decentralized version control system, update another repository
with locally-committed changes from the current branch (a.k.a.
<em class="dfn">push</em> changes).  This concept does not exist for centralized
version control systems
</p>
</dd>
<dt><a id="index-pull-changes-from-upstream-_0028VC_0029"></a><kbd class="kbd">C-x v +</kbd></dt>
<dd><p>With a decentralized version control system, update the current branch
of the local repository by <em class="dfn">pulling in</em> changes from another
repository.
</p>
<p>With a centralized version control system, update the current VC
fileset from the repository.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dx-v-P"></a>
<a class="index-entry-id" id="index-vc_002dpush"></a>
<a class="index-entry-id" id="index-upstream-repository"></a>
<p>On a decentralized version control system, the command <kbd class="kbd">C-x v P</kbd>
(<code class="code">vc-push</code>) updates another location, commonly known as the
<em class="dfn">upstream repository</em>, with locally-committed changes from the
current branch.  With a prefix argument, it prompts for the exact
version control command to run, which lets you specify where to push
changes; the default is <kbd class="kbd">bzr push</kbd> with Bazaar, <kbd class="kbd">git push</kbd>
with Git, and <kbd class="kbd">hg push</kbd> with Mercurial.  The default commands
always push to the repository in the default location determined by
the version control system from your branch configuration.
</p>
<p>Prior to pushing, you can use <kbd class="kbd">C-x v O</kbd> (<code class="code">vc-log-outgoing</code>)
to view a log buffer of the changes to be sent upstream.  See <a class="xref" href="#VC-Change-Log">VC Change Log</a>.
</p>
<a class="index-entry-id" id="index-bound-branch-_0028Bazaar-VCS_0029"></a>
<p>This command is currently supported only by Bazaar, Git, and Mercurial.
The concept of &#8220;pushing&#8221; does not exist for centralized version
control systems, where this operation is a part of committing a
changeset, so invoking this command on a centralized VCS signals an
error.  This command also signals an error when attempted in a Bazaar
<em class="dfn">bound branch</em>, where committing a changeset automatically pushes
the changes to the remote repository to which the local branch is
bound.
</p>
<a class="index-entry-id" id="index-C_002dx-v-_002b"></a>
<a class="index-entry-id" id="index-vc_002dpull"></a>
<p>With a decentralized version control system, the command <kbd class="kbd">C-x v
+</kbd> (<code class="code">vc-pull</code>) updates the current branch of the local repository
and it working tree with changes made in the upstream repository.  It
is typically used to update a copy (a.k.a. <em class="dfn">clone</em>) of a remote
branch.  If you supply a prefix argument, the command prompts for the
exact version control command to use, which lets you specify where to
pull changes from.  Otherwise, it pulls from the repository in the
default location determined by the version control system from your
branch configuration.
</p>
<p>Amongst decentralized version control systems, <kbd class="kbd">C-x v +</kbd> is
currently supported only by Bazaar, Git, and Mercurial.  With Bazaar,
it calls <kbd class="kbd">bzr pull</kbd> for ordinary branches (to pull from a
master branch into a mirroring branch), and <kbd class="kbd">bzr update</kbd> for a
bound branch (to pull from a central repository).  With Git, it calls
<kbd class="kbd">git pull</kbd> to fetch changes from a remote repository and merge
it into the current branch.  With Mercurial, it calls <kbd class="kbd">hg pull
-u</kbd> to fetch changesets from the default remote repository and update
the working directory.
</p>
<p>Prior to pulling, you can use <kbd class="kbd">C-x v I</kbd> (<code class="code">vc-log-incoming</code>)
to view a log buffer of the changes to be applied.  See <a class="xref" href="#VC-Change-Log">VC Change Log</a>.
</p>
<p>With a centralized version control system like CVS, <kbd class="kbd">C-x v +</kbd>
updates the current VC fileset from the repository.
</p>
</div>
<div class="subsubsection-level-extent" id="Merging">
<h4 class="subsubsection" id="Merging-Branches">29.1.11.3 Merging Branches</h4>
<a class="index-entry-id" id="index-merging-changes"></a>

<dl class="table">
<dt><kbd class="kbd">C-x v m</kbd></dt>
<dd><p>With a decentralized version control system, merge changes from another
branch into the current one.
</p>
<p>With a centralized version control system, merge changes from another
branch into the current VC fileset.
</p></dd>
</dl>

<p>While developing a branch, you may sometimes need to <em class="dfn">merge</em> in
changes that have already been made in another branch.  This is not a
trivial operation, as overlapping and conflicting changes may have
been made to the two branches.
</p>
<p>With a decentralized version control system, you merge changes with
the command <kbd class="kbd">C-x v m</kbd> (<code class="code">vc-merge</code>).  With Bazaar, this
prompts for the exact arguments to pass to the <code class="command">bzr merge</code>
command, offering a sensible default if possible.  With Git, this
prompts for the name of a branch to merge from, with completion (based
on the branch names known to the current repository).  With Mercurial,
this prompts for argument to pass to <code class="command">hg merge</code>.  The output
from running the merge command is shown in a separate buffer.
</p>
<p>With a centralized version control system like CVS, <kbd class="kbd">C-x v m</kbd>
prompts for a branch ID, or a pair of revision IDs (see <a class="pxref" href="#Switching-Branches">Switching between Branches</a>); then it finds the changes from that branch, or the changes
between the two revisions you specified, and merges those changes into
the current VC fileset.  If you just type <kbd class="kbd"><kbd class="key">RET</kbd></kbd> at the
prompt, Emacs simply merges any changes that were made on the same
branch since you checked the file out.
</p>
<a class="index-entry-id" id="index-conflicts_002c-VC"></a>
<a class="index-entry-id" id="index-resolving-conflicts"></a>
<p>Immediately after performing a merge, only the working tree is
modified, and you can review the changes produced by the merge with
<kbd class="kbd">C-x v D</kbd> and related commands (see <a class="pxref" href="#Old-Revisions">Examining And Comparing Old Revisions</a>).  If the
two branches contained overlapping changes, merging produces a
<em class="dfn">conflict</em>; a warning appears in the output of the merge command,
and <em class="dfn">conflict markers</em> are inserted into each affected work file,
surrounding the two sets of conflicting changes.  You must then
resolve the conflict by editing the conflicted files; by default,
Emacs will place buffers with VC conflicts in the special Smerge mode,
which provides special commands for resolving the merge conflicts.
Once you are done with resolving the conflicts and have saved the
files with resolved conflicts, those files must be committed in the
usual way for the merge to take effect (see <a class="pxref" href="#Basic-VC-Editing">Basic Editing under Version Control</a>).
</p>
</div>
<div class="subsubsection-level-extent" id="Creating-Branches">
<h4 class="subsubsection" id="Creating-New-Branches">29.1.11.4 Creating New Branches</h4>

<p>On centralized version control systems like CVS, Emacs supports
creating new branches as part of a commit operation.  When committing
a modified VC fileset, type <kbd class="kbd">C-u C-x v v</kbd> (<code class="code">vc-next-action</code>
with a prefix argument; see <a class="pxref" href="#Advanced-C_002dx-v-v">Advanced Control in <kbd class="kbd">C-x v v</kbd></a>).  Then Emacs prompts
for a revision ID for the new revision.  You should specify a suitable
branch ID for a branch starting at the current revision.  For example,
if the current revision is 2.5, the branch ID should be 2.5.1, 2.5.2,
and so on, depending on the number of existing branches at that point.
</p>
<a class="index-entry-id" id="index-C_002dx-v-b-c"></a>
<a class="index-entry-id" id="index-vc_002dcreate_002dbranch"></a>
<p>This procedure will not work for distributed version control systems
like git or Mercurial.  For those systems you should use the command
<code class="code">vc-create-branch</code> (<kbd class="kbd">C-x&#160;v&#160;b&#160;c&#160;<var class="var">branch-name</var>&#160;<kbd class="key">RET</kbd></kbd><!-- /@w -->)
instead.
</p>
<p>To create a new branch at an older revision (one that is no longer
the head of a branch), first select that revision (see <a class="pxref" href="#Switching-Branches">Switching between Branches</a>).  Your procedure will then differ depending on whether you
are using a locking or merging-based VCS.
</p>
<p>On a locking VCS, you will need to lock the old revision branch with
<kbd class="kbd">C-x v v</kbd>.  You&#8217;ll be asked to confirm, when you lock the old
revision, that you really mean to create a new branch&#8212;if you say no,
you&#8217;ll be offered a chance to lock the latest revision instead.  On a
merging-based VCS you will skip this step.
</p>
<p>Then make your changes and type <kbd class="kbd">C-x v v</kbd> again to commit a new
revision.  This creates a new branch starting from the selected
revision.
</p>
<p>After the branch is created, subsequent commits create new revisions
on that branch.  To leave the branch, you must explicitly select a
different revision with <kbd class="kbd">C-u C-x v v</kbd>.
</p>

</div>
</div>
<div class="subsection-level-extent" id="Miscellaneous-VC">
<h4 class="subsection" id="Miscellaneous-Commands-and-Features-of-VC">29.1.12 Miscellaneous Commands and Features of VC</h4>

<p>This section explains the less-frequently-used features of VC.
</p>

<div class="subsubsection-level-extent" id="Change-Logs-and-VC">
<h4 class="subsubsection" id="Change-Logs-and-VC-1">29.1.12.1 Change Logs and VC</h4>

<p>If you use RCS or CVS for a program with a <samp class="file">ChangeLog</samp> file
(see <a class="pxref" href="#Change-Log">Change Logs</a>),
you can generate change log entries from the version control log
entries of previous commits.
</p>
<p>Note that this only works with RCS or CVS.  This procedure would be
particularly incorrect on a modern changeset-based version control
system, where changes to the <samp class="file">ChangeLog</samp> file would normally be
committed as part of a changeset.  In that case, you should write the
change log entries first, then pull them into the &#8216;<samp class="samp">*vc-log*</samp>&#8217;
buffer when you commit
(see <a class="pxref" href="#Log-Buffer">Features of the Log Entry Buffer</a>).
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-vc_002dupdate_002dchange_002dlog"></a>
<a id="index-C_002dx-v-a"></a><kbd class="kbd">C-x v a</kbd></dt>
<dd><p>Visit the current directory&#8217;s <samp class="file">ChangeLog</samp> file and, for
registered files in that directory, create new entries for versions
committed since the most recent change log entry
(<code class="code">vc-update-change-log</code>).
</p>
</dd>
<dt><kbd class="kbd">C-u C-x v a</kbd></dt>
<dd><p>As above, but only find entries for the current buffer&#8217;s file.
</p></dd>
</dl>

<p>For example, suppose the first line of <samp class="file">ChangeLog</samp> is dated
1999-04-10, and that the only check-in since then was by Nathaniel
Bowditch to <samp class="file">rcs2log</samp> on 1999-05-22 with log entry &#8216;<samp class="samp">Ignore
log messages that start with '#'.</samp>&#8217;.  Then <kbd class="kbd">C-x v a</kbd> inserts this
<samp class="file">ChangeLog</samp> entry:
</p>
<div class="example smallexample">
<div class="group"><pre class="example-preformatted">1999-05-22  Nathaniel Bowditch  &lt;nat@apn.org&gt;

        * rcs2log: Ignore log messages that start with '#'.
</pre></div></div>

<p>If the version control log entry specifies a function name (in
parenthesis at the beginning of a line), that is reflected in the
<samp class="file">ChangeLog</samp> entry.  For example, if a log entry for <samp class="file">vc.el</samp>
is &#8216;<samp class="samp">(vc-do-command): Check call-process status.</samp>&#8217;, the
<samp class="file">ChangeLog</samp> entry is:
</p>
<div class="example smallexample">
<div class="group"><pre class="example-preformatted">1999-05-06  Nathaniel Bowditch  &lt;nat@apn.org&gt;

        * vc.el (vc-do-command): Check call-process status.
</pre></div></div>

<p>When <kbd class="kbd">C-x v a</kbd> adds several change log entries at once, it
groups related log entries together if they all are checked in by the
same author at nearly the same time.  If the log entries for several
such files all have the same text, it coalesces them into a single
entry.
</p>
</div>
<div class="subsubsection-level-extent" id="VC-Delete_002fRename">
<h4 class="subsubsection" id="Deleting-and-Renaming-Version_002dControlled-Files">29.1.12.2 Deleting and Renaming Version-Controlled Files</h4>
<a class="index-entry-id" id="index-renaming-version_002dcontrolled-files"></a>

<dl class="table">
<dt><kbd class="kbd">M-x vc-delete-file</kbd></dt>
<dd><p>Prompt for a file name, delete the file from the working tree, and
schedule the deletion for committing.
</p>
</dd>
<dt><kbd class="kbd">M-x vc-rename-file</kbd></dt>
<dd><p>Prompt for two file names, <var class="var">old</var> and <var class="var">new</var>, rename them in the
working tree, and schedule the renaming for committing.  The <var class="var">old</var>
file defaults to the current buffer&#8217;s file name if it is under VC.
</p></dd>
</dl>

<a class="index-entry-id" id="index-vc_002ddelete_002dfile"></a>
<p>If you wish to delete a version-controlled file, use the command
<kbd class="kbd">M-x vc-delete-file</kbd>.  This prompts for the file name, and deletes
it via the version control system.  The file is removed from the
working tree, and in the VC Directory buffer
(see <a class="pxref" href="#VC-Directory-Mode">VC Directory Mode</a>),
it is displayed with the &#8216;<samp class="samp">removed</samp>&#8217; status.  When you commit it,
the deletion takes effect in the repository.
</p>
<a class="index-entry-id" id="index-vc_002drename_002dfile"></a>
<p>To rename a version-controlled file, type <kbd class="kbd">M-x vc-rename-file</kbd>.
This prompts for two arguments: the name of the file you wish to
rename, and the new name; then it performs the renaming via the
version control system.  The renaming takes effect immediately in the
working tree, and takes effect in the repository when you commit the
renamed file.
</p>
<p>On modern version control systems that have built-in support for
renaming, the renamed file retains the full change history of the
original file.  On CVS and older version control systems, the
<code class="code">vc-rename-file</code> command actually works by creating a copy of the
old file under the new name, registering it, and deleting the old
file.  In this case, the change history is not preserved.
</p>
</div>
<div class="subsubsection-level-extent" id="Revision-Tags">
<h4 class="subsubsection" id="Revision-Tags-1">29.1.12.3 Revision Tags</h4>
<a class="index-entry-id" id="index-revision-tag"></a>
<a class="index-entry-id" id="index-tags-for-version-control"></a>

<p>Most version control systems allow you to apply a <em class="dfn">revision tag</em>
to a specific version of a version-controlled tree.  On modern
changeset-based version control systems, a revision tag is simply a
symbolic name for a particular revision.  On older file-based systems
like CVS, each tag is added to the entire set of version-controlled
files, allowing them to be handled as a unit.  Revision tags are
commonly used to identify releases that are distributed to users.
</p>
<p>There are two basic commands for tags; one makes a tag with a given
name, the other retrieves a named tag.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-vc_002dcreate_002dtag"></a>
<a id="index-C_002dx-v-s"></a><code class="code">C-x v s <var class="var">name</var> <kbd class="key">RET</kbd></code></dt>
<dd><p>Define the working revision of every registered file in or under the
current directory as a tag named <var class="var">name</var>
(<code class="code">vc-create-tag</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-vc_002dretrieve_002dtag"></a>
<a id="index-C_002dx-v-r"></a><code class="code">C-x v r <var class="var">name</var> <kbd class="key">RET</kbd></code></dt>
<dd><p>For all registered files at or below the current directory level,
retrieve the tagged revision <var class="var">name</var>. This command will switch to a
branch if <var class="var">name</var> is a branch name and your VCS distinguishes
branches from tags.  (<code class="code">vc-retrieve-tag</code>).
</p>
<p>This command reports an error if any files are locked at or below the
current directory, without changing anything; this is to avoid
overwriting work in progress.
</p></dd>
</dl>

<p>You can give a tag or branch name as an argument to <kbd class="kbd">C-x v =</kbd> or
<kbd class="kbd">C-x v ~</kbd>
(see <a class="pxref" href="#Old-Revisions">Examining And Comparing Old Revisions</a>).
Thus, you can use it to compare a tagged version against the current files,
or two tagged versions against each other.
</p>
<p>On SCCS, VC implements tags itself; these tags are visible only
through VC.  Most later systems (including CVS, Subversion, bzr, git,
and hg) have a native tag facility, and VC uses it where available;
those tags will be visible even when you bypass VC.
</p>
<p>In file-based version control systems, when you rename a registered
file you need to rename its master along with it; the command
<code class="code">vc-rename-file</code> will do this automatically
(see <a class="pxref" href="#VC-Delete_002fRename">Deleting and Renaming Version-Controlled Files</a>).
If you are using SCCS, you must also update the records of the tag, to
mention the file by its new name (<code class="code">vc-rename-file</code> does this,
too).  An old tag that refers to a master file that no longer exists
under the recorded name is invalid; VC can no longer retrieve it.  It
would be beyond the scope of this manual to explain enough about RCS
and SCCS to explain how to update the tags by hand.  Using
<code class="code">vc-rename-file</code> makes the tag remain valid for retrieval, but it
does not solve all problems.  For example, some of the files in your
program probably refer to others by name.  At the very least, the
makefile probably mentions the file that you renamed.  If you retrieve
an old tag, the renamed file is retrieved under its new name, which is
not the name that the makefile expects.  So the program won&#8217;t really
work as retrieved.
</p>
</div>
<div class="subsubsection-level-extent" id="Version-Headers">
<h4 class="subsubsection" id="Inserting-Version-Control-Headers">29.1.12.4 Inserting Version Control Headers</h4>

<p>On Subversion, CVS, RCS, and SCCS, you can put certain special
strings called <em class="dfn">version headers</em> into a work file.  When the file
is committed, the version control system automatically puts the
revision number, the name of the user who made the commit, and other
relevant information into the version header.
</p>
<a class="index-entry-id" id="index-vc_002dconsult_002dheaders"></a>
<p>VC does not normally use the information in the version headers.  As
an exception, when using RCS, Emacs uses the version header, if there
is one, to determine the file version, since it is often more reliable
than the RCS master file.  To inhibit using the version header this
way, change the variable <code class="code">vc-consult-headers</code> to <code class="code">nil</code>.  VC
then always uses the file permissions (if it is supposed to trust
them), or else checks the master file.
</p>
<a class="index-entry-id" id="index-vc_002dinsert_002dheaders"></a>
<a class="index-entry-id" id="index-vc_002dbackend_002dheader"></a>
<p>To insert a suitable header string into the current buffer, use the
command <kbd class="kbd">M-x vc-insert-headers</kbd>.  This command works only on
Subversion, CVS, RCS, and SCCS.  The variable
<code class="code">vc-<var class="var">backend</var>-header</code> contains the list of keywords to insert
into the version header; for instance, CVS uses <code class="code">vc-cvs-header</code>,
whose default value is <code class="code">'(&quot;\$Id\$&quot;)</code>.  (The extra backslashes
prevent the string constant from being interpreted as a header, if the
Emacs Lisp file defining it is maintained with version control.)  The
<code class="code">vc-insert-headers</code> command inserts each keyword in the list on a
new line at point, surrounded by tabs, and inside comment delimiters
if necessary.
</p>
<a class="index-entry-id" id="index-vc_002dstatic_002dheader_002dalist"></a>
<p>The variable <code class="code">vc-static-header-alist</code> specifies further strings
to add based on the name of the buffer.  Its value should be a list of
elements of the form <code class="code">(<var class="var">regexp</var> . <var class="var">format</var>)</code>.  Whenever
<var class="var">regexp</var> matches the buffer name, <var class="var">format</var> is also inserted as
part of the version header.  A &#8216;<samp class="samp">%s</samp>&#8217; in <var class="var">format</var> is replaced
with the file&#8217;s version control type.
</p>
</div>
<div class="subsubsection-level-extent" id="Editing-VC-Commands">
<h4 class="subsubsection" id="Editing-VC-Commands-1">29.1.12.5 Editing VC Commands</h4>

<a class="index-entry-id" id="index-vc_002dedit_002dnext_002dcommand"></a>
<a class="index-entry-id" id="index-C_002dx-v-_0021"></a>
<p>You can use the <kbd class="kbd">C-x v !</kbd> (<code class="code">vc-edit-next-command</code>) prefix
command to edit the shell command line that VC is about to run.  This
is primarily intended to make it possible to add optional command-line
arguments to VCS commands without unnecessary complications of the VC
command set and its interfaces with the backend.
</p>
<p>For example, Git can produce logs of more than one branch, but
<kbd class="kbd">C-x v b l</kbd> (<code class="code">vc-print-branch-log</code>) prompts for the name of
just one branch.  To obtain a log of more than one branch, you can
type <kbd class="kbd">C-x&#160;v&#160;!&#160;C-x&#160;v&#160;b&#160;l</kbd><!-- /@w --> and then append the names of
additional branches to the end of the &#8216;<samp class="samp">git log</samp>&#8217; command that VC
is about to run.
</p>
</div>
<div class="subsubsection-level-extent" id="Preparing-Patches">
<h4 class="subsubsection" id="Preparing-Patches-1">29.1.12.6 Preparing Patches</h4>

<a class="index-entry-id" id="index-vc_002dprepare_002dpatch"></a>
<p>When collaborating on projects it is common to send patches via email,
to share changes.  You can do this using VC with the
<code class="code">vc-prepare-patch</code> command.  This will prompt you for the
revisions you wish to share, and which destination email address(es)
to use.  Separate the revisions using the value of
<var class="var">crm-separator</var>, commas by default.  The command will then prepare
those revisions using your <abbr class="abbr" title="Mail User Agent">MUA</abbr> (Mail User Agent) for you to
review and send.
</p>
<p>When invoked interactively in a Log View buffer with marked revisions,
those marked revisions will be used.
</p>
<a class="index-entry-id" id="index-vc_002dprepare_002dpatches_002dseparately"></a>
<p>Depending on the value of the user option
<code class="code">vc-prepare-patches-separately</code>, <code class="code">vc-prepare-patch</code> will
generate one or more messages.  The default value <code class="code">t</code> means
prepare and display a message for each revision, one after another.  A
value of <code class="code">nil</code> means to generate a single message with all
patches attached in the body.
</p>
<a class="index-entry-id" id="index-vc_002ddefault_002dpatch_002daddressee"></a>
<p>If you expect to contribute patches on a regular basis, you can set
the user option <code class="code">vc-default-patch-addressee</code> to the address(es)
you wish to use.  This will be used as the default value when invoking
<code class="code">vc-prepare-patch</code>.  Project maintainers may consider setting
this as a directory local variable (see <a class="pxref" href="Customization.xhtml#Directory-Variables">Per-Directory Local Variables</a>).
</p>
</div>
</div>
<div class="subsection-level-extent" id="Customizing-VC">
<h4 class="subsection" id="Customizing-VC-1">29.1.13 Customizing VC</h4>

<a class="index-entry-id" id="index-vc_002dhandled_002dbackends"></a>
<p>The variable <code class="code">vc-handled-backends</code> determines which version
control systems VC should handle.  The default value is <code class="code">(RCS CVS
SVN SCCS SRC Bzr Git Hg)</code>, so it contains all the version systems
that are currently supported.  If you want VC to ignore one or more of
these systems, exclude its name from the list.  To disable VC
entirely, set this variable to <code class="code">nil</code>.
</p>
<p>The order of systems in the list is significant: when you visit a
file registered in more than one system, VC uses the system that comes
first in <code class="code">vc-handled-backends</code> by default.  The order is also
significant when you register a file for the first time
(see <a class="pxref" href="#Registering">Registering a File for Version Control</a>).
</p>

<div class="subsubsection-level-extent" id="General-VC-Options">
<h4 class="subsubsection" id="General-Options">29.1.13.1 General Options</h4>

<a class="index-entry-id" id="index-vc_002dmake_002dbackup_002dfiles"></a>
<p>Emacs normally does not save backup files for source files that are
maintained with version control.  If you want to make backup files even
for files that use version control, set the variable
<code class="code">vc-make-backup-files</code> to a non-<code class="code">nil</code> value.
</p>
<a class="index-entry-id" id="index-vc_002dfollow_002dsymlinks"></a>
<a class="index-entry-id" id="index-symbolic-links-_0028and-version-control_0029"></a>
<p>Editing a version-controlled file through a symbolic link may cause
unexpected results, if you are unaware that the underlying file is
version-controlled.  The variable <code class="code">vc-follow-symlinks</code> controls
what Emacs does if you try to visit a symbolic link pointing to a
version-controlled file.  If the value is <code class="code">ask</code> (the default),
Emacs asks for confirmation.  If it is <code class="code">nil</code>, Emacs just displays
a warning message.  If it is <code class="code">t</code>, Emacs automatically follows the
link and visits the real file instead.
</p>
<a class="index-entry-id" id="index-vc_002dsuppress_002dconfirm"></a>
<p>If <code class="code">vc-suppress-confirm</code> is non-<code class="code">nil</code>, then <kbd class="kbd">C-x v v</kbd>
and <kbd class="kbd">C-x v i</kbd> can save the current buffer without asking, and
<kbd class="kbd">C-x v u</kbd> also operates without asking for confirmation.
</p>
<a class="index-entry-id" id="index-vc_002dcommand_002dmessages"></a>
<p>VC mode does much of its work by running the shell commands for the
appropriate version control system.  If <code class="code">vc-command-messages</code> is
non-<code class="code">nil</code>, VC displays messages to indicate which shell commands
it runs, and additional messages when the commands finish.
</p>
</div>
<div class="subsubsection-level-extent" id="RCS-and-SCCS">
<h4 class="subsubsection" id="Options-for-RCS-and-SCCS">29.1.13.2 Options for RCS and SCCS</h4>

<a class="index-entry-id" id="index-non_002dstrict-locking-_0028RCS_0029"></a>
<a class="index-entry-id" id="index-locking_002c-non_002dstrict-_0028RCS_0029"></a>
<p>By default, RCS uses locking to coordinate the activities of several
users, but there is a mode called <em class="dfn">non-strict locking</em> in which
you can check-in changes without locking the file first.  Use
&#8216;<samp class="samp">rcs -U</samp>&#8217; to switch to non-strict locking for a particular file,
see the <code class="code">rcs</code> manual page for details.
</p>
<p>When deducing the version control state of an RCS file, VC first
looks for an RCS version header string in the file (see <a class="pxref" href="#Version-Headers">Inserting Version Control Headers</a>).  If there is no header string, VC normally looks at the
file permissions of the work file; this is fast.  But there might be
situations when the file permissions cannot be trusted.  In this case
the master file has to be consulted, which is rather expensive.  Also
the master file can only tell you <em class="emph">if</em> there&#8217;s any lock on the
file, but not whether your work file really contains that locked
version.
</p>
<p>You can tell VC not to use version headers to determine the file
status by setting <code class="code">vc-consult-headers</code> to <code class="code">nil</code>.  VC then
always uses the file permissions (if it is supposed to trust them), or
else checks the master file.
</p>
<p>VC determines the version control state of files under SCCS much as
with RCS.  It does not consider SCCS version headers, though.  Thus,
the variable <code class="code">vc-consult-headers</code> does not affect SCCS use.
</p>
</div>
<div class="subsubsection-level-extent" id="CVS-Options">
<h4 class="subsubsection" id="Options-specific-for-CVS">29.1.13.3 Options specific for CVS</h4>

<a class="index-entry-id" id="index-vc_002dcvs_002dglobal_002dswitches"></a>
<p>You can specify additional command line options to pass to all CVS
operations in the variable <code class="code">vc-cvs-global-switches</code>.  These
switches are inserted immediately after the <code class="code">cvs</code> command, before
the name of the operation to invoke.
</p>
<a class="index-entry-id" id="index-vc_002dcvs_002dstay_002dlocal"></a>
<a class="index-entry-id" id="index-remote-repositories-_0028CVS_0029"></a>
<p>When using a CVS repository on a remote machine, VC can try keeping
network interactions to a minimum.  This is controlled by the variable
<code class="code">vc-cvs-stay-local</code>.  If <code class="code">vc-cvs-stay-local</code> is
<code class="code">only-file</code> (the default), VC determines the version control
status of each file using only the entry in the local CVS subdirectory
and the information returned by previous CVS commands.  As a
consequence, if you have modified a file and somebody else has checked
in other changes, you will not be notified of the conflict until you
try to commit.
</p>
<p>If you change <code class="code">vc-cvs-stay-local</code> to <code class="code">nil</code>, VC queries the
remote repository <em class="emph">before</em> it decides what to do in
<code class="code">vc-next-action</code> (<kbd class="kbd">C-x v v</kbd>), just as it does for local
repositories.
</p>
<p>You can also set <code class="code">vc-cvs-stay-local</code> to a regular expression
that is matched against the repository host name; VC then stays local
only for repositories from hosts that match the pattern.
</p>
<a class="index-entry-id" id="index-automatic-version-backups"></a>
<p>When using a remote repository, Emacs normally makes <em class="dfn">automatic
version backups</em> of the original versions of each edited file.  These
local backups are made whenever you save the first changes to a file,
and they are removed after you commit your changes to the repository.
(Note that these are not the same as ordinary Emacs backup files;
see <a class="pxref" href="Files.xhtml#Backup">Backup Files</a>.)
Commands like <kbd class="kbd">C-x v =</kbd> and <kbd class="kbd">C-x v u</kbd> make use of automatic
version backups, if possible, to avoid having to access the network.
</p>
<p>Setting <code class="code">vc-cvs-stay-local</code> to <code class="code">nil</code> disables the making
of automatic version backups.
</p>
<a class="index-entry-id" id="index-manual-version-backups"></a>
<p>Automatic version backups have names of the form
<code class="code"><var class="var">file</var>.~<var class="var">version</var>.~</code><!-- /@w -->.  This is similar to the name
that <kbd class="kbd">C-x v ~</kbd> saves old versions to
(see <a class="pxref" href="#Old-Revisions">Examining And Comparing Old Revisions</a>),
except for the additional dot (&#8216;<samp class="samp">.</samp>&#8217;) after the version.  The
relevant VC commands can use both kinds of version backups.  The main
difference is that the manual version backups made by <kbd class="kbd">C-x v
~</kbd> are not deleted automatically when you commit.
</p>
<a class="index-entry-id" id="index-locking-_0028CVS_0029"></a>
<p>CVS does not use locking by default, but there are ways to enable
locking-like behavior using its <code class="env">CVSREAD</code> or <em class="dfn">watch</em> feature;
see the CVS documentation for details.  If that case, you can use
<kbd class="kbd">C-x v v</kbd> in Emacs to toggle locking, as you would for a
locking-based version control system
(see <a class="pxref" href="#VC-With-A-Locking-VCS">Basic Version Control with Locking</a>).
</p>
</div>
</div>
</div>
<div class="section-level-extent" id="Projects">
<h3 class="section" id="Working-with-Projects">29.2 Working with Projects</h3>
<a class="index-entry-id" id="index-projects"></a>

<a class="index-entry-id" id="index-project-root"></a>
<p>A <em class="dfn">project</em> is a collection of files used for producing one or
more programs.  Files that belong to a project are typically stored in
a hierarchy of directories; the top-level directory of the hierarchy
is known as the <em class="dfn">project root</em>.
</p>
<a class="index-entry-id" id="index-project-back_002dend"></a>
<p>Whether a given directory is a root of some project is determined by
the project-specific infrastructure, known as <em class="dfn">project back-end</em>.
Emacs currently supports two such back-ends: VC-aware (see <a class="pxref" href="#Version-Control">Version Control</a>), whereby a VCS repository is considered a project; and EDE
(see <a class="pxref" href="#EDE">Emacs Development Environment</a>).  This is expected to be extended in the future to
support additional types of projects.
</p>
<p>Which files do or don&#8217;t belong to a project is also determined by
the project back-end.  For example, the VC-aware back-end doesn&#8217;t
consider &#8220;ignored&#8221; files (see <a class="pxref" href="#VC-Ignore">Ignore Version Control Files</a>) to be part of the
project.  Also, the VC-aware Project back-end considers &#8220;untracked&#8221;
files by default.  That behavior is controllable with the variable
<code class="code">project-vc-include-untracked</code>.
</p>

<div class="subsection-level-extent" id="Project-File-Commands">
<h4 class="subsection" id="Project-Commands-That-Operate-on-Files">29.2.1 Project Commands That Operate on Files</h4>

<dl class="table">
<dt><kbd class="kbd">C-x p f</kbd></dt>
<dd><p>Visit a file that belongs to the current project
(<code class="code">project-find-file</code>).
</p></dd>
<dt><kbd class="kbd">C-x p g</kbd></dt>
<dd><p>Find matches for a regexp in all files that belong to the current
project (<code class="code">project-find-regexp</code>).
</p></dd>
<dt><kbd class="kbd">M-x project-search</kbd></dt>
<dd><p>Interactively search for regexp matches in all files that belong to
the current project.
</p></dd>
<dt><kbd class="kbd">C-x p r</kbd></dt>
<dd><p>Perform query-replace for a regexp in all files that belong to the
current project (<code class="code">project-query-replace-regexp</code>).
</p></dd>
<dt><kbd class="kbd">C-x p d</kbd></dt>
<dd><p>Run Dired in the current project&#8217;s root directory
(<code class="code">project-dired</code>).
</p></dd>
<dt><kbd class="kbd">C-x p v</kbd></dt>
<dd><p>Run <code class="code">vc-dir</code> in the current project&#8217;s root directory
(<code class="code">project-vc-dir</code>).
</p></dd>
<dt><kbd class="kbd">C-x p s</kbd></dt>
<dd><p>Start an inferior shell in the current project&#8217;s root directory
(<code class="code">project-shell</code>).
</p></dd>
<dt><kbd class="kbd">C-x p e</kbd></dt>
<dd><p>Start Eshell in the current project&#8217;s root directory
(<code class="code">project-eshell</code>).
</p></dd>
<dt><kbd class="kbd">C-x p c</kbd></dt>
<dd><p>Run compilation in the current project&#8217;s root directory
(<code class="code">project-compile</code>).
</p></dd>
<dt><kbd class="kbd">C-x p !</kbd></dt>
<dd><p>Run shell command in the current project&#8217;s root directory
(<code class="code">project-shell-command</code>).
</p></dd>
<dt><kbd class="kbd">C-x p &amp;</kbd></dt>
<dd><p>Run shell command asynchronously in the current project&#8217;s root
directory (<code class="code">project-async-shell-command</code>).
</p></dd>
</dl>

<p>Emacs provides commands for handling project files conveniently.
This subsection describes these commands.
</p>
<a class="index-entry-id" id="index-current-project"></a>
<p>All of the commands described here share the notion of the
<em class="dfn">current project</em>.  The current project is determined by the
<code class="code">default-directory</code> (see <a class="pxref" href="Files.xhtml#File-Names">File Names</a>) of the buffer that is
the current buffer when the command is invoked.  If that directory
doesn&#8217;t seem to belong to a recognizable project, these commands
prompt you for the project directory.
</p>
<a class="index-entry-id" id="index-project_002dfind_002dfile"></a>
<a class="index-entry-id" id="index-vc_002ddirectory_002dexclusion_002dlist-1"></a>
<p>The command <kbd class="kbd">C-x p f</kbd> (<code class="code">project-find-file</code>) is a convenient
way of visiting files (see <a class="pxref" href="Files.xhtml#Visiting">Visiting Files</a>) that belong to the current
project.  Unlike <kbd class="kbd">C-x C-f</kbd>, this command doesn&#8217;t require to type
the full file name of the file to visit, you can type only the file&#8217;s
base name (i.e., omit the leading directories).  In addition, the
completion candidates considered by the command include only the files
belonging to the current project, and nothing else.  If there&#8217;s a file
name at point, this command offers that file as the first element of
the &#8220;future history&#8221;.  If given a prefix, include all files under
the project root, except for <abbr class="acronym">VCS</abbr> directories listed in
<code class="code">vc-directory-exclusion-list</code>.
</p>
<a class="index-entry-id" id="index-project_002dfind_002dregexp"></a>
<p>The command <kbd class="kbd">C-x p g</kbd> (<code class="code">project-find-regexp</code>) is similar to
<code class="code">rgrep</code> (see <a class="pxref" href="Building.xhtml#Grep-Searching">Searching with Grep under Emacs</a>), but it searches only the files
that belong to the current project.  The command prompts for the
regular expression to search, and pops up an Xref mode buffer with the
search results, where you can select a match using the Xref mode
commands (see <a class="pxref" href="#Xref-Commands">Commands Available in the <samp class="file">*xref*</samp> Buffer</a>).  When invoked with a prefix
argument, this command additionally prompts for the base directory
from which to start the search; this allows, for example, to limit the
search only to project files under a certain subdirectory of the
project root.  The way this command displays the matches is affected
by the value of <code class="code">xref-auto-jump-to-first-xref</code> (see <a class="pxref" href="#Identifier-Search">Searching and Replacing with Identifiers</a>).
</p>
<a class="index-entry-id" id="index-project_002dsearch"></a>
<p><kbd class="kbd">M-x project-search</kbd> is a sequential variant of
<code class="code">project-find-regexp</code>.  It prompts for a regular expression to
search in the current project&#8217;s files, but instead of finding all the
matches and displaying them, it stops when it finds a match and visits
the matched file at the locus of the match, allowing you to edit the
matched file.  To find the rest of the matches, type <kbd class="kbd">M-x&#160;fileloop-continue&#160;<kbd class="key">RET</kbd></kbd><!-- /@w -->.
</p>
<a class="index-entry-id" id="index-project_002dquery_002dreplace_002dregexp"></a>
<p><kbd class="kbd">C-x p r</kbd> (<code class="code">project-query-replace-regexp</code>) is similar to
<code class="code">project-search</code>, but it prompts you for whether to replace each
match it finds, like <code class="code">query-replace</code> does (see <a class="pxref" href="Search.xhtml#Query-Replace">Query Replace</a>), and continues to the next match after you respond.  If your
response causes Emacs to exit the query-replace loop, you can later
continue with <kbd class="kbd">M-x&#160;fileloop-continue&#160;<kbd class="key">RET</kbd></kbd><!-- /@w -->.
</p>
<a class="index-entry-id" id="index-project_002dfind_002ddir"></a>
<p>The command <kbd class="kbd">C-x p d</kbd> (<code class="code">project-find-dir</code>) prompts you to
choose a directory inside the current project, with completion.
And opens a Dired buffer (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>) listing the files in it.
</p>
<a class="index-entry-id" id="index-project_002ddired"></a>
<p>The command <kbd class="kbd">C-x p D</kbd> (<code class="code">project-dired</code>) opens a Dired
buffer (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>) listing the files in the current project&#8217;s root
directory.
</p>
<a class="index-entry-id" id="index-project_002dvc_002ddir"></a>
<p>The command <kbd class="kbd">C-x p v</kbd> (<code class="code">project-vc-dir</code>) opens a VC
Directory buffer (see <a class="pxref" href="#VC-Directory-Mode">VC Directory Mode</a>) listing the version
control statuses of the files in a directory tree under the current
project&#8217;s root directory.
</p>
<a class="index-entry-id" id="index-project_002dshell"></a>
<p>The command <kbd class="kbd">C-x p s</kbd> (<code class="code">project-shell</code>) starts a shell
session (see <a class="pxref" href="Shell.xhtml#Shell">Running Shell Commands from Emacs</a>) in a new buffer with the current project&#8217;s
root as the working directory.
</p>
<a class="index-entry-id" id="index-project_002deshell"></a>
<p>The command <kbd class="kbd">C-x p e</kbd> (<code class="code">project-eshell</code>) starts an Eshell
session in a new buffer with the current project&#8217;s root as the working
directory.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/eshell/index.html#Top">Eshell</a> in <cite class="cite">Eshell: The Emacs Shell</cite>.
</p>
<a class="index-entry-id" id="index-project_002dcompile"></a>
<p>The command <kbd class="kbd">C-x p c</kbd> (<code class="code">project-compile</code>) runs compilation
(see <a class="pxref" href="Building.xhtml#Compilation">Running Compilations under Emacs</a>) in the current project&#8217;s root directory.
</p>
<a class="index-entry-id" id="index-project_002dshell_002dcommand"></a>
<p>The command <kbd class="kbd">C-x p !</kbd> (<code class="code">project-shell-command</code>) runs
<code class="code">shell-command</code> in the current project&#8217;s root directory.
</p>
<a class="index-entry-id" id="index-project_002dasync_002dshell_002dcommand"></a>
<p>The command <kbd class="kbd">C-x p &amp;</kbd> (<code class="code">project-async-shell-command</code>) runs
<code class="code">async-shell-command</code> in the current project&#8217;s root directory.
</p>
</div>
<div class="subsection-level-extent" id="Project-Buffer-Commands">
<h4 class="subsection" id="Project-Commands-That-Operate-on-Buffers">29.2.2 Project Commands That Operate on Buffers</h4>

<dl class="table">
<dt><kbd class="kbd">C-x p b</kbd></dt>
<dd><p>Switch to another buffer belonging to the current project
(<code class="code">project-switch-to-buffer</code>).
</p></dd>
<dt><kbd class="kbd">C-x p C-b</kbd></dt>
<dd><p>List the project buffers (<code class="code">project-list-buffers</code>).
</p></dd>
<dt><kbd class="kbd">C-x p k</kbd></dt>
<dd><p>Kill all live buffers that belong to the current project
(<code class="code">project-kill-buffers</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-project_002dswitch_002dto_002dbuffer"></a>
<p>Working on a project could potentially involve having many buffers
visiting files that belong to the project, and also buffers that
belong to the project, but don&#8217;t visit any files (like the
<samp class="file">*compilation*</samp> buffer created by <code class="code">project-compile</code>).  The
command <kbd class="kbd">C-x p b</kbd> (<code class="code">project-switch-to-buffer</code>) helps you
switch between buffers that belong to the current project by prompting
for a buffer to switch and considering only the current project&#8217;s
buffers as candidates for completion.
</p>
<a class="index-entry-id" id="index-project_002dlist_002dbuffers"></a>
<p>Like the command <code class="code">list-buffers</code> (see <a class="pxref" href="Buffers.xhtml#List-Buffers">Listing Existing Buffers</a>), the
command <kbd class="kbd">C-x p C-b</kbd> (<code class="code">project-list-buffers</code>) displays a list
of existing buffers, but only belonging to the current project.
</p>
<a class="index-entry-id" id="index-project_002dkill_002dbuffers"></a>
<a class="index-entry-id" id="index-project_002dkill_002dbuffer_002dconditions"></a>
<a class="index-entry-id" id="index-project_002dkill_002dbuffers_002ddisplay_002dbuffer_002dlist"></a>
<p>When you finish working on the project, you may wish to kill all the
buffers that belong to the project, to keep your Emacs session
smaller.  The command <kbd class="kbd">C-x p k</kbd> (<code class="code">project-kill-buffers</code>)
accomplishes that: it kills all the buffers that belong to the current
project that satisfy any of <code class="code">project-kill-buffer-conditions</code>.  If
<code class="code">project-kill-buffers-display-buffer-list</code> is non-<code class="code">nil</code>, the
buffers to be killed will be displayed first.
</p>
</div>
<div class="subsection-level-extent" id="Switching-Projects">
<h4 class="subsection" id="Switching-Projects-1">29.2.3 Switching Projects</h4>

<dl class="table">
<dt><kbd class="kbd">C-x p p</kbd></dt>
<dd><p>Run an Emacs command for another project (<code class="code">project-switch-project</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-project_002dswitch_002dproject"></a>
<a class="index-entry-id" id="index-project_002dswitch_002dcommands"></a>
<p>Commands that operate on project files (see <a class="pxref" href="#Project-File-Commands">Project Commands That Operate on Files</a>) will conveniently prompt you for a project directory when
no project is current.  When you are inside some project, but you want
to operate on a different project, use the <kbd class="kbd">C-x p p</kbd> command
(<code class="code">project-switch-project</code>).  This command prompts you to choose a
directory among known project roots, and then displays the menu of
available commands to operate on the project you choose.  The variable
<code class="code">project-switch-commands</code> controls which commands are available
in the menu, and which key invokes each command.
</p>
<a class="index-entry-id" id="index-project_002dlist_002dfile"></a>
<p>The variable <code class="code">project-list-file</code> names the file in which Emacs
records the list of known projects.  It defaults to the file
<samp class="file">projects</samp> in <code class="code">user-emacs-directory</code> (see <a class="pxref" href="Customization.xhtml#Find-Init">How Emacs Finds Your Init File</a>).
</p>
</div>
<div class="subsection-level-extent" id="Managing-Projects">
<h4 class="subsection" id="Managing-the-Project-List-File">29.2.4 Managing the Project List File</h4>

<dl class="table">
<dt><kbd class="kbd">M-x project-forget-project</kbd></dt>
<dd><p>Remove a known project from the <code class="code">project-list-file</code>.
</p></dd>
</dl>

<a class="index-entry-id" id="index-project_002dforget_002dproject"></a>
<p>Normally Emacs automatically adds and removes projects to and from the
<code class="code">project-list-file</code>, but sometimes you may want to manually edit
the available projects.  <kbd class="kbd">M-x project-forget-project</kbd>
prompts you to choose one of the available projects, and then removes
it from the file.
</p>
</div>
</div>
<div class="section-level-extent" id="Change-Log">
<h3 class="section" id="Change-Logs">29.3 Change Logs</h3>

<a class="index-entry-id" id="index-change-log"></a>
<p>Many software projects keep a <em class="dfn">change log</em>.  This is a file,
normally named <samp class="file">ChangeLog</samp>, containing a chronological record of
when and how the program was changed.  Sometimes, these files are
automatically generated from the change log entries stored in version
control systems, or are used to generate these change log entries.
Sometimes, there are several change log files, each recording the
changes in one directory or directory tree.
</p>

<div class="subsection-level-extent" id="Change-Log-Commands">
<h4 class="subsection" id="Change-Log-Commands-1">29.3.1 Change Log Commands</h4>

<a class="index-entry-id" id="index-C_002dx-4-a"></a>
<a class="index-entry-id" id="index-add_002dchange_002dlog_002dentry_002dother_002dwindow"></a>
<p>The Emacs command <kbd class="kbd">C-x 4 a</kbd> adds a new entry to the change log
file for the file you are editing
(<code class="code">add-change-log-entry-other-window</code>).  If that file is actually
a backup file, it makes an entry appropriate for the file&#8217;s
parent&#8212;that is useful for making log entries for functions that
have been deleted in the current version.
</p>
<p><kbd class="kbd">C-x 4 a</kbd> visits the change log file and creates a new entry
unless the most recent entry is for today&#8217;s date and your name.  It
also creates a new item for the current file.  For many languages, it
can even guess the name of the function or other object that was
changed.
</p>
<p>To find the change log file, Emacs searches up the directory tree from
the file you are editing.  By default, it stops if it finds a
directory that seems to be the root of a version-control repository.
To change this, customize <code class="code">change-log-directory-files</code>.
</p>
<a class="index-entry-id" id="index-add_002dlog_002dkeep_002dchanges_002dtogether"></a>
<p>When the variable <code class="code">add-log-keep-changes-together</code> is
non-<code class="code">nil</code>, <kbd class="kbd">C-x 4 a</kbd> adds to any existing item for the file,
rather than starting a new item.
</p>
<p>You can combine multiple changes of the same nature.  If you don&#8217;t
enter any text after the initial <kbd class="kbd">C-x 4 a</kbd>, any subsequent
<kbd class="kbd">C-x 4 a</kbd> adds another symbol to the change log entry.
</p>
<a class="index-entry-id" id="index-add_002dlog_002dalways_002dstart_002dnew_002drecord"></a>
<p>If <code class="code">add-log-always-start-new-record</code> is non-<code class="code">nil</code>,
<kbd class="kbd">C-x 4 a</kbd> always makes a new entry, even if the last entry
was made by you and on the same date.
</p>
<a class="index-entry-id" id="index-change_002dlog_002dversion_002dinfo_002denabled"></a>
<a class="index-entry-id" id="index-change_002dlog_002dversion_002dnumber_002dregexp_002dlist"></a>
<a class="index-entry-id" id="index-file-version-in-change-log-entries"></a>
<p>If the value of the variable <code class="code">change-log-version-info-enabled</code>
is non-<code class="code">nil</code>, <kbd class="kbd">C-x 4 a</kbd> adds the file&#8217;s version number to the
change log entry.  It finds the version number by searching the first
ten percent of the file, using regular expressions from the variable
<code class="code">change-log-version-number-regexp-list</code>.
</p>
<a class="index-entry-id" id="index-Change-Log-mode"></a>
<a class="index-entry-id" id="index-change_002dlog_002dmode"></a>
<p>The change log file is visited in Change Log mode.  In this major
mode, each bunch of grouped items counts as one paragraph, and each
entry is considered a page.  This facilitates editing the entries.
<kbd class="kbd">C-j</kbd> and auto-fill indent each new line like the previous line;
this is convenient for entering the contents of an entry.
</p>
<a class="index-entry-id" id="index-change_002dlog_002dgoto_002dsource"></a>
<p>You can use the command <code class="code">change-log-goto-source</code> (by default
bound to <kbd class="kbd">C-c C-c</kbd>) to go to the source location of the change log
entry near point, when Change Log mode is on.  Then subsequent
invocations of the <code class="code">next-error</code> command (by default bound to
<kbd class="kbd">M-g M-n</kbd> and <kbd class="kbd">C-x `</kbd>) will move between entries in the change
log.  You will jump to the actual site in the file that was changed,
not just to the next change log entry.  You can also use
<code class="code">previous-error</code> to move back through the change log entries.
</p>
<a class="index-entry-id" id="index-change_002dlog_002dmerge"></a>
<p>You can use the command <kbd class="kbd">M-x change-log-merge</kbd> to merge other
log files into a buffer in Change Log Mode, preserving the date
ordering of entries.
</p>
<a class="index-entry-id" id="index-add_002dlog_002ddont_002dcreate_002dchangelog_002dfile"></a>
<p>Version control systems are another way to keep track of changes in
your program and keep a change log.  Many projects that use a VCS don&#8217;t
keep a separate versioned change log file nowadays, so you may wish to
avoid having such a file in the repository.  If the value of
<code class="code">add-log-dont-create-changelog-file</code> is non-<code class="code">nil</code>, commands
like <kbd class="kbd">C-x 4 a</kbd> (<code class="code">add-change-log-entry-other-window</code>) will
record changes in a suitably named temporary buffer instead of a file,
if such a file does not already exist.
</p>
<p>Whether you have a change log file or use a temporary buffer for
change logs, you can type <kbd class="kbd">C-c C-a</kbd>
(<code class="code">log-edit-insert-changelog</code>) in the VC Log buffer to insert the
relevant change log entries, if they exist.  See <a class="xref" href="#Log-Buffer">Features of the Log Entry Buffer</a>.
</p>
</div>
<div class="subsection-level-extent" id="Format-of-ChangeLog">
<h4 class="subsection" id="Format-of-ChangeLog-1">29.3.2 Format of ChangeLog</h4>

<p>A change log entry starts with a header line that contains the
current date, your name (taken from the variable
<code class="code">add-log-full-name</code>), and your email address (taken from the
variable <code class="code">add-log-mailing-address</code>).  Aside from these header
lines, every line in the change log starts with a space or a tab.  The
bulk of the entry consists of <em class="dfn">items</em>, each of which starts with a
line starting with whitespace and a star.  Here are two entries, both
dated in May 1993, with two items and one item respectively.
</p>
<div class="example smallexample">
<pre class="example-preformatted">1993-05-25  Richard Stallman  &lt;rms@gnu.org&gt;

        * man.el: Rename symbols 'man-*' to 'Man-*'.
        (manual-entry): Make prompt string clearer.

        * simple.el (blink-matching-paren-distance):
        Change default to 12,000.

1993-05-24  Richard Stallman  &lt;rms@gnu.org&gt;

        * vc.el (minor-mode-map-alist): Don't use it if it's void.
        (vc-cancel-version): Doc fix.
</pre></div>

<p>One entry can describe several changes; each change should have its
own item, or its own line in an item.  Normally there should be a
blank line between items.  When items are related (parts of the same
change, in different places), group them by leaving no blank line
between them.
</p>
<p>You should put a copyright notice and permission notice at the
end of the change log file.  Here is an example:
</p>
<div class="example smallexample">
<pre class="example-preformatted">Copyright 1997, 1998 Free Software Foundation, Inc.
Copying and distribution of this file, with or without modification, are
permitted provided the copyright notice and this notice are preserved.
</pre></div>

<p>Of course, you should substitute the proper years and copyright holder.
</p>
</div>
</div>
<div class="section-level-extent" id="Xref">
<h3 class="section" id="Find-Identifier-References">29.4 Find Identifier References</h3>
<a class="index-entry-id" id="index-xref"></a>

<a class="index-entry-id" id="index-tag"></a>
<p>An <em class="dfn">identifier</em> is a name of a syntactical subunit of the
program: a function, a subroutine, a method, a class, a data type, a
macro, etc.  In a programming language, each identifier is a symbol in
the language&#8217;s syntax.  Identifiers are also known as <em class="dfn">tags</em>.
</p>
<p>Program development and maintenance requires capabilities to quickly
find where each identifier was defined and referenced, to rename
identifiers across the entire project, etc.  These capabilities are
also useful for finding references in major modes other than those
defined to support programming languages.  For example, chapters,
sections, appendices, etc. of a text or a TeX document can be
treated as subunits as well, and their names can be used as
identifiers.  In this chapter, we use the term &#8220;identifiers&#8221; to
collectively refer to the names of any kind of subunits, in program
source and in other kinds of text alike.
</p>
<p>Emacs provides a unified interface to these capabilities, called
&#8216;<samp class="samp">xref</samp>&#8217;.
</p>
<a class="index-entry-id" id="index-xref-backend"></a>
<p>To do its job, <code class="code">xref</code> needs to make use of information and to
employ methods specific to the major mode.  What files to search for
identifiers, how to find references to identifiers, how to complete on
identifiers&#8212;all this and more is mode-specific knowledge.
<code class="code">xref</code> delegates the mode-specific parts of its job to a
<em class="dfn">backend</em> provided by the mode; it also includes defaults for some
of its commands, for those modes that don&#8217;t provide their own.
</p>
<p>A backend can implement its capabilities in a variety of ways.  Here
are a few examples:
</p>
<ol class="enumerate" type="a" start="1">
<li> Some major modes provide built-in means for looking up the language
symbols.  For example, Emacs Lisp symbols can be identified by
searching the package load history, maintained by the Emacs Lisp
interpreter, and by consulting the built-in documentation strings; the
Emacs Lisp mode uses these facilities in its backend to allow finding
definitions of symbols.  (One disadvantage of this kind of backend is
that it only knows about subunits that were loaded into the
interpreter.)

</li><li> If Eglot is activated for the current buffer&#8217;s project
(see <a class="pxref" href="#Projects">Working with Projects</a>) and the current buffer&#8217;s major mode, Eglot consults
an external language server program and provides the data supplied by
the server regarding the definitions of the identifiers in the
project.  See <a href="../eglot_epub3/Eglot-Features.html#Eglot-Features">Eglot Features</a> in <cite class="cite">Eglot: The Emacs LSP Client</cite>.

</li><li> An external program can extract references by scanning the relevant
files, and build a database of these references.  A backend can then
access this database whenever it needs to list or look up references.
The Emacs distribution includes <code class="command">etags</code>, a command for tagging
identifier definitions in programs, which supports many programming
languages and other major modes, such as HTML, by extracting
references into <em class="dfn">tags tables</em>.  See <a class="xref" href="#Create-Tags-Table">Creating Tags Tables</a>.  Major
modes for languages supported by <code class="command">etags</code> can use tags tables
as basis for their backend.  (One disadvantage of this kind of backend
is that tags tables need to be kept reasonably up to date, by
rebuilding them from time to time.)
</li></ol>


<div class="subsection-level-extent" id="Find-Identifiers">
<h4 class="subsection" id="Find-Identifiers-1">29.4.1 Find Identifiers</h4>

<p>This subsection describes the commands that find references to
identifiers and perform various queries about identifiers.  Each such
reference could <em class="emph">define</em> an identifier, e.g., provide the
implementation of a program subunit or the text of a document section;
or it could <em class="emph">use</em> the identifier, e.g., call a function or a
method, assign a value to a variable, mention a chapter in a
cross-reference, etc.
</p>

<div class="subsubsection-level-extent" id="Looking-Up-Identifiers">
<h4 class="subsubsection" id="Looking-Up-Identifiers-1">29.4.1.1 Looking Up Identifiers</h4>
<a class="index-entry-id" id="index-find-definition-of-symbols"></a>
<a class="index-entry-id" id="index-identifier_002c-finding-definition-of"></a>
<a class="index-entry-id" id="index-find-references-to-symbols"></a>

<p>The most important thing that <code class="code">xref</code> enables you to do is to find
the definition of a specific identifier.
</p>
<dl class="table">
<dt><kbd class="kbd">M-.</kbd></dt>
<dd><p>Find definitions of an identifier (<code class="code">xref-find-definitions</code>).
</p></dd>
<dt><kbd class="kbd">C-M-. <var class="var">pattern</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Find all identifiers whose name matches <var class="var">pattern</var>
(<code class="code">xref-find-apropos</code>).
</p></dd>
<dt><kbd class="kbd">C-x 4 . <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Find definitions of identifier, but display it in another window
(<code class="code">xref-find-definitions-other-window</code>).
</p></dd>
<dt><kbd class="kbd">C-x 5 . <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Find definition of identifier, and display it in a new frame
(<code class="code">xref-find-definitions-other-frame</code>).
</p></dd>
<dt><kbd class="kbd">M-x xref-find-definitions-at-mouse</kbd></dt>
<dd><p>Find definition of identifier at mouse click.
</p></dd>
<dt><kbd class="kbd">M-,</kbd></dt>
<dd><p>Go back to where you previously invoked <kbd class="kbd">M-.</kbd> and friends
(<code class="code">xref-go-back</code>).
</p></dd>
<dt><kbd class="kbd">C-M-,</kbd></dt>
<dd><p>Go forward to where you previously invoked <kbd class="kbd">M-,</kbd>
(<code class="code">xref-go-forward</code>).
</p></dd>
<dt><kbd class="kbd">M-x xref-etags-mode</kbd></dt>
<dd><p>Switch <code class="code">xref</code> to use the <code class="code">etags</code> backend.
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002d_002e"></a>
<a class="index-entry-id" id="index-xref_002dfind_002ddefinitions"></a>
<a class="index-entry-id" id="index-xref_002dprompt_002dfor_002didentifier"></a>
<p><kbd class="kbd">M-.</kbd> (<code class="code">xref-find-definitions</code>) shows the definition of
the identifier at point.  With a prefix argument, or if there&#8217;s no
identifier at point, it prompts for the identifier.  (If you want it
to always prompt, customize <code class="code">xref-prompt-for-identifier</code> to
<code class="code">t</code>.)
</p>
<p>When entering the identifier argument to <kbd class="kbd">M-.</kbd>, you can use the
usual minibuffer completion commands (see <a class="pxref" href="Minibuffer.xhtml#Completion">Completion</a>), with the
known identifier names being the completion candidates.
</p>
<a class="index-entry-id" id="index-C_002dx-4-_002e"></a>
<a class="index-entry-id" id="index-xref_002dfind_002ddefinitions_002dother_002dwindow"></a>
<a class="index-entry-id" id="index-C_002dx-5-_002e"></a>
<a class="index-entry-id" id="index-xref_002dfind_002ddefinitions_002dother_002dframe"></a>
<p>Like most commands that can switch buffers,
<code class="code">xref-find-definitions</code> has a variant that displays the new
buffer in another window, and one that makes a new frame for it.  The
former is <kbd class="kbd">C-x&#160;4&#160;.</kbd><!-- /@w -->
(<code class="code">xref-find-definitions-other-window</code>), and the latter is
<kbd class="kbd">C-x&#160;5&#160;.</kbd><!-- /@w -->  (<code class="code">xref-find-definitions-other-frame</code>).
</p>
<p>The command <code class="code">xref-find-definitions-at-mouse</code> works like
<code class="code">xref-find-definitions</code>, but it looks for the identifier name at
or around the place of a mouse event.  This command is intended to be
bound to a mouse event, such as <kbd class="kbd">C-M-mouse-1</kbd>, for example.
</p>
<a class="index-entry-id" id="index-C_002dM_002d_002e"></a>
<a class="index-entry-id" id="index-xref_002dfind_002dapropos"></a>
<a class="index-entry-id" id="index-tags_002dapropos_002dadditional_002dactions"></a>
<p>The command <kbd class="kbd">C-M-.</kbd> (<code class="code">xref-find-apropos</code>) is like
<code class="code">apropos</code> for tags (see <a class="pxref" href="Help.xhtml#Apropos">Apropos</a>).  It displays a list of
identifiers in the selected tags table whose names match the specified
<var class="var">regexp</var>.  This is just like <kbd class="kbd">M-.</kbd>, except that it does regexp
matching of identifiers instead of matching symbol names as fixed
strings.  By default, the command pops up the <samp class="file">*xref*</samp> buffer,
like <kbd class="kbd">M-.</kbd>, but you can display additional output by customizing
the variable <code class="code">tags-apropos-additional-actions</code>; see its
documentation for details.
</p>
<a class="index-entry-id" id="index-xref_002dauto_002djump_002dto_002dfirst_002ddefinition"></a>
<p>If any of the above commands finds more than one matching
definition, it by default pops up the <samp class="file">*xref*</samp> buffer showing the
matching candidates.  (<kbd class="kbd">C-M-.</kbd> <em class="emph">always</em> pops up the
<samp class="file">*xref*</samp> buffer if it finds at least one match.)  The candidates
are normally shown in that buffer as the name of a file and the
matching identifier(s) in that file.  In that buffer, you can select
any of the candidates for display, and you have several additional
commands, described in <a class="ref" href="#Xref-Commands">Commands Available in the <samp class="file">*xref*</samp> Buffer</a>.  However, if the value of
the variable <code class="code">xref-auto-jump-to-first-definition</code> is <code class="code">move</code>,
the first of these candidates is automatically selected in the
<samp class="file">*xref*</samp> buffer, and if it&#8217;s <code class="code">t</code> or <code class="code">show</code>, the first
candidate is automatically shown in its own window; <code class="code">t</code> also
selects the window showing the first candidate.  The default value is
<code class="code">nil</code>, which just shows the candidates in the <samp class="file">*xref*</samp>
buffer, but doesn&#8217;t select any of them.
</p>
<a class="index-entry-id" id="index-M_002d_002c"></a>
<a class="index-entry-id" id="index-xref_002dgo_002dback"></a>
<p>To go back to places <em class="emph">from where</em> you&#8217;ve displayed the
definition, use <kbd class="kbd">M-,</kbd> (<code class="code">xref-go-back</code>).  It jumps back to the
point of the last invocation of <kbd class="kbd">M-.</kbd>.  Thus you can find and
examine the definition of something with <kbd class="kbd">M-.</kbd> and then return to
where you were with <kbd class="kbd">M-,</kbd>.  <kbd class="kbd">M-,</kbd> allows you to retrace the
steps you made forward in the history of places, all the way to the
first place in history, where you first invoked <kbd class="kbd">M-.</kbd>, or to any
place in-between.
</p>
<a class="index-entry-id" id="index-C_002dM_002d_002c"></a>
<a class="index-entry-id" id="index-xref_002dgo_002dforward"></a>
<p>If you previously went back too far with <kbd class="kbd">M-,</kbd>, or want to
re-examine a place from which you went back, you can use <kbd class="kbd">C-M-,</kbd>
(<code class="code">xref-go-forward</code>) to go forward again.  This is similar to
using <kbd class="kbd">M-.</kbd>, except that you don&#8217;t need on each step to move point
to the identifier whose definition you want to look up.  <kbd class="kbd">C-M-,</kbd>
allows you to retrace all the steps you made back in the history of
places, all the way to the last place in history, where you invoked
<kbd class="kbd">M-,</kbd>, or to any place in-between.
</p>
<a class="index-entry-id" id="index-xref_002detags_002dmode"></a>
<p>Some major modes install <code class="code">xref</code> support facilities that might
sometimes fail to find certain identifiers.  For example, in Emacs
Lisp mode (see <a class="pxref" href="Building.xhtml#Lisp-Eval">Evaluating Emacs Lisp Expressions</a>) <kbd class="kbd">M-.</kbd> will by default find only
functions and variables from Lisp packages which are loaded into the
current Emacs session or are auto-loaded (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Autoload.html#Autoload">Autoload</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).  If <kbd class="kbd">M-.</kbd> fails to find some
identifiers, you can try forcing <code class="code">xref</code> to use the <code class="code">etags</code>
backend (see <a class="pxref" href="#Xref">Find Identifier References</a>).  To this end, turn on the Xref Etags minor
mode with <kbd class="kbd">M-x&#160;xref-etags-mode</kbd><!-- /@w -->, then invoke <kbd class="kbd">M-.</kbd> again.
(For this to work, be sure to run <code class="command">etags</code> to create the tags
table in the directory tree of the source files, see <a class="ref" href="#Create-Tags-Table">Creating Tags Tables</a>.)
</p>
</div>
<div class="subsubsection-level-extent" id="Xref-Commands">
<h4 class="subsubsection" id="Commands-Available-in-the-_002axref_002a-Buffer">29.4.1.2 Commands Available in the <samp class="file">*xref*</samp> Buffer</h4>
<a class="index-entry-id" id="index-commands-in-_002axref_002a-buffers"></a>
<a class="index-entry-id" id="index-XREF-mode"></a>

<p>The following commands are provided in the <samp class="file">*xref*</samp> buffer by
the special XREF mode:
</p>
<dl class="table">
<dt><kbd class="kbd"><kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">mouse-1</kbd></dt>
<dd><p>Display the reference on the current line (<code class="code">xref-goto-xref</code>).
With prefix argument, also bury the <samp class="file">*xref*</samp> buffer.
</p>
</dd>
<dt><a id="index-xref_002dselect_002dand_002dshow_002dxref"></a><kbd class="kbd">mouse-2</kbd></dt>
<dd><p>The same as <code class="code">mouse-1</code>, but make the window displaying the
<samp class="file">*xref*</samp> buffer the selected window
(<code class="code">xref-select-and-show-xref</code>).
</p>
</dd>
<dt><a id="index-xref_002dnext_002dline"></a><kbd class="kbd">n</kbd></dt>
<dt><kbd class="kbd">.</kbd></dt>
<dd><p>Move to the next reference and display it in the other window
(<code class="code">xref-next-line</code>).
</p>
</dd>
<dt><a id="index-xref_002dnext_002dgroup"></a><kbd class="kbd">N</kbd></dt>
<dd><p>Move to the first reference of the next reference group and display it
in the other window (<code class="code">xref-next-group</code>).
</p>
</dd>
<dt><a id="index-xref_002dprev_002dline"></a><kbd class="kbd">p</kbd></dt>
<dt><kbd class="kbd">,</kbd></dt>
<dd><p>Move to the previous reference and display it in the other window
(<code class="code">xref-prev-line</code>).
</p>
</dd>
<dt><a id="index-xref_002dprev_002dgroup"></a><kbd class="kbd">P</kbd></dt>
<dd><p>Move to the first reference of the previous reference group and
display it in the other window (<code class="code">xref-prev-group</code>).
</p>
</dd>
<dt><a id="index-xref_002dshow_002dlocation_002dat_002dpoint"></a><kbd class="kbd">C-o</kbd></dt>
<dd><p>Display the reference on the current line in the other window
(<code class="code">xref-show-location-at-point</code>).
</p>
</dd>
<dt><kbd class="kbd">r <var class="var">pattern</var> <kbd class="key">RET</kbd> <var class="var">replacement</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Perform interactive query-replace on references that match
<var class="var">pattern</var> (<code class="code">xref-query-replace-in-results</code>), replacing
the match with <var class="var">replacement</var>.  This command can only be used in
<samp class="file">*xref*</samp> buffers that show all the matches for an identifier in
all the relevant files.  See <a class="xref" href="#Identifier-Search">Searching and Replacing with Identifiers</a>.
</p>
</dd>
<dt><a id="index-xref_002drevert_002dbuffer"></a><kbd class="kbd">g</kbd></dt>
<dd><p>Refresh the contents of the <samp class="file">*xref*</samp> buffer
(<code class="code">xref-revert-buffer</code>).
</p>
</dd>
<dt><a id="index-xref_002dquit_002dand_002dpop_002dmarker_002dstack"></a><kbd class="kbd">M-,</kbd></dt>
<dd><p>Quit the window showing the <samp class="file">*xref*</samp> buffer, and then jump to the
previous Xref stack location (<code class="code">xref-quit-and-pop-marker-stack</code>).
</p>
</dd>
<dt><a id="index-xref_002dquit"></a><kbd class="kbd">q</kbd></dt>
<dd><p>Quit the window showing the <samp class="file">*xref*</samp> buffer (<code class="code">xref-quit</code>).
</p></dd>
</dl>

<p>In addition, the usual navigation commands, such as the arrow keys,
<kbd class="kbd">C-n</kbd>, and <kbd class="kbd">C-p</kbd> are available for moving around the buffer
without displaying the references.
</p>
</div>
<div class="subsubsection-level-extent" id="Identifier-Search">
<h4 class="subsubsection" id="Searching-and-Replacing-with-Identifiers">29.4.1.3 Searching and Replacing with Identifiers</h4>
<a class="index-entry-id" id="index-search-and-replace-in-multiple-source-files"></a>
<a class="index-entry-id" id="index-multiple-source-file-search-and-replace"></a>

<p>The commands in this section perform various search and replace
operations either on identifiers themselves or on files that reference
them.
</p>
<dl class="table">
<dt><kbd class="kbd">M-?</kbd></dt>
<dd><p>Find all the references for the identifier at point.
</p>
</dd>
<dt><kbd class="kbd">r</kbd></dt>
<dt><kbd class="kbd">M-x xref-query-replace-in-results <kbd class="key">RET</kbd> <var class="var">replacement</var> <kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">C-u M-x xref-query-replace-in-results <kbd class="key">RET</kbd> <var class="var">regexp</var> <kbd class="key">RET</kbd> <var class="var">replacement</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Interactively replace <var class="var">regexp</var> with <var class="var">replacement</var> in the names
of all the identifiers shown in the <samp class="file">*xref*</samp> buffer.
</p>
</dd>
<dt><kbd class="kbd">M-x xref-find-references-and-replace <kbd class="key">RET</kbd> <var class="var">from</var> <kbd class="key">RET</kbd> <var class="var">to</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Interactively rename all instances of the identifier <var class="var">from</var> to the
new name <var class="var">to</var>.
</p>
</dd>
<dt><kbd class="kbd">M-x tags-search <kbd class="key">RET</kbd> <var class="var">regexp</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Search for <var class="var">regexp</var> through the files in the selected tags
table.
</p>
</dd>
<dt><kbd class="kbd">M-x tags-query-replace <kbd class="key">RET</kbd> <var class="var">regexp</var> <kbd class="key">RET</kbd> <var class="var">replacement</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Perform a <code class="code">query-replace-regexp</code> on each file in the selected tags table.
</p>
</dd>
<dt><kbd class="kbd">M-x fileloop-continue</kbd></dt>
<dd><p>Restart one of the last 2 commands above, from the current location of point.
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002d_003f"></a>
<a class="index-entry-id" id="index-xref_002dfind_002dreferences"></a>
<p><kbd class="kbd">M-?</kbd> finds all the references for the identifier at point,
prompting for the identifier as needed, with completion.  Depending on
the current backend (see <a class="pxref" href="#Xref">Find Identifier References</a>), the command may prompt even if it
finds a valid identifier at point.  When invoked with a prefix
argument, it always prompts for the identifier.  (If you want it to
prompt always, customize the value of the variable
<code class="code">xref-prompt-for-identifier</code> to <code class="code">t</code>; or set it to <code class="code">nil</code>
to prompt only if there&#8217;s no usable identifier at point.)  The command
then presents the <samp class="file">*xref*</samp> buffer with all the references to the
identifier, showing the file name and the line where the identifier is
referenced.  The XREF mode commands are available in this buffer, see
<a class="ref" href="#Xref-Commands">Commands Available in the <samp class="file">*xref*</samp> Buffer</a>.
</p>
<a class="index-entry-id" id="index-xref_002dauto_002djump_002dto_002dfirst_002dxref"></a>
<p>If the value of the variable <code class="code">xref-auto-jump-to-first-xref</code> is
<code class="code">t</code>, <code class="code">xref-find-references</code> automatically jumps to the first
result and selects the window where it is displayed.  If the value is
<code class="code">show</code>, the first result is shown, but the window showing the
<samp class="file">*xref*</samp> buffer is left selected.  If the value is <code class="code">move</code>,
the first result is selected in the <samp class="file">*xref*</samp> buffer, but is not
shown.  The default value is <code class="code">nil</code>, which just shows the results
in the <samp class="file">*xref*</samp> buffer, but doesn&#8217;t select any of them.
</p>
<a class="index-entry-id" id="index-xref_002dquery_002dreplace_002din_002dresults"></a>
<p><kbd class="kbd">r</kbd> (<code class="code">xref-query-replace-in-results</code>) reads a <var class="var">replacement</var>
string, just like ordinary <kbd class="kbd">M-x query-replace-regexp</kbd>.  It then
renames the identifiers shown in the <samp class="file">*xref*</samp> buffer in all the
places in all the files where these identifiers are referenced, such
that their new name is <var class="var">replacement</var>.  This is useful when you
rename your identifiers as part of refactoring.  This command should
be invoked in the <samp class="file">*xref*</samp> buffer generated by <kbd class="kbd">M-?</kbd>.  By
default, the command replaces the entire name of each identifier with
<var class="var">replacement</var>, but if invoked with a prefix argument, the command
prompts for a regexp to match identifier names, and replaces only the
matches of that regexp in the names of the identifiers with
<var class="var">replacement</var>.
</p>
<a class="index-entry-id" id="index-xref_002dfind_002dreferences_002dand_002dreplace"></a>
<p><kbd class="kbd">M-x xref-find-references-and-replace</kbd> works similarly to
<code class="code">xref-query-replace-in-results</code>, but is more convenient when you
want to rename a single identifier specified by its name <var class="var">from</var>.
</p>
<a class="index-entry-id" id="index-tags_002dsearch"></a>
<p><kbd class="kbd">M-x tags-search</kbd> reads a regexp using the minibuffer, then
searches for matches in all the files in the selected tags table, one
file at a time.  It displays the name of the file being searched so
you can follow its progress.  As soon as it finds an occurrence,
<code class="code">tags-search</code> returns.  This command requires tags tables to be
available (see <a class="pxref" href="#Tags-Tables">Tags Tables</a>).
</p>
<a class="index-entry-id" id="index-fileloop_002dcontinue"></a>
<p>Having found one match with <code class="code">tags-search</code>, you probably want to
find all the rest.  <kbd class="kbd">M-x fileloop-continue</kbd> resumes the
<code class="code">tags-search</code>, finding one more match.  This searches the rest of
the current buffer, followed by the remaining files of the tags table.
</p>
<a class="index-entry-id" id="index-tags_002dquery_002dreplace"></a>
<p><kbd class="kbd">M-x tags-query-replace</kbd> performs a single
<code class="code">query-replace-regexp</code> through all the files in the tags table.  It
reads a regexp to search for and a string to replace with, just like
ordinary <kbd class="kbd">M-x query-replace-regexp</kbd>.  It searches much like <kbd class="kbd">M-x
tags-search</kbd>, but repeatedly, processing matches according to your
input.  See <a class="xref" href="Search.xhtml#Query-Replace">Query Replace</a>, for more information on query replace.
</p>
<a class="index-entry-id" id="index-tags_002dcase_002dfold_002dsearch"></a>
<a class="index-entry-id" id="index-case_002dsensitivity-and-tags-search"></a>
<p>You can control the case-sensitivity of tags search commands by
customizing the value of the variable <code class="code">tags-case-fold-search</code>.  The
default is to use the same setting as the value of
<code class="code">case-fold-search</code> (see <a class="pxref" href="Search.xhtml#Lax-Search">Lax Matching During Searching</a>).
</p>
<p>It is possible to get through all the files in the tags table with a
single invocation of <kbd class="kbd">M-x tags-query-replace</kbd>.  But often it is
useful to exit temporarily, which you can do with any input event that
has no special query replace meaning.  You can resume the query
replace subsequently by typing <kbd class="kbd">M-x fileloop-continue</kbd>; this
command resumes the last tags search or replace command that you did.
For instance, to skip the rest of the current file, you can type
<kbd class="kbd">M-&gt;&#160;M-x&#160;fileloop-continue</kbd><!-- /@w -->.
</p>
<p>Note that the commands described above carry out much broader
searches than the <code class="code">xref-find-definitions</code> family.  The
<code class="code">xref-find-definitions</code> commands search only for definitions of
identifiers that match your string or regexp.  The commands
<code class="code">xref-find-references</code>, <code class="code">tags-search</code>, and
<code class="code">tags-query-replace</code> find every occurrence of the identifier or
regexp, as ordinary search commands and replace commands do in the
current buffer.
</p>
<p>As an alternative to <code class="code">xref-find-references</code> and
<code class="code">tags-search</code>, you can run <code class="command">grep</code> as a subprocess and
have Emacs show you the matching lines one by one.  See <a class="xref" href="Building.xhtml#Grep-Searching">Searching with Grep under Emacs</a>.
</p>
</div>
<div class="subsubsection-level-extent" id="List-Identifiers">
<h4 class="subsubsection" id="Identifier-Inquiries">29.4.1.4 Identifier Inquiries</h4>

<dl class="table">
<dt><kbd class="kbd">C-M-i</kbd></dt>
<dt><kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Perform completion on the text around point, possibly using the
selected tags table if one is loaded (<code class="code">completion-at-point</code>).
</p>
</dd>
<dt><kbd class="kbd">M-x list-tags <kbd class="key">RET</kbd> <var class="var">file</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Display a list of the identifiers defined in the program file
<var class="var">file</var>.
</p>
</dd>
<dt><kbd class="kbd">C-M-. <var class="var">regexp</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Display a list of all identifiers matching <var class="var">regexp</var>
(<code class="code">xref-find-apropos</code>).  See <a class="xref" href="#Looking-Up-Identifiers">Looking Up Identifiers</a>.
</p>
</dd>
<dt><kbd class="kbd">M-x tags-next-file</kbd></dt>
<dd><p>Visit files recorded in the selected tags table.
</p></dd>
</dl>

<p>In most programming language modes, you can type <kbd class="kbd">C-M-i</kbd> or
<kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> (<code class="code">completion-at-point</code>) to complete the symbol
at point.  Some modes provide specialized completion for this command
tailored to the mode; for those that don&#8217;t, if there is a tags table
loaded, this command can use it to generate completion candidates.
See <a class="xref" href="Programs.xhtml#Symbol-Completion">Completion for Symbol Names</a>.
</p>
<a class="index-entry-id" id="index-list_002dtags"></a>
<p><kbd class="kbd">M-x list-tags</kbd> reads the name of one of the files covered by
the selected tags table, and displays a list of tags defined in that
file.  Do not include a directory as part of the file name unless the
file name recorded in the tags table includes a directory.  This
command works only with the etags backend, and requires a tags table
for the project to be available.  See <a class="xref" href="#Tags-Tables">Tags Tables</a>.  If used
interactively, the default tag is file name of the current buffer if
used interactively.
</p>
<a class="index-entry-id" id="index-tags_002dnext_002dfile"></a>
<p><kbd class="kbd">M-x tags-next-file</kbd> visits files covered by the selected tags table.
The first time it is called, it visits the first file covered by the
table.  Each subsequent call visits the next covered file, unless a
prefix argument is supplied, in which case it returns to the first
file.  This command requires a tags table to be selected.
</p>
</div>
</div>
<div class="subsection-level-extent" id="Tags-Tables">
<h4 class="subsection" id="Tags-Tables-1">29.4.2 Tags Tables</h4>
<a class="index-entry-id" id="index-tags-and-tag-tables"></a>

<p>A <em class="dfn">tags table</em> records the tags<a class="footnote" id="DOCF17" href="#FOOT17"><sup>17</sup></a> extracted by scanning the source code of a certain program or a
certain document.  Tags extracted from generated files reference the
original files, rather than the generated files that were scanned
during tag extraction.  Examples of generated files include C files
generated from Cweb source files, from a Yacc parser, or from Lex
scanner definitions; <samp class="file">.i</samp> preprocessed C files; and Fortran files
produced by preprocessing <samp class="file">.fpp</samp> source files.
</p>
<a class="index-entry-id" id="index-etags"></a>
<p>To produce a tags table, you run the <code class="command">etags</code> shell command
on a document or the source code file.  The &#8216;<samp class="samp">etags</samp>&#8217; program
writes the tags to a <em class="dfn">tags table file</em>, or <em class="dfn">tags file</em> in
short.  The conventional name for a tags file is <samp class="file">TAGS</samp>.
See <a class="xref" href="#Create-Tags-Table">Creating Tags Tables</a>.  (It is also possible to create a tags table
by using one of the commands from other packages that can produce such
tables in the same format.)
</p>
<p>Emacs uses the tags tables via the <code class="code">etags</code> package as one of
the supported backends for <code class="code">xref</code>.  Because tags tables are
produced by the <code class="command">etags</code> command that is part of an Emacs
distribution, we describe tags tables in more detail here.
</p>
<a class="index-entry-id" id="index-C_002b_002b-class-browser_002c-tags"></a>
<a class="index-entry-id" id="index-tags_002c-C_002b_002b"></a>
<a class="index-entry-id" id="index-class-browser_002c-C_002b_002b"></a>
<a class="index-entry-id" id="index-Ebrowse"></a>
<p>The Ebrowse facility is similar to <code class="command">etags</code> but specifically
tailored for C++.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/ebrowse/index.html#Top">Ebrowse</a> in <cite class="cite">Ebrowse User&#8217;s
Manual</cite>.  The Semantic package provides another way to generate and
use tags, separate from the <code class="command">etags</code> facility.
See <a class="xref" href="Programs.xhtml#Semantic">Semantic</a>.
</p>

<div class="subsubsection-level-extent" id="Tag-Syntax">
<h4 class="subsubsection" id="Source-File-Tag-Syntax">29.4.2.1 Source File Tag Syntax</h4>

<p>Here is how tag syntax is defined for the most popular languages:
</p>
<ul class="itemize mark-bullet">
<li>In C code, any C function or typedef is a tag, and so are definitions of
<code class="code">struct</code>, <code class="code">union</code> and <code class="code">enum</code>.
<code class="code">#define</code> macro definitions, <code class="code">#undef</code> and <code class="code">enum</code>
constants are also
tags, unless you specify &#8216;<samp class="samp">--no-defines</samp>&#8217; when making the tags table.
Similarly, global variables are tags, unless you specify
&#8216;<samp class="samp">--no-globals</samp>&#8217;, and so are struct members, unless you specify
&#8216;<samp class="samp">--no-members</samp>&#8217;.  Use of &#8216;<samp class="samp">--no-globals</samp>&#8217;, &#8216;<samp class="samp">--no-defines</samp>&#8217;
and &#8216;<samp class="samp">--no-members</samp>&#8217; can make the tags table file much smaller.

<p>You can tag function declarations and external variables in addition
to function definitions by giving the &#8216;<samp class="samp">--declarations</samp>&#8217; option to
<code class="command">etags</code>.
</p>
</li><li>In C++ code, in addition to all the tag constructs of C code, member
functions are also recognized; member variables are also recognized,
unless you use the &#8216;<samp class="samp">--no-members</samp>&#8217; option.  <code class="code">operator</code>
definitions have tag names like &#8216;<samp class="samp">operator+</samp>&#8217;.  If you specify the
&#8216;<samp class="samp">--class-qualify</samp>&#8217; option, tags for variables and functions in
classes are named &#8216;<samp class="samp"><var class="var">class</var>::<var class="var">variable</var></samp>&#8217; and
&#8216;<samp class="samp"><var class="var">class</var>::<var class="var">function</var></samp>&#8217;.  By default, class methods and
members are not class-qualified, which allows to identify their names in
the sources more accurately.

</li><li>In Java code, tags include all the constructs recognized in C++, plus
the <code class="code">interface</code>, <code class="code">extends</code> and <code class="code">implements</code> constructs.
Tags for variables and functions in classes are named
&#8216;<samp class="samp"><var class="var">class</var>.<var class="var">variable</var></samp>&#8217; and &#8216;<samp class="samp"><var class="var">class</var>.<var class="var">function</var></samp>&#8217;.

</li><li>In LaTeX documents, the arguments for <code class="code">\chapter</code>,
<code class="code">\section</code>, <code class="code">\subsection</code>, <code class="code">\subsubsection</code>,
<code class="code">\eqno</code>, <code class="code">\label</code>, <code class="code">\ref</code>, <code class="code">\cite</code>,
<code class="code">\bibitem</code>, <code class="code">\part</code>, <code class="code">\appendix</code>, <code class="code">\entry</code>,
<code class="code">\index</code>, <code class="code">\def</code>, <code class="code">\newcommand</code>, <code class="code">\renewcommand</code>,
<code class="code">\newenvironment</code> and <code class="code">\renewenvironment</code> are tags.

<p>Other commands can make tags as well, if you specify them in the
environment variable <code class="env">TEXTAGS</code> before invoking <code class="command">etags</code>.  The
value of this environment variable should be a colon-separated list of
command names.  For example,
</p>
<div class="example">
<pre class="example-preformatted">TEXTAGS=&quot;mycommand:myothercommand&quot;
export TEXTAGS
</pre></div>

<p>specifies (using Bourne shell syntax) that the commands
&#8216;<samp class="samp">\mycommand</samp>&#8217; and &#8216;<samp class="samp">\myothercommand</samp>&#8217; also define tags.
</p>
</li><li>In Lisp code, any function defined with <code class="code">defun</code>, any variable
defined with <code class="code">defvar</code> or <code class="code">defconst</code>, and in general the
first argument of any expression that starts with &#8216;<samp class="samp">(def</samp>&#8217; in
column zero is a tag.  As an exception, expressions of the form
<code class="code">(defvar <var class="var">foo</var>)</code> are treated as declarations, and are only
tagged if the &#8216;<samp class="samp">--declarations</samp>&#8217; option is given.

</li><li>In Scheme code, tags include anything defined with <code class="code">def</code> or with a
construct whose name starts with &#8216;<samp class="samp">def</samp>&#8217;.  They also include variables
set with <code class="code">set!</code> at top level in the file.
</li></ul>

<p>Several other languages are also supported:
</p>
<ul class="itemize mark-bullet">
<li>In Ada code, functions, procedures, packages, tasks and types are
tags.  Use the &#8216;<samp class="samp">--packages-only</samp>&#8217; option to create tags for
packages only.

<p>In Ada, the same name can be used for different kinds of entity
(e.g., for a procedure and for a function).  Also, for things like
packages, procedures and functions, there is the spec (i.e., the
interface) and the body (i.e., the implementation).  To make it
easier to pick the definition you want, Ada tag names have suffixes
indicating the type of entity:
</p>
<dl class="table">
<dt>&#8216;<samp class="samp">/b</samp>&#8217;</dt>
<dd><p>package body.
</p></dd>
<dt>&#8216;<samp class="samp">/f</samp>&#8217;</dt>
<dd><p>function.
</p></dd>
<dt>&#8216;<samp class="samp">/k</samp>&#8217;</dt>
<dd><p>task.
</p></dd>
<dt>&#8216;<samp class="samp">/p</samp>&#8217;</dt>
<dd><p>procedure.
</p></dd>
<dt>&#8216;<samp class="samp">/s</samp>&#8217;</dt>
<dd><p>package spec.
</p></dd>
<dt>&#8216;<samp class="samp">/t</samp>&#8217;</dt>
<dd><p>type.
</p></dd>
</dl>

<p>Thus, <kbd class="kbd">M-x find-tag <kbd class="key">RET</kbd> bidule/b <kbd class="key">RET</kbd></kbd> will go
directly to the body of the package <code class="code">bidule</code>, while <kbd class="kbd">M-x
find-tag <kbd class="key">RET</kbd> bidule <kbd class="key">RET</kbd></kbd> will just search for any tag
<code class="code">bidule</code>.
</p>
</li><li>In assembler code, labels appearing at the start of a line,
followed by a colon, are tags.

</li><li>In Bison or Yacc input files, each rule defines as a tag the nonterminal
it constructs.  The portions of the file that contain C code are parsed
as C code.

</li><li>In Cobol code, tags are paragraph names; that is, any word starting in
column 8 and followed by a period.

</li><li>In Erlang code, the tags are the functions, records and macros defined
in the file.

</li><li>In Fortran code, functions, subroutines and block data are tags.

</li><li>In Go code, packages, functions, and types are tags.

</li><li>In HTML input files, the tags are the <code class="code">title</code> and the <code class="code">h1</code>,
<code class="code">h2</code>, <code class="code">h3</code> headers.  Also, tags are <code class="code">name=</code> in anchors
and all occurrences of <code class="code">id=</code>.

</li><li>In Lua input files, all functions are tags.

</li><li>In makefiles, targets are tags; additionally, variables are tags
unless you specify &#8216;<samp class="samp">--no-globals</samp>&#8217;.

</li><li>In Objective C code, tags include Objective C definitions for classes,
class categories, methods and protocols.  Tags for variables and
functions in classes are named &#8216;<samp class="samp"><var class="var">class</var>::<var class="var">variable</var></samp>&#8217; and
&#8216;<samp class="samp"><var class="var">class</var>::<var class="var">function</var></samp>&#8217;.

</li><li>In Pascal code, the tags are the functions and procedures defined in
the file.

</li><li>In Perl code, the tags are the packages, subroutines and variables
defined by the <code class="code">package</code>, <code class="code">sub</code>, <code class="code">use constant</code>,
<code class="code">my</code>, and <code class="code">local</code> keywords.  Use &#8216;<samp class="samp">--globals</samp>&#8217; if you
want to tag global variables.  Tags for subroutines are named
&#8216;<samp class="samp"><var class="var">package</var>::<var class="var">sub</var></samp>&#8217;.  The name for subroutines defined in
the default package is &#8216;<samp class="samp">main::<var class="var">sub</var></samp>&#8217;.

</li><li>In PHP code, tags are functions, classes and defines.  Vars are tags
too, unless you use the &#8216;<samp class="samp">--no-members</samp>&#8217; option.

</li><li>In PostScript code, the tags are the functions.

</li><li>In Prolog code, tags are predicates and rules at the beginning of
line.

</li><li>In Python code, <code class="code">def</code> or <code class="code">class</code> at the beginning of a line
generate a tag.

</li><li>In Ruby code, <code class="code">def</code> or <code class="code">class</code> or <code class="code">module</code> at the
beginning of a line generate a tag.  Constants also generate tags.

</li><li>In Rust code, tags anything defined with <code class="code">fn</code>, <code class="code">enum</code>,
<code class="code">struct</code> or <code class="code">macro_rules!</code>.
</li></ul>

<p>You can also generate tags based on regexp matching (see <a class="pxref" href="#Etags-Regexps">Etags Regexps</a>) to handle other formats and languages.
</p>
</div>
<div class="subsubsection-level-extent" id="Create-Tags-Table">
<h4 class="subsubsection" id="Creating-Tags-Tables">29.4.2.2 Creating Tags Tables</h4>
<a class="index-entry-id" id="index-etags-program"></a>

<p>The <code class="command">etags</code> program is used to create a tags table file.  It knows
the syntax of several languages, as described in
<a class="ref" href="#Tag-Syntax">Source File Tag Syntax</a>.
Here is how to run <code class="command">etags</code>:
</p>
<div class="example">
<pre class="example-preformatted">etags <var class="var">inputfiles</var>...
</pre></div>

<p>The <code class="command">etags</code> program reads the specified files, and writes a tags
table named <samp class="file">TAGS</samp> in the current working directory.  You can
optionally specify a different file name for the tags table by using the
&#8216;<samp class="samp">--output=<var class="var">file</var></samp>&#8217; option; specifying <samp class="file">-</samp> as a file name
prints the tags table to standard output.  You can also append the
newly created tags table to an existing file by using the &#8216;<samp class="samp">--append</samp>&#8217;
option.
</p>
<p>If the specified files don&#8217;t exist, <code class="command">etags</code> looks for
compressed versions of them and uncompresses them to read them.  Under
MS-DOS, <code class="command">etags</code> also looks for file names like <samp class="file">mycode.cgz</samp>
if it is given &#8216;<samp class="samp">mycode.c</samp>&#8217; on the command line and <samp class="file">mycode.c</samp>
does not exist.
</p>
<p>If the tags table becomes outdated due to changes in the files
described in it, you can update it by running the <code class="command">etags</code>
program again.  If the tags table does not record a tag, or records it
for the wrong file, then Emacs will not be able to find that
definition until you update the tags table.  But if the position
recorded in the tags table becomes a little bit wrong (due to other
editing), Emacs will still be able to find the right position, with a
slight delay.
</p>
<p>Thus, there is no need to update the tags table after each edit.
You should update a tags table when you define new tags that you want
to have listed, or when you move tag definitions from one file to
another, or when changes become substantial.
</p>
<p>You can make a tags table <em class="dfn">include</em> another tags table, by
passing the &#8216;<samp class="samp">--include=<var class="var">file</var></samp>&#8217; option to <code class="command">etags</code>.  It
then covers all the files covered by the included tags file, as well
as its own.
</p>
<p>If you specify the source files with relative file names when you run
<code class="command">etags</code>, the tags file will contain file names relative to the
directory where the tags file was initially written.  This way, you can
move an entire directory tree containing both the tags file and the
source files, and the tags file will still refer correctly to the source
files.  If the tags file is <samp class="file">-</samp> or is in the <samp class="file">/dev</samp> directory,
however, the file names are
made relative to the current working directory.  This is useful, for
example, when writing the tags to the standard output.
</p>
<p>When using a relative file name, it should not be a symbolic link
pointing to a tags file in a different directory, because this would
generally render the file names invalid.
</p>
<p>If you specify absolute file names as arguments to <code class="command">etags</code>, then
the tags file will contain absolute file names.  This way, the tags file
will still refer to the same files even if you move it, as long as the
source files remain in the same place.  Absolute file names start with
&#8216;<samp class="samp">/</samp>&#8217;, or with &#8216;<samp class="samp"><var class="var">device</var>:/</samp>&#8217; on MS-DOS and MS-Windows.
</p>
<p>When you want to make a tags table from a great number of files,
you may have problems listing them on the command line, because some
systems have a limit on its length.  You can circumvent this limit by
telling <code class="command">etags</code> to read the file names from its standard
input, by typing a dash in place of the file names, like this:
</p>
<div class="example smallexample">
<pre class="example-preformatted">find . -name &quot;*.[chCH]&quot; -print | etags -
</pre></div>

<p><code class="command">etags</code> recognizes the language used in an input file based on
its file name and contents.  It first tries to match the file&#8217;s name and
extension to the ones commonly used with certain languages.  Some
languages have interpreters with known names (e.g., <code class="command">perl</code> for
Perl or <code class="command">pl</code> for Prolog), so <code class="command">etags</code> next looks for an
interpreter specification of the form &#8216;<samp class="samp">#!<var class="var">interp</var></samp>&#8217; on the first
line of an input file, and matches that against known interpreters.  If
none of that works, or if you want to override the automatic detection of
the language, you can specify the language explicitly with the
&#8216;<samp class="samp">--language=<var class="var">name</var></samp>&#8217; option.  You can intermix these options with
file names; each one applies to the file names that follow it.  Specify
&#8216;<samp class="samp">--language=auto</samp>&#8217; to tell <code class="command">etags</code> to resume guessing the
language from the file names and file contents.  Specify
&#8216;<samp class="samp">--language=none</samp>&#8217; to turn off language-specific processing entirely;
then <code class="command">etags</code> recognizes tags by regexp matching alone
(see <a class="pxref" href="#Etags-Regexps">Etags Regexps</a>).  This comes in handy when an input file uses a
language not yet supported by <code class="command">etags</code>, and you want to avoid
having <code class="command">etags</code> fall back on Fortran and C as the default
languages.
</p>
<p>The option &#8216;<samp class="samp">--parse-stdin=<var class="var">file</var></samp>&#8217; is mostly useful when
calling <code class="command">etags</code> from programs.  It can be used (only once) in
place of a file name on the command line.  <code class="command">etags</code> will read from
standard input and mark the produced tags as belonging to the file
<var class="var">file</var>.
</p>
<p>For C and C++, if the source files don&#8217;t observe the GNU Coding
Standards&#8217; convention if having braces (&#8216;<samp class="samp">{</samp>&#8217; and &#8216;<samp class="samp">}</samp>&#8217;) in
column zero only for top-level definitions, like functions and
<code class="code">struct</code> definitions, we advise that you use the
&#8216;<samp class="samp">--ignore-indentation</samp>&#8217; option, to prevent <code class="command">etags</code> from
incorrectly interpreting closing braces in column zero.
</p>
<p>&#8216;<samp class="samp">etags --help</samp>&#8217; outputs the list of the languages <code class="command">etags</code>
knows, and the file name rules for guessing the language.  It also prints
a list of all the available <code class="command">etags</code> options, together with a short
explanation.  If followed by one or more &#8216;<samp class="samp">--language=<var class="var">lang</var></samp>&#8217;
options, it outputs detailed information about how tags are generated for
<var class="var">lang</var>.
</p>
</div>
<div class="subsubsection-level-extent" id="Etags-Regexps">
<h4 class="subsubsection" id="Etags-Regexps-1">29.4.2.3 Etags Regexps</h4>

<p>The &#8216;<samp class="samp">--regex</samp>&#8217; option to <code class="command">etags</code> allows tags to be
recognized by regular expression matching.  You can intermix this
option with file names; each one applies to the source files that
follow it.  If you specify multiple &#8216;<samp class="samp">--regex</samp>&#8217; options, all of
them are used in parallel.  The syntax is:
</p>
<div class="example smallexample">
<pre class="example-preformatted">--regex=[<var class="var">{language}</var>]/<var class="var">tagregexp</var>/[<var class="var">nameregexp</var>/]<var class="var">modifiers</var>
</pre></div>

<p>The essential part of the option value is <var class="var">tagregexp</var>, the regexp
for matching tags.  It is always used anchored, that is, it only
matches at the beginning of a line.  If you want to allow indented
tags, use a regexp that matches initial whitespace; start it with
&#8216;<samp class="samp">[ \t]*</samp>&#8217;.
</p>
<p>In these regular expressions, &#8216;<samp class="samp">\</samp>&#8217; quotes the next character,
and all the C character escape sequences are supported: &#8216;<samp class="samp">\a</samp>&#8217; for
bell, &#8216;<samp class="samp">\b</samp>&#8217; for back space, &#8216;<samp class="samp">\e</samp>&#8217; for escape, &#8216;<samp class="samp">\f</samp>&#8217; for
formfeed, &#8216;<samp class="samp">\n</samp>&#8217; for newline, &#8216;<samp class="samp">\r</samp>&#8217; for carriage return,
&#8216;<samp class="samp">\t</samp>&#8217; for tab, and &#8216;<samp class="samp">\v</samp>&#8217; for vertical tab.  In addition,
&#8216;<samp class="samp">\d</samp>&#8217; stands for the <code class="code">DEL</code> character.
</p>
<p>Ideally, <var class="var">tagregexp</var> should not match more characters than are
needed to recognize what you want to tag.  If the syntax requires you
to write <var class="var">tagregexp</var> so it matches more characters beyond the tag
itself, you should add a <var class="var">nameregexp</var>, to pick out just the tag.
This will enable Emacs to find tags more accurately and to do
completion on tag names more reliably.  In <var class="var">nameregexp</var>, it is
frequently convenient to use &#8220;back references&#8221; (see <a class="pxref" href="Search.xhtml#Regexp-Backslash">Backslash in Regular Expressions</a>) to parenthesized groupings &#8216;<samp class="samp">\(&#160;&#8230;&#160;\)</samp>&#8217;<!-- /@w --> in
<var class="var">tagregexp</var>.  For example, &#8216;<samp class="samp">\1</samp>&#8217; refers to the first such
parenthesized grouping.  You can find some examples of this below.
</p>
<p>The <var class="var">modifiers</var> are a sequence of zero or more characters that
modify the way <code class="command">etags</code> does the matching.  A regexp with no
modifiers is applied sequentially to each line of the input file, in a
case-sensitive way.  The modifiers and their meanings are:
</p>
<dl class="table">
<dt>&#8216;<samp class="samp">i</samp>&#8217;</dt>
<dd><p>Ignore case when matching this regexp.
</p></dd>
<dt>&#8216;<samp class="samp">m</samp>&#8217;</dt>
<dd><p>Match this regular expression against the whole file, so that
multi-line matches are possible.
</p></dd>
<dt>&#8216;<samp class="samp">s</samp>&#8217;</dt>
<dd><p>Match this regular expression against the whole file, and allow
&#8216;<samp class="samp">.</samp>&#8217; in <var class="var">tagregexp</var> to match newlines.
</p></dd>
</dl>

<p>The &#8216;<samp class="samp">-R</samp>&#8217; option cancels all the regexps defined by preceding
&#8216;<samp class="samp">--regex</samp>&#8217; options.  It too applies to the file names following
it.  Here&#8217;s an example:
</p>
<div class="example smallexample">
<pre class="example-preformatted">etags --regex=/<var class="var">reg1</var>/i voo.doo --regex=/<var class="var">reg2</var>/m \
    bar.ber -R --lang=lisp los.er
</pre></div>

<p>Here <code class="command">etags</code> chooses the parsing language for <samp class="file">voo.doo</samp> and
<samp class="file">bar.ber</samp> according to their contents.  <code class="command">etags</code> also uses
<var class="var">reg1</var> to recognize additional tags in <samp class="file">voo.doo</samp>, and both
<var class="var">reg1</var> and <var class="var">reg2</var> to recognize additional tags in
<samp class="file">bar.ber</samp>.  <var class="var">reg1</var> is checked against each line of
<samp class="file">voo.doo</samp> and <samp class="file">bar.ber</samp>, in a case-insensitive way, while
<var class="var">reg2</var> is checked against the whole <samp class="file">bar.ber</samp> file,
permitting multi-line matches, in a case-sensitive way.  <code class="command">etags</code>
uses only the Lisp tags rules, with no user-specified regexp matching,
to recognize tags in <samp class="file">los.er</samp>.
</p>
<p>You can restrict a &#8216;<samp class="samp">--regex</samp>&#8217; option to match only files of a
given language by using the optional prefix <var class="var">{language}</var>.
(&#8216;<samp class="samp">etags --help</samp>&#8217; prints the list of languages recognized by
<code class="command">etags</code>.)  This is particularly useful when storing many
predefined regular expressions for <code class="command">etags</code> in a file.  The
following example tags the <code class="code">DEFVAR</code> macros in the Emacs source
files, for the C language only:
</p>
<div class="example smallexample">
<pre class="example-preformatted">--regex='{c}/[ \t]*DEFVAR_[A-Z_ \t(]+&quot;\([^&quot;]+\)&quot;/\1/'
</pre></div>

<p>When you have complex regular expressions, you can store the list of
them in a file.  The following option syntax instructs <code class="command">etags</code> to
read two files of regular expressions.  The regular expressions
contained in the second file are matched without regard to case.
</p>
<div class="example smallexample">
<pre class="example-preformatted">--regex=@<var class="var">case-sensitive-file</var> --ignore-case-regex=@<var class="var">ignore-case-file</var>
</pre></div>

<p>A regex file for <code class="command">etags</code> contains one regular expression per
line.  Empty lines, and lines beginning with space or tab are ignored.
When the first character in a line is &#8216;<samp class="samp">@</samp>&#8217;, <code class="command">etags</code> assumes
that the rest of the line is the name of another file of regular
expressions; thus, one such file can include another file.  All the
other lines are taken to be regular expressions.  If the first
non-whitespace text on the line is &#8216;<samp class="samp">--</samp>&#8217;, that line is a comment.
</p>
<p>For example, we can create a file called &#8216;<samp class="samp">emacs.tags</samp>&#8217; with the
following contents:
</p>
<div class="example smallexample">
<pre class="example-preformatted">        -- This is for GNU Emacs C source files
{c}/[ \t]*DEFVAR_[A-Z_ \t(]+&quot;\([^&quot;]+\)&quot;/\1/
</pre></div>

<p>and then use it like this:
</p>
<div class="example smallexample">
<pre class="example-preformatted">etags --regex=@emacs.tags *.[ch] */*.[ch]
</pre></div>

<p>Here are some more examples.  The regexps are quoted to protect them
from shell interpretation.
</p>
<ul class="itemize mark-bullet">
<li>Tag Octave files:

<div class="example smallexample">
<pre class="example-preformatted">etags --language=none \
      --regex='/[ \t]*function.*=[ \t]*\([^ \t]*\)[ \t]*(/\1/' \
      --regex='/###key \(.*\)/\1/' \
      --regex='/[ \t]*global[ \t].*/' \
      *.m
</pre></div>

<p>Note that tags are not generated for scripts, so that you have to add
a line by yourself of the form &#8216;<samp class="samp">###key <var class="var">scriptname</var></samp>&#8217; if you
want to jump to it.
</p>
</li><li>Tag Tcl files:

<div class="example smallexample">
<pre class="example-preformatted">etags --language=none --regex='/proc[ \t]+\([^ \t]+\)/\1/' *.tcl
</pre></div>

</li><li>Tag VHDL files:

<div class="example smallexample">
<pre class="example-preformatted">etags --language=none \
  --regex='/[ \t]*\(ARCHITECTURE\|CONFIGURATION\) +[^ ]* +OF/' \
  --regex='/[ \t]*\(ATTRIBUTE\|ENTITY\|FUNCTION\|PACKAGE\
  \( BODY\)?\|PROCEDURE\|PROCESS\|TYPE\)[ \t]+\([^ \t(]+\)/\3/'
</pre></div>
</li></ul>

</div>
</div>
<div class="subsection-level-extent" id="Select-Tags-Table">
<h4 class="subsection" id="Selecting-a-Tags-Table">29.4.3 Selecting a Tags Table</h4>

<a class="index-entry-id" id="index-visit_002dtags_002dtable"></a>
<p>Emacs has at any time at most one <em class="dfn">selected</em> tags table.  All
the commands for working with tags tables use the selected one first.
To select a tags table, type <kbd class="kbd">M-x visit-tags-table</kbd>, which reads
the tags table file name as an argument, with <samp class="file">TAGS</samp> defaulting
to the first directory that contains a file named <samp class="file">TAGS</samp>
encountered when recursively searching upward from the default
directory.
</p>
<a class="index-entry-id" id="index-tags_002dfile_002dname"></a>
<p>Emacs does not actually read in the tags table contents until you
try to use them; all <code class="code">visit-tags-table</code> does is store the file
name in the variable <code class="code">tags-file-name</code>, and not much more.  The
variable&#8217;s initial value is <code class="code">nil</code>; that value tells all the
commands for working with tags tables that they must ask for a tags
table file name to use.
</p>
<p>In addition to the selected tags table, Emacs maintains the list of
several tags tables that you use together.  For example, if you are
working on a program that uses a library, you may wish to have the
tags tables of both the program and the library available, so that
Emacs could easily find identifiers from both.  If the selected tags
table doesn&#8217;t have the identifier or doesn&#8217;t mention the source file a
tags command needs, the command will try using all the other tags
tables in the current list of tags tables.
</p>
<p>Using <code class="code">visit-tags-table</code> to load a new tags table when another
tags table is already loaded gives you a choice: you can add the new
tags table to the current list of tags tables, or discard the current
list and start a new list.  If you start a new list, the new tags
table is used <em class="emph">instead</em> of others.  If you add the new table to
the current list, it is used <em class="emph">as well as</em> the others.
</p>
<a class="index-entry-id" id="index-tags_002dtable_002dlist"></a>
<p>You can specify a precise list of tags tables by setting the variable
<code class="code">tags-table-list</code> to a list of directory names, like this:
</p>
<div class="example">
<div class="group"><pre class="example-preformatted">(setq tags-table-list
      '(&quot;~/.emacs.d&quot; &quot;/usr/local/lib/emacs/src&quot;))
</pre></div></div>

<p>This tells the tags commands to look at the <samp class="file">TAGS</samp> files in your
<samp class="file">~/.emacs.d</samp> directory and in the <samp class="file">/usr/local/lib/emacs/src</samp>
directory.  The order depends on which file you are in and which tags
table mentions that file.
</p>
<p>Do not set both <code class="code">tags-file-name</code> and <code class="code">tags-table-list</code>.
</p>
</div>
</div>
<div class="section-level-extent" id="EDE">
<h3 class="section" id="Emacs-Development-Environment">29.5 Emacs Development Environment</h3>
<a class="index-entry-id" id="index-EDE-_0028Emacs-Development-Environment_0029"></a>
<a class="index-entry-id" id="index-Emacs-Development-Environment"></a>
<a class="index-entry-id" id="index-Integrated-development-environment"></a>

<p>EDE (<em class="dfn">Emacs Development Environment</em>) is a package that simplifies
the task of creating, building, and debugging large programs with
Emacs.  It provides some of the features of an IDE, or <em class="dfn">Integrated
Development Environment</em>, in Emacs.
</p>
<p>This section provides a brief description of EDE usage.
For full details, see <a href="https://www.gnu.org/software/emacs/manual/html_node/ede/index.html#Top">EDE</a> in <cite class="cite">Emacs Development Environment</cite>.
</p>
<p>EDE is implemented as a global minor mode (see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).  To
enable it, type <kbd class="kbd">M-x global-ede-mode</kbd> or click on the
&#8216;<samp class="samp">Project Support (EDE)</samp>&#8217; item in the &#8216;<samp class="samp">Tools</samp>&#8217; menu.  You can
also enable EDE each time you start Emacs, by adding the following
line to your initialization file:
</p>
<div class="example smallexample">
<pre class="example-preformatted">(global-ede-mode t)
</pre></div>

<p>Activating EDE adds a menu named &#8216;<samp class="samp">Development</samp>&#8217; to the menu bar.
Many EDE commands, including the ones described below, can be invoked
from this menu.
</p>
<p>EDE organizes files into <em class="dfn">projects</em>, which correspond to
directory trees.  The <em class="dfn">project root</em> is the topmost directory of a
project.  To define a new project, visit a file in the desired project
root and type <kbd class="kbd">M-x ede-new</kbd>.  This command prompts for a
<em class="dfn">project type</em>, which refers to the underlying method that EDE
will use to manage the project (see <a href="https://www.gnu.org/software/emacs/manual/html_node/ede/Creating-a-project.html#Creating-a-project">EDE</a> in <cite class="cite">Emacs Development Environment</cite>).  The most common project types are
&#8216;<samp class="samp">Make</samp>&#8217;, which uses Makefiles, and &#8216;<samp class="samp">Automake</samp>&#8217;, which uses GNU
Automake (see <a href="https://www.gnu.org/software/automake/manual/html_node/index.html#Top">Automake</a> in <cite class="cite">Automake</cite>).  In both cases,
EDE also creates a file named <samp class="file">Project.ede</samp>, which stores
information about the project.
</p>
<p>A project may contain one or more <em class="dfn">targets</em>.  A target can be an
object file, executable program, or some other type of file, which is
built from one or more of the files in the project.
</p>
<p>To add a new <em class="dfn">target</em> to a project, type <kbd class="kbd">C-c . t</kbd>
(<code class="code">M-x ede-new-target</code>).  This command also asks if you wish to
add the current file to that target, which means that the target
is to be built from that file.  After you have defined a target, you
can add more files to it by typing <kbd class="kbd">C-c . a</kbd>
(<code class="code">ede-add-file</code>).
</p>
<p>To build a target, type <kbd class="kbd">C-c . c</kbd> (<code class="code">ede-compile-target</code>).
To build all the targets in the project, type <kbd class="kbd">C-c . C</kbd>
(<code class="code">ede-compile-project</code>).  EDE uses the file types to guess how
the target should be built.
</p>
</div>
<div class="section-level-extent" id="Emerge">
<h3 class="section" id="Merging-Files-with-Emerge">29.6 Merging Files with Emerge</h3>
<a class="index-entry-id" id="index-Emerge"></a>
<a class="index-entry-id" id="index-merging-files"></a>

<p>It&#8217;s not unusual for programmers to get their signals crossed and
modify the same program in two different directions.  To recover from
this confusion, you need to merge the two versions.  Emerge makes this
easier.  For other ways to compare files, see
<a class="ref" href="Files.xhtml#Comparing-Files">Comparing Files</a>,
and <a href="https://www.gnu.org/software/emacs/manual/html_node/ediff/index.html#Top">Ediff</a> in <cite class="cite">The Ediff Manual</cite>.
</p>

<div class="subsection-level-extent" id="Overview-of-Emerge">
<h4 class="subsection" id="Overview-of-Emerge-1">29.6.1 Overview of Emerge</h4>

<p>To start Emerge, run one of these four commands:
</p>
<dl class="table">
<dt><a id="index-emerge_002dfiles"></a><kbd class="kbd">M-x emerge-files</kbd></dt>
<dd><p>Merge two specified files.
</p>
</dd>
<dt><a id="index-emerge_002dfiles_002dwith_002dancestor"></a><kbd class="kbd">M-x emerge-files-with-ancestor</kbd></dt>
<dd><p>Merge two specified files, with reference to a common ancestor.
</p>
</dd>
<dt><a id="index-emerge_002dbuffers"></a><kbd class="kbd">M-x emerge-buffers</kbd></dt>
<dd><p>Merge two buffers.
</p>
</dd>
<dt><a id="index-emerge_002dbuffers_002dwith_002dancestor"></a><kbd class="kbd">M-x emerge-buffers-with-ancestor</kbd></dt>
<dd><p>Merge two buffers with reference to a common ancestor in a third
buffer.
</p></dd>
</dl>

<a class="index-entry-id" id="index-merge-buffer-_0028Emerge_0029"></a>
<a class="index-entry-id" id="index-A-and-B-buffers-_0028Emerge_0029"></a>
<p>The Emerge commands compare two files or buffers, and display the
comparison in three buffers: one for each input text (the <em class="dfn">A buffer</em>
and the <em class="dfn">B buffer</em>), and one (the <em class="dfn">merge buffer</em>) where merging
takes place.  The merge buffer shows the full merged text, not just the
differences.  Wherever the two input texts differ, you can choose which
one of them to include in the merge buffer.
</p>
<p>The Emerge commands that take input from existing buffers use only
the accessible portions of those buffers, if they are narrowed.
See <a class="xref" href="Display.xhtml#Narrowing">Narrowing</a>.
</p>

<p>If a common ancestor version is available, from which the two texts to
be merged were both derived, Emerge can use it to guess which
alternative is right.  Wherever one current version agrees with the
ancestor, Emerge presumes that the other current version is a deliberate
change which should be kept in the merged version.  Use the
&#8216;<samp class="samp">with-ancestor</samp>&#8217; commands if you want to specify a common ancestor
text.  These commands read three file or buffer names&#8212;variant A,
variant B, and the common ancestor.
</p>
<p>After the comparison is done and the buffers are prepared, the
interactive merging starts.  You control the merging by typing special
<em class="dfn">merge commands</em> in the merge buffer (see <a class="pxref" href="#Merge-Commands">Merge Commands</a>).
For each run of differences between the input texts, you can choose
which one of them to keep, or edit them both together.
</p>
<p>The merge buffer uses a special major mode, Emerge mode, with commands
for making these choices.  But you can also edit the buffer with
ordinary Emacs commands.
</p>
<p>At any given time, the attention of Emerge is focused on one
particular difference, called the <em class="dfn">selected</em> difference.  This
difference is marked off in the three buffers like this:
</p>
<div class="example">
<pre class="example-preformatted">vvvvvvvvvvvvvvvvvvvv
<var class="var">text that differs</var>
^^^^^^^^^^^^^^^^^^^^
</pre></div>

<p>Emerge numbers all the differences sequentially and the mode
line always shows the number of the selected difference.
</p>
<p>Normally, the merge buffer starts out with the A version of the text.
But when the A version of a difference agrees with the common ancestor,
then the B version is initially preferred for that difference.
</p>
<p>Emerge leaves the merged text in the merge buffer when you exit.  At
that point, you can save it in a file with <kbd class="kbd">C-x C-w</kbd>.  If you give a
numeric argument to <code class="code">emerge-files</code> or
<code class="code">emerge-files-with-ancestor</code>, it reads the name of the output file
using the minibuffer.  (This is the last file name those commands read.)
Then exiting from Emerge saves the merged text in the output file.
</p>
<p>Normally, Emerge commands save the output buffer in its file when you
exit.  If you abort Emerge with <kbd class="kbd">C-]</kbd>, the Emerge command does not
save the output buffer, but you can save it yourself if you wish.
</p>
</div>
<div class="subsection-level-extent" id="Submodes-of-Emerge">
<h4 class="subsection" id="Submodes-of-Emerge-1">29.6.2 Submodes of Emerge</h4>

<p>You can choose between two modes for giving merge commands: Fast mode
and Edit mode.  In Fast mode, basic merge commands are single
characters, but ordinary Emacs commands are disabled.  This is
convenient if you use only merge commands.  In Edit mode, all merge
commands start with the prefix key <kbd class="kbd">C-c C-c</kbd>, and the normal Emacs
commands are also available.  This allows editing the merge buffer, but
slows down Emerge operations.
</p>
<p>Use <kbd class="kbd">e</kbd> to switch to Edit mode, and <kbd class="kbd">C-c C-c f</kbd> to switch to
Fast mode.  The mode line indicates Edit and Fast modes with &#8216;<samp class="samp">E</samp>&#8217;
and &#8216;<samp class="samp">F</samp>&#8217;.
</p>
<p>Emerge has two additional submodes that affect how particular merge
commands work: Auto Advance mode and Skip Prefers mode.
</p>
<p>If Auto Advance mode is in effect, the <kbd class="kbd">a</kbd> and <kbd class="kbd">b</kbd> commands
advance to the next difference.  This lets you go through the merge
faster as long as you simply choose one of the alternatives from the
input.  The mode line indicates Auto Advance mode with &#8216;<samp class="samp">A</samp>&#8217;.
</p>
<p>If Skip Prefers mode is in effect, the <kbd class="kbd">n</kbd> and <kbd class="kbd">p</kbd> commands
skip over differences in states &#8220;prefer-A&#8221; and &#8220;prefer-B&#8221;
(see <a class="pxref" href="#State-of-Difference">State of a Difference</a>).  Thus you see only differences for
which neither version is presumed correct.  The mode line
indicates Skip Prefers mode with &#8216;<samp class="samp">S</samp>&#8217;.  This mode is only relevant
when there is an ancestor.
</p>
<a class="index-entry-id" id="index-emerge_002dauto_002dadvance"></a>
<a class="index-entry-id" id="index-emerge_002dskip_002dprefers"></a>
<p>Use the command <kbd class="kbd">s a</kbd> (<code class="code">emerge-auto-advance</code>) to set or clear
Auto Advance mode.  Use <kbd class="kbd">s s</kbd> (<code class="code">emerge-skip-prefers</code>) to set or
clear Skip Prefers mode.  These commands turn on the mode with a
positive argument, turn it off with a negative or zero argument, and
toggle the mode with no argument.
</p>
</div>
<div class="subsection-level-extent" id="State-of-Difference">
<h4 class="subsection" id="State-of-a-Difference">29.6.3 State of a Difference</h4>

<p>In the merge buffer, a difference is marked with lines of &#8216;<samp class="samp">v</samp>&#8217; and
&#8216;<samp class="samp">^</samp>&#8217; characters.  Each difference has one of these seven states:
</p>
<dl class="table">
<dt>A</dt>
<dd><p>The difference is showing the A version.  The <kbd class="kbd">a</kbd> command always
produces this state; the mode line indicates it with &#8216;<samp class="samp">A</samp>&#8217;.
</p>
</dd>
<dt>B</dt>
<dd><p>The difference is showing the B version.  The <kbd class="kbd">b</kbd> command always
produces this state; the mode line indicates it with &#8216;<samp class="samp">B</samp>&#8217;.
</p>
</dd>
<dt>default-A</dt>
<dt>default-B</dt>
<dd><p>The difference is showing the A or the B state by default, because you
haven&#8217;t made a choice.  All differences start in the default-A state
(and thus the merge buffer is a copy of the A buffer), except those for
which one alternative is preferred (see below).
</p>
<p>When you select a difference, its state changes from default-A or
default-B to plain A or B.  Thus, the selected difference never has
state default-A or default-B, and these states are never displayed in
the mode line.
</p>
<p>The command <kbd class="kbd">d a</kbd> chooses default-A as the default state, and <kbd class="kbd">d
b</kbd> chooses default-B.  This chosen default applies to all differences
that you have never selected and for which no alternative is preferred.
If you are moving through the merge sequentially, the differences you
haven&#8217;t selected are those following the selected one.  Thus, while
moving sequentially, you can effectively make the A version the default
for some sections of the merge buffer and the B version the default for
others by using <kbd class="kbd">d a</kbd> and <kbd class="kbd">d b</kbd> between sections.
</p>
</dd>
<dt>prefer-A</dt>
<dt>prefer-B</dt>
<dd><p>The difference is showing the A or B state because it is
<em class="dfn">preferred</em>.  This means that you haven&#8217;t made an explicit choice,
but one alternative seems likely to be right because the other
alternative agrees with the common ancestor.  Thus, where the A buffer
agrees with the common ancestor, the B version is preferred, because
chances are it is the one that was actually changed.
</p>
<p>These two states are displayed in the mode line as &#8216;<samp class="samp">A*</samp>&#8217; and &#8216;<samp class="samp">B*</samp>&#8217;.
</p>
</dd>
<dt>combined</dt>
<dd><p>The difference is showing a combination of the A and B states, as a
result of the <kbd class="kbd">x c</kbd> or <kbd class="kbd">x C</kbd> commands.
</p>
<p>Once a difference is in this state, the <kbd class="kbd">a</kbd> and <kbd class="kbd">b</kbd> commands
don&#8217;t do anything to it unless you give them a numeric argument.
</p>
<p>The mode line displays this state as &#8216;<samp class="samp">comb</samp>&#8217;.
</p></dd>
</dl>

</div>
<div class="subsection-level-extent" id="Merge-Commands">
<h4 class="subsection" id="Merge-Commands-1">29.6.4 Merge Commands</h4>

<p>Here are the Merge commands for Fast mode; in Edit mode, precede them
with <kbd class="kbd">C-c C-c</kbd>:
</p>
<dl class="table">
<dt><kbd class="kbd">p</kbd></dt>
<dd><p>Select the previous difference.
</p>
</dd>
<dt><kbd class="kbd">n</kbd></dt>
<dd><p>Select the next difference.
</p>
</dd>
<dt><kbd class="kbd">a</kbd></dt>
<dd><p>Choose the A version of this difference.
</p>
</dd>
<dt><kbd class="kbd">b</kbd></dt>
<dd><p>Choose the B version of this difference.
</p>
</dd>
<dt><kbd class="kbd">C-u <var class="var">n</var> j</kbd></dt>
<dd><p>Select difference number <var class="var">n</var>.
</p>
</dd>
<dt><kbd class="kbd">.</kbd></dt>
<dd><p>Select the difference containing point.
</p>
</dd>
<dt><kbd class="kbd">q</kbd></dt>
<dd><p>Quit&#8212;finish the merge.
</p>
</dd>
<dt><kbd class="kbd">C-]</kbd></dt>
<dd><p>Abort&#8212;exit merging and do not save the output.
</p>
</dd>
<dt><kbd class="kbd">f</kbd></dt>
<dd><p>Go into Fast mode.  (In Edit mode, this is actually <kbd class="kbd">C-c C-c f</kbd>.)
</p>
</dd>
<dt><kbd class="kbd">e</kbd></dt>
<dd><p>Go into Edit mode.
</p>
</dd>
<dt><kbd class="kbd">l</kbd></dt>
<dd><p>Recenter (like <kbd class="kbd">C-l</kbd>) all three windows.  With an argument,
reestablish the default three-window display.
</p>
</dd>
<dt><kbd class="kbd">-</kbd></dt>
<dd><p>Specify part of a prefix numeric argument.
</p>
</dd>
<dt><kbd class="kbd"><var class="var">digit</var></kbd></dt>
<dd><p>Also specify part of a prefix numeric argument.
</p>
</dd>
<dt><kbd class="kbd">d a</kbd></dt>
<dd><p>Choose the A version as the default from here down in
the merge buffer.
</p>
</dd>
<dt><kbd class="kbd">d b</kbd></dt>
<dd><p>Choose the B version as the default from here down in
the merge buffer.
</p>
</dd>
<dt><kbd class="kbd">c a</kbd></dt>
<dd><p>Copy the A version of this difference into the kill ring.
</p>
</dd>
<dt><kbd class="kbd">c b</kbd></dt>
<dd><p>Copy the B version of this difference into the kill ring.
</p>
</dd>
<dt><kbd class="kbd">i a</kbd></dt>
<dd><p>Insert the A version of this difference at point.
</p>
</dd>
<dt><kbd class="kbd">i b</kbd></dt>
<dd><p>Insert the B version of this difference at point.
</p>
</dd>
<dt><kbd class="kbd">m</kbd></dt>
<dd><p>Put point and mark around the difference.
</p>
</dd>
<dt><kbd class="kbd">^</kbd></dt>
<dd><p>Scroll all three windows down (like <kbd class="kbd">M-v</kbd>).
</p>
</dd>
<dt><kbd class="kbd">v</kbd></dt>
<dd><p>Scroll all three windows up (like <kbd class="kbd">C-v</kbd>).
</p>
</dd>
<dt><kbd class="kbd">&lt;</kbd></dt>
<dd><p>Scroll all three windows left (like <kbd class="kbd">C-x &lt;</kbd>).
</p>
</dd>
<dt><kbd class="kbd">&gt;</kbd></dt>
<dd><p>Scroll all three windows right (like <kbd class="kbd">C-x &gt;</kbd>).
</p>
</dd>
<dt><kbd class="kbd">|</kbd></dt>
<dd><p>Reset horizontal scroll on all three windows.
</p>
</dd>
<dt><kbd class="kbd">x 1</kbd></dt>
<dd><p>Shrink the merge window to one line.  (Use <kbd class="kbd">C-u l</kbd> to restore it
to full size.)
</p>
</dd>
<dt><kbd class="kbd">x c</kbd></dt>
<dd><p>Combine the two versions of this difference (see <a class="pxref" href="#Combining-in-Emerge">Combining the Two Versions</a>).
</p>
</dd>
<dt><kbd class="kbd">x f</kbd></dt>
<dd><p>Show the names of the files/buffers Emerge is operating on, in a Help
window.  (Use <kbd class="kbd">C-u l</kbd> to restore windows.)
</p>
</dd>
<dt><kbd class="kbd">x j</kbd></dt>
<dd><p>Join this difference with the following one.
(<kbd class="kbd">C-u x j</kbd> joins this difference with the previous one.)
</p>
</dd>
<dt><kbd class="kbd">x s</kbd></dt>
<dd><p>Split this difference into two differences.  Before you use this
command, position point in each of the three buffers at the place where
you want to split the difference.
</p>
</dd>
<dt><kbd class="kbd">x t</kbd></dt>
<dd><p>Trim identical lines off the top and bottom of the difference.
Such lines occur when the A and B versions are
identical but differ from the ancestor version.
</p></dd>
</dl>

</div>
<div class="subsection-level-extent" id="Exiting-Emerge">
<h4 class="subsection" id="Exiting-Emerge-1">29.6.5 Exiting Emerge</h4>

<p>The <kbd class="kbd">q</kbd> command (<code class="code">emerge-quit</code>) finishes the merge, storing
the results into the output file if you specified one.  It restores the
A and B buffers to their proper contents, or kills them if they were
created by Emerge and you haven&#8217;t changed them.  It also disables the
Emerge commands in the merge buffer, since executing them later could
damage the contents of the various buffers.
</p>
<p><kbd class="kbd">C-]</kbd> aborts the merge.  This means exiting without writing the
output file.  If you didn&#8217;t specify an output file, then there is no
real difference between aborting and finishing the merge.
</p>
<p>If the Emerge command was called from another Lisp program, then its
return value is <code class="code">t</code> for successful completion, or <code class="code">nil</code> if you
abort.
</p>
</div>
<div class="subsection-level-extent" id="Combining-in-Emerge">
<h4 class="subsection" id="Combining-the-Two-Versions">29.6.6 Combining the Two Versions</h4>

<p>Sometimes you want to keep <em class="emph">both</em> alternatives for a particular
difference.  To do this, use <kbd class="kbd">x c</kbd>, which edits the merge buffer
like this:
</p>
<div class="example">
<div class="group"><pre class="example-preformatted">#ifdef NEW
<var class="var">version from B buffer</var>
#else /* not NEW */
<var class="var">version from A buffer</var>
#endif /* not NEW */
</pre></div></div>

<a class="index-entry-id" id="index-emerge_002dcombine_002dversions_002dtemplate"></a>
<p>While this example shows C preprocessor conditionals delimiting the two
alternative versions, you can specify the strings to use by setting
the variable <code class="code">emerge-combine-versions-template</code> to a string of your
choice.  In the string, &#8216;<samp class="samp">%a</samp>&#8217; says where to put version A, and
&#8216;<samp class="samp">%b</samp>&#8217; says where to put version B.  The default setting, which
produces the results shown above, looks like this:
</p>
<div class="example">
<div class="group"><pre class="example-preformatted">&quot;#ifdef NEW\n%b#else /* not NEW */\n%a#endif /* not NEW */\n&quot;
</pre></div></div>

</div>
<div class="subsection-level-extent" id="Fine-Points-of-Emerge">
<h4 class="subsection" id="Fine-Points-of-Emerge-1">29.6.7 Fine Points of Emerge</h4>

<p>During the merge, you mustn&#8217;t try to edit the A and B buffers yourself.
Emerge modifies them temporarily, but ultimately puts them back the way
they were.
</p>
<p>You can have any number of merges going at once&#8212;just don&#8217;t use any one
buffer as input to more than one merge at once, since the temporary
changes made in these buffers would get in each other&#8217;s way.
</p>
<p>Starting Emerge can take a long time because it needs to compare the
files fully.  Emacs can&#8217;t do anything else until <code class="code">diff</code> finishes.
Perhaps in the future someone will change Emerge to do the comparison in
the background when the input files are large&#8212;then you could keep on
doing other things with Emacs until Emerge is ready to accept
commands.
</p>
<a class="index-entry-id" id="index-emerge_002dstartup_002dhook"></a>
<p>After setting up the merge, Emerge runs the hook
<code class="code">emerge-startup-hook</code>.
See <a class="xref" href="Customization.xhtml#Hooks">Hooks</a>.
</p>

</div>
</div>
<div class="section-level-extent" id="Bug-Reference">
<h3 class="section" id="Bug-Reference-1">29.7 Bug Reference</h3>
<a class="index-entry-id" id="index-bug-reference"></a>

<p>Most projects with a certain amount of users track bug reports in some
issue tracking software which assigns each report a unique and short
number or identifier.  Those are used to reference a given bug, e.g.,
in a source code comment above the code fixing some bug, in
documentation files, or in discussions on some mailing list or IRC
channel.
</p>
<a class="index-entry-id" id="index-bug_002dreference_002dmode"></a>
<a class="index-entry-id" id="index-bug_002dreference_002dprog_002dmode"></a>
<p>The minor modes <code class="code">bug-reference-mode</code> and
<code class="code">bug-reference-prog-mode</code> highlight such bug references and make
it possible to follow them to the corresponding bug report on the
project&#8217;s issue tracker.  <code class="code">bug-reference-prog-mode</code> is a variant
of <code class="code">bug-reference-mode</code> which highlights bug references only
inside source code comments and strings.
</p>
<a class="index-entry-id" id="index-bug_002dreference_002dbug_002dregexp"></a>
<a class="index-entry-id" id="index-bug_002dreference_002durl_002dformat"></a>
<p>For its working, bug reference mode needs to know the syntax of bug
references (<code class="code">bug-reference-bug-regexp</code>), and the URL of the
tracker where bug reports can be looked up
(<code class="code">bug-reference-url-format</code>).  Since those are typically
different from project to project, it makes sense to specify them in
see <a class="pxref" href="Customization.xhtml#Directory-Variables">Per-Directory Local Variables</a> or see <a class="pxref" href="Customization.xhtml#File-Variables">Local Variables in Files</a>.
</p>
<p>For example, let&#8217;s assume in our project, we usually write references
to bug reports as bug#1234, or Bug-1234 and that this bug&#8217;s page on
the issue tracker is <a class="url" href="https://project.org/issues/1234">https://project.org/issues/1234</a>, then
these local variables section would do.
</p>
<div class="example smallexample">
<pre class="example-preformatted">;; Local Variables:
;; bug-reference-bug-regexp: &quot;\\([Bb]ug[#-]\\([0-9]+\\)\\)&quot;
;; bug-reference-url-format: &quot;https://project.org/issues/%s&quot;
;; End:
</pre></div>

<p>The string captured by the first regexp group defines the bounds of
the overlay bug-reference creates, i.e., the part which is highlighted
and made clickable.
</p>
<p>The string captured by the second regexp group in
<code class="code">bug-reference-bug-regexp</code> is used to replace the <code class="code">%s</code>
template in the <code class="code">bug-reference-url-format</code>.
</p>
<p>Note that <code class="code">bug-reference-url-format</code> may also be a function in
order to cater for more complex scenarios, e.g., when different parts
of the bug reference have to be used to distinguish between issues and
merge requests resulting in different URLs.
</p>

<h3 class="heading" id="Automatic-Setup">Automatic Setup</h3>

<a class="index-entry-id" id="index-bug_002dreference_002dauto_002dsetup_002dfunctions"></a>
<p>If <code class="code">bug-reference-mode</code> is activated,
<code class="code">bug-reference-mode-hook</code> has been run and still
<code class="code">bug-reference-bug-regexp</code>, and <code class="code">bug-reference-url-format</code>
aren&#8217;t both set, it&#8217;ll try to setup suitable values for these two
variables itself by calling the functions in
<code class="code">bug-reference-auto-setup-functions</code> one after the other until
one is able to set the variables.
</p>
<a class="index-entry-id" id="index-bug_002dreference_002dsetup_002dfrom_002dvc_002dalist"></a>
<a class="index-entry-id" id="index-bug_002dreference_002dforge_002dalist"></a>
<a class="index-entry-id" id="index-bug_002dreference_002dsetup_002dfrom_002dmail_002dalist"></a>
<a class="index-entry-id" id="index-bug_002dreference_002dsetup_002dfrom_002dirc_002dalist"></a>
<p>Right now, there are three types of setup functions.
</p><ol class="enumerate">
<li> Setup for version-controlled files configurable by the variables
<code class="code">bug-reference-forge-alist</code>, and
<code class="code">bug-reference-setup-from-vc-alist</code>.  The defaults are able to
setup GNU projects where <a class="url" href="https://debbugs.gnu.org">https://debbugs.gnu.org</a> is used as
issue tracker and issues are usually referenced as <code class="code">bug#13</code> (but
many different notations are considered, too), and several kinds of
modern software forges such as GitLab, Gitea, SourceHut, or GitHub.
If you deploy a self-hosted instance of such a forge, the easiest way
to tell bug-reference about it is through
<code class="code">bug-reference-forge-alist</code>.

</li><li> Setup for email guessing from mail folder/mbox names, and mail header
values configurable by the variable
<code class="code">bug-reference-setup-from-mail-alist</code>.  The built-in news- and
mailreader <a class="ref" href="Gnus.xhtml#Gnus">Email and Usenet News with Gnus</a> and <a class="ref" href="Rmail.xhtml#Rmail">Reading Mail with Rmail</a> are supported.

</li><li> Setup for IRC channels configurable by the variable
<code class="code">bug-reference-setup-from-irc-alist</code>.  The built-in IRC clients
Rcirc, See <a href="https://www.gnu.org/software/emacs/manual/html_node/rcirc/index.html#Top">Rcirc</a> in <cite class="cite">The Rcirc Manual</cite>, and ERC,
See <a href="https://www.gnu.org/software/emacs/manual/html_node/erc/index.html#Top">ERC</a> in <cite class="cite">The ERC Manual</cite>, are supported.
</li></ol>

<p>For almost all of those modes, it&#8217;s enough to simply enable
<code class="code">bug-reference-mode</code>, only Rmail requires a slightly different
setup.
</p>
<div class="example smallexample">
<pre class="example-preformatted">;; Use VC-based setup if file is under version control.
(add-hook 'prog-mode-hook #'bug-reference-prog-mode)

;; Gnus (summary &amp; article buffers)
(add-hook 'gnus-mode-hook #'bug-reference-mode)

;; Rmail
(add-hook 'rmail-show-message-hook #'bug-reference-mode-force-auto-setup)

;; Rcirc
(add-hook 'rcirc-mode-hook #'bug-reference-mode)

;; ERC
(add-hook 'erc-mode-hook #'bug-reference-mode)
</pre></div>

<p>In the Rmail case, instead of the mode hook, the
<code class="code">rmail-show-message-hook</code> has to be used in combination with the
function <code class="code">bug-reference-mode-force-auto-setup</code> which activates
<code class="code">bug-reference-mode</code> and forces auto-setup.  The reason is that
with Rmail all messages reside in the same buffer but the setup needs
to be performed whenever another messages is displayed.
</p>

<h3 class="heading" id="Adding-support-for-third_002dparty-packages">Adding support for third-party packages</h3>

<a class="index-entry-id" id="index-bug_002dreference_002dauto_002dsetup_002dfunctions-1"></a>
<p>Adding support for bug-reference&#8217; auto-setup is usually quite
straight-forward: write a setup function of zero arguments which
gathers the required information (e.g., List-Id/To/From/Cc mail header
values in the case of a MUA), and then calls one of the following
helper functions:
</p><ul class="itemize mark-bullet">
<li><code class="code">bug-reference-maybe-setup-from-vc</code> which does the setup
according to <code class="code">bug-reference-setup-from-vc-alist</code>,

</li><li><code class="code">bug-reference-maybe-setup-from-mail</code> which does the setup
according to <code class="code">bug-reference-setup-from-mail-alist</code>,

</li><li>and <code class="code">bug-reference-maybe-setup-from-irc</code> which does the setup
according to <code class="code">bug-reference-setup-from-irc-alist</code>.
</li></ul>
<p>A setup function should return non-<code class="code">nil</code> if it could setup bug-reference
mode which is the case if the last thing the function does is calling
one of the helper functions above.
</p>
<p>Finally, the setup function has to be added to
<code class="code">bug-reference-auto-setup-functions</code>.
</p>
<p>Note that these auto-setup functions should check as a first step if
they are applicable, e.g., by checking the <code class="code">major-mode</code> value.
</p>

<h3 class="heading" id="Integration-with-the-debbugs-package">Integration with the debbugs package</h3>

<a class="index-entry-id" id="index-debbugs_002dbrowse_002dmode"></a>
<p>If your project&#8217;s issues are tracked on the server
<a class="url" href="https://debbugs.gnu.org">https://debbugs.gnu.org</a>, you can browse and reply to reports
directly in Emacs using the <code class="code">debbugs</code> package, which can be
downloaded via the Package Menu (see <a class="pxref" href="Packages.xhtml#Packages">Emacs Lisp Packages</a>).  This package adds
the minor mode <code class="code">debbugs-browse-mode</code>, which can be activated on
top of <code class="code">bug-reference-mode</code> and <code class="code">bug-reference-prog-mode</code> as
follows:
</p>
<div class="example smallexample">
<pre class="example-preformatted">(add-hook 'bug-reference-mode-hook 'debbugs-browse-mode)
(add-hook 'bug-reference-prog-mode-hook 'debbugs-browse-mode)
</pre></div>
</div>
</div>
<div class="footnotes-segment">
<h4 class="footnotes-heading">Footnotes</h4>

<h5 class="footnote-body-heading"><a id="FOOT17" href="#DOCF17">(17)</a></h5>
<p>A <em class="dfn">tag</em> is a synonym for identifier reference.  Commands and
features based on the <code class="code">etags</code> package traditionally use &#8220;tag&#8221;
with this meaning, and this subsection follows that tradition.
</p>
</div>



</body>
</html>
