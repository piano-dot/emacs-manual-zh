<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>50 Customization (GNU Emacs Manual)</title>

<meta name="description" content="50 Customization (GNU Emacs Manual)"/>
<meta name="keywords" content="50 Customization (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Quitting.xhtml" rel="next" title="51 Quitting and Aborting"/>
<link href="Packages.xhtml#Packages" rel="prev" title="49 Emacs Lisp Packages"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
span.r {font-family: initial; font-weight: normal; font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Customization">

<h2 class="chapter" id="Customization-1">50 Customization</h2>
<a class="index-entry-id" id="index-customization"></a>

<p>This chapter describes some simple methods to customize the behavior
of Emacs.
</p>
<p>Apart from the methods described here, see <a class="ref" href="X-Resources.xhtml#X-Resources">X Options and Resources</a> for
information about using X resources to customize Emacs, and see
<a class="ref" href="Keyboard-Macros.xhtml#Keyboard-Macros">Keyboard Macros</a> for information about recording and replaying
keyboard macros.  Making more far-reaching and open-ended changes
involves writing Emacs Lisp code; see
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#Top">Emacs Lisp</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>.
</p>

<div class="section-level-extent" id="Easy-Customization">
<h3 class="section" id="Easy-Customization-Interface">50.1 Easy Customization Interface</h3>

<a class="index-entry-id" id="index-settings"></a>
<a class="index-entry-id" id="index-user-option"></a>
<a class="index-entry-id" id="index-customizable-variable"></a>
<p>Emacs has many <em class="dfn">settings</em> which you can change.  Most settings
are <em class="dfn">customizable variables</em> (see <a class="pxref" href="#Variables">Variables</a>), which are also
called <em class="dfn">user options</em>.  There is a huge number of customizable
variables, controlling numerous aspects of Emacs behavior; the
variables documented in this manual are listed in <a class="ref" href="Variable-Index.xhtml">Variable Index</a>.  A separate class of settings are the <em class="dfn">faces</em>, which
determine the fonts, colors, and other attributes of text
(see <a class="pxref" href="Display.xhtml#Faces">Text Faces</a>).
</p>
<a class="index-entry-id" id="index-customize"></a>
<a class="index-entry-id" id="index-customization-buffer"></a>
<p>To browse and alter settings (both variables and faces), type
<kbd class="kbd">M-x customize</kbd>.  This creates a <em class="dfn">customization buffer</em>, which
lets you navigate through a logically organized list of settings, edit
and set their values, and save them permanently.
</p>

<div class="subsection-level-extent" id="Customization-Groups">
<h4 class="subsection" id="Customization-Groups-1">50.1.1 Customization Groups</h4>
<a class="index-entry-id" id="index-customization-groups"></a>

<p>Customization settings are organized into <em class="dfn">customization
groups</em>.  These groups are collected into bigger groups, all the way
up to a master group called <code class="code">Emacs</code>.
</p>
<p><kbd class="kbd">M-x customize</kbd> creates a customization buffer that shows the
top-level <code class="code">Emacs</code> group.  It looks like this, in part:
</p>
<div class="example smallexample">
<div class="group"><pre class="example-preformatted">For help using this buffer, see [Easy Customization] in the [Emacs manual].

________________________________________ [ Search ]

 Operate on all settings in this buffer:
 [ Revert... ] [ Apply ] [ Apply and Save ]


Emacs group: Customization of the One True Editor.
      [State]: visible group members are all at standard values.
      See also [Manual].

[Editing]      Basic text editing facilities.
[Convenience]  Convenience features for faster editing.

<var class="var">...more second-level groups...</var>
</pre></div></div>

<p>The main part of this buffer shows the &#8216;<samp class="samp">Emacs</samp>&#8217; customization
group, which contains several other groups (&#8216;<samp class="samp">Editing</samp>&#8217;,
&#8216;<samp class="samp">Convenience</samp>&#8217;, etc.).  The contents of those groups are not
listed here, only one line of documentation each.
</p>
<p>The <em class="dfn">state</em> of the group indicates whether setting in that group
has been edited, set, or saved.  See <a class="xref" href="#Changing-a-Variable">Changing a Variable</a>.
</p>
<a class="index-entry-id" id="index-editable-fields-_0028customization-buffer_0029"></a>
<a class="index-entry-id" id="index-buttons-_0028customization-buffer_0029"></a>
<a class="index-entry-id" id="index-links-_0028customization-buffer_0029"></a>
<p>Most of the customization buffer is read-only, but it includes some
<em class="dfn">editable fields</em> that you can edit.  For example, at the top of
the customization buffer is an editable field for searching for
settings (see <a class="pxref" href="#Browsing-Custom">Browsing and Searching for Settings</a>).  There are also <em class="dfn">buttons</em> and
<em class="dfn">links</em>, which you can activate by either clicking with the mouse,
or moving point there and typing <kbd class="kbd"><kbd class="key">RET</kbd></kbd>.  For example, the group
names like &#8216;<samp class="samp">[Editing]</samp>&#8217; are links; activating one of these links
brings up the customization buffer for that group.
</p>
<a class="index-entry-id" id="index-TAB-_0028customization-buffer_0029"></a>
<a class="index-entry-id" id="index-S_002dTAB-_0028customization-buffer_0029"></a>
<a class="index-entry-id" id="index-widget_002dforward"></a>
<a class="index-entry-id" id="index-widget_002dbackward"></a>
<p>In the customization buffer, you can type <kbd class="kbd"><kbd class="key">TAB</kbd></kbd>
(<code class="code">widget-forward</code>) to move forward to the next button or editable
field.  <kbd class="kbd">S-<kbd class="key">TAB</kbd></kbd> (<code class="code">widget-backward</code>) moves back to the
previous button or editable field.
</p>
</div>
<div class="subsection-level-extent" id="Browsing-Custom">
<h4 class="subsection" id="Browsing-and-Searching-for-Settings">50.1.2 Browsing and Searching for Settings</h4>
<a class="index-entry-id" id="index-customize_002dbrowse"></a>

<p>From the top-level customization buffer created by <kbd class="kbd">M-x
customize</kbd>, you can follow the links to the subgroups of the
&#8216;<samp class="samp">Emacs</samp>&#8217; customization group.  These subgroups may contain
settings for you to customize; they may also contain further subgroups,
dealing with yet more specialized subsystems of Emacs.  As you
navigate the hierarchy of customization groups, you should find some
settings that you want to customize.
</p>
<p>If you are interested in customizing a particular setting or
customization group, you can go straight there with the commands
<kbd class="kbd">M-x customize-option</kbd>, <kbd class="kbd">M-x customize-face</kbd>, or <kbd class="kbd">M-x&#160;customize-group</kbd><!-- /@w -->.  See <a class="xref" href="#Specific-Customization">Customizing Specific Items</a>.
</p>
<a class="index-entry-id" id="index-custom_002dsearch_002dfield"></a>
<p>If you don&#8217;t know exactly what groups or settings you want to
customize, you can search for them using the editable search field at
the top of each customization buffer.  Here, you can type in a search
term&#8212;either one or more words separated by spaces, or a regular
expression (see <a class="pxref" href="Search.xhtml#Regexps">Syntax of Regular Expressions</a>).  Then type <kbd class="kbd"><kbd class="key">RET</kbd></kbd> in the field,
or activate the &#8216;<samp class="samp">Search</samp>&#8217; button next to it, to switch to a
customization buffer containing groups and settings that match those
terms.  Note, however, that this feature only finds groups and
settings that are loaded in the current Emacs session.
</p>
<p>If you don&#8217;t want customization buffers to show the search field,
change the variable <code class="code">custom-search-field</code> to <code class="code">nil</code>.
</p>
<p>The command <kbd class="kbd">M-x customize-apropos</kbd> is similar to using the
search field, except that it reads the search term(s) using the
minibuffer.  See <a class="xref" href="#Specific-Customization">Customizing Specific Items</a>.
</p>
<p><kbd class="kbd">M-x customize-browse</kbd> is another way to browse the available
settings.  This command creates a special customization buffer, which
shows only the names of groups and settings, in a structured layout.
You can show the contents of a group, in the same buffer, by invoking
the &#8216;<samp class="samp">[+]</samp>&#8217; button next to the group name.  When the group contents
are shown, the button changes to &#8216;<samp class="samp">[-]</samp>&#8217;; invoking that hides the
group contents again.  Each group or setting in this buffer has a link
which says &#8216;<samp class="samp">[Group]</samp>&#8217;, &#8216;<samp class="samp">[Option]</samp>&#8217; or &#8216;<samp class="samp">[Face]</samp>&#8217;.  Invoking
this link creates an ordinary customization buffer showing just that
group, option, or face; this is the way to change settings that you
find with <kbd class="kbd">M-x customize-browse</kbd>.
</p>
</div>
<div class="subsection-level-extent" id="Changing-a-Variable">
<h4 class="subsection" id="Changing-a-Variable-1">50.1.3 Changing a Variable</h4>

<p>Here is an example of what a variable, or user option, looks like in
the customization buffer:
</p>
<div class="example smallexample">
<pre class="example-preformatted">[Hide] Kill Ring Max: Integer (positive or zero): 120
   [State]: STANDARD.
   Maximum length of kill ring before oldest elements are thrown away.
</pre></div>

<p>The first line shows that the variable is named
<code class="code">kill-ring-max</code>, formatted as &#8216;<samp class="samp">Kill Ring Max</samp>&#8217; for easier
viewing, and also shows its expected type: a positive integer or zero.
The default value is &#8216;<samp class="samp">120</samp>&#8217;.  The button labeled &#8216;<samp class="samp">[Hide]</samp>&#8217;,
if activated, hides the variable&#8217;s value and state; this is useful to
avoid cluttering up the customization buffer with very long values
(for this reason, variables that have very long values may start out
hidden).  If you use the &#8216;<samp class="samp">[Hide]</samp>&#8217; button, it changes to
&#8216;<samp class="samp">[Show Value]</samp>&#8217;, which you can activate to reveal the value and
state.  On a graphical display, the &#8216;<samp class="samp">[Hide]</samp>&#8217; and &#8216;<samp class="samp">[Show
Value]</samp>&#8217; buttons are replaced with graphical triangles pointing
downwards and rightwards respectively.
</p>
<p>The line after the variable name indicates the <em class="dfn">customization
state</em> of the variable: in this example, &#8216;<samp class="samp">STANDARD</samp>&#8217; means you
have not changed the variable, so its value is the default one.  The
&#8216;<samp class="samp">[State]</samp>&#8217; button gives a menu of operations for customizing the
variable.
</p>
<p>Below the customization state is the documentation for the variable.
This is the same documentation that would be shown by the <kbd class="kbd">C-h v</kbd>
command (see <a class="pxref" href="#Examining">Examining and Setting Variables</a>).  If the documentation is more than one
line long, only one line may be shown.  If so, that line ends with a
&#8216;<samp class="samp">[More]</samp>&#8217; button; activate this to see the full documentation.
</p>
<a class="index-entry-id" id="index-user-options_002c-changing"></a>
<a class="index-entry-id" id="index-customizing-variables"></a>
<a class="index-entry-id" id="index-variables_002c-changing"></a>
<p>To enter a new value for &#8216;<samp class="samp">Kill Ring Max</samp>&#8217;, just move point to
the value and edit it.  For example, type <kbd class="kbd">M-d</kbd> to delete the
&#8216;<samp class="samp">60</samp>&#8217; and type in another number.  As you begin to alter the text,
the &#8216;<samp class="samp">[State]</samp>&#8217; line will change:
</p>
<div class="example smallexample">
<pre class="example-preformatted">[State]: EDITED, shown value does not take effect until you
         set or save it.
</pre></div>

<p>Editing the value does not make it take effect right away.  To do
that, you must <em class="dfn">set</em> the variable by activating the &#8216;<samp class="samp">[State]</samp>&#8217;
button and choosing &#8216;<samp class="samp">Set for Current Session</samp>&#8217;.  Then the
variable&#8217;s state becomes:
</p>
<div class="example smallexample">
<pre class="example-preformatted">[State]: SET for current session only.
</pre></div>

<p>You don&#8217;t have to worry about specifying a value that is not valid;
the &#8216;<samp class="samp">Set for Current Session</samp>&#8217; operation checks for validity and
will not install an unacceptable value.
</p>
<a class="index-entry-id" id="index-M_002dTAB-_0028customization-buffer_0029"></a>
<a class="index-entry-id" id="index-C_002dM_002di-_0028customization-buffer_0029"></a>
<a class="index-entry-id" id="index-widget_002dcomplete"></a>
<p>While editing certain kinds of values, such as file names, directory
names, and Emacs command names, you can perform completion with
<kbd class="kbd">C-M-i</kbd> (<code class="code">widget-complete</code>), or the equivalent keys
<kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> or <kbd class="kbd"><kbd class="key">ESC</kbd> <kbd class="key">TAB</kbd></kbd>.  This behaves much
like minibuffer completion (see <a class="pxref" href="Minibuffer.xhtml#Completion">Completion</a>).
</p>
<p>Typing <kbd class="kbd"><kbd class="key">RET</kbd></kbd> on an editable value field moves point
forward to the next field or button, like <kbd class="kbd"><kbd class="key">TAB</kbd></kbd>.  You can
thus type <kbd class="kbd"><kbd class="key">RET</kbd></kbd> when you are finished editing a field, to
move on to the next button or field.  To insert a newline within an
editable field, use <kbd class="kbd">C-o</kbd> or <kbd class="kbd">C-q C-j</kbd>.
</p>
<p>For some variables, there is only a fixed set of legitimate values,
and you are not allowed to edit the value directly.  Instead, a
&#8216;<samp class="samp">[Value Menu]</samp>&#8217; button appears before the value; activating this
button presents a choice of values.  For a boolean &#8220;on or off&#8221;
value, the button says &#8216;<samp class="samp">[Toggle]</samp>&#8217;, and flips the value.  After
using the &#8216;<samp class="samp">[Value Menu]</samp>&#8217; or &#8216;<samp class="samp">[Toggle]</samp>&#8217; button, you must
again set the variable to make the chosen value take effect.
</p>
<p>Some variables have values with complex structure.  For example, the
value of <code class="code">minibuffer-frame-alist</code> is an association list.  Here
is how it appears in the customization buffer:
</p>
<div class="example smallexample">
<pre class="example-preformatted">[Hide] Minibuffer Frame Alist:
[INS] [DEL] Parameter: width
            Value: 80
[INS] [DEL] Parameter: height
            Value: 2
[INS]
   [ State ]: STANDARD.
   Alist of parameters for the initial minibuffer frame. [Hide]
   <span class="r">[...more lines of documentation...]</span>
</pre></div>

<p>In this case, each association in the list consists of two items, one
labeled &#8216;<samp class="samp">Parameter</samp>&#8217; and one labeled &#8216;<samp class="samp">Value</samp>&#8217;; both are
editable fields.  You can delete an association from the list with the
&#8216;<samp class="samp">[DEL]</samp>&#8217; button next to it.  To add an association, use the
&#8216;<samp class="samp">[INS]</samp>&#8217; button at the position where you want to insert it; the
very last &#8216;<samp class="samp">[INS]</samp>&#8217; button inserts at the end of the list.
</p>
<a class="index-entry-id" id="index-saving-a-setting"></a>
<a class="index-entry-id" id="index-settings_002c-how-to-save"></a>
<p>When you set a variable, the new value takes effect only in the
current Emacs session.  To <em class="dfn">save</em> the value for future sessions,
use the &#8216;<samp class="samp">[State]</samp>&#8217; button and select the &#8216;<samp class="samp">Save for Future
Sessions</samp>&#8217; operation.  See <a class="xref" href="#Saving-Customizations">Saving Customizations</a>.
</p>
<p>You can also restore the variable to its standard value by using the
&#8216;<samp class="samp">[State]</samp>&#8217; button and selecting the &#8216;<samp class="samp">Erase Customization</samp>&#8217;
operation.  There are actually four reset operations:
</p>
<dl class="table">
<dt>&#8216;<samp class="samp">Undo Edits</samp>&#8217;</dt>
<dd><p>If you have modified but not yet set the variable, this restores the
text in the customization buffer to match the actual value.
</p>
</dd>
<dt>&#8216;<samp class="samp">Revert This Session's Customizations</samp>&#8217;</dt>
<dd><p>This restores the value of the variable to the last saved value, if
there was one.  Otherwise it restores the standard value.  It updates
the text accordingly.
</p>
</dd>
<dt>&#8216;<samp class="samp">Erase Customization</samp>&#8217;</dt>
<dd><p>This sets the variable to its standard value.  Any saved value that
you have is also eliminated.
</p>
</dd>
<dt>&#8216;<samp class="samp">Set to Backup Value</samp>&#8217;</dt>
<dd><p>This sets the variable to a previous value that was set in the
customization buffer in this session.  If you customize a variable
and then reset it, which discards the customized value,
you can get the discarded value back again with this operation.
</p></dd>
</dl>

<a class="index-entry-id" id="index-comments-on-customized-settings"></a>
<p>Sometimes it is useful to record a comment about a specific
customization.  Use the &#8216;<samp class="samp">Add Comment</samp>&#8217; item from the
&#8216;<samp class="samp">[State]</samp>&#8217; menu to create a field for entering the comment.
</p>
<p>Near the top of the customization buffer are two lines of buttons:
</p>
<div class="example smallexample">
<pre class="example-preformatted"> Operate on all settings in this buffer:
 [Revert...] [Apply] [Apply and Save]
</pre></div>

<p>The &#8216;<samp class="samp">[Revert...]</samp>&#8217; button drops a menu with the first 3 reset
operations described above.  The &#8216;<samp class="samp">[Apply]</samp>&#8217; button applies the
settings for the current session.  The &#8216;<samp class="samp">[Apply and Save]</samp>&#8217; button
applies the settings and saves them for future sessions; this button
does not appear if Emacs was started with the <samp class="option">-q</samp> or
<samp class="option">-Q</samp> option (see <a class="pxref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>).
</p>
<a class="index-entry-id" id="index-C_002dc-C_002dc-_0028customization-buffer_0029"></a>
<a class="index-entry-id" id="index-C_002dx-C_002dc-_0028customization-buffer_0029"></a>
<a class="index-entry-id" id="index-Custom_002dset"></a>
<a class="index-entry-id" id="index-Custom_002dsave"></a>
<p>The command <kbd class="kbd">C-c C-c</kbd> (<code class="code">Custom-set</code>) is equivalent to using
the &#8216;<samp class="samp">[Set for Current Session]</samp>&#8217; button.  The command <kbd class="kbd">C-x
C-s</kbd> (<code class="code">Custom-save</code>) is like using the &#8216;<samp class="samp">[Save for Future
Sessions]</samp>&#8217; button.
</p>
<a class="index-entry-id" id="index-custom_002dbuffer_002ddone_002dkill"></a>
<p>The &#8216;<samp class="samp">[Exit]</samp>&#8217; button switches out of the customization buffer,
and buries the buffer at the bottom of the buffer list.  To make it
kill the customization buffer instead, change the variable
<code class="code">custom-buffer-done-kill</code> to <code class="code">t</code>.
</p>
</div>
<div class="subsection-level-extent" id="Saving-Customizations">
<h4 class="subsection" id="Saving-Customizations-1">50.1.4 Saving Customizations</h4>

<p>In the customization buffer, you can <em class="dfn">save</em> a customization
setting by choosing the &#8216;<samp class="samp">Save for Future Sessions</samp>&#8217; choice from
its &#8216;<samp class="samp">[State]</samp>&#8217; button.  The <kbd class="kbd">C-x C-s</kbd> (<code class="code">Custom-save</code>)
command, or the &#8216;<samp class="samp">[Apply and Save]</samp>&#8217; button at the top of the
customization buffer, saves all applicable settings in the buffer.
</p>
<p>Saving works by writing code to a file, usually your initialization
file (see <a class="pxref" href="#Init-File">The Emacs Initialization File</a>).  Future Emacs sessions automatically read
this file at startup, which sets up the customizations again.
</p>
<a class="index-entry-id" id="index-custom_002dfile"></a>
<p>You can choose to save customizations somewhere other than your
initialization file.  To make this work, you must add a couple of
lines of code to your initialization file, to set the variable
<code class="code">custom-file</code> to the name of the desired file, and to load that
file.  For example:
</p>
<div class="example">
<pre class="example-preformatted">(setq custom-file &quot;~/.config/emacs-custom.el&quot;)
(load custom-file)
</pre></div>

<p>You can even specify different customization files for different
Emacs versions, like this:
</p>
<div class="example">
<pre class="example-preformatted">(cond ((&lt; emacs-major-version 28)
       ;; <span class="r">Emacs 27 customization.</span>
       (setq custom-file &quot;~/.config/custom-27.el&quot;))
      ((and (= emacs-major-version 26)
            (&lt; emacs-minor-version 3))
       ;; <span class="r">Emacs 26 customization, before version 26.3.</span>
       (setq custom-file &quot;~/.config/custom-26.el&quot;))
      (t
       ;; <span class="r">Emacs version 28.1 or later.</span>
       (setq custom-file &quot;~/.config/emacs-custom.el&quot;)))

(load custom-file)
</pre></div>

<p>If Emacs was invoked with the <samp class="option">-q</samp> or <samp class="option">--no-init-file</samp>
options (see <a class="pxref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>), it will not let you save your
customizations in your initialization file.  This is because saving
customizations from such a session would wipe out all the other
customizations you might have on your initialization file.
</p>
<a class="index-entry-id" id="index-unsaved-customizations_002c-reminder-to-save"></a>
<a class="index-entry-id" id="index-custom_002dprompt_002dcustomize_002dunsaved_002doptions"></a>
<p>Please note that any customizations you have not chosen to save for
future sessions will be lost when you terminate Emacs.  If you&#8217;d like
to be prompted about unsaved customizations at termination time, add
the following to your initialization file:
</p>
<div class="example">
<pre class="example-preformatted">(add-hook 'kill-emacs-query-functions
          'custom-prompt-customize-unsaved-options)
</pre></div>

</div>
<div class="subsection-level-extent" id="Face-Customization">
<h4 class="subsection" id="Customizing-Faces">50.1.5 Customizing Faces</h4>
<a class="index-entry-id" id="index-customizing-faces"></a>
<a class="index-entry-id" id="index-faces_002c-customizing"></a>
<a class="index-entry-id" id="index-fonts-and-faces"></a>

<p>You can customize faces (see <a class="pxref" href="Display.xhtml#Faces">Text Faces</a>), which determine how Emacs
displays different types of text.  Customization groups can contain
both variables and faces.
</p>
<p>For example, in programming language modes, source code comments are
shown with <code class="code">font-lock-comment-face</code> (see <a class="pxref" href="Display.xhtml#Font-Lock">Font Lock mode</a>).  In a
customization buffer, that face appears like this, after you click on
the &#8216;<samp class="samp">[Show All Attributes]</samp>&#8217; link:
</p>
<div class="example smallexample">
<pre class="example-preformatted">[Hide] Font Lock Comment Face:[sample]
   [State] : STANDARD.
   Font Lock mode face used to highlight comments.
   [ ] Font Family: --
   [ ] Font Foundry: --
   [ ] Width: --
   [ ] Height: --
   [ ] Weight: --
   [ ] Slant: --
   [ ] Underline: --
   [ ] Overline: --
   [ ] Strike-through: --
   [ ] Box around text: --
   [ ] Inverse-video: --
   [X] Foreground: Firebrick     [Choose]  (sample)
   [ ] Background: --
   [ ] Stipple: --
   [ ] Inherit: --
   [Hide Unused Attributes]
</pre></div>

<p>The first three lines show the name, &#8216;<samp class="samp">[State]</samp>&#8217; button, and
documentation for the face.  Below that is a list of <em class="dfn">face
attributes</em>.  In front of each attribute is a checkbox.  A filled
checkbox, &#8216;<samp class="samp">[X]</samp>&#8217;, means that the face specifies a value for this
attribute; an empty checkbox, &#8216;<samp class="samp">[ ]</samp>&#8217;, means that the face does not
specify any special value for the attribute.  You can activate a
checkbox to specify or unspecify its attribute.
</p>
<p>A face does not have to specify every single attribute; in fact,
most faces only specify a few attributes.  In the above example,
<code class="code">font-lock-comment-face</code> only specifies the foreground color.
Any unspecified attribute is taken from the special face named
<code class="code">default</code>, whose attributes are all specified.  The
<code class="code">default</code> face is the face used to display any text that does not
have an explicitly-assigned face; furthermore, its background color
attribute serves as the background color of the frame.
</p>
<p>The &#8216;<samp class="samp">[Hide Unused Attributes]</samp>&#8217; button, at the end of the
attribute list, hides the unspecified attributes of the face.  When
attributes are being hidden, the button changes to &#8216;<samp class="samp">[Show All
Attributes]</samp>&#8217;, which reveals the entire attribute list.  The
customization buffer may start out with unspecified attributes hidden,
to avoid cluttering the interface.
</p>
<p>When an attribute is specified, you can change its value in the
usual ways.
</p>
<p>Foreground and background colors can be specified using either color
names or RGB triplets (see <a class="pxref" href="Display.xhtml#Colors">Colors for Faces</a>).  You can also use the
&#8216;<samp class="samp">[Choose]</samp>&#8217; button to switch to a list of color names; select a
color with <kbd class="kbd"><kbd class="key">RET</kbd></kbd> in that buffer to put the color name in the
value field.
</p>
<p>Setting, saving and resetting a face work like the same operations for
variables (see <a class="pxref" href="#Changing-a-Variable">Changing a Variable</a>).
</p>
<p>A face can specify different appearances for different types of
displays.  For example, a face can make text red on a color display,
but use a bold font on a monochrome display.  To specify multiple
appearances for a face, select &#8216;<samp class="samp">For All Kinds of Displays</samp>&#8217; in the
menu you get from invoking &#8216;<samp class="samp">[State]</samp>&#8217;.
</p>
</div>
<div class="subsection-level-extent" id="Specific-Customization">
<h4 class="subsection" id="Customizing-Specific-Items">50.1.6 Customizing Specific Items</h4>

<dl class="table">
<dt><kbd class="kbd">M-x customize-option <kbd class="key">RET</kbd> <var class="var">option</var> <kbd class="key">RET</kbd></kbd></dt>
<dt><kbd class="kbd">M-x customize-variable <kbd class="key">RET</kbd> <var class="var">option</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Set up a customization buffer for just one user option, <var class="var">option</var>.
</p>
</dd>
<dt><kbd class="kbd">M-x customize-face <kbd class="key">RET</kbd> <var class="var">face</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Set up a customization buffer for just one face, <var class="var">face</var>.
</p>
</dd>
<dt><kbd class="kbd">M-x customize-icon <kbd class="key">RET</kbd> <var class="var">face</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Set up a customization buffer for just one icon, <var class="var">icon</var>.
</p>
</dd>
<dt><kbd class="kbd">M-x customize-group <kbd class="key">RET</kbd> <var class="var">group</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Set up a customization buffer for just one group, <var class="var">group</var>.
</p>
</dd>
<dt><kbd class="kbd">M-x customize-apropos <kbd class="key">RET</kbd> <var class="var">regexp</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Set up a customization buffer for all the settings and groups that
match <var class="var">regexp</var>.
</p>
</dd>
<dt><kbd class="kbd">M-x customize-changed <kbd class="key">RET</kbd> <var class="var">version</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Set up a customization buffer with all the user options, faces and
groups whose meaning has changed since (or been added after) Emacs
version <var class="var">version</var>.
</p>
</dd>
<dt><kbd class="kbd">M-x customize-saved</kbd></dt>
<dd><p>Set up a customization buffer containing all settings that you
have saved with customization buffers.
</p>
</dd>
<dt><kbd class="kbd">M-x customize-unsaved</kbd></dt>
<dd><p>Set up a customization buffer containing all settings that you have
set but not saved.
</p></dd>
</dl>

<a class="index-entry-id" id="index-customize_002doption"></a>
<p>If you want to customize a particular user option, type <kbd class="kbd">M-x
customize-option</kbd>.  This reads the variable name, and sets up the
customization buffer with just that one user option.  When entering
the variable name into the minibuffer, completion is available, but
only for the names of variables that have been loaded into Emacs.
</p>
<a class="index-entry-id" id="index-customize_002dface"></a>
<a class="index-entry-id" id="index-customize_002dgroup"></a>
<p>Likewise, you can customize a specific face using <kbd class="kbd">M-x
customize-face</kbd>.  You can set up a customization buffer for a specific
customization group using <kbd class="kbd">M-x customize-group</kbd>.
</p>
<a class="index-entry-id" id="index-customize_002dapropos"></a>
<p><kbd class="kbd">M-x customize-apropos</kbd> prompts for a search term&#8212;either one
or more words separated by spaces, or a regular expression&#8212;and sets
up a customization buffer for all <em class="emph">loaded</em> settings and groups
with matching names.  This is like using the search field at the top
of the customization buffer (see <a class="pxref" href="#Customization-Groups">Customization Groups</a>).
</p>
<a class="index-entry-id" id="index-customize_002dchanged"></a>
<p>When you upgrade to a new Emacs version, you might want to consider
customizing new settings, and settings whose meanings or default
values have changed.  To do this, use <kbd class="kbd">M-x customize-changed</kbd> and
specify a previous Emacs version number using the minibuffer.  It
creates a customization buffer which shows all the settings and groups
whose definitions have been changed since the specified version,
loading them if necessary.
</p>
<a class="index-entry-id" id="index-customize_002dsaved"></a>
<a class="index-entry-id" id="index-customize_002dunsaved"></a>
<p>If you change settings and then decide the change was a mistake, you
can use two commands to revisit your changes.  Use <kbd class="kbd">M-x
customize-saved</kbd> to customize settings that you have saved.  Use
<kbd class="kbd">M-x customize-unsaved</kbd> to customize settings that you have set
but not saved.
</p>
</div>
<div class="subsection-level-extent" id="Custom-Themes">
<h4 class="subsection" id="Custom-Themes-1">50.1.7 Custom Themes</h4>
<a class="index-entry-id" id="index-custom-themes"></a>

<p><em class="dfn">Custom themes</em> are collections of settings that can be enabled
or disabled as a unit.  You can use Custom themes to switch easily
between various collections of settings, and to transfer such
collections from one computer to another.
</p>
<p>A Custom theme is stored as an Emacs Lisp source file.  If the name of
the Custom theme is <var class="var">name</var>, the theme file is named
<samp class="file"><var class="var">name</var>-theme.el</samp>.  See <a class="xref" href="#Creating-Custom-Themes">Creating Custom Themes</a>, for the
format of a theme file and how to make one.
</p>
<a class="index-entry-id" id="index-customize_002dthemes"></a>
<a class="index-entry-id" id="index-custom_002dtheme_002ddirectory"></a>
<a class="index-entry-id" id="index-color-scheme"></a>
<p>Type <kbd class="kbd">M-x customize-themes</kbd> to switch to a buffer named
<samp class="file">*Custom Themes*</samp>, which lists the Custom themes that Emacs knows
about.  By default, Emacs looks for theme files in two locations: the
directory specified by the variable <code class="code">custom-theme-directory</code>
(which defaults to <samp class="file">~/.emacs.d/</samp>), and a directory named
<samp class="file">etc/themes</samp> in your Emacs installation (see the variable
<code class="code">data-directory</code>).  The latter contains several Custom themes
distributed with Emacs that customize Emacs&#8217;s faces to fit
various color schemes.  (Note, however, that Custom themes need not be
restricted to this purpose; they can be used to customize variables
too.)
</p>
<a class="index-entry-id" id="index-custom_002dtheme_002dload_002dpath"></a>
<p>If you want Emacs to look for Custom themes in some other directory,
add the directory to the list variable
<code class="code">custom-theme-load-path</code>.  Its default value is
<code class="code">(custom-theme-directory t)</code>; here, the symbol
<code class="code">custom-theme-directory</code> has the special meaning of the value of
the variable <code class="code">custom-theme-directory</code>, while <code class="code">t</code> stands for
the built-in theme directory <samp class="file">etc/themes</samp>.  The themes listed in
the <samp class="file">*Custom Themes*</samp> buffer are those found in the directories
specified by <code class="code">custom-theme-load-path</code>.
</p>
<a class="index-entry-id" id="index-C_002dx-C_002ds-_0028Custom-Themes-buffer_0029"></a>
<p>In the <samp class="file">*Custom Themes*</samp> buffer, you can activate the checkbox
next to a Custom theme to enable or disable the theme for the current
Emacs session.  When a Custom theme is enabled, all of its settings
(variables and faces) take effect in the Emacs session.  To apply the
choice of theme(s) to future Emacs sessions, type <kbd class="kbd">C-x C-s</kbd>
(<code class="code">custom-theme-save</code>) or use the &#8216;<samp class="samp">[Save Theme Settings]</samp>&#8217;
button.
</p>
<a class="index-entry-id" id="index-custom_002dsafe_002dthemes"></a>
<p>When you first enable a Custom theme, Emacs displays the contents of
the theme file and asks if you really want to load it.  Because
loading a Custom theme can execute arbitrary Lisp code, you should
only say yes if you know that the theme is safe; in that case, Emacs
offers to remember in the future that the theme is safe (this is done
by saving the theme file&#8217;s SHA-256 hash to the variable
<code class="code">custom-safe-themes</code>; if you want to treat all themes as safe,
change its value to <code class="code">t</code>).  Themes that come with Emacs (in the
<samp class="file">etc/themes</samp> directory) are exempt from this check, and are
always considered safe.
</p>
<a class="index-entry-id" id="index-custom_002denabled_002dthemes"></a>
<p>Setting or saving Custom themes actually works by customizing the
variable <code class="code">custom-enabled-themes</code>.  The value of this variable is
a list of Custom theme names (as Lisp symbols, e.g., <code class="code">tango</code>).
Instead of using the <samp class="file">*Custom Themes*</samp> buffer to set
<code class="code">custom-enabled-themes</code>, you can customize the variable using the
usual customization interface, e.g., with <kbd class="kbd">M-x customize-option</kbd>.
Note that Custom themes are not allowed to set
<code class="code">custom-enabled-themes</code> themselves.
</p>
<p>Any customizations that you make through the customization buffer
take precedence over theme settings.  This lets you easily override
individual theme settings that you disagree with.  If settings from
two different themes overlap, the theme occurring earlier in
<code class="code">custom-enabled-themes</code> takes precedence.  In the customization
buffer, if a setting has been changed from its default by a Custom
theme, its &#8216;<samp class="samp">State</samp>&#8217; display shows &#8216;<samp class="samp">THEMED</samp>&#8217; instead of
&#8216;<samp class="samp">STANDARD</samp>&#8217;.
</p>
<a class="index-entry-id" id="index-load_002dtheme"></a>
<a class="index-entry-id" id="index-enable_002dtheme"></a>
<a class="index-entry-id" id="index-disable_002dtheme"></a>
<p>You can enable a specific Custom theme in the current Emacs session
by typing <kbd class="kbd">M-x load-theme</kbd>.  This prompts for a theme name, loads
the theme from the theme file, and enables it.  If a theme file
has been loaded before, you can enable the theme without loading its
file by typing <kbd class="kbd">M-x enable-theme</kbd>.  To disable a Custom theme,
type <kbd class="kbd">M-x disable-theme</kbd>.
</p>
<a class="index-entry-id" id="index-describe_002dtheme"></a>
<p>To see a description of a Custom theme, type <kbd class="kbd">?</kbd> on its line in
the <samp class="file">*Custom Themes*</samp> buffer; or type <kbd class="kbd">M-x describe-theme</kbd>
anywhere in Emacs and enter the theme name.
</p>
<a class="index-entry-id" id="index-theme_002dchoose_002dvariant"></a>
<p>Some themes have variants (most often just two: light and dark).  You
can switch to another variant using <kbd class="kbd">M-x theme-choose-variant</kbd>.
If the currently active theme has only one other variant, it will be
selected; if there are more variants, the command will prompt you
which one to switch to.
</p>
<p>Note that <code class="code">theme-choose-variant</code> only works if a single theme
is active.
</p>
</div>
<div class="subsection-level-extent" id="Creating-Custom-Themes">
<h4 class="subsection" id="Creating-Custom-Themes-1">50.1.8 Creating Custom Themes</h4>
<a class="index-entry-id" id="index-custom-themes_002c-creating"></a>

<a class="index-entry-id" id="index-customize_002dcreate_002dtheme"></a>
<p>You can define a Custom theme using an interface similar to the
customization buffer, by typing <kbd class="kbd">M-x customize-create-theme</kbd>.
This switches to a buffer named <samp class="file">*Custom Theme*</samp>.  It also offers
to insert some common Emacs faces into the theme (a convenience, since
Custom themes are often used to customize faces).  If you answer no,
the theme will initially contain no settings.
</p>
<p>Near the top of the <samp class="file">*Custom Theme*</samp> buffer, there are editable fields
where you can enter the theme&#8217;s name and description.  The name can be
anything except &#8216;<samp class="samp">user</samp>&#8217;.  The description is the one that will be
shown when you invoke <kbd class="kbd">M-x describe-theme</kbd> for the theme.  Its
first line should be a brief one-sentence summary; in the buffer made
by <kbd class="kbd">M-x customize-themes</kbd>, this sentence is displayed next to the
theme name.
</p>
<p>To add a new setting to the theme, use the &#8216;<samp class="samp">[Insert Additional
Face]</samp>&#8217; or &#8216;<samp class="samp">[Insert Additional Variable]</samp>&#8217; buttons.  Each button
reads a face or variable name using the minibuffer, with completion,
and inserts a customization entry for the face or variable.  You can
edit the variable values or face attributes in the same way as in a
normal customization buffer.  To remove a face or variable from the
theme, uncheck the checkbox next to its name.
</p>
<a class="index-entry-id" id="index-custom_002dtheme_002ddirectory_002c-saving-theme-files"></a>
<p>After specifying the Custom theme&#8217;s faces and variables, type
<kbd class="kbd">C-x C-s</kbd> (<code class="code">custom-theme-write</code>) or use the buffer&#8217;s
&#8216;<samp class="samp">[Save Theme]</samp>&#8217; button.  This saves the theme file, named
<samp class="file"><var class="var">name</var>-theme.el</samp> where <var class="var">name</var> is the theme name, in the
directory named by <code class="code">custom-theme-directory</code>.
</p>
<p>From the <samp class="file">*Custom Theme*</samp> buffer, you can view and edit an
existing Custom theme by activating the &#8216;<samp class="samp">[Visit Theme]</samp>&#8217; button
and specifying the theme name.  You can also add the settings of
another theme into the buffer, using the &#8216;<samp class="samp">[Merge Theme]</samp>&#8217; button.
You can import your non-theme settings into a Custom theme by using
the &#8216;<samp class="samp">[Merge Theme]</samp>&#8217; button and specifying the special theme named
&#8216;<samp class="samp">user</samp>&#8217;.
</p>
<p>A theme file is simply an Emacs Lisp source file, and loading the
Custom theme works by loading the Lisp file.  Therefore, you can edit
a theme file directly instead of using the <samp class="file">*Custom Theme*</samp>
buffer.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html#Custom-Themes">Custom Themes</a> in <cite class="cite">The Emacs Lisp Reference
Manual</cite>, for details.
</p>
</div>
</div>
<div class="section-level-extent" id="Variables">
<h3 class="section" id="Variables-1">50.2 Variables</h3>
<a class="index-entry-id" id="index-variable"></a>

<p>A <em class="dfn">variable</em> is a Lisp symbol which has a value.  The symbol&#8217;s
name is also called the <em class="dfn">variable name</em>.  A variable name can
contain any characters that can appear in a file, but most variable
names consist of ordinary words separated by hyphens.
</p>
<p>The name of the variable serves as a compact description of its
role.  Most variables also have a <em class="dfn">documentation string</em>, which
describes what the variable&#8217;s purpose is, what kind of value it should
have, and how the value will be used.  You can view this documentation
using the help command <kbd class="kbd">C-h v</kbd> (<code class="code">describe-variable</code>).
See <a class="xref" href="#Examining">Examining and Setting Variables</a>.
</p>
<p>Emacs uses many Lisp variables for internal record keeping, but the
most interesting variables for a non-programmer user are those meant
for users to change&#8212;these are called <em class="dfn">customizable variables</em> or
<em class="dfn">user options</em> (see <a class="pxref" href="#Easy-Customization">Easy Customization Interface</a>).  In the following
sections, we will describe other aspects of Emacs variables, such as
how to set them outside Customize.
</p>
<p>Emacs Lisp allows any variable (with a few exceptions) to have any
kind of value.  However, many variables are meaningful only if
assigned values of a certain type.  For example, only numbers are
meaningful values for <code class="code">kill-ring-max</code>, which specifies the
maximum length of the kill ring (see <a class="pxref" href="Killing.xhtml#Earlier-Kills">Yanking Earlier Kills</a>); if you give
<code class="code">kill-ring-max</code> a string value, commands such as <kbd class="kbd">C-y</kbd>
(<code class="code">yank</code>) will signal an error.  On the other hand, some variables
don&#8217;t care about type; for instance, if a variable has one effect for
<code class="code">nil</code> values and another effect for non-<code class="code">nil</code> values,
then any value that is not the symbol <code class="code">nil</code> induces the second
effect, regardless of its type (by convention, we usually use the
value <code class="code">t</code>&#8212;a symbol which stands for &#8220;true&#8221;&#8212;to specify a
non-<code class="code">nil</code> value).  If you set a variable using the customization
buffer, you need not worry about giving it an invalid type: the
customization buffer usually only allows you to enter meaningful
values.  When in doubt, use <kbd class="kbd">C-h v</kbd> (<code class="code">describe-variable</code>) to
check the variable&#8217;s documentation string to see what kind of value it
expects (see <a class="pxref" href="#Examining">Examining and Setting Variables</a>).
</p>

<div class="subsection-level-extent" id="Examining">
<h4 class="subsection" id="Examining-and-Setting-Variables">50.2.1 Examining and Setting Variables</h4>
<a class="index-entry-id" id="index-setting-variables"></a>

<dl class="table">
<dt><kbd class="kbd">C-h v <var class="var">var</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Display the value and documentation of variable <var class="var">var</var>
(<code class="code">describe-variable</code>).
</p>
</dd>
<dt><kbd class="kbd">M-x set-variable <kbd class="key">RET</kbd> <var class="var">var</var> <kbd class="key">RET</kbd> <var class="var">value</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Change the value of variable <var class="var">var</var> to <var class="var">value</var>.
</p></dd>
</dl>

<p>To examine the value of a variable, use <kbd class="kbd">C-h v</kbd>
(<code class="code">describe-variable</code>).  This reads a variable name using the
minibuffer, with completion, and displays both the value and the
documentation of the variable.  For example,
</p>
<div class="example">
<pre class="example-preformatted">C-h v fill-column <kbd class="key">RET</kbd>
</pre></div>

<p>displays something like this:
</p>
<div class="example">
<pre class="example-preformatted">fill-column is a variable defined in &#8216;C source code&#8217;.
Its value is 70

  Automatically becomes buffer-local when set.
  This variable is safe as a file local variable if its value
  satisfies the predicate &#8216;integerp&#8217;.
  Probably introduced at or before Emacs version 18.

Documentation:
Column beyond which automatic line-wrapping should happen.
Interactively, you can set the buffer local value using C-x f.

You can customize this variable.
</pre></div>

<p>The line that says &#8216;<samp class="samp">You can customize the variable</samp>&#8217; indicates that
this variable is a user option.  <kbd class="kbd">C-h v</kbd> is not restricted to user
options; it allows non-customizable variables too.
</p>
<a class="index-entry-id" id="index-set_002dvariable"></a>
<p>The most convenient way to set a specific customizable variable is
with <kbd class="kbd">M-x set-variable</kbd>.  This reads the variable name with the
minibuffer (with completion), and then reads a Lisp expression for the
new value using the minibuffer a second time (you can insert the old
value into the minibuffer for editing via <kbd class="kbd">M-n</kbd>).  For example,
</p>
<div class="example">
<pre class="example-preformatted">M-x set-variable <kbd class="key">RET</kbd> fill-column <kbd class="key">RET</kbd> 75 <kbd class="key">RET</kbd>
</pre></div>

<p>sets <code class="code">fill-column</code> to 75.
</p>
<p><kbd class="kbd">M-x set-variable</kbd> is limited to customizable variables, but you
can set any variable with a Lisp expression like this:
</p>
<div class="example">
<pre class="example-preformatted">(setq fill-column 75)
</pre></div>

<p>To execute such an expression, type <kbd class="kbd">M-:</kbd> (<code class="code">eval-expression</code>)
and enter the expression in the minibuffer (see <a class="pxref" href="Building.xhtml#Lisp-Eval">Evaluating Emacs Lisp Expressions</a>).
Alternatively, go to the <samp class="file">*scratch*</samp> buffer, type in the
expression, and then type <kbd class="kbd">C-j</kbd> (see <a class="pxref" href="Building.xhtml#Lisp-Interaction">Lisp Interaction Buffers</a>).
</p>
<p>Setting variables, like all means of customizing Emacs except where
otherwise stated, affects only the current Emacs session.  The only
way to alter the variable in future sessions is to put something in
your initialization file (see <a class="pxref" href="#Init-File">The Emacs Initialization File</a>).
</p>
<p>If you&#8217;re setting a customizable variable in your initialization
file, and you don&#8217;t want to use the Customize interface, you can use
the <code class="code">setopt</code> macro.  For instance:
</p>
<a class="index-entry-id" id="index-setopt"></a>
<div class="example">
<pre class="example-preformatted">(setopt fill-column 75)
</pre></div>

<p>This works the same as <code class="code">setq</code>, but if the variable has any
special setter functions, they will be run automatically when using
<code class="code">setopt</code>.  You can also use <code class="code">setopt</code> on other,
non-customizable variables, but this is less efficient than using
<code class="code">setq</code>.
</p>
</div>
<div class="subsection-level-extent" id="Hooks">
<h4 class="subsection" id="Hooks-1">50.2.2 Hooks</h4>
<a class="index-entry-id" id="index-hook"></a>
<a class="index-entry-id" id="index-running-a-hook"></a>

<p><em class="dfn">Hooks</em> are an important mechanism for customizing Emacs.  A
hook is a Lisp variable which holds a list of functions, to be called
on some well-defined occasion.  (This is called <em class="dfn">running the
hook</em>.)  The individual functions in the list are called the <em class="dfn">hook
functions</em> of the hook.  For example, the hook <code class="code">kill-emacs-hook</code>
runs just before exiting Emacs (see <a class="pxref" href="Exiting.xhtml">Exiting Emacs</a>).
</p>
<a class="index-entry-id" id="index-normal-hook"></a>
<p>Most hooks are <em class="dfn">normal hooks</em>.  This means that when Emacs runs
the hook, it calls each hook function in turn, with no arguments.  We
have made an effort to keep most hooks normal, so that you can use
them in a uniform way.  Every variable whose name ends in &#8216;<samp class="samp">-hook</samp>&#8217;
is a normal hook.
</p>
<a class="index-entry-id" id="index-abnormal-hook"></a>
<p>A few hooks are <em class="dfn">abnormal hooks</em>.  Their names end in
&#8216;<samp class="samp">-functions</samp>&#8217;, instead of &#8216;<samp class="samp">-hook</samp>&#8217; (some old code may also use
the deprecated suffix &#8216;<samp class="samp">-hooks</samp>&#8217;).  What
makes these hooks abnormal is the way its functions are
called&#8212;perhaps they are given arguments, or perhaps the values they
return are used in some way.  For example,
<code class="code">find-file-not-found-functions</code> is abnormal because as soon as
one hook function returns a non-<code class="code">nil</code> value, the rest are not
called at all (see <a class="pxref" href="Files.xhtml#Visiting">Visiting Files</a>).  The documentation of each abnormal
hook variable explains how its functions are used.
</p>
<a class="index-entry-id" id="index-add_002dhook"></a>
<p>You can set a hook variable with <code class="code">setq</code> like any other Lisp
variable, but the recommended way to add a function to a hook (either
normal or abnormal) is to use <code class="code">add-hook</code>, as shown by the
following examples.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Hooks.html#Hooks">Hooks</a> in <cite class="cite">The Emacs Lisp Reference
Manual</cite>, for details.
</p>
<p>Most major modes run one or more <em class="dfn">mode hooks</em> as the last step
of initialization.  Mode hooks are a convenient way to customize the
behavior of individual modes; they are always normal.  For example,
here&#8217;s how to set up a hook to turn on Auto Fill mode in Text mode and
other modes based on Text mode:
</p>
<div class="example">
<pre class="example-preformatted">(add-hook 'text-mode-hook 'auto-fill-mode)
</pre></div>

<p>This works by calling <code class="code">auto-fill-mode</code>, which enables the minor
mode when no argument is supplied (see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).  Next,
suppose you don&#8217;t want Auto Fill mode turned on in LaTeX mode,
which is one of the modes based on Text mode.  You can do this with
the following additional line:
</p>
<div class="example">
<pre class="example-preformatted">(add-hook 'latex-mode-hook (lambda () (auto-fill-mode -1)))
</pre></div>

<p>Here we have used the special macro <code class="code">lambda</code> to construct an
anonymous function (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Lambda-Expressions.html#Lambda-Expressions">Lambda Expressions</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>), which calls <code class="code">auto-fill-mode</code> with an argument
of <code class="code">-1</code> to disable the minor mode.  Because LaTeX mode runs
<code class="code">latex-mode-hook</code> after running <code class="code">text-mode-hook</code>, the result
leaves Auto Fill mode disabled.
</p>
<p>Here is a more complex example, showing how to use a hook to
customize the indentation of C code:
</p>
<div class="example">
<div class="group"><pre class="example-preformatted">(setq my-c-style
  '((c-comment-only-line-offset . 4)
</pre></div><div class="group"><pre class="example-preformatted">    (c-cleanup-list . (scope-operator
                       empty-defun-braces
                       defun-close-semi))))
</pre></div><pre class="example-preformatted">

</pre><div class="group"><pre class="example-preformatted">(add-hook 'c-mode-common-hook
  (lambda () (c-add-style &quot;my-style&quot; my-c-style t)))
</pre></div></div>

<a class="index-entry-id" id="index-Prog-mode"></a>
<a class="index-entry-id" id="index-modes-for-editing-programs"></a>
<p>Major mode hooks also apply to other major modes <em class="dfn">derived</em> from
the original mode (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html#Derived-Modes">Derived Modes</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>).  For instance, HTML mode is derived from Text mode
(see <a class="pxref" href="Text.xhtml#HTML-Mode">SGML and HTML Modes</a>); when HTML mode is enabled, it runs
<code class="code">text-mode-hook</code> before running <code class="code">html-mode-hook</code>.  This
provides a convenient way to use a single hook to affect several
related modes.  In particular, if you want to apply a hook function to
any programming language mode, add it to <code class="code">prog-mode-hook</code>; Prog
mode is a major mode that does little else than to let other major
modes inherit from it, exactly for this purpose.
</p>
<p>It is best to design your hook functions so that the order in which
they are executed does not matter.  Any dependence on the order is
asking for trouble.  However, the order is predictable: the hook
functions are executed in the order they appear in the hook.
</p>
<a class="index-entry-id" id="index-remove_002dhook"></a>
<p>If you play with adding various different versions of a hook
function by calling <code class="code">add-hook</code> over and over, remember that all
the versions you added will remain in the hook variable together.  You
can clear out individual functions by calling <code class="code">remove-hook</code>, or
do <code class="code">(setq <var class="var">hook-variable</var> nil)</code> to remove everything.
</p>
<a class="index-entry-id" id="index-buffer_002dlocal-hooks"></a>
<p>If the hook variable is buffer-local, the buffer-local variable will
be used instead of the global variable.  However, if the buffer-local
variable contains the element <code class="code">t</code>, the global hook variable will
be run as well.
</p>
</div>
<div class="subsection-level-extent" id="Locals">
<h4 class="subsection" id="Local-Variables">50.2.3 Local Variables</h4>

<dl class="table">
<dt><kbd class="kbd">M-x make-local-variable <kbd class="key">RET</kbd> <var class="var">var</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Make variable <var class="var">var</var> have a local value in the current buffer.
</p>
</dd>
<dt><kbd class="kbd">M-x kill-local-variable <kbd class="key">RET</kbd> <var class="var">var</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Make variable <var class="var">var</var> use its global value in the current buffer.
</p>
</dd>
<dt><kbd class="kbd">M-x make-variable-buffer-local <kbd class="key">RET</kbd> <var class="var">var</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Mark variable <var class="var">var</var> so that setting it will make it local to the
buffer that is current at that time.
</p></dd>
</dl>

<a class="index-entry-id" id="index-local-variables"></a>
<p>Almost any variable can be made <em class="dfn">local</em> to a specific Emacs
buffer.  This means that its value in that buffer is independent of its
value in other buffers.  A few variables are always local in every
buffer.  Every other Emacs variable has a <em class="dfn">global</em> value which is in
effect in all buffers that have not made the variable local.
</p>
<a class="index-entry-id" id="index-make_002dlocal_002dvariable"></a>
<p><kbd class="kbd">M-x make-local-variable</kbd> reads the name of a variable and makes
it local to the current buffer.  Changing its value subsequently in
this buffer will not affect others, and changes in its global value
will not affect this buffer.
</p>
<a class="index-entry-id" id="index-make_002dvariable_002dbuffer_002dlocal"></a>
<a class="index-entry-id" id="index-per_002dbuffer-variables"></a>
<p><kbd class="kbd">M-x make-variable-buffer-local</kbd> marks a variable so it will
become local automatically whenever it is set.  More precisely, once a
variable has been marked in this way, the usual ways of setting the
variable automatically do <code class="code">make-local-variable</code> first.  We call
such variables <em class="dfn">per-buffer</em> variables.  Many variables in Emacs
are normally per-buffer; the variable&#8217;s document string tells you when
this is so.  A per-buffer variable&#8217;s global value is normally never
effective in any buffer, but it still has a meaning: it is the initial
value of the variable for each new buffer.
</p>
<p>Major modes (see <a class="pxref" href="Modes.xhtml#Major-Modes">Major Modes</a>) always make variables local to the
buffer before setting the variables.  This is why changing major modes
in one buffer has no effect on other buffers.  Minor modes also work
by setting variables&#8212;normally, each minor mode has one controlling
variable which is non-<code class="code">nil</code> when the mode is enabled
(see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).  For many minor modes, the controlling variable
is per buffer, and thus always buffer-local.  Otherwise, you can make
it local in a specific buffer like any other variable.
</p>
<p>A few variables cannot be local to a buffer because they are always
local to each display instead (see <a class="pxref" href="Frames.xhtml#Multiple-Displays">Multiple Displays</a>).  If you try to
make one of these variables buffer-local, you&#8217;ll get an error message.
</p>
<a class="index-entry-id" id="index-kill_002dlocal_002dvariable"></a>
<p><kbd class="kbd">M-x kill-local-variable</kbd> makes a specified variable cease to be
local to the current buffer.  The global value of the variable
henceforth is in effect in this buffer.  Setting the major mode kills
all the local variables of the buffer except for a few variables
specially marked as <em class="dfn">permanent locals</em>.
</p>
<a class="index-entry-id" id="index-setq_002ddefault"></a>
<p>To set the global value of a variable, regardless of whether the
variable has a local value in the current buffer, you can use the Lisp
construct <code class="code">setq-default</code>.  This construct is used just like
<code class="code">setq</code>, but it sets variables&#8217; global values instead of their local
values (if any).  When the current buffer does have a local value, the
new global value may not be visible until you switch to another buffer.
Here is an example:
</p>
<div class="example">
<pre class="example-preformatted">(setq-default fill-column 75)
</pre></div>

<p><code class="code">setq-default</code> is the only way to set the global value of a variable
that has been marked with <code class="code">make-variable-buffer-local</code>.
</p>
<a class="index-entry-id" id="index-default_002dvalue"></a>
<p>Lisp programs can use <code class="code">default-value</code> to look at a variable&#8217;s
default value.  This function takes a symbol as argument and returns its
default value.  The argument is evaluated; usually you must quote it
explicitly.  For example, here&#8217;s how to obtain the default value of
<code class="code">fill-column</code>:
</p>
<div class="example">
<pre class="example-preformatted">(default-value 'fill-column)
</pre></div>

</div>
<div class="subsection-level-extent" id="File-Variables">
<h4 class="subsection" id="Local-Variables-in-Files">50.2.4 Local Variables in Files</h4>
<a class="index-entry-id" id="index-local-variables-in-files"></a>
<a class="index-entry-id" id="index-file-local-variables"></a>

<p>A file can specify local variable values to use when editing the
file with Emacs.  Visiting the file or setting a major mode checks for
local variable specifications; it automatically makes these variables
local to the buffer, and sets them to the values specified in the
file.
</p>
<p>File local variables override directory local variables
(see <a class="pxref" href="#Directory-Variables">Per-Directory Local Variables</a>), if any are specified for a file&#8217;s
directory.
</p>

<div class="subsubsection-level-extent" id="Specifying-File-Variables">
<h4 class="subsubsection" id="Specifying-File-Variables-1">50.2.4.1 Specifying File Variables</h4>

<p>There are two ways to specify file local variable values: in the first
line, or with a local variables list.  Here&#8217;s how to specify them in the
first line:
</p>
<div class="example">
<pre class="example-preformatted">-*- mode: <var class="var">modename</var>; <var class="var">var</var>: <var class="var">value</var>; ... -*-
</pre></div>

<p>You can specify any number of variable/value pairs in this way, each
pair with a colon and semicolon.  The special variable/value pair
<code class="code">mode: <var class="var">modename</var>;</code>, if present, specifies a major mode
(without the &#8220;-mode&#8221; suffix).  The <var class="var">value</var>s are used literally,
and not evaluated.
</p>
<a class="index-entry-id" id="index-add_002dfile_002dlocal_002dvariable_002dprop_002dline"></a>
<a class="index-entry-id" id="index-delete_002dfile_002dlocal_002dvariable_002dprop_002dline"></a>
<a class="index-entry-id" id="index-copy_002ddir_002dlocals_002dto_002dfile_002dlocals_002dprop_002dline"></a>
<p>You can use <kbd class="kbd">M-x add-file-local-variable-prop-line</kbd> instead of
adding entries by hand.  This command prompts for a variable and
value, and adds them to the first line in the appropriate way.
<kbd class="kbd">M-x delete-file-local-variable-prop-line</kbd> prompts for a variable,
and deletes its entry from the line.  The command <kbd class="kbd">M-x
copy-dir-locals-to-file-locals-prop-line</kbd> copies the current
directory-local variables to the first line (see <a class="pxref" href="#Directory-Variables">Per-Directory Local Variables</a>).
</p>
<p>Here is an example first line that specifies Lisp mode and sets two
variables with numeric values:
</p>
<div class="example smallexample">
<pre class="example-preformatted">;; -*- mode: Lisp; fill-column: 75; comment-column: 50; -*-
</pre></div>

<p>Aside from <code class="code">mode</code>, other keywords that have special meanings as
file variables are <code class="code">coding</code>, <code class="code">unibyte</code>, and <code class="code">eval</code>.
These are described below.
</p>
<a class="index-entry-id" id="index-shell-scripts_002c-and-local-file-variables"></a>
<a class="index-entry-id" id="index-man-pages_002c-and-local-file-variables"></a>
<p>In shell scripts, the first line is used to identify the script
interpreter, so you cannot put any local variables there.  To
accommodate this, Emacs looks for local variable specifications in the
<em class="emph">second</em> line if the first line specifies an interpreter.  The
same is true for man pages which start with the magic string
&#8216;<samp class="samp">'\&quot;</samp>&#8217; to specify a list of troff preprocessors (not all do,
however).
</p>
<p>Apart from using a &#8216;<samp class="samp">-*-</samp>&#8217; line, you can define file local
variables using a <em class="dfn">local variables list</em> near the end of the file.
The start of the local variables list should be no more than 3000
characters from the end of the file, and must be on the last page if
the file is divided into pages.
</p>
<p>If a file has both a local variables list and a &#8216;<samp class="samp">-*-</samp>&#8217; line,
Emacs processes <em class="emph">everything</em> in the &#8216;<samp class="samp">-*-</samp>&#8217; line first, and
<em class="emph">everything</em> in the local variables list afterward.  The exception
to this is a major mode specification.  Emacs applies this first,
wherever it appears, since most major modes kill all local variables as
part of their initialization.
</p>
<p>A local variables list starts with a line containing the string
&#8216;<samp class="samp">Local Variables:</samp>&#8217;, and ends with a line containing the string
&#8216;<samp class="samp">End:</samp>&#8217;.  In between come the variable names and values, one set
per line, like this:
</p>
<div class="example">
<pre class="example-preformatted">/* Local Variables:  */
/* mode: c           */
/* comment-column: 0 */
/* End:              */
</pre></div>

<p>In this example, each line starts with the prefix &#8216;<samp class="samp">/*</samp>&#8217; and ends
with the suffix &#8216;<samp class="samp">*/</samp>&#8217;.  Emacs recognizes the prefix and suffix by
finding them surrounding the magic string &#8216;<samp class="samp">Local Variables:</samp>&#8217;, on
the first line of the list; it then automatically discards them from
the other lines of the list.  The usual reason for using a prefix
and/or suffix is to embed the local variables list in a comment, so it
won&#8217;t confuse other programs that the file is intended for.  The
example above is for the C programming language, where comments start
with &#8216;<samp class="samp">/*</samp>&#8217; and end with &#8216;<samp class="samp">*/</samp>&#8217;.
</p>
<p>If some unrelated text might look to Emacs as a local variables list,
you can countermand that by inserting a form-feed character (a page
delimiter, see <a class="pxref" href="Text.xhtml#Pages">Pages</a>) after that text.  Emacs only looks for
file-local variables in the last page of a file, after the last page
delimiter.
</p>
<a class="index-entry-id" id="index-add_002dfile_002dlocal_002dvariable"></a>
<a class="index-entry-id" id="index-delete_002dfile_002dlocal_002dvariable"></a>
<a class="index-entry-id" id="index-copy_002ddir_002dlocals_002dto_002dfile_002dlocals"></a>
<p>Instead of typing in the local variables list directly, you can use
the command <kbd class="kbd">M-x add-file-local-variable</kbd>.  This prompts for a
variable and value, and adds them to the list, adding the &#8216;<samp class="samp">Local
Variables:</samp>&#8217; string and start and end markers as necessary.  The
command <kbd class="kbd">M-x delete-file-local-variable</kbd> deletes a variable from
the list.  <kbd class="kbd">M-x copy-dir-locals-to-file-locals</kbd> copies
directory-local variables to the list (see <a class="pxref" href="#Directory-Variables">Per-Directory Local Variables</a>).
</p>
<p>As with the &#8216;<samp class="samp">-*-</samp>&#8217; line, the variables in a local variables list
are used literally, and are not evaluated first.  If you want to split
a long string value across multiple lines of the file, you can use
backslash-newline, which is ignored in Lisp string constants; you
should put the prefix and suffix on each line, even lines that start
or end within the string, as they will be stripped off when processing
the list.  Here is an example:
</p>
<div class="example">
<pre class="example-preformatted"># Local Variables:
# compile-command: &quot;cc foo.c -Dfoo=bar -Dhack=whatever \
#   -Dmumble=blaah&quot;
# End:
</pre></div>

<p>Some names have special meanings in a local variables
list:
</p>
<ul class="itemize mark-bullet">
<li><code class="code">mode</code> enables the specified major mode.

</li><li><code class="code">eval</code> evaluates the specified Lisp expression (the value
returned by that expression is ignored).

</li><li><code class="code">coding</code> specifies the coding system for character code
conversion of this file.  See <a class="xref" href="International.xhtml#Coding-Systems">Coding Systems</a>.

</li><li><code class="code">unibyte</code> says to load or compile a file of Emacs Lisp in unibyte
mode, if the value is <code class="code">t</code>.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Disabling-Multibyte.html#Disabling-Multibyte">Disabling Multibyte Characters</a> in <cite class="cite">GNU Emacs Lisp Reference
Manual</cite>.

</li></ul>

<p>These four keywords are not really variables; setting them in any
other context has no special meaning.
</p>
<a class="index-entry-id" id="index-fallback-modes"></a>
<p>If you&#8217;re editing a file across Emacs versions, and a new mode has
been introduced to handle a file in a newer Emacs version, you can use
several <code class="code">mode</code> entries to use the new mode (called
<code class="code">my-new-mode</code>) in the new Emacs, and fall back to the old mode
(called <code class="code">my-old-mode</code>) in older Emacs versions.  If you&#8217;re
enabling the modes in the first line of the file, can say:
</p>
<div class="example">
<pre class="example-preformatted">-*- mode: my-old; mode: my-new -*-
</pre></div>

<p>Emacs will use the final defined mode it finds, so in older Emacs
versions it will ignore <code class="code">my-new-mode</code>, while in Emacs versions
where <code class="code">my-new-mode</code> is defined, it&#8217;ll ignore <code class="code">my-old-mode</code>.
Similarly, in a local variable block at the end of the file:
</p>
<div class="example">
<pre class="example-preformatted">Local variables:
mode: my-old
mode: my-new
</pre></div>

<p>Do not use the <code class="code">mode</code> keyword for minor modes.  To enable or
disable a minor mode in a local variables list, use the <code class="code">eval</code>
keyword with a Lisp expression that runs the mode command
(see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).  For example, the following local variables
list enables ElDoc mode (see <a class="pxref" href="Programs.xhtml#Programming-Language-Doc">Programming Language Documentation Lookup</a>) by calling
<code class="code">eldoc-mode</code> with no argument (calling it with an argument of 1
would do the same), and disables Font Lock mode (see <a class="pxref" href="Display.xhtml#Font-Lock">Font Lock mode</a>) by
calling <code class="code">font-lock-mode</code> with an argument of &#8722;1.
</p>
<div class="example">
<pre class="example-preformatted">;; Local Variables:
;; eval: (eldoc-mode)
;; eval: (font-lock-mode -1)
;; End:
</pre></div>

<p>Note, however, that it is often a mistake to specify minor modes this
way.  Minor modes represent individual user preferences, and it may be
inappropriate to impose your preferences on another user who might
edit the file.  If you wish to automatically enable or disable a minor
mode in a situation-dependent way, it is often better to do it in a
major mode hook (see <a class="pxref" href="#Hooks">Hooks</a>).
</p>
<p>Use the command <kbd class="kbd">M-x normal-mode</kbd> to reset the local variables
and major mode of a buffer according to the file name and contents,
including the local variables list if any.  See <a class="xref" href="Modes.xhtml#Choosing-Modes">Choosing File Modes</a>.
</p>
</div>
<div class="subsubsection-level-extent" id="Safe-File-Variables">
<h4 class="subsubsection" id="Safety-of-File-Variables">50.2.4.2 Safety of File Variables</h4>

<p>File-local variables can be dangerous; when you visit someone else&#8217;s
file, there&#8217;s no telling what its local variables list could do to
your Emacs.  Improper values of the <code class="code">eval</code> &#8220;variable&#8221;, and
other variables such as <code class="code">load-path</code>, could execute Lisp code you
didn&#8217;t intend to run.
</p>
<p>Therefore, whenever Emacs encounters file local variable values that
are not known to be safe, it displays the file&#8217;s entire local
variables list, and asks you for confirmation before setting them.
You can type <kbd class="kbd">y</kbd> or <kbd class="key">SPC</kbd> to put the local variables list into
effect, or <kbd class="kbd">n</kbd> to ignore it.  When Emacs is run in batch mode
(see <a class="pxref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>), it can&#8217;t really ask you, so it assumes the
answer <kbd class="kbd">n</kbd>.
</p>
<p>Emacs normally recognizes certain variable/value pairs as safe.
For instance, it is safe to give <code class="code">comment-column</code> or
<code class="code">fill-column</code> any integer value.  If a file specifies only
known-safe variable/value pairs, Emacs does not ask for confirmation
before setting them.  Otherwise, you can tell Emacs to record all the
variable/value pairs in this file as safe, by typing <kbd class="kbd">!</kbd> at the
confirmation prompt.  When Emacs encounters these variable/value pairs
subsequently, in the same file or others, it will assume they are
safe.
</p>
<p>You can also tell Emacs to permanently ignore all the variable/value
pairs in the file, by typing <kbd class="kbd">i</kbd> at the confirmation prompt &#8211;
these pairs will thereafter be ignored in this file and in all other
files.
</p>
<a class="index-entry-id" id="index-safe_002dlocal_002dvariable_002dvalues"></a>
<a class="index-entry-id" id="index-ignored_002dlocal_002dvariable_002dvalues"></a>
<a class="index-entry-id" id="index-risky-variable"></a>
<p>Some variables, such as <code class="code">load-path</code>, are considered
particularly <em class="dfn">risky</em>: there is seldom any reason to specify them
as local variables, and changing them can be dangerous.  If a file
contains only risky local variables, Emacs neither offers nor accepts
<kbd class="kbd">!</kbd> as input at the confirmation prompt.  If some of the local
variables in a file are risky, and some are only potentially unsafe, you
can enter <kbd class="kbd">!</kbd> at the prompt.  It applies all the variables, but only
marks the non-risky ones as safe for the future.  If you really want to
record safe values for risky variables, do it directly by customizing
&#8216;<samp class="samp">safe-local-variable-values</samp>&#8217; (see <a class="pxref" href="#Easy-Customization">Easy Customization Interface</a>).
Similarly, if you want to record values of risky variables that should
be permanently ignored, customize <code class="code">ignored-local-variable-values</code>.
</p>
<a class="index-entry-id" id="index-enable_002dlocal_002dvariables"></a>
<p>The variable <code class="code">enable-local-variables</code> allows you to change the
way Emacs processes local variables.  Its default value is <code class="code">t</code>,
which specifies the behavior described above.  If it is <code class="code">nil</code>,
Emacs simply ignores all file local variables.  <code class="code">:safe</code> means use
only the safe values and ignore the rest.  <code class="code">:all</code> instructs Emacs
to set all file local variables regardless of whether their value is
safe or not (we advise not to use this permanently).  Any other value
says to query you about each file that has local variables, without
trying to determine whether the values are known to be safe.
</p>
<a class="index-entry-id" id="index-enable_002dlocal_002deval"></a>
<a class="index-entry-id" id="index-safe_002dlocal_002deval_002dforms"></a>
<p>The variable <code class="code">enable-local-eval</code> controls whether Emacs
processes <code class="code">eval</code> variables.  The three possibilities for the
variable&#8217;s value are <code class="code">t</code>, <code class="code">nil</code>, and anything else, just as
for <code class="code">enable-local-variables</code>.  The default is <code class="code">maybe</code>, which
is neither <code class="code">t</code> nor <code class="code">nil</code>, so normally Emacs does ask for
confirmation about processing <code class="code">eval</code> variables.
</p>
<p>As an exception, Emacs never asks for confirmation to evaluate any
<code class="code">eval</code> form if that form occurs within the variable
<code class="code">safe-local-eval-forms</code>.
</p>
</div>
</div>
<div class="subsection-level-extent" id="Directory-Variables">
<h4 class="subsection" id="Per_002dDirectory-Local-Variables">50.2.5 Per-Directory Local Variables</h4>
<a class="index-entry-id" id="index-local-variables_002c-for-all-files-in-a-directory"></a>
<a class="index-entry-id" id="index-directory_002dlocal-variables"></a>
<a class="index-entry-id" id="index-per_002ddirectory-local-variables"></a>

<p>Sometimes, you may wish to define the same set of local variables to
all the files in a certain directory and its subdirectories, such as
the directory tree of a large software project.  This can be
accomplished with <em class="dfn">directory-local variables</em>.  File local
variables override directory local variables, so if some of the files
in a directory need specialized settings, you can specify the settings
for the majority of the directory&#8217;s files in directory variables, and
then define file local variables in a few files which need the general
settings overridden.
</p>
<a class="index-entry-id" id="index-_002edir_002dlocals_002eel-file"></a>
<p>The usual way to define directory-local variables is to put a file
named <samp class="file">.dir-locals.el</samp><a class="footnote" id="DOCF23" href="#FOOT23"><sup>23</sup></a> in a directory.  Whenever Emacs visits any file in that directory or
any of its subdirectories, it will apply the directory-local variables
specified in <samp class="file">.dir-locals.el</samp>, as though they had been defined as
file-local variables for that file (see <a class="pxref" href="#File-Variables">Local Variables in Files</a>).  Emacs
searches for <samp class="file">.dir-locals.el</samp> starting in the directory of the
visited file, and moving up the directory tree.  To avoid slowdown,
this search is skipped for remote files.  If needed, the search can be
extended for remote files by setting the variable
<code class="code">enable-remote-dir-locals</code> to <code class="code">t</code>.
</p>
<p>You can also use <samp class="file">.dir-locals-2.el</samp>; if found, Emacs loads it
in addition to <samp class="file">.dir-locals.el</samp>.  This is useful when
<samp class="file">.dir-locals.el</samp> is under version control in a shared repository
and can&#8217;t be used for personal customizations.
</p>
<p>The <samp class="file">.dir-locals.el</samp> file should hold a specially-constructed
list, which maps major mode names (symbols) to alists
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html#Association-Lists">Association Lists</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).
Each alist entry consists of a variable name and the directory-local
value to assign to that variable, when the specified major mode is
enabled.  Instead of a mode name, you can specify &#8216;<samp class="samp">nil</samp>&#8217;, which
means that the alist applies to any mode; or you can specify a
subdirectory (a string), in which case the alist applies to all
files in that subdirectory.
</p>
<p>Here&#8217;s an example of a <samp class="file">.dir-locals.el</samp> file:
</p>
<div class="example">
<pre class="example-preformatted">((nil . ((indent-tabs-mode . t)
         (fill-column . 80)
         (mode . auto-fill)))
 (c-mode . ((c-file-style . &quot;BSD&quot;)
            (subdirs . nil)))
 (&quot;src/imported&quot;
  . ((nil . ((change-log-default-name
              . &quot;ChangeLog.local&quot;))))))
</pre></div>

<p>This sets the variables &#8216;<samp class="samp">indent-tabs-mode</samp>&#8217; and <code class="code">fill-column</code>
for any file in the directory tree, and the indentation style for any
C source file.  The special <code class="code">mode</code> element specifies the minor
mode to be enabled.  So <code class="code">(mode . auto-fill)</code> specifies that the
minor mode <code class="code">auto-fill-mode</code> needs to be enabled.  The special
<code class="code">subdirs</code> element is not a variable, but a special keyword which
indicates that the C mode settings are only to be applied in the
current directory, not in any subdirectories.  Finally, it specifies a
different <samp class="file">ChangeLog</samp> file name for any file in the
<samp class="file">src/imported</samp> subdirectory.
</p>
<p>If the <samp class="file">.dir-locals.el</samp> file contains multiple different values
for a variable using different mode names or directories, the values
will be applied in an order such that the values for more specific
modes take priority over more generic modes.  Values specified under a
directory have even more priority.  For example:
</p>
<div class="example">
<pre class="example-preformatted">((nil . ((fill-column . 40)))
 (c-mode . ((fill-column . 50)))
 (prog-mode . ((fill-column . 60)))
 (&quot;narrow-files&quot; . ((nil . ((fill-column . 20))))))
</pre></div>

<p>Files that use <code class="code">c-mode</code> also match <code class="code">prog-mode</code> because the
former inherits from the latter.  The value used for
<code class="code">fill-column</code> in C files will however be <code class="code">50</code> because the
mode name is more specific than <code class="code">prog-mode</code>.  Files using other
modes inheriting from <code class="code">prog-mode</code> will use <code class="code">60</code>.  Any file
under the directory <samp class="file">narrow-files</samp> will use the value <code class="code">20</code>
even if they use <code class="code">c-mode</code> because directory entries have priority
over mode entries.
</p>
<p>You can specify the variables <code class="code">mode</code>, <code class="code">eval</code>, and
<code class="code">unibyte</code> in your <samp class="file">.dir-locals.el</samp>, and they have the same
meanings as they would have in file local variables.  <code class="code">coding</code>
cannot be specified as a directory local variable.  See <a class="xref" href="#File-Variables">Local Variables in Files</a>.
</p>
<p>The special key <code class="code">auto-mode-alist</code> in a <samp class="file">.dir-locals.el</samp> lets
you set a file&#8217;s major mode.  It works much like the variable
<code class="code">auto-mode-alist</code> (see <a class="pxref" href="Modes.xhtml#Choosing-Modes">Choosing File Modes</a>).  For example, here is
how you can tell Emacs that <samp class="file">.def</samp> source files in this directory
should be in C mode:
</p>
<div class="example">
<pre class="example-preformatted">((auto-mode-alist . ((&quot;\\.def\\'&quot; . c-mode))))
</pre></div>

<a class="index-entry-id" id="index-add_002ddir_002dlocal_002dvariable"></a>
<a class="index-entry-id" id="index-delete_002ddir_002dlocal_002dvariable"></a>
<a class="index-entry-id" id="index-copy_002dfile_002dlocals_002dto_002ddir_002dlocals"></a>
<p>Instead of editing the <samp class="file">.dir-locals.el</samp> file by hand, you can
use the command <kbd class="kbd">M-x add-dir-local-variable</kbd>.  This prompts for a
mode or subdirectory, and for variable and value, and adds the
entry defining the directory-local variable.  <kbd class="kbd">M-x
delete-dir-local-variable</kbd> deletes an entry.  <kbd class="kbd">M-x
copy-file-locals-to-dir-locals</kbd> copies the file-local variables in the
current file into <samp class="file">.dir-locals.el</samp>.
</p>
<a class="index-entry-id" id="index-dir_002dlocals_002dset_002dclass_002dvariables"></a>
<a class="index-entry-id" id="index-dir_002dlocals_002dset_002ddirectory_002dclass"></a>
<p>Another method of specifying directory-local variables is to define
a group of variables/value pairs in a <em class="dfn">directory class</em>, using the
<code class="code">dir-locals-set-class-variables</code> function; then, tell Emacs which
directories correspond to the class by using the
<code class="code">dir-locals-set-directory-class</code> function.  These function calls
normally go in your initialization file (see <a class="pxref" href="#Init-File">The Emacs Initialization File</a>).  This
method is useful when you can&#8217;t put <samp class="file">.dir-locals.el</samp> in a
directory for some reason.  For example, you could apply settings to
an unwritable directory this way:
</p>
<div class="example">
<pre class="example-preformatted">(dir-locals-set-class-variables 'unwritable-directory
   '((nil . ((some-useful-setting . value)))))

(dir-locals-set-directory-class
   &quot;/usr/include/&quot; 'unwritable-directory)
</pre></div>

<p>If a variable has both a directory-local and file-local value
specified, the file-local value takes effect.  Unsafe directory-local
variables are handled in the same way as unsafe file-local variables
(see <a class="pxref" href="#Safe-File-Variables">Safety of File Variables</a>).
</p>
<p>Directory-local variables also take effect in certain buffers that
do not visit a file directly but perform work within a directory, such
as Dired buffers (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>).
</p>
</div>
<div class="subsection-level-extent" id="Connection-Variables">
<h4 class="subsection" id="Per_002dConnection-Local-Variables">50.2.6 Per-Connection Local Variables</h4>
<a class="index-entry-id" id="index-local-variables_002c-for-all-remote-connections"></a>
<a class="index-entry-id" id="index-connection_002dlocal-variables"></a>
<a class="index-entry-id" id="index-per_002dconnection-local-variables"></a>

<p>Most of the variables reflect the situation on the local machine.
Often, they must use a different value when you operate in buffers
with a remote default directory.  Think about the behavior when
calling <code class="code">shell</code> &#8211; on your local machine, you might use
<samp class="file">/bin/bash</samp> and rely on termcap, but on a remote machine, it may
be <samp class="file">/bin/ksh</samp> and terminfo.
</p>
<p>This can be accomplished with <em class="dfn">connection-local variables</em>.
Directory and file local variables override connection-local
variables.  Unsafe connection-local variables are handled in the same
way as unsafe file-local variables (see <a class="pxref" href="#Safe-File-Variables">Safety of File Variables</a>).
</p>
<a class="index-entry-id" id="index-connection_002dlocal_002dset_002dprofile_002dvariables"></a>
<a class="index-entry-id" id="index-connection_002dlocal_002dset_002dprofiles"></a>
<p>Connection-local variables are declared as a group of
variables/value pairs in a <em class="dfn">profile</em>, using the
<code class="code">connection-local-set-profile-variables</code> function.  The function
<code class="code">connection-local-set-profiles</code> activates profiles for a given
criteria, identifying a remote machine:
</p>
<div class="example">
<pre class="example-preformatted">(connection-local-set-profile-variables 'remote-terminfo
   '((system-uses-terminfo . t)
     (comint-terminfo-terminal . &quot;dumb-emacs-ansi&quot;)))

(connection-local-set-profile-variables 'remote-ksh
   '((shell-file-name . &quot;/bin/ksh&quot;)
     (shell-command-switch . &quot;-c&quot;)))

(connection-local-set-profile-variables 'remote-bash
   '((shell-file-name . &quot;/bin/bash&quot;)
     (shell-command-switch . &quot;-c&quot;)))

(connection-local-set-profiles
   '(:application tramp :machine &quot;remotemachine&quot;)
   'remote-terminfo 'remote-ksh)
</pre></div>

<p>This code declares three different profiles, <code class="code">remote-terminfo</code>,
<code class="code">remote-ksh</code>, and <code class="code">remote-bash</code>.  The profiles
<code class="code">remote-terminfo</code> and <code class="code">remote-ksh</code> are applied to all
buffers which have a remote default directory matching the regexp
<code class="code">&quot;remotemachine&quot;</code> as host name.  Such a criteria can also
discriminate for the properties <code class="code">:protocol</code> (this is the Tramp
method) or <code class="code">:user</code> (a remote user name).  The <code class="code">nil</code> criteria
matches all buffers with a remote default directory.
</p>
<p>Be careful when declaring different profiles with the same variable,
and setting these profiles to criteria which could match in parallel.
It is unspecified which variable value is used then.
</p>
</div>
</div>
<div class="section-level-extent" id="Key-Bindings">
<h3 class="section" id="Customizing-Key-Bindings">50.3 Customizing Key Bindings</h3>
<a class="index-entry-id" id="index-key-bindings"></a>

<p>This section describes <em class="dfn">key bindings</em>, which map keys to
commands, and <em class="dfn">keymaps</em>, which record key bindings.  It also
explains how to customize key bindings, which is done by editing your
init file (see <a class="pxref" href="#Init-Rebinding">Rebinding Keys in Your Init File</a>).
</p>
<a class="index-entry-id" id="index-reserved-key-bindings"></a>
<a class="index-entry-id" id="index-keys_002c-reserved"></a>
<p>Since most modes define their own key bindings, activating a mode
might override your custom key bindings.  A small number of keys are
reserved for user-defined bindings, and should not be used by modes,
so key bindings using those keys are safer in this regard.  The
reserved key sequences are those consisting of <kbd class="kbd">C-c</kbd> followed by a
letter (either upper or lower case), and function keys <kbd class="key">F5</kbd>
through <kbd class="key">F9</kbd> without modifiers (see <a class="pxref" href="#Modifier-Keys">Modifier Keys</a>).
</p>

<div class="subsection-level-extent" id="Keymaps">
<h4 class="subsection" id="Keymaps-1">50.3.1 Keymaps</h4>
<a class="index-entry-id" id="index-keymap"></a>

<p>As described in <a class="ref" href="Commands.xhtml">Keys and Commands</a>, each Emacs command is a Lisp
function whose definition provides for interactive use.  Like every
Lisp function, a command has a function name, which usually consists
of lower-case letters and hyphens.
</p>
<p>A <em class="dfn">key sequence</em> (<em class="dfn">key</em>, for short) is a sequence of
<em class="dfn">input events</em> that have a meaning as a unit.  Input events
include characters, function keys, and mouse buttons&#8212;all the inputs
that you can send to the computer.  A key sequence gets its meaning
from its <em class="dfn">binding</em>, which says what command it runs.
</p>
<p>The bindings between key sequences and command functions are
recorded in data structures called <em class="dfn">keymaps</em>.  Emacs has many of
these, each used on particular occasions.
</p>
<a class="index-entry-id" id="index-global-keymap"></a>
<p>The <em class="dfn">global</em> keymap is the most important keymap because it is
always in effect.  The global keymap defines keys for Fundamental mode
(see <a class="pxref" href="Modes.xhtml#Major-Modes">Major Modes</a>); most of these definitions are common to most or
all major modes.  Each major or minor mode can have its own keymap
which overrides the global definitions of some keys.
</p>
<p>For example, a self-inserting character such as <kbd class="kbd">g</kbd> is
self-inserting because the global keymap binds it to the command
<code class="code">self-insert-command</code>.  The standard Emacs editing characters
such as <kbd class="kbd">C-a</kbd> also get their standard meanings from the global
keymap.  Commands to rebind keys, such as <kbd class="kbd">M-x keymap-global-set</kbd>,
work by storing the new binding in the proper place in the global map
(see <a class="pxref" href="#Rebinding">Changing Key Bindings Interactively</a>).  To view the current key bindings, use the
<kbd class="kbd">C-h b</kbd> command.
</p>
<a class="index-entry-id" id="index-function-key"></a>
<p>Most modern keyboards have function keys as well as character keys.
Function keys send input events just as character keys do, and keymaps
can have bindings for them.  Key sequences can mix function keys and
characters.  For example, if your keyboard has a <kbd class="key">Home</kbd> function
key, Emacs can recognize key sequences like <kbd class="kbd">C-x <kbd class="key">Home</kbd></kbd>.  You
can even mix mouse events with keyboard events, such as
<kbd class="kbd">S-down-mouse-1</kbd>.
</p>
<p>On text terminals, typing a function key actually sends the computer
a sequence of characters; the precise details of the sequence depend
on the function key and on the terminal type.  (Often the sequence
starts with <kbd class="kbd"><kbd class="key">ESC</kbd> [</kbd>.)  If Emacs understands your terminal
type properly, it automatically handles such sequences as single input
events.
</p>
<p>Key sequences that consist of <kbd class="kbd">C-c</kbd> followed by a letter (upper
or lower case; <abbr class="acronym">ASCII</abbr> or non-<abbr class="acronym">ASCII</abbr>) are reserved
for users.  Emacs itself will never bind those key sequences, and
Emacs extensions should avoid binding them.  In other words, users can
bind key sequences like <kbd class="kbd">C-c a</kbd> or <kbd class="kbd">C-c &#231;</kbd> and rely on these
never being shadowed by other Emacs bindings.
</p>
</div>
<div class="subsection-level-extent" id="Prefix-Keymaps">
<h4 class="subsection" id="Prefix-Keymaps-1">50.3.2 Prefix Keymaps</h4>

<p>Internally, Emacs records only single events in each keymap.
Interpreting a key sequence of multiple events involves a chain of
keymaps: the first keymap gives a definition for the first event,
which is another keymap, which is used to look up the second event in
the sequence, and so on.  Thus, a prefix key such as <kbd class="kbd">C-x</kbd> or
<kbd class="key">ESC</kbd> has its own keymap, which holds the definition for the event
that immediately follows that prefix.
</p>
<p>The definition of a prefix key is usually the keymap to use for
looking up the following event.  The definition can also be a Lisp
symbol whose function definition is the following keymap; the effect is
the same, but it provides a command name for the prefix key that can be
used as a description of what the prefix key is for.  Thus, the binding
of <kbd class="kbd">C-x</kbd> is the symbol <code class="code">Control-X-prefix</code>, whose function
definition is the keymap for <kbd class="kbd">C-x</kbd> commands.  The definitions of
<kbd class="kbd">C-c</kbd>, <kbd class="kbd">C-x</kbd>, <kbd class="kbd">C-h</kbd>, and <kbd class="key">ESC</kbd> as prefix keys appear in
the global map, so these prefix keys are always available.
</p>
<p>Aside from ordinary prefix keys, there is a fictitious &#8220;prefix key&#8221;
which represents the menu bar; see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Menu-Bar.html#Menu-Bar">Menu Bar</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>, for special information about menu bar key bindings.
Mouse button events that invoke pop-up menus are also prefix keys; see
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Menu-Keymaps.html#Menu-Keymaps">Menu Keymaps</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>, for more
details.
</p>
<p>Some prefix keymaps are stored in variables with names:
</p>
<ul class="itemize mark-bullet">
<li><a class="index-entry-id" id="index-ctl_002dx_002dmap"></a>
<code class="code">ctl-x-map</code> is the variable name for the map used for characters that
follow <kbd class="kbd">C-x</kbd>.
</li><li><a class="index-entry-id" id="index-help_002dmap"></a>
<code class="code">help-map</code> is for characters that follow <kbd class="kbd">C-h</kbd>.
</li><li><a class="index-entry-id" id="index-esc_002dmap"></a>
<code class="code">esc-map</code> is for characters that follow <kbd class="key">ESC</kbd>.  Thus, all Meta
characters are actually defined by this map.
</li><li><a class="index-entry-id" id="index-ctl_002dx_002d4_002dmap"></a>
<code class="code">ctl-x-4-map</code> is for characters that follow <kbd class="kbd">C-x 4</kbd>.
</li><li><a class="index-entry-id" id="index-mode_002dspecific_002dmap"></a>
<code class="code">mode-specific-map</code> is for characters that follow <kbd class="kbd">C-c</kbd>.
</li><li><a class="index-entry-id" id="index-project_002dprefix_002dmap"></a>
<code class="code">project-prefix-map</code> is for characters that follow <kbd class="kbd">C-x p</kbd>,
used for project-related commands (see <a class="pxref" href="Maintaining.xhtml#Projects">Working with Projects</a>).
</li></ul>

</div>
<div class="subsection-level-extent" id="Local-Keymaps">
<h4 class="subsection" id="Local-Keymaps-1">50.3.3 Local Keymaps</h4>

<a class="index-entry-id" id="index-local-keymap"></a>
<a class="index-entry-id" id="index-minor-mode-keymap"></a>
<p>So far, we have explained the ins and outs of the global map.  Major
modes customize Emacs by providing their own key bindings in
<em class="dfn">local keymaps</em>.  For example, C mode overrides <kbd class="key">TAB</kbd> to make
it indent the current line for C code.  Minor modes can also have
local keymaps; whenever a minor mode is in effect, the definitions in
its keymap override both the major mode&#8217;s local keymap and the global
keymap.  In addition, portions of text in the buffer can specify their
own keymaps, which override all other keymaps.
</p>
<p>A local keymap can redefine a key as a prefix key by defining it as
a prefix keymap.  If the key is also defined globally as a prefix, its
local and global definitions (both keymaps) effectively combine: both
definitions are used to look up the event that follows the prefix key.
For example, if a local keymap defines <kbd class="kbd">C-c</kbd> as a prefix keymap,
and that keymap defines <kbd class="kbd">C-z</kbd> as a command, this provides a local
meaning for <kbd class="kbd">C-c C-z</kbd>.  This does not affect other sequences that
start with <kbd class="kbd">C-c</kbd>; if those sequences don&#8217;t have their own local
bindings, their global bindings remain in effect.
</p>
<p>Another way to think of this is that Emacs handles a multi-event key
sequence by looking in several keymaps, one by one, for a binding of the
whole key sequence.  First it checks the minor mode keymaps for minor
modes that are enabled, then it checks the major mode&#8217;s keymap, and then
it checks the global keymap.  This is not precisely how key lookup
works, but it&#8217;s good enough for understanding the results in ordinary
circumstances.
</p>
</div>
<div class="subsection-level-extent" id="Minibuffer-Maps">
<h4 class="subsection" id="Minibuffer-Keymaps">50.3.4 Minibuffer Keymaps</h4>

<a class="index-entry-id" id="index-minibuffer-keymaps"></a>
<a class="index-entry-id" id="index-minibuffer_002dlocal_002dmap"></a>
<a class="index-entry-id" id="index-minibuffer_002dlocal_002dns_002dmap"></a>
<a class="index-entry-id" id="index-minibuffer_002dlocal_002dcompletion_002dmap"></a>
<a class="index-entry-id" id="index-minibuffer_002dlocal_002dmust_002dmatch_002dmap"></a>
<a class="index-entry-id" id="index-minibuffer_002dlocal_002dfilename_002dcompletion_002dmap"></a>
<p>The minibuffer has its own set of local keymaps; they contain various
completion and exit commands.
</p>
<ul class="itemize mark-bullet">
<li><code class="code">minibuffer-local-map</code> is used for ordinary input (no completion).
</li><li><code class="code">minibuffer-local-ns-map</code> is similar, except that <kbd class="key">SPC</kbd> exits
just like <kbd class="key">RET</kbd>.
</li><li><code class="code">minibuffer-local-completion-map</code> is for permissive completion.
</li><li><code class="code">minibuffer-local-must-match-map</code> is for strict completion and
for cautious completion.
</li><li><code class="code">minibuffer-local-filename-completion-map</code> is like the two
previous ones, but specifically for file name completion.
It does not bind <kbd class="key">SPC</kbd>.
</li></ul>

<p>By default, <kbd class="key">TAB</kbd>, <kbd class="key">SPC</kbd> and <kbd class="key">?</kbd> do completion in
<code class="code">minibuffer-local-completion-map</code>.  If you commonly complete over
collections that have elements with space or question mark characters in
them, it may be convenient to disable completion on those keys by
putting this in your init file:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(keymap-set minibuffer-local-completion-map &quot;SPC&quot; 'self-insert-command)
(keymap-set minibuffer-local-completion-map &quot;?&quot; 'self-insert-command)
</pre></div>

</div>
<div class="subsection-level-extent" id="Rebinding">
<h4 class="subsection" id="Changing-Key-Bindings-Interactively">50.3.5 Changing Key Bindings Interactively</h4>
<a class="index-entry-id" id="index-key-rebinding_002c-this-session"></a>
<a class="index-entry-id" id="index-rebinding-keys_002c-this-session"></a>
<a class="index-entry-id" id="index-binding-keys"></a>

<p>The way to redefine an Emacs key is to change its entry in a keymap.
You can change the global keymap, in which case the change is
effective in all major modes (except those that have their own
overriding local bindings for the same key).  Or you can change a
local keymap, which affects all buffers using the same major mode.
</p>
<p>In this section, we describe how to rebind keys for the present
Emacs session.  See <a class="xref" href="#Init-Rebinding">Rebinding Keys in Your Init File</a>, for a description of how to
make key rebindings affect future Emacs sessions.
</p>
<a class="index-entry-id" id="index-keymap_002dglobal_002dset"></a>
<a class="index-entry-id" id="index-keymap_002dlocal_002dset"></a>
<a class="index-entry-id" id="index-keymap_002dglobal_002dunset"></a>
<a class="index-entry-id" id="index-keymap_002dlocal_002dunset"></a>
<dl class="table">
<dt><kbd class="kbd">M-x keymap-global-set <kbd class="key">RET</kbd> <var class="var">key</var> <var class="var">cmd</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Define <var class="var">key</var> globally to run <var class="var">cmd</var>.
</p></dd>
<dt><kbd class="kbd">M-x keymap-local-set <kbd class="key">RET</kbd> <var class="var">key</var> <var class="var">cmd</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Define <var class="var">key</var> locally (in the major mode now in effect) to run
<var class="var">cmd</var>.
</p></dd>
<dt><kbd class="kbd">M-x keymap-global-unset <kbd class="key">RET</kbd> <var class="var">key</var></kbd></dt>
<dd><p>Make <var class="var">key</var> undefined in the global map.
</p></dd>
<dt><kbd class="kbd">M-x keymap-local-unset <kbd class="key">RET</kbd> <var class="var">key</var></kbd></dt>
<dd><p>Make <var class="var">key</var> undefined locally (in the major mode now in effect).
</p></dd>
</dl>

<p>For example, the following binds <kbd class="kbd">C-z</kbd> to the <code class="code">shell</code>
command (see <a class="pxref" href="Shell.xhtml#Interactive-Shell">Interactive Subshell</a>), replacing the normal global
definition of <kbd class="kbd">C-z</kbd>:
</p>
<div class="example">
<pre class="example-preformatted">M-x keymap-global-set <kbd class="key">RET</kbd> C-z shell <kbd class="key">RET</kbd>
</pre></div>

<p>The <code class="code">keymap-global-set</code> command reads the command name after the
key.  After you press the key, a message like this appears so that you
can confirm that you are binding the key you want:
</p>
<div class="example">
<pre class="example-preformatted">Set key C-z to command:
</pre></div>

<p>You can redefine function keys and mouse events in the same way; just
type the function key or click the mouse when it&#8217;s time to specify the
key to rebind.
</p>
<p>You can rebind a key that contains more than one event in the same
way.  Emacs keeps reading the key to rebind until it is a complete key
(that is, not a prefix key).  Thus, if you type <kbd class="kbd">C-f</kbd> for
<var class="var">key</var>, that&#8217;s the end; it enters the minibuffer immediately to
read <var class="var">cmd</var>.  But if you type <kbd class="kbd">C-x</kbd>, since that&#8217;s a prefix, it
reads another character; if that is <kbd class="kbd">4</kbd>, another prefix character,
it reads one more character, and so on.  For example,
</p>
<div class="example">
<pre class="example-preformatted">M-x keymap-global-set <kbd class="key">RET</kbd> C-x 4 $ spell-other-window <kbd class="key">RET</kbd>
</pre></div>

<p>redefines <kbd class="kbd">C-x 4 $</kbd> to run the (fictitious) command
<code class="code">spell-other-window</code>.
</p>
<p>You can remove the global definition of a key with
<code class="code">keymap-global-unset</code>.  This makes the key <em class="dfn">undefined</em>; if you
type it, Emacs will just beep.  Similarly, <code class="code">keymap-local-unset</code> makes
a key undefined in the current major mode keymap, which makes the global
definition (or lack of one) come back into effect in that major mode.
</p>
<p>If you have redefined (or undefined) a key and you subsequently wish
to retract the change, undefining the key will not do the job&#8212;you need
to redefine the key with its standard definition.  To find the name of
the standard definition of a key, go to a Fundamental mode buffer in a
fresh Emacs and use <kbd class="kbd">C-h c</kbd>.  The documentation of keys in this
manual also lists their command names.
</p>
<p>If you want to prevent yourself from invoking a command by mistake, it
is better to disable the command than to undefine the key.  A disabled
command is less work to invoke when you really want to.
See <a class="xref" href="#Disabling">Disabling Commands</a>.
</p>
</div>
<div class="subsection-level-extent" id="Init-Rebinding">
<h4 class="subsection" id="Rebinding-Keys-in-Your-Init-File">50.3.6 Rebinding Keys in Your Init File</h4>
<a class="index-entry-id" id="index-rebinding-major-mode-keys"></a>
<a class="index-entry-id" id="index-key-rebinding_002c-permanent"></a>
<a class="index-entry-id" id="index-rebinding-keys_002c-permanently"></a>

<p>If you have a set of key bindings that you like to use all the time,
you can specify them in your initialization file by writing Lisp code.
See <a class="xref" href="#Init-File">The Emacs Initialization File</a>, for a description of the initialization file.
</p>
<a class="index-entry-id" id="index-keymap_002dglobal_002dset-1"></a>
<p>The recommended way to write a key binding using Lisp is to use
either the <code class="code">keymap-global-set</code> or the <code class="code">keymap-set</code>
functions.  For example, here&#8217;s how to bind <kbd class="kbd">C-z</kbd> to the
<code class="code">shell</code> command in the global keymap (see <a class="pxref" href="Shell.xhtml#Interactive-Shell">Interactive Subshell</a>):
</p>
<div class="example">
<pre class="example-preformatted">(keymap-global-set &quot;C-z&quot; 'shell)
</pre></div>

<a class="index-entry-id" id="index-key-sequence-syntax"></a>
<p>The first argument to <code class="code">keymap-global-set</code> describes the key
sequence.  It is a string made of a series of characters separated
by spaces, with each character corresponding to a key.  Keys with
modifiers can be specified by prepending the modifier, such as
&#8216;<samp class="samp">C-</samp>&#8217; for Control, or &#8216;<samp class="samp">M-</samp>&#8217; for Meta.  Special keys, such as
<kbd class="key">TAB</kbd> and <kbd class="key">RET</kbd>, can be specified within angle brackets as in
<kbd class="kbd"><kbd class="key">TAB</kbd></kbd> and <kbd class="kbd"><kbd class="key">RET</kbd></kbd>.
</p>
<p>The single-quote before the command name that is being bound to the
key sequence, <code class="code">shell</code> in the above example, marks it as a
constant symbol rather than a variable.  If you omit the quote, Emacs
would try to evaluate <code class="code">shell</code> as a variable.  This will probably
cause an error; it certainly isn&#8217;t what you want.
</p>
<p>Here are some additional examples, including binding function keys
and mouse events:
</p>
<div class="example">
<pre class="example-preformatted">(keymap-global-set &quot;C-c y&quot; 'clipboard-yank)
(keymap-global-set &quot;C-M-q&quot; 'query-replace)
(keymap-global-set &quot;&lt;f5&gt;&quot; 'flyspell-mode)
(keymap-global-set &quot;C-&lt;f5&gt;&quot; 'display-line-numbers-mode)
(keymap-global-set &quot;C-&lt;right&gt;&quot; 'forward-sentence)
(keymap-global-set &quot;&lt;mouse-2&gt;&quot; 'mouse-save-then-kill)
</pre></div>

<p>Language and coding systems may cause problems with key bindings for
non-<abbr class="acronym">ASCII</abbr> characters.  See <a class="xref" href="#Init-Non_002dASCII">Non-<abbr class="acronym">ASCII</abbr> Characters in Init Files</a>.
</p>
<a class="index-entry-id" id="index-global_002dset_002dkey"></a>
<a class="index-entry-id" id="index-define_002dkey"></a>
<p>Alternatively, you can use the low level functions <code class="code">define-key</code>
and <code class="code">global-set-key</code>.  For example, to bind <kbd class="kbd">C-z</kbd> to the
<code class="code">shell</code> command, as in the above example, using these low-level
functions, use:
</p>
<div class="example">
<pre class="example-preformatted">(global-set-key (kbd &quot;C-z&quot;) 'shell)
</pre></div>

<a class="index-entry-id" id="index-kbd"></a>
<p>There are various ways to specify the key sequence but the simplest is
to use the function <code class="code">kbd</code> as shown in the example above.
<code class="code">kbd</code> takes a single string argument that is a textual
representation of a key sequence, and converts it into a form suitable
for low-level functions such as <code class="code">global-set-key</code>.  For more
details about binding keys using Lisp, see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Keymaps.html#Keymaps">Keymaps</a> in <cite class="cite">The
Emacs Lisp Reference Manual</cite>.
</p>
<a class="index-entry-id" id="index-keymap_002dset"></a>
<a class="index-entry-id" id="index-keymap_002dunset"></a>
<p>As described in <a class="ref" href="#Local-Keymaps">Local Keymaps</a>, major modes and minor modes can
define local keymaps.  These keymaps are constructed when the mode is
loaded for the first time in a session.  The function <code class="code">keymap-set</code>
can be used to make changes in a specific keymap.  To remove a key
binding, use <code class="code">keymap-unset</code>.
</p>
<p>Since a mode&#8217;s keymaps are not constructed until it has been loaded,
you must delay running code which modifies them, e.g., by putting it
on a <em class="dfn">mode hook</em> (see <a class="pxref" href="#Hooks">Hooks</a>).  For example, Texinfo mode
runs the hook <code class="code">texinfo-mode-hook</code>.  Here&#8217;s how you can use the
hook to add local bindings for <kbd class="kbd">C-c n</kbd> and <kbd class="kbd">C-c p</kbd>, and remove
the one for <kbd class="kbd">C-c C-x x</kbd> in Texinfo mode:
</p>
<div class="example">
<pre class="example-preformatted">(add-hook 'texinfo-mode-hook
          (lambda ()
            (keymap-set texinfo-mode-map &quot;C-c p&quot;
                        'backward-paragraph)
            (keymap-set texinfo-mode-map &quot;C-c n&quot;
                        'forward-paragraph)
            (keymap-set texinfo-mode-map &quot;C-c C-x x&quot; nil)))
</pre></div>

</div>
<div class="subsection-level-extent" id="Modifier-Keys">
<h4 class="subsection" id="Modifier-Keys-1">50.3.7 Modifier Keys</h4>
<a class="index-entry-id" id="index-modifier-keys_002c-and-key-rebinding"></a>

<p>The default key bindings in Emacs are set up so that modified
alphabetical characters are case-insensitive.  In other words,
<kbd class="kbd">C-A</kbd> does the same thing as <kbd class="kbd">C-a</kbd>, and <kbd class="kbd">M-A</kbd> does the
same thing as <kbd class="kbd">M-a</kbd>.  This concerns only alphabetical characters,
and does not apply to shifted versions of other keys; for
instance, <kbd class="kbd">C-@</kbd> is not the same as <kbd class="kbd">C-2</kbd>.
</p>
<p>A <kbd class="key">Control</kbd>-modified alphabetical character is generally
considered case-insensitive: Emacs always treats <kbd class="kbd">C-A</kbd> as
<kbd class="kbd">C-a</kbd>, <kbd class="kbd">C-B</kbd> as <kbd class="kbd">C-b</kbd>, and so forth.  The reason for this
is historical: In non-graphical environments there is no distinction
between those keystrokes.  However, you can bind shifted <kbd class="key">Control</kbd>
alphabetical keystrokes in GUI frames:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(keymap-global-set &quot;C-S-n&quot; #'previous-line)
</pre></div>

<p>For all other modifiers, you can make the modified alphabetical
characters case-sensitive (even on non-graphical frames) when you
customize Emacs.  For instance, you could make <kbd class="kbd">M-a</kbd> and <kbd class="kbd">M-A</kbd>
run different commands.
</p>
<a class="index-entry-id" id="index-Alt_002c-modifier-key"></a>
<a class="index-entry-id" id="index-Super_002c-modifier-key"></a>
<a class="index-entry-id" id="index-Hyper_002c-modifier-key"></a>
<a class="index-entry-id" id="index-s_002d"></a>
<a class="index-entry-id" id="index-H_002d"></a>
<a class="index-entry-id" id="index-A_002d"></a>
<p>Although only the <kbd class="key">Control</kbd> and <kbd class="key">Meta</kbd> modifier keys are
commonly used, Emacs supports three other modifier keys.  These are
called <kbd class="key">Super</kbd>, <kbd class="key">Hyper</kbd>, and <kbd class="key">Alt</kbd>.  Few terminals provide
ways to use these modifiers; the key labeled <kbd class="key">Alt</kbd> on most
keyboards usually issues the <kbd class="key">Meta</kbd> modifier, not <kbd class="key">Alt</kbd>.  The
standard key bindings in Emacs do not include any characters with the
<kbd class="key">Super</kbd> and <kbd class="key">Hyper</kbd> modifiers, and only a small number of
standard key bindings use <kbd class="key">Alt</kbd>.  However, you can customize Emacs
to assign meanings to key bindings that use these modifiers.  The
modifier bits are labeled as &#8216;<samp class="samp">s-</samp>&#8217;, &#8216;<samp class="samp">H-</samp>&#8217; and &#8216;<samp class="samp">A-</samp>&#8217;
respectively.
</p>
<a class="index-entry-id" id="index-modifier-keys-unsupported-by-keyboard"></a>
<p>Even if your keyboard lacks these additional modifier keys, you can
enter them using <kbd class="kbd">C-x @</kbd>: <kbd class="kbd">C-x @ h</kbd> adds the Hyper flag to
the next character, <kbd class="kbd">C-x @ s</kbd> adds the Super flag, and
<kbd class="kbd">C-x @ a</kbd> adds the Alt flag.  For instance, <kbd class="kbd">C-x @ h
C-a</kbd> is a way to enter <kbd class="kbd">Hyper-Control-a</kbd>.  (Unfortunately, there
is no way to add two modifiers by using <kbd class="kbd">C-x @</kbd> twice for the
same character, because the first one goes to work on the <kbd class="kbd">C-x</kbd>.)
You can similarly enter the Shift, Control, and Meta modifiers by
using <kbd class="kbd">C-x @ S</kbd>, <kbd class="kbd">C-x @ c</kbd>, and <kbd class="kbd">C-x @ m</kbd>, respectively,
although this is rarely needed.
</p>
</div>
<div class="subsection-level-extent" id="Function-Keys">
<h4 class="subsection" id="Rebinding-Function-Keys">50.3.8 Rebinding Function Keys</h4>

<p>Key sequences can contain function keys as well as ordinary
characters.  Just as Lisp characters (actually integers) represent
keyboard characters, Lisp symbols represent function keys.  If the
function key has a word as its label, then that word is also the name of
the corresponding Lisp symbol.  Here are the conventional Lisp names for
common function keys:
</p>
<dl class="table">
<dt><code class="code">left</code>, <code class="code">up</code>, <code class="code">right</code>, <code class="code">down</code></dt>
<dd><p>Cursor arrow keys.
</p>
</dd>
<dt><code class="code">begin</code>, <code class="code">end</code>, <code class="code">home</code>, <code class="code">next</code>, <code class="code">prior</code></dt>
<dd><p>Other cursor repositioning keys.
</p>
</dd>
<dt><code class="code">select</code>, <code class="code">print</code>, <code class="code">execute</code>, <code class="code">backtab</code></dt>
<dt><code class="code">insert</code>, <code class="code">undo</code>, <code class="code">redo</code>, <code class="code">clearline</code></dt>
<dt><code class="code">insertline</code>, <code class="code">deleteline</code>, <code class="code">insertchar</code>, <code class="code">deletechar</code></dt>
<dd><p>Miscellaneous function keys.
</p>
</dd>
<dt><code class="code">f1</code>, <code class="code">f2</code>, &#8230; <code class="code">f35</code></dt>
<dd><p>Numbered function keys (across the top of the keyboard).
</p>
</dd>
<dt><code class="code">kp-add</code>, <code class="code">kp-subtract</code>, <code class="code">kp-multiply</code>, <code class="code">kp-divide</code></dt>
<dt><code class="code">kp-backtab</code>, <code class="code">kp-space</code>, <code class="code">kp-tab</code>, <code class="code">kp-enter</code></dt>
<dt><code class="code">kp-separator</code>, <code class="code">kp-decimal</code>, <code class="code">kp-equal</code></dt>
<dt><code class="code">kp-prior</code>, <code class="code">kp-next</code>, <code class="code">kp-end</code>, <code class="code">kp-home</code></dt>
<dt><code class="code">kp-left</code>, <code class="code">kp-up</code>, <code class="code">kp-right</code>, <code class="code">kp-down</code></dt>
<dt><code class="code">kp-insert </code>, <code class="code">kp-delete</code></dt>
<dd><p>Keypad keys (to the right of the regular keyboard), with names or punctuation.
</p>
</dd>
<dt><code class="code">kp-0</code>, <code class="code">kp-1</code>, &#8230; <code class="code">kp-9</code></dt>
<dd><p>Keypad keys with digits.
</p>
</dd>
<dt><code class="code">kp-f1</code>, <code class="code">kp-f2</code>, <code class="code">kp-f3</code>, <code class="code">kp-f4</code></dt>
<dd><p>Keypad PF keys.
</p></dd>
</dl>

<p>These names are conventional, but some systems (especially when using
X) may use different names.  To make certain what symbol is used for a
given function key on your terminal, type <kbd class="kbd">C-h c</kbd> followed by that
key.
</p>
<p>See <a class="xref" href="#Init-Rebinding">Rebinding Keys in Your Init File</a>, for examples of binding function keys.
</p>
<a class="index-entry-id" id="index-keypad"></a>
<p>Many keyboards have a numeric keypad on the right-hand side.
The numeric keys in the keypad double up as cursor motion keys,
toggled by a key labeled &#8216;<samp class="samp">Num Lock</samp>&#8217;.  By default, Emacs
translates these keys to the corresponding keys on the main keyboard.
For example, when &#8216;<samp class="samp">Num Lock</samp>&#8217; is on, the key labeled &#8216;<samp class="samp">8</samp>&#8217; on
the numeric keypad produces <code class="code">kp-8</code>, which is translated to
<kbd class="kbd">8</kbd>; when &#8216;<samp class="samp">Num Lock</samp>&#8217; is off, the same key produces
<code class="code">kp-up</code>, which is translated to <kbd class="key">UP</kbd>.  If you rebind a key
such as <kbd class="kbd">8</kbd> or <kbd class="key">UP</kbd>, it affects the equivalent keypad key too.
However, if you rebind a &#8216;<samp class="samp">kp-</samp>&#8217; key directly, that won&#8217;t affect
its non-keypad equivalent.  Note that the modified keys are not
translated: for instance, if you hold down the <kbd class="key">Meta</kbd> key while
pressing the &#8216;<samp class="samp">8</samp>&#8217; key on the numeric keypad, that generates
<kbd class="kbd">M-<kbd class="key">kp-8</kbd></kbd>.
</p>
<p>Emacs provides a convenient method for binding the numeric keypad
keys, using the variables <code class="code">keypad-setup</code>,
<code class="code">keypad-numlock-setup</code>, <code class="code">keypad-shifted-setup</code>, and
<code class="code">keypad-numlock-shifted-setup</code>.  These can be found in the
&#8216;<samp class="samp">keyboard</samp>&#8217; customization group (see <a class="pxref" href="#Easy-Customization">Easy Customization Interface</a>).  You
can rebind the keys to perform other tasks, such as issuing numeric
prefix arguments.
</p>
</div>
<div class="subsection-level-extent" id="Named-ASCII-Chars">
<h4 class="subsection" id="Named-ASCII-Control-Characters">50.3.9 Named <abbr class="acronym">ASCII</abbr> Control Characters</h4>

<p><kbd class="key">TAB</kbd>, <kbd class="key">RET</kbd>, <kbd class="key">BS</kbd>, <kbd class="key">LFD</kbd>, <kbd class="key">ESC</kbd>, and <kbd class="key">DEL</kbd>
started out as names for certain <abbr class="acronym">ASCII</abbr> control characters,
used so often that they have special keys of their own.  For instance,
<kbd class="key">TAB</kbd> was another name for <kbd class="kbd">C-i</kbd>.  Later, users found it
convenient to distinguish in Emacs between these keys and the corresponding
control characters typed with the <kbd class="key">Ctrl</kbd> key.  Therefore, on most
modern terminals, they are no longer the same: <kbd class="key">TAB</kbd> is different
from <kbd class="kbd">C-i</kbd>.
</p>
<p>Emacs can distinguish these two kinds of input if the keyboard does.
It treats the special keys as function keys named <code class="code">tab</code>,
<code class="code">return</code>, <code class="code">backspace</code>, <code class="code">linefeed</code>, <code class="code">escape</code>, and
<code class="code">delete</code>.  These function keys translate automatically into the
corresponding <abbr class="acronym">ASCII</abbr> characters <em class="emph">if</em> they have no
bindings of their own.  As a result, neither users nor Lisp programs
need to pay attention to the distinction unless they care to.
</p>
<p>If you do not want to distinguish between (for example) <kbd class="key">TAB</kbd> and
<kbd class="kbd">C-i</kbd>, make just one binding, for the <abbr class="acronym">ASCII</abbr> character <kbd class="key">TAB</kbd>
(octal code 011).  If you do want to distinguish, make one binding for
this <abbr class="acronym">ASCII</abbr> character, and another for the function key <code class="code">tab</code>.
</p>
<p>With an ordinary <abbr class="acronym">ASCII</abbr> terminal, there is no way to distinguish
between <kbd class="key">TAB</kbd> and <kbd class="kbd">C-i</kbd> (and likewise for other such pairs),
because the terminal sends the same character in both cases.
</p>
</div>
<div class="subsection-level-extent" id="Mouse-Buttons">
<h4 class="subsection" id="Rebinding-Mouse-Buttons">50.3.10 Rebinding Mouse Buttons</h4>
<a class="index-entry-id" id="index-mouse-button-events"></a>
<a class="index-entry-id" id="index-rebinding-mouse-buttons"></a>
<a class="index-entry-id" id="index-click-events"></a>
<a class="index-entry-id" id="index-drag-events"></a>
<a class="index-entry-id" id="index-down-events"></a>
<a class="index-entry-id" id="index-button_002ddown-events"></a>

<p>Emacs uses Lisp symbols to designate mouse buttons, too.  The ordinary
mouse events in Emacs are <em class="dfn">click</em> events; these happen when you
press a button and release it without moving the mouse.  You can also
get <em class="dfn">drag</em> events, when you move the mouse while holding the button
down.  Drag events happen when you finally let go of the button.
</p>
<p>The symbols for basic click events are <code class="code">mouse-1</code> for the leftmost
button, <code class="code">mouse-2</code> for the next, and so on.  Here is how you can
redefine the second mouse button to split the current window:
</p>
<div class="example">
<pre class="example-preformatted">(keymap-global-set &quot;&lt;mouse-2&gt;&quot; 'split-window-below)
</pre></div>

<p>The symbols for drag events are similar, but have the prefix
&#8216;<samp class="samp">drag-</samp>&#8217; before the word &#8216;<samp class="samp">mouse</samp>&#8217;.  For example, dragging the
first button generates a <code class="code">drag-mouse-1</code> event.
</p>
<p>You can also define bindings for events that occur when a mouse button
is pressed down.  These events start with &#8216;<samp class="samp">down-</samp>&#8217; instead of
&#8216;<samp class="samp">drag-</samp>&#8217;.  Such events are generated only if they have key bindings.
When you get a button-down event, a corresponding click or drag event
will always follow.
</p>
<a class="index-entry-id" id="index-double-clicks"></a>
<a class="index-entry-id" id="index-triple-clicks"></a>
<p>If you wish, you can distinguish single, double, and triple clicks.  A
double click means clicking a mouse button twice in approximately the
same place.  The first click generates an ordinary click event.  The
second click, if it comes soon enough, generates a double-click event
instead.  The event type for a double-click event starts with
&#8216;<samp class="samp">double-</samp>&#8217;: for example, <code class="code">double-mouse-3</code>.
</p>
<p>This means that you can give a special meaning to the second click at
the same place, but it must act on the assumption that the ordinary
single click definition has run when the first click was received.
</p>
<p>This constrains what you can do with double clicks, but user interface
designers say that this constraint ought to be followed in any case.  A
double click should do something similar to the single click, only
more so.  The command for the double-click event should perform the
extra work for the double click.
</p>
<p>If a double-click event has no binding, it changes to the
corresponding single-click event.  Thus, if you don&#8217;t define a
particular double click specially, it executes the single-click command
twice.
</p>
<p>Emacs also supports triple-click events whose names start with
&#8216;<samp class="samp">triple-</samp>&#8217;.  Emacs does not distinguish quadruple clicks as event
types; clicks beyond the third generate additional triple-click events.
However, the full number of clicks is recorded in the event list, so
if you know Emacs Lisp you can distinguish if you really want to
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Click-Events.html#Click-Events">Click Events</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).
We don&#8217;t recommend distinct meanings for more than three clicks, but
sometimes it is useful for subsequent clicks to cycle through the same
set of three meanings, so that four clicks are equivalent to one
click, five are equivalent to two, and six are equivalent to three.
</p>
<p>Emacs also records multiple presses in drag and button-down events.
For example, when you press a button twice, then move the mouse while
holding the button, Emacs gets a &#8216;<samp class="samp">double-drag-</samp>&#8217; event.  And at the
moment when you press it down for the second time, Emacs gets a
&#8216;<samp class="samp">double-down-</samp>&#8217; event (which is ignored, like all button-down
events, if it has no binding).
</p>
<a class="index-entry-id" id="index-double_002dclick_002dtime"></a>
<p>The variable <code class="code">double-click-time</code> specifies how much time can
elapse between clicks and still allow them to be grouped as a multiple
click.  Its value is in units of milliseconds.  If the value is
<code class="code">nil</code>, double clicks are not detected at all.  If the value is
<code class="code">t</code>, then there is no time limit.  The default is 500.
</p>
<a class="index-entry-id" id="index-double_002dclick_002dfuzz"></a>
<p>The variable <code class="code">double-click-fuzz</code> specifies how much the mouse
can move between clicks and still allow them to be grouped as a multiple
click.  Its value is in units of pixels on windowed displays and in
units of 1/8 of a character cell on text-mode terminals; the default is
3.
</p>
<p>The symbols for mouse events also indicate the status of the modifier
keys, with the usual prefixes &#8216;<samp class="samp">C-</samp>&#8217;, &#8216;<samp class="samp">M-</samp>&#8217;, &#8216;<samp class="samp">H-</samp>&#8217;,
&#8216;<samp class="samp">s-</samp>&#8217;, &#8216;<samp class="samp">A-</samp>&#8217;, and &#8216;<samp class="samp">S-</samp>&#8217;.  These always precede &#8216;<samp class="samp">double-</samp>&#8217;
or &#8216;<samp class="samp">triple-</samp>&#8217;, which always precede &#8216;<samp class="samp">drag-</samp>&#8217; or &#8216;<samp class="samp">down-</samp>&#8217;.
</p>
<p>A frame includes areas that don&#8217;t show text from the buffer, such as
the mode line and the scroll bar.  You can tell whether a mouse button
comes from a special area of the screen by means of dummy prefix
keys.  For example, if you click the mouse in the mode line, you get
the prefix key <code class="code">mode-line</code> before the ordinary mouse-button symbol.
Thus, here is how to define the command for clicking the first button in
a mode line to run <code class="code">scroll-up-command</code>:
</p>
<div class="example">
<pre class="example-preformatted">(keymap-global-set &quot;&lt;mode-line&gt; &lt;mouse-1&gt;&quot; 'scroll-up-command)
</pre></div>

<p>Here is the complete list of these dummy prefix keys and their
meanings:
</p>
<dl class="table">
<dt><code class="code">mode-line</code></dt>
<dd><p>The mouse was in the mode line of a window.
</p></dd>
<dt><code class="code">vertical-line</code></dt>
<dd><p>The mouse was in the vertical line separating side-by-side windows.  (If
you use scroll bars, they appear in place of these vertical lines.)
</p></dd>
<dt><code class="code">vertical-scroll-bar</code></dt>
<dd><p>The mouse was in a vertical scroll bar.  (This is the only kind of
scroll bar Emacs currently supports.)
</p></dd>
<dt><code class="code">menu-bar</code></dt>
<dd><p>The mouse was in the menu bar.
</p></dd>
<dt><code class="code">tab-bar</code></dt>
<dd><p>The mouse was in a tab bar.
</p></dd>
<dt><code class="code">tab-line</code></dt>
<dd><p>The mouse was in a tab line.
</p></dd>
<dt><code class="code">header-line</code></dt>
<dd><p>The mouse was in a header line.
</p></dd>
</dl>

<p>You can put more than one mouse button in a key sequence, but it isn&#8217;t
usual to do so.
</p>
</div>
<div class="subsection-level-extent" id="Disabling">
<h4 class="subsection" id="Disabling-Commands">50.3.11 Disabling Commands</h4>
<a class="index-entry-id" id="index-disabled-command"></a>

<p>Disabling a command means that invoking it interactively asks for
confirmation from the user.  The purpose of disabling a command is to
prevent users from executing it by accident; we do this for commands
that might be confusing to the uninitiated.
</p>
<p>Attempting to invoke a disabled command interactively in Emacs
displays a window containing the command&#8217;s name, its documentation,
and some instructions on what to do immediately; then Emacs asks for
input saying whether to execute the command as requested, enable it
and execute it, or cancel.  If you decide to enable the command, you
must then answer another question&#8212;whether to do this permanently, or
just for the current session.  (Enabling permanently works by
automatically editing your initialization file.)  You can also type
<kbd class="kbd">!</kbd> to enable <em class="emph">all</em> commands, for the current session only.
</p>
<p>The direct mechanism for disabling a command is to put a
non-<code class="code">nil</code> <code class="code">disabled</code> property on the Lisp symbol for the
command.  Here is the Lisp program to do this:
</p>
<div class="example">
<pre class="example-preformatted">(put 'delete-region 'disabled t)
</pre></div>

<p>If the value of the <code class="code">disabled</code> property is a string, that string
is included in the message displayed when the command is used:
</p>
<div class="example">
<pre class="example-preformatted">(put 'delete-region 'disabled
     &quot;It's better to use `kill-region' instead.\n&quot;)
</pre></div>

<a class="index-entry-id" id="index-command_002dquery"></a>
<p>As a less heavy-handed alternative to disabling commands, you may
want to be queried before executing a command.  For instance, to be
queried before executing the <kbd class="kbd">M-&gt;</kbd> (<code class="code">end-of-buffer</code>)
command, you could put something like the following in your init file:
</p>
<div class="example">
<pre class="example-preformatted">(command-query
 'end-of-buffer
 &quot;Do you really want to go to the end of the buffer?&quot;)
</pre></div>

<p>By default, you&#8217;ll be queried with a <kbd class="kbd">y</kbd>/<kbd class="kbd">n</kbd> question, but if
you give a non-<code class="code">nil</code> value to the third, optional argument,
you&#8217;ll be queried with <kbd class="kbd">yes</kbd>/<kbd class="kbd">no</kbd> instead.
</p>
<a class="index-entry-id" id="index-disable_002dcommand"></a>
<a class="index-entry-id" id="index-enable_002dcommand"></a>
<p>You can make a command disabled either by editing the initialization
file directly, or with the command <kbd class="kbd">M-x disable-command</kbd>, which
edits the initialization file for you.  Likewise, <kbd class="kbd">M-x
enable-command</kbd> edits the initialization file to enable a command
permanently.  See <a class="xref" href="#Init-File">The Emacs Initialization File</a>.
</p>
<p>If Emacs was invoked with the <samp class="option">-q</samp> or <samp class="option">--no-init-file</samp>
options (see <a class="pxref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>), it will not edit your
initialization file.  Doing so could lose information because Emacs
has not read your initialization file.
</p>
<p>Whether a command is disabled is independent of what key is used to
invoke it; disabling also applies if the command is invoked using
<kbd class="kbd">M-x</kbd>.  However, disabling a command has no effect on calling it
as a function from Lisp programs.
</p>
</div>
</div>
<div class="section-level-extent" id="Init-File">
<h3 class="section" id="The-Emacs-Initialization-File">50.4 The Emacs Initialization File</h3>
<a class="index-entry-id" id="index-init-file"></a>
<a class="index-entry-id" id="index-_002eemacs-file"></a>
<a class="index-entry-id" id="index-_007e_002f_002eemacs-file"></a>
<a class="index-entry-id" id="index-_007e_002f_002econfig_002femacs_002finit_002eel-file"></a>
<a class="index-entry-id" id="index-Emacs-initialization-file"></a>
<a class="index-entry-id" id="index-startup-_0028init-file_0029"></a>
<a class="index-entry-id" id="index-XDG_005fCONFIG_005fHOME"></a>

<p>When Emacs is started, it normally tries to load a Lisp program from
an <em class="dfn">initialization file</em>, or <em class="dfn">init file</em> for short.  This
file, if it exists, specifies how to initialize Emacs for you.
Traditionally, file <samp class="file">~/.emacs</samp> is used as the init file, although
Emacs also looks at <samp class="file">~/.emacs.el</samp>, <samp class="file">~/.emacs.d/init.el</samp>,
<samp class="file">~/.config/emacs/init.el</samp>, or other locations.  See <a class="xref" href="#Find-Init">How Emacs Finds Your Init File</a>.
</p>
<p>You may find it convenient to have all your Emacs configuration in one
directory, in which case you should use <samp class="file">~/.emacs.d/init.el</samp> or
the XDG-compatible <samp class="file">~/.config/emacs/init.el</samp>.
</p>
<p>You can use the command line switch &#8216;<samp class="samp">-q</samp>&#8217; to prevent loading
your init file, and &#8216;<samp class="samp">-u</samp>&#8217; (or &#8216;<samp class="samp">--user</samp>&#8217;) to specify a
different user&#8217;s init file (see <a class="pxref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>).
</p>
<a class="index-entry-id" id="index-default_002eel_002c-the-default-init-file"></a>
<p>There can also be a <em class="dfn">default init file</em>, which is the library
named <samp class="file">default.el</samp>, found via the standard search path for
libraries.  The Emacs distribution contains no such library; your site
may create one for local customizations.  If this library exists, it is
loaded whenever you start Emacs (except when you specify &#8216;<samp class="samp">-q</samp>&#8217;).
But your init file, if any, is loaded first; if it sets
<code class="code">inhibit-default-init</code> non-<code class="code">nil</code>, then <samp class="file">default</samp> is not
loaded.
</p>
<a class="index-entry-id" id="index-site-init-file"></a>
<a class="index-entry-id" id="index-site_002dstart_002eel_002c-the-site-startup-file"></a>
<p>Your site may also have a <em class="dfn">site startup file</em>; this is named
<samp class="file">site-start.el</samp>, if it exists.  Like <samp class="file">default.el</samp>, Emacs
finds this file via the standard search path for Lisp libraries.
Emacs loads this library before it loads your init file.  To inhibit
loading of this library, use the option &#8216;<samp class="samp">--no-site-file</samp>&#8217;.
See <a class="xref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>.  We recommend against using
<samp class="file">site-start.el</samp> for changes that some users may not like.  It is
better to put them in <samp class="file">default.el</samp>, so that users can more easily
override them.
</p>
<a class="index-entry-id" id="index-site_002dlisp-directories"></a>
<p>You can place <samp class="file">default.el</samp> and <samp class="file">site-start.el</samp> in any of
the directories which Emacs searches for Lisp libraries.  The variable
<code class="code">load-path</code> (see <a class="pxref" href="Building.xhtml#Lisp-Libraries">Libraries of Lisp Code for Emacs</a>) specifies these directories.
Many sites put these files in a subdirectory named <samp class="file">site-lisp</samp> in
the Emacs installation directory, such as
<samp class="file">/usr/local/share/emacs/site-lisp</samp>.
</p>
<p>Byte-compiling your init file is not recommended (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Byte-Compilation.html#Byte-Compilation">Byte Compilation</a> in <cite class="cite">the Emacs Lisp Reference
Manual</cite>).  It generally does not speed up startup very much, and often
leads to problems when you forget to recompile the file.  A better
solution is to use the Emacs server to reduce the number of times you
have to start Emacs (see <a class="pxref" href="Emacs-Server.xhtml#Emacs-Server">Using Emacs as a Server</a>).  If your init file defines
many functions, consider moving them to a separate (byte-compiled)
file that you load in your init file.
</p>
<p>If you are going to write actual Emacs Lisp programs that go beyond
minor customization, you should read the <cite class="cite">Emacs Lisp Reference Manual</cite>.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#Top">Emacs Lisp</a> in <cite class="cite">the Emacs Lisp Reference
Manual</cite>.
</p>

<div class="subsection-level-extent" id="Init-Syntax">
<h4 class="subsection" id="Init-File-Syntax">50.4.1 Init File Syntax</h4>

<p>The init file contains one or more Lisp expressions.  Each of these
consists of a function name followed by arguments, all surrounded by
parentheses.  For example, <code class="code">(setq fill-column 60)</code> calls the
function <code class="code">setq</code> to set the variable <code class="code">fill-column</code>
(see <a class="pxref" href="Text.xhtml#Filling">Filling Text</a>) to 60.
</p>
<p>You can set any Lisp variable with <code class="code">setq</code>, but with certain
variables <code class="code">setq</code> won&#8217;t do what you probably want in the init
file.  Some variables automatically become buffer-local when set with
<code class="code">setq</code>; what you want in the init file is to set the default
value, using <code class="code">setq-default</code>.  (The following section has examples
of both of these methods.)
</p>
<p>Some customizable minor mode variables do special things to enable the
mode when you set them with Customize, but ordinary <code class="code">setq</code> won&#8217;t
do that; to enable the mode in your init file, call the minor mode
command.  Finally, a few customizable user options are initialized in
complex ways, and these have to be set either via the customize
interface (see <a class="pxref" href="#Customization">Customization</a>), or by using
<code class="code">customize-set-variable</code>/<code class="code">setopt</code> (see <a class="pxref" href="#Examining">Examining and Setting Variables</a>).
</p>
<p>The second argument to <code class="code">setq</code> is an expression for the new
value of the variable.  This can be a constant, a variable, or a
function call expression.  In the init file, constants are used most
of the time.  They can be:
</p>
<dl class="table">
<dt>Numbers:</dt>
<dd><p>Numbers are written in decimal, with an optional initial minus sign.
</p>
</dd>
<dt><a class="index-entry-id" id="index-string-syntax"></a>
<a id="index-Lisp-string-syntax"></a>Strings:</dt>
<dd><p>Lisp string syntax is the same as C string syntax with a few extra
features.  Use a double-quote character to begin and end a string constant.
</p>
<p>In a string, you can include newlines and special characters literally.
But often it is cleaner to use backslash sequences for them: &#8216;<samp class="samp">\n</samp>&#8217;
for newline, &#8216;<samp class="samp">\b</samp>&#8217; for backspace, &#8216;<samp class="samp">\r</samp>&#8217; for carriage return,
&#8216;<samp class="samp">\t</samp>&#8217; for tab, &#8216;<samp class="samp">\f</samp>&#8217; for formfeed (control-L), &#8216;<samp class="samp">\e</samp>&#8217; for
escape, &#8216;<samp class="samp">\\</samp>&#8217; for a backslash, &#8216;<samp class="samp">\&quot;</samp>&#8217; for a double-quote, or
&#8216;<samp class="samp">\<var class="var">ooo</var></samp>&#8217; for the character whose octal code is <var class="var">ooo</var>.
Backslash and double-quote are the only characters for which backslash
sequences are mandatory.
</p>
<p>&#8216;<samp class="samp">\C-</samp>&#8217; can be used as a prefix for a control character, as in
&#8216;<samp class="samp">\C-s</samp>&#8217; for <abbr class="acronym">ASCII</abbr> control-S, and &#8216;<samp class="samp">\M-</samp>&#8217; can be used as a prefix for
a Meta character, as in &#8216;<samp class="samp">\M-a</samp>&#8217; for <kbd class="kbd"><kbd class="key">Meta</kbd>-A</kbd> or
&#8216;<samp class="samp">\M-\C-a</samp>&#8217; for <kbd class="kbd"><kbd class="key">Ctrl</kbd>-<kbd class="key">Meta</kbd>-A</kbd>.
</p>
<p>See <a class="xref" href="#Init-Non_002dASCII">Non-<abbr class="acronym">ASCII</abbr> Characters in Init Files</a>, for information about including
non-<abbr class="acronym">ASCII</abbr> in your init file.
</p>
</dd>
<dt><a class="index-entry-id" id="index-character-syntax"></a>
<a id="index-Lisp-character-syntax"></a>Characters:</dt>
<dd><p>Lisp character constant syntax consists of a &#8216;<samp class="samp">?</samp>&#8217; followed by
either a character or an escape sequence starting with &#8216;<samp class="samp">\</samp>&#8217;.
Examples: <code class="code">?x</code>, <code class="code">?\n</code>, <code class="code">?\&quot;</code>, <code class="code">?\)</code>.  Note that
strings and characters are not interchangeable in Lisp; some contexts
require one and some contexts require the other.
</p>
<p>See <a class="xref" href="#Init-Non_002dASCII">Non-<abbr class="acronym">ASCII</abbr> Characters in Init Files</a>, for information about binding commands to
keys which send non-<abbr class="acronym">ASCII</abbr> characters.
</p>
</dd>
<dt>True:</dt>
<dd><p><code class="code">t</code> stands for &#8220;true&#8221;.
</p>
</dd>
<dt>False:</dt>
<dd><p><code class="code">nil</code> stands for &#8220;false&#8221;.
</p>
</dd>
<dt><a id="index-Lisp-object-syntax"></a>Other Lisp objects:</dt>
<dd><p>Write a single-quote (<code class="code">'</code>) followed by the Lisp object you want.
</p></dd>
</dl>

<p>For more information on the Emacs Lisp syntax, see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Introduction.html#Introduction">Introduction</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.
</p>
</div>
<div class="subsection-level-extent" id="Init-Examples">
<h4 class="subsection" id="Init-File-Examples">50.4.2 Init File Examples</h4>

<p>Here are some examples of doing certain commonly desired things with
Lisp expressions:
</p>
<ul class="itemize mark-bullet">
<li>Add a directory to the variable <code class="code">load-path</code>.  You can then put
Lisp libraries that are not included with Emacs in this directory, and
load them with <kbd class="kbd">M-x load-library</kbd>.  See <a class="xref" href="Building.xhtml#Lisp-Libraries">Libraries of Lisp Code for Emacs</a>.

<div class="example">
<pre class="example-preformatted">(add-to-list 'load-path &quot;/path/to/lisp/libraries&quot;)
</pre></div>

</li><li>Make <kbd class="key">TAB</kbd> in C mode just insert a tab if point is in the middle of a
line.

<div class="example">
<pre class="example-preformatted">(setq c-tab-always-indent nil)
</pre></div>

<p>Here we have a variable whose value is normally <code class="code">t</code> for &#8220;true&#8221;
and the alternative is <code class="code">nil</code> for &#8220;false&#8221;.
</p>
</li><li>Make searches case sensitive by default (in all buffers that do not
override this).

<div class="example">
<pre class="example-preformatted">(setq-default case-fold-search nil)
</pre></div>

<p>This sets the default value, which is effective in all buffers that do
not have local values for the variable (see <a class="pxref" href="#Locals">Local Variables</a>).  Setting
<code class="code">case-fold-search</code> with <code class="code">setq</code> affects only the current
buffer&#8217;s local value, which is probably not what you want to do in an
init file.
</p>
</li><li><a class="index-entry-id" id="index-user_002dmail_002daddress_002c-in-init-file"></a>
Specify your own email address, if Emacs can&#8217;t figure it out correctly.

<div class="example">
<pre class="example-preformatted">(setq user-mail-address &quot;cheney@torture.gov&quot;)
</pre></div>

<p>Various Emacs packages, such as Message mode, consult
<code class="code">user-mail-address</code> when they need to know your email address.
See <a class="xref" href="Sending-Mail.xhtml#Mail-Headers">Mail Header Fields</a>.
</p>
</li><li>Make Text mode the default mode for new buffers.

<div class="example">
<pre class="example-preformatted">(setq-default major-mode 'text-mode)
</pre></div>

<p>Note that <code class="code">text-mode</code> is used because it is the command for
entering Text mode.  The single-quote before it makes the symbol a
constant; otherwise, <code class="code">text-mode</code> would be treated as a variable
name.
</p>
</li><li>Set up defaults for the Latin-1 character set,
which supports most of the languages of Western Europe.

<div class="example">
<pre class="example-preformatted">(set-language-environment &quot;Latin-1&quot;)
</pre></div>

</li><li>Turn off Line Number mode, a global minor mode.

<div class="example">
<pre class="example-preformatted">(line-number-mode 0)
</pre></div>

</li><li>Turn on Auto Fill mode automatically in Text mode and related modes
(see <a class="pxref" href="#Hooks">Hooks</a>).

<div class="example">
<pre class="example-preformatted">(add-hook 'text-mode-hook 'auto-fill-mode)
</pre></div>

</li><li>Change the coding system used when using the clipboard
(see <a class="pxref" href="International.xhtml#Communication-Coding">Coding Systems for Interprocess Communication</a>).

<div class="example">
<pre class="example-preformatted">(setopt selection-coding-system 'utf-8)
</pre></div>

</li><li>Load the installed Lisp library named <samp class="file">foo</samp> (actually a file
<samp class="file">foo.elc</samp> or <samp class="file">foo.el</samp> in a standard Emacs directory).

<div class="example">
<pre class="example-preformatted">(load &quot;foo&quot;)
</pre></div>

<p>When the argument to <code class="code">load</code> is a relative file name, not starting
with &#8216;<samp class="samp">/</samp>&#8217; or &#8216;<samp class="samp">~</samp>&#8217;, <code class="code">load</code> searches the directories in
<code class="code">load-path</code> (see <a class="pxref" href="Building.xhtml#Lisp-Libraries">Libraries of Lisp Code for Emacs</a>).
</p>
</li><li>Load the compiled Lisp file <samp class="file">foo.elc</samp> from your home directory.

<div class="example">
<pre class="example-preformatted">(load &quot;~/foo.elc&quot;)
</pre></div>

<p>Here a full file name is used, so no searching is done.
</p>
</li><li><a class="index-entry-id" id="index-loading-Lisp-libraries-automatically"></a>
<a class="index-entry-id" id="index-autoload-Lisp-libraries"></a>
Tell Emacs to find the definition for the function <code class="code">myfunction</code>
by loading a Lisp library named <samp class="file">mypackage</samp> (i.e., a file
<samp class="file">mypackage.elc</samp> or <samp class="file">mypackage.el</samp>):

<div class="example">
<pre class="example-preformatted">(autoload 'myfunction &quot;mypackage&quot; &quot;Do what I say.&quot; t)
</pre></div>

<p>Here the string <code class="code">&quot;Do what I say.&quot;</code> is the function&#8217;s
documentation string.  You specify it in the <code class="code">autoload</code>
definition so it will be available for help commands even when the
package is not loaded.  The last argument, <code class="code">t</code>, indicates that
this function is interactive; that is, it can be invoked interactively
by typing <kbd class="kbd">M-x myfunction <kbd class="key">RET</kbd></kbd> or by binding it to a key.
If the function is not interactive, omit the <code class="code">t</code> or use
<code class="code">nil</code>.
</p>
</li><li>Rebind the key <kbd class="kbd">C-x l</kbd> to run the function <code class="code">make-symbolic-link</code>
(see <a class="pxref" href="#Init-Rebinding">Rebinding Keys in Your Init File</a>).

<div class="example">
<pre class="example-preformatted">(keymap-global-set &quot;C-x l&quot; 'make-symbolic-link)
</pre></div>

<p>or
</p>
<div class="example">
<pre class="example-preformatted">(keymap-set global-map &quot;C-x l&quot; 'make-symbolic-link)
</pre></div>

<p>Note once again the single-quote used to refer to the symbol
<code class="code">make-symbolic-link</code> instead of its value as a variable.
</p>
</li><li>Do the same thing for Lisp mode only.

<div class="example">
<pre class="example-preformatted">(keymap-set lisp-mode-map &quot;C-x l&quot; 'make-symbolic-link)
</pre></div>

</li><li>Redefine all keys which now run <code class="code">next-line</code> in Fundamental mode
so that they run <code class="code">forward-line</code> instead.

<a class="index-entry-id" id="index-keymap_002dsubstitute"></a>
<div class="example">
<pre class="example-preformatted">(keymap-substitute global-map 'next-line 'forward-line)
</pre></div>

</li><li>Make <kbd class="kbd">C-x C-v</kbd> undefined.

<div class="example">
<pre class="example-preformatted">(keymap-global-unset &quot;C-x C-v&quot;)
</pre></div>

<p>One reason to undefine a key is so that you can make it a prefix.
Simply defining <kbd class="kbd">C-x C-v <var class="var">anything</var></kbd> will make <kbd class="kbd">C-x C-v</kbd> a
prefix, but <kbd class="kbd">C-x C-v</kbd> must first be freed of its usual non-prefix
definition.
</p>
</li><li>Make &#8216;<samp class="samp">$</samp>&#8217; have the syntax of punctuation in Text mode.
Note the use of a character constant for &#8216;<samp class="samp">$</samp>&#8217;.

<div class="example">
<pre class="example-preformatted">(modify-syntax-entry ?\$ &quot;.&quot; text-mode-syntax-table)
</pre></div>

</li><li>Enable the use of the command <code class="code">narrow-to-region</code> without confirmation.

<div class="example">
<pre class="example-preformatted">(put 'narrow-to-region 'disabled nil)
</pre></div>

</li><li>Adjusting the configuration to various platforms and Emacs versions.

<p>Users typically want Emacs to behave the same on all systems, so the
same init file is right for all platforms.  However, sometimes it
happens that a function you use for customizing Emacs is not available
on some platforms or in older Emacs versions.  To deal with that
situation, put the customization inside a conditional that tests whether
the function or facility is available, like this:
</p>
<div class="example">
<pre class="example-preformatted">(if (fboundp 'blink-cursor-mode)
    (blink-cursor-mode 0))

(if (boundp 'coding-category-utf-8)
    (set-coding-priority '(coding-category-utf-8)))
</pre></div>

<p>You can also simply disregard the errors that occur if the
function is not defined.
</p>
<div class="example">
<pre class="example-preformatted">(ignore-errors (set-face-background 'region &quot;grey75&quot;))
</pre></div>

<p>A <code class="code">setq</code> on a variable which does not exist is generally
harmless, so those do not need a conditional.
</p>
</li><li>Using <code class="code">use-package</code> to automatically load and configure a
package.

<div class="example">
<pre class="example-preformatted">(use-package hi-lock
  :defer t
  :init (add-hook 'some-hook 'hi-lock-mode)
  :config (use-package my-hi-lock)
  :bind ((&quot;M-o l&quot; . highlight-lines-matching-regexp)
         (&quot;M-o r&quot; . highlight-regexp)
         (&quot;M-o w&quot; . highlight-phrase)))
</pre></div>

<p>This will load <code class="code">hi-lock</code> when some of its commands or variables
are first used, bind 3 keys to its commands, and additionally load the
<code class="code">my-hi-lock</code> package (presumably further customizing
<code class="code">hi-lock</code>) after loading <code class="code">hi-lock</code>.  The <code class="code">use-package</code>
facility is fully documented in its own manual, see <cite class="cite"><a href="../use-package_epub3/index.html#Top">use-package User manual</a></cite>.
</p></li></ul>

</div>
<div class="subsection-level-extent" id="Terminal-Init">
<h4 class="subsection" id="Terminal_002dspecific-Initialization">50.4.3 Terminal-specific Initialization</h4>

<a class="index-entry-id" id="index-term_002dfile_002daliases"></a>
<p>Each terminal type can have a Lisp library to be loaded into Emacs when
it is run on that type of terminal.  For a terminal type named
<var class="var">termtype</var>, the library is called <samp class="file">term/<var class="var">termtype</var></samp>.
(If there is an entry of the form <code class="code">(<var class="var">termtype</var> . <var class="var">alias</var>)</code>
in the <code class="code">term-file-aliases</code> association list, Emacs uses
<var class="var">alias</var> in place of <var class="var">termtype</var>.)  The library is
found by searching the directories <code class="code">load-path</code> as usual and trying the
suffixes &#8216;<samp class="samp">.elc</samp>&#8217; and &#8216;<samp class="samp">.el</samp>&#8217;.  Normally it appears in the
subdirectory <samp class="file">term</samp> of the directory where most Emacs libraries are
kept.
</p>
<p>The usual purpose of the terminal-specific library is to map the
escape sequences used by the terminal&#8217;s function keys onto more
meaningful names, using <code class="code">input-decode-map</code>.  See the file
<samp class="file">term/lk201.el</samp> for an example of how this is done.  Many function
keys are mapped automatically according to the information in the
Termcap data base; the terminal-specific library needs to map only the
function keys that Termcap does not specify.
</p>
<p>When the terminal type contains a hyphen, only the part of the name
before the first hyphen is significant in choosing the library name.
Thus, terminal types &#8216;<samp class="samp">aaa-48</samp>&#8217; and &#8216;<samp class="samp">aaa-30-rv</samp>&#8217; both use
the library <samp class="file">term/aaa</samp>.  The code in the library can use
<code class="code">(getenv &quot;TERM&quot;)</code> to find the full terminal type name.
</p>
<a class="index-entry-id" id="index-term_002dfile_002dprefix"></a>
<p>The library&#8217;s name is constructed by concatenating the value of the
variable <code class="code">term-file-prefix</code> and the terminal type.  Your <samp class="file">.emacs</samp>
file can prevent the loading of the terminal-specific library by setting
<code class="code">term-file-prefix</code> to <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-tty_002dsetup_002dhook"></a>
<p>Emacs runs the hook <code class="code">tty-setup-hook</code> at the end of
initialization, after both your <samp class="file">.emacs</samp> file and any
terminal-specific library have been read in.  Add hook functions to this
hook if you wish to override part of any of the terminal-specific
libraries and to define initializations for terminals that do not have a
library.  See <a class="xref" href="#Hooks">Hooks</a>.
</p>
</div>
<div class="subsection-level-extent" id="Find-Init">
<h4 class="subsection" id="How-Emacs-Finds-Your-Init-File">50.4.4 How Emacs Finds Your Init File</h4>

<p>Emacs normally finds your init file in a location under your home
directory<a class="footnote" id="DOCF24" href="#FOOT24"><sup>24</sup></a>.  See <a class="xref" href="#Init-File">The Emacs Initialization File</a>.
</p>
<p>Emacs looks for your init file using the filenames <samp class="file">~/.emacs.el</samp>,
<samp class="file">~/.emacs</samp>, or <samp class="file">~/.emacs.d/init.el</samp> in that order; you can
choose to use any one of these names.  (Note that only the locations
directly in your home directory have a leading dot in the location&#8217;s
basename.)
</p>
<p>Emacs can also look in an XDG-compatible location for <samp class="file">init.el</samp>,
the default is the directory <samp class="file">~/.config/emacs</samp>.  This can be
overridden by setting <code class="env">XDG_CONFIG_HOME</code> in your environment, its
value replaces <samp class="file">~/.config</samp> in the name of the default XDG init
file.  However <samp class="file">~/.emacs.d</samp>, <samp class="file">~/.emacs</samp>, and
<samp class="file">~/.emacs.el</samp> are always preferred if they exist, which means
that you must delete or rename them in order to use the XDG location.
</p>
<p>Note also that if neither the XDG location nor <samp class="file">~/.emacs.d</samp>
exist, then Emacs will create <samp class="file">~/.emacs.d</samp> (and therefore use it
during subsequent invocations).
</p>
<p>Emacs will set <code class="code">user-emacs-directory</code> to the directory it decides
to use.
</p>
<p>Although this is backward-compatible with older Emacs versions, modern
POSIX platforms prefer putting your initialization files under
<samp class="file">~/.config</samp> so that troubleshooting a problem that might be due
to a bad init file, or archiving a collection of init files, can be
done by renaming that directory.  To help older Emacs versions find
configuration files in their current default locations, you can
execute the following Emacs Lisp code:
</p>
<div class="example">
<pre class="example-preformatted">(make-symbolic-link &quot;.config/emacs&quot; &quot;~/.emacs.d&quot;)
</pre></div>

<p>However, if you run Emacs from a shell started by <code class="code">su</code> and
<code class="env">XDG_CONFIG_HOME</code> is not set in your environment, Emacs
tries to find your own initialization files, not that of the user you are
currently pretending to be.  The idea is that you should get your own
editor customizations even if you are running as the super user.
</p>
<p>More precisely, Emacs first determines which user&#8217;s init file to use.
It gets your user name from the environment variables <code class="env">LOGNAME</code> and
<code class="env">USER</code>; if neither of those exists, it uses the effective user-ID.
If that user name matches the real user-ID, then Emacs uses <code class="env">HOME</code>;
otherwise, it looks up the home directory corresponding to that user
name in the system&#8217;s data base of users.
</p>
<p>For brevity the rest of the Emacs documentation generally uses just
the current default location <samp class="file">~/.emacs.d/init.el</samp> for the
init file.
</p>
</div>
<div class="subsection-level-extent" id="Init-Non_002dASCII">
<h4 class="subsection" id="Non_002dASCII-Characters-in-Init-Files">50.4.5 Non-<abbr class="acronym">ASCII</abbr> Characters in Init Files</h4>
<a class="index-entry-id" id="index-international-characters-in-_002eemacs"></a>
<a class="index-entry-id" id="index-non_002dASCII-characters-in-_002eemacs"></a>
<a class="index-entry-id" id="index-non_002dASCII-keys_002c-binding"></a>
<a class="index-entry-id" id="index-rebinding-non_002dASCII-keys"></a>

<p>Language and coding systems may cause problems if your init file
contains non-<abbr class="acronym">ASCII</abbr> characters, such as accented letters, in
strings or key bindings.
</p>
<p>If you want to use non-<abbr class="acronym">ASCII</abbr> characters in your init file,
you should put a &#8216;<samp class="samp">-*-coding:&#160;<var class="var">coding-system</var>-*-</samp>&#8217;<!-- /@w --> tag on
the first line of the init file, and specify a coding system that
supports the character(s) in question.  See <a class="xref" href="International.xhtml#Recognize-Coding">Recognizing Coding Systems</a>.  This
is because the defaults for decoding non-<abbr class="acronym">ASCII</abbr> text might
not yet be set up by the time Emacs reads those parts of your init
file which use such strings, possibly leading Emacs to decode those
strings incorrectly.  You should then avoid adding Emacs Lisp code
that modifies the coding system in other ways, such as calls to
<code class="code">set-language-environment</code>.
</p>
<p>An alternative to using non-<abbr class="acronym">ASCII</abbr> characters directly is
to use one of the character escape syntaxes described in
see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/General-Escape-Syntax.html#General-Escape-Syntax">General Escape Syntax</a> in <cite class="cite">The Emacs Lisp Reference
Manual</cite>, as they allow all Unicode codepoints to be specified using
only <abbr class="acronym">ASCII</abbr> characters.
</p>
<p>To bind non-<abbr class="acronym">ASCII</abbr> keys, you must use a vector (see <a class="pxref" href="#Init-Rebinding">Rebinding Keys in Your Init File</a>).  The string syntax cannot be used, since the
non-<abbr class="acronym">ASCII</abbr> characters will be interpreted as meta keys.  For
instance:
</p>
<div class="example">
<pre class="example-preformatted">(global-set-key [?<var class="var">char</var>] 'some-function)
</pre></div>

<p>Type <kbd class="kbd">C-q</kbd>, followed by the key you want to bind, to insert <var class="var">char</var>.
</p>
</div>
<div class="subsection-level-extent" id="Early-Init-File">
<h4 class="subsection" id="The-Early-Init-File">50.4.6 The Early Init File</h4>
<a class="index-entry-id" id="index-early-init-file"></a>
<a class="index-entry-id" id="index-early_002dinit_002eel-file"></a>

<p>Most customizations for Emacs should be put in the normal init file.
See <a class="xref" href="#Init-File">The Emacs Initialization File</a>.  However, it is sometimes necessary
to have customizations take effect during Emacs startup earlier than the
normal init file is processed.  Such customizations can be put in the early
init file, <samp class="file">~/.config/emacs/early-init.el</samp> or <samp class="file">~/.emacs.d/early-init.el</samp>.  This file is loaded before the
package system and GUI is initialized, so in it you can customize variables
that affect the package initialization process,
such as <code class="code">package-enable-at-startup</code>, <code class="code">package-load-list</code>, and
<code class="code">package-user-dir</code>.  Note that variables like <code class="code">package-archives</code>
which only affect the installation of new packages, and not the process of
making already-installed packages available, may be customized in the regular
init file.  See <a class="xref" href="Packages.xhtml#Package-Installation">Package Installation</a>.
</p>
<p>We do not recommend that you move into <samp class="file">early-init.el</samp>
customizations that can be left in the normal init files.  That is
because the early init file is read before the GUI is initialized, so
customizations related to GUI features will not work reliably in
<samp class="file">early-init.el</samp>.  By contrast, the normal init files are read
after the GUI is initialized.  If you must have customizations in the
early init file that rely on GUI features, make them run off hooks
provided by the Emacs startup, such as <code class="code">window-setup-hook</code> or
<code class="code">tty-setup-hook</code>.  See <a class="xref" href="#Hooks">Hooks</a>.
</p>
<p>For more information on the early init file, see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html#Init-File">Init File</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.
</p>
</div>
</div>
<div class="section-level-extent" id="Authentication">
<h3 class="section" id="Keeping-Persistent-Authentication-Information">50.5 Keeping Persistent Authentication Information</h3>

<p>Some Emacs packages, which connect to other services, require
authentication (see <a class="pxref" href="Minibuffer.xhtml#Passwords">Entering passwords</a>), e.g., see <a href="https://www.gnu.org/software/emacs/manual/html_node/gnus/index.html#Top">Gnus</a> in <cite class="cite">The
Gnus Manual</cite>, or <a href="https://www.gnu.org/software/emacs/manual/html_node/tramp/index.html#Top">Tramp</a> in <cite class="cite">The Tramp Manual</cite>.  Because
it might be annoying to provide the same user name and password again
and again, Emacs offers to keep this information persistent via the
<samp class="file">auth-source</samp> library.
</p>
<a class="index-entry-id" id="index-_007e_002f_002eauthinfo-file"></a>
<a class="index-entry-id" id="index-_007e_002f_002eauthinfo_002egpg-file"></a>
<a class="index-entry-id" id="index-_007e_002f_002enetrc-file"></a>
<p>By default, the authentication information is taken from the file
<samp class="file">~/.authinfo</samp> or <samp class="file">~/.authinfo.gpg</samp> or <samp class="file">~/.netrc</samp>.
These files have a syntax similar to netrc files as known from the
<code class="command">ftp</code> program, like this:
</p>
<div class="example">
<pre class="example-preformatted">machine <var class="var">mymachine</var> login <var class="var">myloginname</var> password <var class="var">mypassword</var> port <var class="var">myport</var>
</pre></div>

<p>Similarly, the <samp class="file">auth-source</samp> library supports multiple storage
backend, currently either the classic netrc backend, JSON files, the
Secret Service API, and pass, the standard unix password manager.
</p>
<a class="index-entry-id" id="index-auth_002dsources"></a>
<p>All these alternatives can be customized via the user option
<code class="code">auth-sources</code>, see <a href="https://www.gnu.org/software/emacs/manual/html_node/auth/Help-for-users.html#Help-for-users">Emacs auth-source</a> in <cite class="cite">Emacs auth-source</cite>.
</p>
<a class="index-entry-id" id="index-auth_002dsource_002dsave_002dbehavior"></a>
<p>When a password is entered interactively, which is not found via the
configured backend, some of the backends offer to save it
persistently.  This can be changed by customizing the user option
<code class="code">auth-source-save-behavior</code>.
</p>

</div>
</div>
<div class="footnotes-segment">
<h4 class="footnotes-heading">Footnotes</h4>

<h5 class="footnote-body-heading"><a id="FOOT23" href="#DOCF23">(23)</a></h5>
<p>On MS-DOS, the name of this file should be <samp class="file">_dir-locals.el</samp>, due
to limitations of the DOS filesystems.  If the filesystem is limited
to 8+3 file names, the name of the file will be truncated by the OS to
<samp class="file">_dir-loc.el</samp>.
</p>
<h5 class="footnote-body-heading"><a id="FOOT24" href="#DOCF24">(24)</a></h5>
<p>On MS-Windows, there&#8217;s no single directory considered by all programs
as &#8220;the home directory&#8221; of the user.  Emacs uses one of the
pertinent directories as the equivalent of your home directory; see
<a class="ref" href="Microsoft-Windows.xhtml#Windows-HOME">HOME and Startup Directories on MS-Windows</a>, for the details.
</p>
</div>



</body>
</html>
