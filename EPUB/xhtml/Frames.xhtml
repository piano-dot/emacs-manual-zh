<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>22 Frames and Graphical Displays (GNU Emacs Manual)</title>

<meta name="description" content="22 Frames and Graphical Displays (GNU Emacs Manual)"/>
<meta name="keywords" content="22 Frames and Graphical Displays (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="International.xhtml#International" rel="next" title="23 International Character Set Support"/>
<link href="Windows.xhtml#Windows" rel="prev" title="21 Multiple Windows"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Frames">

<h2 class="chapter" id="Frames-and-Graphical-Displays">22 Frames and Graphical Displays</h2>
<a class="index-entry-id" id="index-frames"></a>

<p>When Emacs is started on a graphical display, e.g., on the X Window
System, it occupies a graphical system-level display region.  In this
manual, we call this a <em class="dfn">frame</em>, reserving the word &#8220;window&#8221; for
the part of the frame used for displaying a buffer.  A frame initially
contains one window, but it can be subdivided into multiple windows
(see <a class="pxref" href="Windows.xhtml#Windows">Multiple Windows</a>).  A frame normally also contains a menu bar, tool
bar, and echo area.
</p>
<p>You can also create additional frames (see <a class="pxref" href="#Creating-Frames">Creating Frames</a>).
All frames created in the same Emacs session have access to the same
underlying buffers and other data.  For instance, if a buffer is being
shown in more than one frame, any changes made to it in one frame show
up immediately in the other frames too.
</p>
<p>Typing <kbd class="kbd">C-x C-c</kbd> closes all the frames on the current display,
and ends the Emacs session if it has no frames open on any other
displays (see <a class="pxref" href="Exiting.xhtml">Exiting Emacs</a>).  To close just the selected frame, type
<kbd class="kbd">C-x 5 0</kbd> (that is zero, not <kbd class="kbd">o</kbd>).
</p>
<p>This chapter describes Emacs features specific to graphical displays
(particularly mouse commands), and features for managing multiple
frames.  On text terminals, many of these features are unavailable.
However, it is still possible to create multiple frames on text
terminals; such frames are displayed one at a time, filling the entire
terminal screen (see <a class="pxref" href="#Text-Terminals">Text Terminals</a>).  It is also possible to use
the mouse on some text terminals (see <a class="pxref" href="#Text_002dOnly-Mouse">Using a Mouse in Text Terminals</a>, for doing
so on GNU and Unix systems; and
see <a class="pxref" href="Microsoft-Windows.xhtml#MS_002dDOS-Mouse">Mouse Usage on MS-DOS</a>,
for doing so on MS-DOS).  Menus are supported on all text terminals.
</p>

<div class="section-level-extent" id="Mouse-Commands">
<h3 class="section" id="Mouse-Commands-for-Editing">22.1 Mouse Commands for Editing</h3>
<a class="index-entry-id" id="index-mouse-buttons-_0028what-they-do_0029"></a>
<a class="index-entry-id" id="index-mouse_002c-selecting-text-using"></a>

<a class="index-entry-id" id="index-mouse_002d1"></a>
<a class="index-entry-id" id="index-mouse_002d2"></a>
<a class="index-entry-id" id="index-mouse_002d3"></a>
<dl class="table">
<dt><kbd class="kbd">mouse-1</kbd></dt>
<dd><p>Move point to where you click (<code class="code">mouse-set-point</code>).
</p>
</dd>
<dt><kbd class="kbd">Drag-mouse-1</kbd></dt>
<dd><p>Activate the region around the text selected by dragging, and put the
text in the primary selection (<code class="code">mouse-set-region</code>).
</p>
</dd>
<dt><kbd class="kbd">mouse-2</kbd></dt>
<dd><p>Move point to where you click, and insert the contents of the primary
selection there (<code class="code">mouse-yank-primary</code>).
</p>
</dd>
<dt><kbd class="kbd">mouse-3</kbd></dt>
<dd><p>If the region is active, move the nearer end of the region to the
click position; otherwise, set mark at the current value of point and
point at the click position.  Save the resulting region in the kill
ring; on a second click, kill it (<code class="code">mouse-save-then-kill</code>).
</p>
</dd>
<dt><kbd class="kbd">C-M-mouse-1</kbd></dt>
<dd><p>Activate a rectangular region around the text selected by dragging.
See <a class="xref" href="Killing.xhtml#Rectangles">Rectangles</a>.
</p></dd>
</dl>

<a class="index-entry-id" id="index-mouse_002dset_002dpoint"></a>
<p>The most basic mouse command is <code class="code">mouse-set-point</code>, which is
invoked by clicking with the left mouse button, <kbd class="kbd">mouse-1</kbd>, in the
text area of a window.  This moves point to the position where you
clicked.  If that window was not the selected window, it becomes the
selected window.  You can also activate a region by double-clicking
<kbd class="kbd">mouse-1</kbd> (see <a class="pxref" href="#Word-and-Line-Mouse">Mouse Commands for Words and Lines</a>).
</p>
<a class="index-entry-id" id="index-x_002dmouse_002dclick_002dfocus_002dignore_002dposition"></a>
<p>Normally, if the frame you clicked in was not the selected frame, it
is made the selected frame, in addition to selecting the window and
setting the cursor.  On the X Window System, you can change this by
setting the variable <code class="code">x-mouse-click-focus-ignore-position</code> to
<code class="code">t</code>.  In that case, the initial click on an unselected frame just
selects the frame, without doing anything else; clicking again selects
the window and sets the cursor position.
</p>
<a class="index-entry-id" id="index-mouse_002c-dragging"></a>
<a class="index-entry-id" id="index-mouse_002dset_002dregion"></a>
<p>Holding down <kbd class="kbd">mouse-1</kbd> and dragging the mouse over a stretch
of text activates the region around that text
(<code class="code">mouse-set-region</code>), placing the mark where you started holding
down the mouse button, and point where you release it (see <a class="pxref" href="Mark.xhtml#Mark">The Mark and the Region</a>).
In addition, the text in the region becomes the primary selection
(see <a class="pxref" href="Killing.xhtml#Primary-Selection">Cut and Paste with Other Window Applications</a>).
</p>
<a class="index-entry-id" id="index-mouse_002ddrag_002dcopy_002dregion"></a>
<p>If you change the variable <code class="code">mouse-drag-copy-region</code> to a
non-<code class="code">nil</code> value, dragging the mouse over a stretch of text also
adds the text to the kill ring.  The default is <code class="code">nil</code>.
</p>
<p>If this variable is <code class="code">non-empty</code>, only copy to the kill ring if
the region is non-empty.  For instance, if you mouse drag an area that
is less than a half a character, you&#8217;d normally get the empty string
in your kill ring, but with <code class="code">non-empty</code>, this short mouse drag
won&#8217;t affect the kill ring.
</p>
<a class="index-entry-id" id="index-mouse_002dscroll_002dmin_002dlines"></a>
<p>If you move the mouse off the top or bottom of the window while
dragging, the window scrolls at a steady rate until you move the mouse
back into the window.  This way, you can select regions that don&#8217;t fit
entirely on the screen.  The number of lines scrolled per step depends
on how far away from the window edge the mouse has gone; the variable
<code class="code">mouse-scroll-min-lines</code> specifies a minimum step size.
</p>
<a class="index-entry-id" id="index-mouse_002ddrag_002dmode_002dline_002dbuffer"></a>
<p>If you enable the option <code class="code">mouse-drag-mode-line-buffer</code> and
dragging files is supported by the window system, then dragging the
mouse on the buffer name portion of the mode line will drag that
buffer&#8217;s file to another program or frame.
</p>
<a class="index-entry-id" id="index-mouse_002dyank_002dprimary"></a>
<a class="index-entry-id" id="index-mouse_002dyank_002dat_002dclick"></a>
<p>Clicking with the middle mouse button, <kbd class="kbd">mouse-2</kbd>, moves point to
the position where you clicked and inserts the contents of the primary
selection (<code class="code">mouse-yank-primary</code>).  See <a class="xref" href="Killing.xhtml#Primary-Selection">Cut and Paste with Other Window Applications</a>.
This behavior is consistent with other X applications.  Alternatively,
you can rebind <kbd class="kbd">mouse-2</kbd> to <code class="code">mouse-yank-at-click</code>, which
performs a yank at the position you click.
</p>
<a class="index-entry-id" id="index-mouse_002dyank_002dat_002dpoint"></a>
<p>If you change the variable <code class="code">mouse-yank-at-point</code> to a
non-<code class="code">nil</code> value, <kbd class="kbd">mouse-2</kbd> does not move point; it inserts
the text at point, regardless of where you clicked or even which of
the frame&#8217;s windows you clicked on.  This variable affects both
<code class="code">mouse-yank-primary</code> and <code class="code">mouse-yank-at-click</code>.
</p>
<a class="index-entry-id" id="index-mouse_002dsave_002dthen_002dkill"></a>
<p>Clicking with the right mouse button, <kbd class="kbd">mouse-3</kbd>, runs the
command <code class="code">mouse-save-then-kill</code>.  This performs several actions
depending on where you click and the status of the region:
</p>
<ul class="itemize mark-bullet">
<li>If no region is active, clicking <kbd class="kbd">mouse-3</kbd> activates the region,
placing the mark where point was and point at the clicked position.

</li><li>If a region is active, clicking <kbd class="kbd">mouse-3</kbd> adjusts the nearer end
of the region by moving it to the clicked position.  The adjusted
region&#8217;s text is copied to the kill ring; if the text in the original
region was already on the kill ring, it replaces it there.

</li><li>If you originally specified the region using a double or triple
<kbd class="kbd">mouse-1</kbd>, so that the region is defined to consist of entire
words or lines (see <a class="pxref" href="#Word-and-Line-Mouse">Mouse Commands for Words and Lines</a>), then adjusting the
region with <kbd class="kbd">mouse-3</kbd> also proceeds by entire words or lines.

</li><li>If you use <kbd class="kbd">mouse-3</kbd> a second time consecutively, at the same
place, that kills the region already selected.  Thus, the simplest way
to kill text with the mouse is to click <kbd class="kbd">mouse-1</kbd> at one end, then
click <kbd class="kbd">mouse-3</kbd> twice at the other end.  To copy the text into the
kill ring without deleting it from the buffer, press <kbd class="kbd">mouse-3</kbd>
just once&#8212;or just drag across the text with <kbd class="kbd">mouse-1</kbd>.  Then you
can copy it elsewhere by yanking it.
</li></ul>

<p>The <code class="code">mouse-save-then-kill</code> command also obeys the variable
<code class="code">mouse-drag-copy-region</code> (described above).  If the value is
non-<code class="code">nil</code>, then whenever the command sets or adjusts the active
region, the text in the region is also added to the kill ring.  If the
latest kill ring entry had been added the same way, that entry is
replaced rather than making a new entry.
</p>
<p>Whenever you set the region using any of the mouse commands
described above, the mark will be deactivated by any subsequent
unshifted cursor motion command, in addition to the usual ways of
deactivating the mark.  See <a class="xref" href="Mark.xhtml#Shift-Selection">Shift Selection</a>.
</p>
<a class="index-entry-id" id="index-mouse-wheel"></a>
<a class="index-entry-id" id="index-mouse_002dwheel_002dmode"></a>
<a class="index-entry-id" id="index-Mouse-Wheel-minor-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Mouse-Wheel"></a>
<a class="index-entry-id" id="index-mouse_002dwheel_002dfollow_002dmouse"></a>
<a class="index-entry-id" id="index-mouse_002dwheel_002dscroll_002damount"></a>
<a class="index-entry-id" id="index-mouse_002dwheel_002dprogressive_002dspeed"></a>
<a class="index-entry-id" id="index-wheel_002dup_002c-a-mouse-event"></a>
<a class="index-entry-id" id="index-wheel_002ddown_002c-a-mouse-event"></a>
<a class="index-entry-id" id="index-wheel_002dleft_002c-a-mouse-event"></a>
<a class="index-entry-id" id="index-wheel_002dright_002c-a-mouse-event"></a>
<p>Some mice have a &#8220;wheel&#8221; which can be used for scrolling.  Emacs
supports scrolling windows with the mouse wheel, by default, on most
graphical displays.  To toggle this feature, use <kbd class="kbd">M-x
mouse-wheel-mode</kbd>.  The variables <code class="code">mouse-wheel-follow-mouse</code> and
<code class="code">mouse-wheel-scroll-amount</code> determine where and by how much
buffers are scrolled.  The variable
<code class="code">mouse-wheel-progressive-speed</code> determines whether the scroll
speed is linked to how fast you move the wheel.  This mode also
supports increasing or decreasing the font size, by default bound to
scrolling with the <kbd class="key">Ctrl</kbd> modifier.  When this mode is enabled,
mouse wheel produces special events like <code class="code">wheel-up</code> and
<code class="code">wheel-down</code>.  (Some older systems report them as <code class="code">mouse-4</code>
and <code class="code">mouse-5</code>.)  If the mouse has a horizontal scroll wheel, it
produces <code class="code">wheel-left</code> and <code class="code">wheel-right</code> events as well.
</p>
<a class="index-entry-id" id="index-mouse_002dwheel_002dscroll_002damount_002dhorizontal"></a>
<p>Emacs also supports horizontal scrolling with the <kbd class="key">Shift</kbd>
modifier.  Typing a numeric prefix arg (e.g., <kbd class="kbd">M-5</kbd>) before
starting horizontal scrolling changes its step value defined
by the user option <code class="code">mouse-wheel-scroll-amount-horizontal</code>.
</p>
<a class="index-entry-id" id="index-mouse_002dwheel_002dtilt_002dscroll"></a>
<a class="index-entry-id" id="index-mouse_002dwheel_002dflip_002ddirection"></a>
<p>If your mouse&#8217;s wheel can be tilted, or if your touchpad supports it,
then you can also enable horizontal scrolling by customizing the
variable <code class="code">mouse-wheel-tilt-scroll</code> to a non-<code class="code">nil</code> value.
By default, tilting the mouse wheel scrolls the window&#8217;s view
horizontally in the direction of the tilt: e.g., tilting to the right
scrolls the window to the right, so that the text displayed in the
window moves horizontally to the left.  If you&#8217;d like to reverse the
direction of horizontal scrolling, customize the variable
<code class="code">mouse-wheel-flip-direction</code> to a non-<code class="code">nil</code> value.
</p>
<p>When the mouse pointer is over an image in Image mode, see <a class="pxref" href="Files.xhtml#Image-Mode">Viewing Image Files</a>,
scrolling the mouse wheel with the <kbd class="key">Ctrl</kbd> modifier scales the image
under the mouse pointer, and scrolling the mouse wheel with the
<kbd class="key">Shift</kbd> modifier scrolls the image horizontally.
</p>

</div>
<div class="section-level-extent" id="Word-and-Line-Mouse">
<h3 class="section" id="Mouse-Commands-for-Words-and-Lines">22.2 Mouse Commands for Words and Lines</h3>

<p>These variants of <kbd class="kbd">mouse-1</kbd> select entire words or lines at a
time.  Emacs activates the region around the selected text, which is
also copied to the kill ring.
</p>
<dl class="table">
<dt><kbd class="kbd">Double-mouse-1</kbd></dt>
<dd><p>Select the text around the word or character which you click on.
</p>
<p>Double-clicking on a character with symbol syntax (such as
underscore, in C mode) selects the symbol surrounding that character.
Double-clicking on a character with open- or close-parenthesis syntax
selects the parenthetical grouping which that character starts or
ends.  Double-clicking on a character with string-delimiter syntax
(such as a single-quote or double-quote in C) selects the string
constant (Emacs uses heuristics to figure out whether that character
is the beginning or the end of it).
</p>
<p>Double-clicking on the beginning of a parenthetical grouping or
beginning string-delimiter moves point to the end of the region,
scrolling the buffer display forward if necessary to show the new
location of point.  Double-clicking on the end of a parenthetical
grouping or end string-delimiter keeps point at the end of the region
by default, so the beginning of the region will not be visible if it
is above the top of the window; setting the user option
<code class="code">mouse-select-region-move-to-beginning</code> to non-<code class="code">nil</code> changes
this to move point to the beginning of the region, scrolling the
display backward if necessary.
</p>
</dd>
<dt><kbd class="kbd">Double-Drag-mouse-1</kbd></dt>
<dd><p>Select the text you drag across, in units of whole words.
</p>
</dd>
<dt><kbd class="kbd">Triple-mouse-1</kbd></dt>
<dd><p>Select the line you click on.
</p>
</dd>
<dt><kbd class="kbd">Triple-Drag-mouse-1</kbd></dt>
<dd><p>Select the text you drag across, in units of whole lines.
</p></dd>
</dl>

</div>
<div class="section-level-extent" id="Mouse-References">
<h3 class="section" id="Following-References-with-the-Mouse">22.3 Following References with the Mouse</h3>
<a class="index-entry-id" id="index-mouse_002d1-_0028on-buttons_0029"></a>
<a class="index-entry-id" id="index-mouse_002d2-_0028on-buttons_0029"></a>
<a class="index-entry-id" id="index-hyperlinks"></a>
<a class="index-entry-id" id="index-links"></a>
<a class="index-entry-id" id="index-text-buttons"></a>
<a class="index-entry-id" id="index-buttons"></a>

<a class="index-entry-id" id="index-mouse_002dhighlight"></a>
<p>Some Emacs buffers include <em class="dfn">buttons</em>, or <em class="dfn">hyperlinks</em>:
pieces of text that perform some action (e.g., following a reference)
when activated (e.g., by clicking on them).  Usually, a button&#8217;s text
is visually highlighted: it is underlined, or a box is drawn around
it.  If you move the mouse over a button, the shape of the mouse
cursor changes and the button lights up.  If you change the variable
<code class="code">mouse-highlight</code> to <code class="code">nil</code>, Emacs disables this
highlighting.
</p>
<p>You can activate a button by moving point to it and typing
<kbd class="key">RET</kbd>, or by clicking either <kbd class="kbd">mouse-1</kbd> or <kbd class="kbd">mouse-2</kbd> on the
button.  For example, in a Dired buffer, each file name is a button;
activating it causes Emacs to visit that file (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>).  In a
<samp class="file">*Compilation*</samp> buffer, each error message is a button, and
activating it visits the source code for that error
(see <a class="pxref" href="Building.xhtml#Compilation">Running Compilations under Emacs</a>).
</p>
<p>Although clicking <kbd class="kbd">mouse-1</kbd> on a button usually activates the
button, if you hold the mouse button down for a period of time before
releasing it (specifically, for more than 450 milliseconds), then
Emacs moves point where you clicked, without activating the button.
In this way, you can use the mouse to move point over a button without
activating it.  Dragging the mouse over or onto a button has its usual
behavior of setting the region, and does not activate the button.
</p>
<a class="index-entry-id" id="index-mouse_002d1_002dclick_002dfollows_002dlink"></a>
<p>You can change how <kbd class="kbd">mouse-1</kbd> applies to buttons by customizing
the variable <code class="code">mouse-1-click-follows-link</code>.  If the value is a
positive integer, that determines how long you need to hold the mouse
button down for, in milliseconds, to cancel button activation; the
default is 450, as described in the previous paragraph.  If the value
is <code class="code">nil</code>, <kbd class="kbd">mouse-1</kbd> just sets point where you clicked, and
does not activate buttons.  If the value is <code class="code">double</code>, double
clicks activate buttons but single clicks just set point.
</p>
<a class="index-entry-id" id="index-mouse_002d1_002dclick_002din_002dnon_002dselected_002dwindows"></a>
<p>Normally, <kbd class="kbd">mouse-1</kbd> on a button activates the button even if it
is in a non-selected window.  If you change the variable
<code class="code">mouse-1-click-in-non-selected-windows</code> to <code class="code">nil</code>,
<kbd class="kbd">mouse-1</kbd> on a button in an unselected window moves point to the
clicked position and selects that window, without activating the
button.
</p>
</div>
<div class="section-level-extent" id="Menu-Mouse-Clicks">
<h3 class="section" id="Mouse-Clicks-for-Menus">22.4 Mouse Clicks for Menus</h3>

<p>Several mouse clicks with the <kbd class="key">Ctrl</kbd> and <kbd class="key">SHIFT</kbd> modifiers
bring up menus.
</p>
<dl class="table">
<dt><a id="index-C_002dmouse_002d1"></a><kbd class="kbd">C-mouse-1</kbd></dt>
<dd><p>This menu is for selecting a buffer.
</p>
<p>The MSB (&#8220;mouse select buffer&#8221;) global minor mode makes this
menu smarter and more customizable.  See <a class="xref" href="Buffers.xhtml#Buffer-Menus">Customizing Buffer Menus</a>.
</p>
</dd>
<dt><a id="index-C_002dmouse_002d2"></a><kbd class="kbd">C-mouse-2</kbd></dt>
<dd><p>This menu contains entries for examining faces and other text
properties, and well as for setting them (the latter is mainly useful
when editing enriched text; see <a class="pxref" href="Text.xhtml#Enriched-Text">Enriched Text</a>).
</p>
</dd>
<dt><a id="index-C_002dmouse_002d3"></a><kbd class="kbd">C-mouse-3</kbd></dt>
<dd><p>This menu is mode-specific.  For most modes if Menu-bar mode is on,
this menu has the same items as all the mode-specific menu-bar menus
put together.  Some modes may specify a different menu for this
button.  If Menu Bar mode is off, this menu contains all the items
which would be present in the menu bar&#8212;not just the mode-specific
ones&#8212;so that you can access them without having to display the menu
bar.
</p>
</dd>
<dt><kbd class="kbd">S-mouse-1</kbd></dt>
<dd><p>This menu is for changing the default face within the window&#8217;s buffer.
See <a class="xref" href="Display.xhtml#Text-Scale">Text Scale</a>.
</p></dd>
</dl>

<a class="index-entry-id" id="index-context-menu"></a>
<a class="index-entry-id" id="index-context_002dmenu_002dmode"></a>
<a class="index-entry-id" id="index-context_002dmenu_002dfunctions"></a>
<a class="index-entry-id" id="index-Down_002dmouse_002d3"></a>
<a class="index-entry-id" id="index-S_002dF10"></a>
<p>Many GUI applications use <kbd class="kbd">mouse-3</kbd> to display <em class="dfn">context
menus</em>: menus that provide access to various pertinent settings and
actions for the location and context of the mouse click.  If you
prefer this in Emacs over the default function of <kbd class="kbd">mouse-3</kbd>, which
is bound to the <code class="code">mouse-save-then-kill</code> command (see <a class="pxref" href="#Mouse-Commands">Mouse Commands for Editing</a>), you can enable the minor mode <code class="code">context-menu-mode</code>.
Then Emacs will show context menus when you click <kbd class="kbd">mouse-3</kbd>.  The
exact contents of these context menus depends on the current major
mode and the buffer contents around the place where you click the
mouse.  To customize the contents of the context menu, you can use the
variable <code class="code">context-menu-functions</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Major-Mode-Conventions.html#Major-Mode-Conventions">Major Mode
Conventions</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).
You can also invoke the context menu by pressing <kbd class="kbd">S-<kbd class="key">F10</kbd></kbd>.
</p>
</div>
<div class="section-level-extent" id="Mode-Line-Mouse">
<h3 class="section" id="Mode-Line-Mouse-Commands">22.5 Mode Line Mouse Commands</h3>
<a class="index-entry-id" id="index-mode-line_002c-mouse"></a>
<a class="index-entry-id" id="index-mouse-on-mode-line"></a>

<p>You can use mouse clicks on window mode lines to select and manipulate
windows.
</p>
<p>Some areas of the mode line, such as the buffer name, and major and minor
mode names, have their own special mouse bindings.  These areas are
highlighted when you hold the mouse over them, and information about
the special bindings will be displayed (see <a class="pxref" href="#Tooltips">Tooltips</a>).  This
section&#8217;s commands do not apply in those areas.
</p>
<dl class="table">
<dt><a id="index-mouse_002d1-_0028mode-line_0029"></a><kbd class="kbd">mouse-1</kbd></dt>
<dd><p><kbd class="kbd">mouse-1</kbd> on a mode line selects the window it belongs to.  By
dragging <kbd class="kbd">mouse-1</kbd> on the mode line, you can move it, thus
changing the height of the windows above and below.  Changing heights
with the mouse in this way never deletes windows, it just refuses to
make any window smaller than the minimum height.
</p>
</dd>
<dt><a id="index-mouse_002d2-_0028mode-line_0029"></a><kbd class="kbd">mouse-2</kbd></dt>
<dd><p><kbd class="kbd">mouse-2</kbd> on a mode line expands that window to fill its frame.
</p>
</dd>
<dt><a id="index-mouse_002d3-_0028mode-line_0029"></a><kbd class="kbd">mouse-3</kbd></dt>
<dd><p><kbd class="kbd">mouse-3</kbd> on a mode line deletes the window it belongs to.  If the
frame has only one window, it does nothing.
</p>
</dd>
<dt><kbd class="kbd">C-mouse-2</kbd></dt>
<dd><p><kbd class="kbd">C-mouse-2</kbd> on a mode line splits that window, producing two
side-by-side windows with the boundary running through the click
position (see <a class="pxref" href="Windows.xhtml#Split-Window">Splitting Windows</a>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-mouse_002d1-_0028scroll-bar_0029"></a>
<p>Furthermore, by clicking and dragging <kbd class="kbd">mouse-1</kbd> on the divider
between two side-by-side mode lines, you can move the vertical
boundary to the left or right.
</p>
<p>Note that resizing windows is affected by the value of
<code class="code">window-resize-pixelwise</code>, see <a class="ref" href="Windows.xhtml#Split-Window">Splitting Windows</a>.
</p>
</div>
<div class="section-level-extent" id="Creating-Frames">
<h3 class="section" id="Creating-Frames-1">22.6 Creating Frames</h3>
<a class="index-entry-id" id="index-creating-frames"></a>

<a class="index-entry-id" id="index-C_002dx-5"></a>
<p>The prefix key <kbd class="kbd">C-x 5</kbd> is analogous to <kbd class="kbd">C-x 4</kbd>.  Whereas
each <kbd class="kbd">C-x 4</kbd> command pops up a buffer in a different window in the
selected frame (see <a class="pxref" href="Windows.xhtml#Pop-Up-Window">Displaying in Another Window</a>), the <kbd class="kbd">C-x 5</kbd> commands use a
different frame.  If an existing visible or iconified (a.k.a.
&#8220;minimized&#8221;, see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Visibility-of-Frames.html#Visibility-of-Frames">Visibility of Frames</a> in <cite class="cite">The Emacs Lisp
Reference Manual</cite>) frame already displays the requested buffer, that
frame is raised and deiconified (&#8220;un-minimized&#8221;); otherwise, a new
frame is created on the current display terminal.
</p>
<p>The various <kbd class="kbd">C-x 5</kbd> commands differ in how they find or create the
buffer to select:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-make_002dframe_002dcommand"></a>
<a id="index-C_002dx-5-2"></a><kbd class="kbd">C-x 5 2</kbd></dt>
<dd><p>Create a new frame using the default frame parameters
(<code class="code">make-frame-command</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-clone_002dframe"></a>
<a id="index-C_002dx-5-c"></a><kbd class="kbd">C-x 5 c</kbd></dt>
<dd><p>Create a new frame using the window configuration and frame parameters
of the current frame (<code class="code">clone-frame</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x 5 b <var class="var">bufname</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Select buffer <var class="var">bufname</var> in another frame.  This runs
<code class="code">switch-to-buffer-other-frame</code>.
</p>
</dd>
<dt><kbd class="kbd">C-x 5 f <var class="var">filename</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Visit file <var class="var">filename</var> and select its buffer in another frame.  This
runs <code class="code">find-file-other-frame</code>.  See <a class="xref" href="Files.xhtml#Visiting">Visiting Files</a>.
</p>
</dd>
<dt><kbd class="kbd">C-x 5 d <var class="var">directory</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Select a Dired buffer for directory <var class="var">directory</var> in another frame.
This runs <code class="code">dired-other-frame</code>.  See <a class="xref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>.
</p>
</dd>
<dt><kbd class="kbd">C-x 5 m</kbd></dt>
<dd><p>Start composing a mail message in another frame.  This runs
<code class="code">compose-mail-other-frame</code>.  It is the other-frame variant of
<kbd class="kbd">C-x m</kbd>.  See <a class="xref" href="Sending-Mail.xhtml#Sending-Mail">Sending Mail</a>.
</p>
</dd>
<dt><kbd class="kbd">C-x 5 .</kbd></dt>
<dd><p>Find the definition of an identifier in another frame.  This runs
<code class="code">xref-find-definitions-other-frame</code>, the multiple-frame variant
of <kbd class="kbd">M-.</kbd>.  See <a class="xref" href="Maintaining.xhtml#Xref">Find Identifier References</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-find_002dfile_002dread_002donly_002dother_002dframe"></a>
<a id="index-C_002dx-5-r"></a><kbd class="kbd">C-x 5 r <var class="var">filename</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Visit file <var class="var">filename</var> read-only, and select its buffer in another
frame.  This runs <code class="code">find-file-read-only-other-frame</code>.
See <a class="xref" href="Files.xhtml#Visiting">Visiting Files</a>.
</p>
</dd>
<dt><kbd class="kbd">C-x 5 5</kbd></dt>
<dd><p>A more general prefix command that affects the buffer displayed by the
next command invoked immediately after this prefix command
(<code class="code">other-frame-prefix</code>).  It requests the buffer of the next
command to be displayed in another frame.
</p></dd>
</dl>

<p>You can control the appearance and behavior of the newly-created
frames by specifying <em class="dfn">frame parameters</em>.  See <a class="xref" href="#Frame-Parameters">Frame Parameters</a>.
</p>
</div>
<div class="section-level-extent" id="Frame-Commands">
<h3 class="section" id="Frame-Commands-1">22.7 Frame Commands</h3>

<p>The following commands are used to delete and operate on frames:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-delete_002dframe"></a>
<a id="index-C_002dx-5-0"></a><kbd class="kbd">C-x 5 0</kbd></dt>
<dd><p>Delete the selected frame (<code class="code">delete-frame</code>).  This signals an
error if there is only one frame.
</p>
</dd>
<dt><a class="index-entry-id" id="index-undelete_002dframe"></a>
<a class="index-entry-id" id="index-undelete_002dframe_002dmode"></a>
<a id="index-C_002dx-5-u"></a><kbd class="kbd">C-x 5 u</kbd></dt>
<dd><p>When <code class="code">undelete-frame-mode</code> is enabled, undelete one of the 16
most recently deleted frames.  Without a prefix argument, undelete the
most recently deleted frame.  With a numerical prefix argument between
1 and 16, where 1 is the most recently deleted frame, undelete the
corresponding deleted frame.
</p>
</dd>
<dt><a id="index-C_002dz-_0028X-windows_0029"></a><kbd class="kbd">C-z</kbd></dt>
<dd><p>Minimize (or iconify) the selected Emacs frame
(<code class="code">suspend-frame</code>).  See <a class="xref" href="Exiting.xhtml">Exiting Emacs</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-other_002dframe"></a>
<a id="index-C_002dx-5-o"></a><kbd class="kbd">C-x 5 o</kbd></dt>
<dd><p>Select another frame, and raise it.  If you repeat this command, it
cycles through all the frames on your terminal.
</p>
</dd>
<dt><a class="index-entry-id" id="index-delete_002dother_002dframes"></a>
<a id="index-C_002dx-5-1"></a><kbd class="kbd">C-x 5 1</kbd></dt>
<dd><p>Delete all frames on the current terminal, except the selected one.
</p>
</dd>
<dt><a class="index-entry-id" id="index-toggle_002dframe_002dmaximized"></a>
<a id="index-M_002dF10"></a><kbd class="kbd">M-<kbd class="key">F10</kbd></kbd></dt>
<dd><p>Toggle the maximization state of the current frame.  When a frame is
maximized, it fills the screen.
</p>
</dd>
<dt><a class="index-entry-id" id="index-toggle_002dframe_002dfullscreen"></a>
<a id="index-F11"></a><kbd class="kbd"><kbd class="key">F11</kbd></kbd></dt>
<dd><p>Toggle full-screen mode for the current frame.  (The difference
between full-screen and maximized is normally that the former
hides window manager decorations, giving slightly more screen space to
Emacs itself.)
</p></dd>
</dl>

<a class="index-entry-id" id="index-frame_002dresize_002dpixelwise"></a>
<p>Note that with some window managers you may have to customize the
variable <code class="code">frame-resize-pixelwise</code> to a non-<code class="code">nil</code> value in
order to make a frame truly maximized or full-screen.  This
variable, when set to a non-<code class="code">nil</code> value, in general allows
resizing frames at pixel resolution, rather than in integral multiples
of lines and columns.
</p>
<p>The <kbd class="kbd">C-x 5 0</kbd> (<code class="code">delete-frame</code>) command deletes the selected
frame.  However, it will refuse to delete the last frame in an Emacs
session, to prevent you from losing the ability to interact with the
Emacs session.  Note that when Emacs is run as a daemon (see <a class="pxref" href="Emacs-Server.xhtml#Emacs-Server">Using Emacs as a Server</a>), there is always a virtual frame that remains after all
the ordinary, interactive frames are deleted.  In this case, <kbd class="kbd">C-x
5 0</kbd> can delete the last interactive frame; you can use
<code class="command">emacsclient</code> to reconnect to the Emacs session.
</p>
<p>The <kbd class="kbd">C-x 5 1</kbd> (<code class="code">delete-other-frames</code>) command deletes all
other frames on the current terminal (this terminal refers to either a
graphical display, or a text terminal; see <a class="pxref" href="#Text-Terminals">Text Terminals</a>).
If the Emacs session has frames open on other graphical displays or
text terminals, those are not deleted.
</p>
<a class="index-entry-id" id="index-focus_002dfollows_002dmouse"></a>
<p>The <kbd class="kbd">C-x 5 o</kbd> (<code class="code">other-frame</code>) command selects the next
frame on the current terminal.  If you are using Emacs on the X Window
System with a window manager that selects (or <em class="dfn">gives focus to</em>)
whatever frame the mouse cursor is over, you have to change the
variable <code class="code">focus-follows-mouse</code> to <code class="code">t</code> in order for this
command to work properly.  Then invoking <kbd class="kbd">C-x 5 o</kbd> will also warp
the mouse cursor to the chosen frame.
</p>
</div>
<div class="section-level-extent" id="Fonts">
<h3 class="section" id="Fonts-1">22.8 Fonts</h3>
<a class="index-entry-id" id="index-fonts"></a>

<p>By default, Emacs displays text on graphical displays using a
10-point monospace font, and the font size can be changed
interactively (see <a class="pxref" href="Display.xhtml#Text-Scale">Text Scale</a>).
</p>
<p>There are several different ways to specify a different font:
</p>
<ul class="itemize mark-bullet">
<li>Click on &#8216;<samp class="samp">Set Default Font</samp>&#8217; in the &#8216;<samp class="samp">Options</samp>&#8217; menu.  This
makes the selected font the default on all existing graphical frames.
To save this for future sessions, click on &#8216;<samp class="samp">Save Options</samp>&#8217; in the
&#8216;<samp class="samp">Options</samp>&#8217; menu.

</li><li>Add a line to your init file, modifying the variable
<code class="code">default-frame-alist</code> to specify the <code class="code">font</code> parameter
(see <a class="pxref" href="#Frame-Parameters">Frame Parameters</a>), like this:

<div class="example">
<pre class="example-preformatted">(add-to-list 'default-frame-alist
             '(font . &quot;DejaVu Sans Mono-10&quot;))
</pre></div>

<p>This makes the font the default on all graphical frames created after
restarting Emacs with that init file.
</p>
</li><li><a class="index-entry-id" id="index-X-defaults-file"></a>
<a class="index-entry-id" id="index-X-resources-file"></a>
Add an &#8216;<samp class="samp">emacs.font</samp>&#8217; X resource setting to your X resource file,
like this:

<div class="example">
<pre class="example-preformatted">emacs.font: DejaVu Sans Mono-12
</pre></div>

<p>You must restart X, or use the <code class="command">xrdb</code> command, for the X
resources file to take effect.  See <a class="xref" href="X-Resources.xhtml#Resources">X Resources</a>.  Do not quote
font names in X resource files.
</p>
</li><li>If you are running Emacs on the GNOME desktop or Haiku, you can tell
Emacs to adjust the frame&#8217;s default font along with changes to the
default system font by setting the variable
<code class="code">font-use-system-font</code> to <code class="code">t</code> (the default is <code class="code">nil</code>).
For this to work, Emacs must have been compiled with support for
Gsettings (or the older Gconf).  (To be specific, the Gsettings
configuration names used are &#8216;<samp class="samp">org.gnome.desktop.interface
monospace-font-name</samp>&#8217; and &#8216;<samp class="samp">org.gnome.desktop.interface
font-name</samp>&#8217;.)

</li><li>Use the command line option &#8216;<samp class="samp">-fn</samp>&#8217; (or &#8216;<samp class="samp">--font</samp>&#8217;).  See <a class="xref" href="Emacs-Invocation.xhtml#Font-X">Font Specification Options</a>.
</li></ul>

<p>To check what font you&#8217;re currently using, the <kbd class="kbd">C-u C-x =</kbd>
command can be helpful.  It describes the character at point, and
names the font that it&#8217;s rendered in.
</p>
<a class="index-entry-id" id="index-fontconfig"></a>
<p>There are four different ways to express a font name.  The first is
to use a <em class="dfn">Fontconfig pattern</em>.  Fontconfig patterns have the
following form:
</p>
<div class="example">
<pre class="example-preformatted"><var class="var">fontname</var>[-<var class="var">fontsize</var>][:<var class="var">name1</var>=<var class="var">values1</var>][:<var class="var">name2</var>=<var class="var">values2</var>]...
</pre></div>

<p>Within this format, any of the elements in brackets may be omitted.
Here, <var class="var">fontname</var> is the <em class="dfn">family name</em> of the font, such as
&#8216;<samp class="samp">Monospace</samp>&#8217; or &#8216;<samp class="samp">DejaVu Sans Mono</samp>&#8217;; <var class="var">fontsize</var> is the
<em class="dfn">point size</em> of the font (one <em class="dfn">printer&#8217;s point</em> is about 1/72
of an inch); and the &#8216;<samp class="samp"><var class="var">name</var>=<var class="var">values</var></samp>&#8217; entries specify
settings such as the slant and weight of the font.  Each <var class="var">values</var>
may be a single value, or a list of values separated by commas.  In
addition, some property values are valid with only one kind of
property name, in which case the &#8216;<samp class="samp"><var class="var">name</var>=</samp>&#8217; part may be
omitted.
</p>
<p>Here is a list of common font properties:
</p>
<dl class="table">
<dt>&#8216;<samp class="samp">slant</samp>&#8217;</dt>
<dd><p>One of &#8216;<samp class="samp">italic</samp>&#8217;, &#8216;<samp class="samp">oblique</samp>&#8217;, or &#8216;<samp class="samp">roman</samp>&#8217;.
</p>
</dd>
<dt>&#8216;<samp class="samp">weight</samp>&#8217;</dt>
<dd><p>One of &#8216;<samp class="samp">light</samp>&#8217;, &#8216;<samp class="samp">medium</samp>&#8217;, &#8216;<samp class="samp">demibold</samp>&#8217;, &#8216;<samp class="samp">bold</samp>&#8217; or
&#8216;<samp class="samp">black</samp>&#8217;.
</p>
</dd>
<dt>&#8216;<samp class="samp">style</samp>&#8217;</dt>
<dd><p>Some fonts define special styles which are a combination of slant and
weight.  For instance, &#8216;<samp class="samp">Dejavu Sans</samp>&#8217; defines the &#8216;<samp class="samp">book</samp>&#8217;
style, which overrides the slant and weight properties.
</p>
</dd>
<dt>&#8216;<samp class="samp">width</samp>&#8217;</dt>
<dd><p>One of &#8216;<samp class="samp">condensed</samp>&#8217;, &#8216;<samp class="samp">normal</samp>&#8217;, or &#8216;<samp class="samp">expanded</samp>&#8217;.
</p>
</dd>
<dt>&#8216;<samp class="samp">spacing</samp>&#8217;</dt>
<dd><p>One of &#8216;<samp class="samp">monospace</samp>&#8217;, &#8216;<samp class="samp">proportional</samp>&#8217;, &#8216;<samp class="samp">dual-width</samp>&#8217;, or
&#8216;<samp class="samp">charcell</samp>&#8217;.
</p></dd>
</dl>

<p>Here are some examples of Fontconfig patterns:
</p>
<div class="example">
<pre class="example-preformatted">Monospace
Monospace-12
Monospace-12:bold
DejaVu Sans Mono:bold:italic
Monospace-12:weight=bold:slant=italic
</pre></div>

<p>For a more detailed description of Fontconfig patterns, see the
Fontconfig manual, which is distributed with Fontconfig and available
online at <a class="url" href="https://fontconfig.org/fontconfig-user.html">https://fontconfig.org/fontconfig-user.html</a>.
</p>
<p>On MS-Windows, only the subset of the form
<var class="var">fontname</var>[-<var class="var">fontsize</var>] is supported for all fonts; the full
Fontconfig pattern might not work for all of them.
</p>
<a class="index-entry-id" id="index-GTK-font-pattern"></a>
<p>The second way to specify a font is to use a <em class="dfn">GTK font pattern</em>.
These have the syntax
</p>
<div class="example">
<pre class="example-preformatted"><var class="var">fontname</var> [<var class="var">properties</var>] [<var class="var">fontsize</var>]
</pre></div>

<p>where <var class="var">fontname</var> is the family name, <var class="var">properties</var> is a list of
property values separated by spaces, and <var class="var">fontsize</var> is the point
size.  The properties that you may specify for GTK font patterns are
as follows:
</p>
<ul class="itemize mark-bullet">
<li>Slant properties: &#8216;<samp class="samp">Italic</samp>&#8217; or &#8216;<samp class="samp">Oblique</samp>&#8217;.  If omitted, the
default (roman) slant is implied.
</li><li>Weight properties: &#8216;<samp class="samp">Bold</samp>&#8217;, &#8216;<samp class="samp">Book</samp>&#8217;, &#8216;<samp class="samp">Light</samp>&#8217;,
&#8216;<samp class="samp">Medium</samp>&#8217;, &#8216;<samp class="samp">Semi-bold</samp>&#8217;, or &#8216;<samp class="samp">Ultra-light</samp>&#8217;.  If omitted,
&#8216;<samp class="samp">Medium</samp>&#8217; weight is implied.
</li><li>Width properties: &#8216;<samp class="samp">Semi-Condensed</samp>&#8217; or &#8216;<samp class="samp">Condensed</samp>&#8217;.  If
omitted, a default width is used.
</li></ul>

<p>Here are some examples of GTK font patterns:
</p>
<div class="example">
<pre class="example-preformatted">Monospace 12
Monospace Bold Italic 12
</pre></div>

<p>On MS-Windows, only the subset <var class="var">fontname</var> is supported.
</p>
<a class="index-entry-id" id="index-XLFD"></a>
<a class="index-entry-id" id="index-X-Logical-Font-Description"></a>
<p>The third way to specify a font is to use an <em class="dfn">XLFD</em> (<em class="dfn">X
Logical Font Description</em>).  This is the traditional method for
specifying fonts under X, and is also supported on MS-Windows.  Each
XLFD consists of fourteen words or numbers, separated by dashes, like
this:
</p>
<div class="example">
<pre class="example-preformatted">-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1
</pre></div>

<p>A wildcard character (&#8216;<samp class="samp">*</samp>&#8217;) in an XLFD matches any sequence of
characters (including none), and &#8216;<samp class="samp">?</samp>&#8217; matches any single
character.  However, matching is implementation-dependent, and can be
inaccurate when wildcards match dashes in a long name.  For reliable
results, supply all 14 dashes and use wildcards only within a field.
Case is insignificant in an XLFD.  The syntax for an XLFD is as
follows:
</p>
<div class="example">
<pre class="example-preformatted">-<var class="var">maker</var>-<var class="var">family</var>-<var class="var">weight</var>-<var class="var">slant</var>-<var class="var">widthtype</var>-<var class="var">style</var>...
...-<var class="var">pixels</var>-<var class="var">height</var>-<var class="var">horiz</var>-<var class="var">vert</var>-<var class="var">spacing</var>-<var class="var">width</var>-<var class="var">registry</var>-<var class="var">encoding</var>
</pre></div>

<p>The entries have the following meanings:
</p>
<dl class="table">
<dt><var class="var">maker</var></dt>
<dd><p>The name of the font manufacturer.
</p></dd>
<dt><var class="var">family</var></dt>
<dd><p>The name of the font family (e.g., &#8216;<samp class="samp">courier</samp>&#8217;).
</p></dd>
<dt><var class="var">weight</var></dt>
<dd><p>The font weight&#8212;normally either &#8216;<samp class="samp">bold</samp>&#8217;, &#8216;<samp class="samp">medium</samp>&#8217; or
&#8216;<samp class="samp">light</samp>&#8217;.  Some font names support other values.
</p></dd>
<dt><var class="var">slant</var></dt>
<dd><p>The font slant&#8212;normally &#8216;<samp class="samp">r</samp>&#8217; (roman), &#8216;<samp class="samp">i</samp>&#8217; (italic),
&#8216;<samp class="samp">o</samp>&#8217; (oblique), &#8216;<samp class="samp">ri</samp>&#8217; (reverse italic), or &#8216;<samp class="samp">ot</samp>&#8217; (other).
Some font names support other values.
</p></dd>
<dt><var class="var">widthtype</var></dt>
<dd><p>The font width&#8212;normally &#8216;<samp class="samp">normal</samp>&#8217;, &#8216;<samp class="samp">condensed</samp>&#8217;,
&#8216;<samp class="samp">semicondensed</samp>&#8217;, or &#8216;<samp class="samp">extended</samp>&#8217;.  Some font names support
other values.
</p></dd>
<dt><var class="var">style</var></dt>
<dd><p>An optional additional style name.  Usually it is empty&#8212;most XLFDs
have two hyphens in a row at this point.  The style name can also
specify a two-letter ISO-639 language name, like &#8216;<samp class="samp">ja</samp>&#8217; or
&#8216;<samp class="samp">ko</samp>&#8217;; some fonts that support CJK scripts have that spelled out
in the style name part.
</p></dd>
<dt><var class="var">pixels</var></dt>
<dd><p>The font height, in pixels.
</p></dd>
<dt><var class="var">height</var></dt>
<dd><p>The font height on the screen, measured in tenths of a printer&#8217;s
point.  This is the point size of the font, times ten.  For a given
vertical resolution, <var class="var">height</var> and <var class="var">pixels</var> are proportional;
therefore, it is common to specify just one of them and use &#8216;<samp class="samp">*</samp>&#8217;
for the other.
</p></dd>
<dt><var class="var">horiz</var></dt>
<dd><p>The horizontal resolution, in pixels per inch, of the screen for which
the font is intended.
</p></dd>
<dt><var class="var">vert</var></dt>
<dd><p>The vertical resolution, in pixels per inch, of the screen for which
the font is intended.  Normally the resolution of the fonts on your
system is the right value for your screen; therefore, you normally
specify &#8216;<samp class="samp">*</samp>&#8217; for this and <var class="var">horiz</var>.
</p></dd>
<dt><var class="var">spacing</var></dt>
<dd><p>This is &#8216;<samp class="samp">m</samp>&#8217; (monospace), &#8216;<samp class="samp">p</samp>&#8217; (proportional) or &#8216;<samp class="samp">c</samp>&#8217;
(character cell).
</p></dd>
<dt><var class="var">width</var></dt>
<dd><p>The average character width, in pixels, multiplied by ten.
</p></dd>
<dt><var class="var">registry</var></dt>
<dt><var class="var">encoding</var></dt>
<dd><p>The X font character set that the font depicts.  (X font character
sets are not the same as Emacs character sets, but they are similar.)
You can use the <code class="command">xfontsel</code> program to check which choices you
have.  Normally you should use &#8216;<samp class="samp">iso8859</samp>&#8217; for <var class="var">registry</var> and
&#8216;<samp class="samp">1</samp>&#8217; for <var class="var">encoding</var>.
</p></dd>
</dl>

<p>The fourth and final method of specifying a font is to use a font
nickname.  Certain fonts have shorter nicknames, which you can use
instead of a normal font specification.  For instance, &#8216;<samp class="samp">6x13</samp>&#8217; is
equivalent to
</p>
<div class="example">
<pre class="example-preformatted">-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1
</pre></div>

<p>This form is not supported on MS-Windows.
</p>
<a class="index-entry-id" id="index-client_002dside-fonts"></a>
<a class="index-entry-id" id="index-server_002dside-fonts"></a>
<p>On X, Emacs recognizes two types of fonts: <em class="dfn">client-side</em> fonts,
which are provided by the Xft and Fontconfig libraries, and
<em class="dfn">server-side</em> fonts, which are provided by the X server itself.
Most client-side fonts support advanced font features such as
antialiasing and subpixel hinting, while server-side fonts do not.
Fontconfig and GTK patterns match only client-side fonts.
</p>
<a class="index-entry-id" id="index-listing-system-fonts"></a>
<p>You will probably want to use a fixed-width default font&#8212;that is,
a font in which all characters have the same width.  For Xft and
Fontconfig fonts, you can use the <code class="command">fc-list</code> command to list
the available fixed-width fonts, like this:
</p>
<div class="example">
<pre class="example-preformatted">fc-list :spacing=mono
fc-list :spacing=charcell
</pre></div>

<p>For server-side X fonts, you can use the <code class="command">xlsfonts</code> program to
list the available fixed-width fonts, like this:
</p>
<div class="example">
<pre class="example-preformatted">xlsfonts -fn '*x*' | grep -E '^[0-9]+x[0-9]+'
xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-m*'
xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-c*'
</pre></div>

<p>Any font with &#8216;<samp class="samp">m</samp>&#8217; or &#8216;<samp class="samp">c</samp>&#8217; in the <var class="var">spacing</var> field of the
XLFD is a fixed-width font.  To see what a particular font looks like,
use the <code class="command">xfd</code> command.  For example:
</p>
<div class="example">
<pre class="example-preformatted">xfd -fn 6x13
</pre></div>

<p>displays the entire font &#8216;<samp class="samp">6x13</samp>&#8217;.
</p>
<p>While running Emacs, you can also set the font of a specific kind of
text (see <a class="pxref" href="Display.xhtml#Faces">Text Faces</a>), or a particular frame (see <a class="pxref" href="#Frame-Parameters">Frame Parameters</a>).
</p>
</div>
<div class="section-level-extent" id="Speedbar">
<h3 class="section" id="Speedbar-Frames">22.9 Speedbar Frames</h3>
<a class="index-entry-id" id="index-speedbar"></a>

<a class="index-entry-id" id="index-attached-frame-_0028of-speedbar_0029"></a>
<p>The <em class="dfn">speedbar</em> is a special frame for conveniently navigating in
or operating on another frame.  The speedbar, when it exists, is
always associated with a specific frame, called its <em class="dfn">attached
frame</em>; all speedbar operations act on that frame.
</p>
<p>Type <kbd class="kbd">M-x speedbar</kbd> to create the speedbar and associate it with
the current frame.  To dismiss the speedbar, type <kbd class="kbd">M-x speedbar</kbd>
again, or select the speedbar and type <kbd class="kbd">q</kbd>.  (You can also delete
the speedbar frame like any other Emacs frame.)  If you wish to
associate the speedbar with a different frame, dismiss it and call
<kbd class="kbd">M-x speedbar</kbd> from that frame.
</p>
<p>The speedbar can operate in various modes.  Its default mode is
<em class="dfn">File Display</em> mode, which shows the files in the current
directory of the selected window of the attached frame, one file per
line.  Clicking on a non-directory visits that file in the selected window
of the attached frame, and clicking on a directory shows that
directory in the speedbar (see <a class="pxref" href="#Mouse-References">Following References with the Mouse</a>).  Each line also
has a box, &#8216;<samp class="samp">[+]</samp>&#8217; or &#8216;<samp class="samp">&lt;+&gt;</samp>&#8217;, that you can click on to
<em class="dfn">expand</em> the contents of that item.  Expanding a directory adds
the contents of that directory to the speedbar display, underneath the
directory&#8217;s own line.  Expanding an ordinary file adds a list of the
tags in that file to the speedbar display; you can click on a tag name
to jump to that tag in the selected window of the attached frame.
When a file or directory is expanded, the &#8216;<samp class="samp">[+]</samp>&#8217; changes to
&#8216;<samp class="samp">[-]</samp>&#8217;; you can click on that box to <em class="dfn">contract</em> the item,
hiding its contents.
</p>
<p>You navigate through the speedbar using the keyboard, too.  Typing
<kbd class="key">RET</kbd> while point is on a line in the speedbar is equivalent to
clicking the item on the current line, and <kbd class="key">SPC</kbd> expands or
contracts the item.  <kbd class="kbd">U</kbd> displays the parent directory of the
current directory.  To copy, delete, or rename the file on the current
line, type <kbd class="kbd">C</kbd>, <kbd class="kbd">D</kbd>, and <kbd class="kbd">R</kbd> respectively.  To create a
new directory, type <kbd class="kbd">M</kbd>.
</p>
<p>Another general-purpose speedbar mode is <em class="dfn">Buffer Display</em> mode;
in this mode, the speedbar displays a list of Emacs buffers.  To
switch to this mode, type <kbd class="kbd">b</kbd> in the speedbar.  To return to File
Display mode, type <kbd class="kbd">f</kbd>.  You can also change the display mode by
clicking <kbd class="kbd">mouse-3</kbd> anywhere in the speedbar window (or
<kbd class="kbd">mouse-1</kbd> on the mode-line) and selecting &#8216;<samp class="samp">Displays</samp>&#8217; in the
pop-up menu.
</p>
<p>Some major modes, including Rmail mode, Info, and GUD, have
specialized ways of putting useful items into the speedbar for you to
select.  For example, in Rmail mode, the speedbar shows a list of Rmail
files, and lets you move the current message to another Rmail file by
clicking on its &#8216;<samp class="samp">&lt;M&gt;</samp>&#8217; box.
</p>
<p>For more details on using and programming the speedbar, See <a href="https://www.gnu.org/software/emacs/manual/html_node/speedbar/index.html#Top">Speedbar</a> in <cite class="cite">Speedbar Manual</cite>.
</p>
</div>
<div class="section-level-extent" id="Multiple-Displays">
<h3 class="section" id="Multiple-Displays-1">22.10 Multiple Displays</h3>
<a class="index-entry-id" id="index-multiple-displays"></a>
<a class="index-entry-id" id="index-display-server"></a>

<p>A single Emacs can talk to more than one X display.  Initially, Emacs
uses just one display&#8212;the one specified with the <code class="env">DISPLAY</code>
environment variable or with the &#8216;<samp class="samp">--display</samp>&#8217; option (see <a class="pxref" href="Emacs-Invocation.xhtml#Initial-Options">Initial Options</a>).  To connect to another display, use the command
<code class="code">make-frame-on-display</code>:
</p>
<a class="index-entry-id" id="index-make_002dframe_002don_002ddisplay"></a>
<dl class="table">
<dt><kbd class="kbd">M-x make-frame-on-display <kbd class="key">RET</kbd> <var class="var">display</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Create a new frame on display <var class="var">display</var>.
</p></dd>
</dl>

<p>A single X server can handle more than one screen.  When you open
frames on two screens belonging to one server, Emacs knows they share a
single keyboard, and it treats all the commands arriving from these
screens as a single stream of input.
</p>
<p>When you open frames on different X servers, Emacs makes a separate
input stream for each server.  Each server also has its own selected
frame.  The commands you enter with a particular X server apply to
that server&#8217;s selected frame.
</p>
<p>On multi-monitor displays it is possible to use the command
<code class="code">make-frame-on-monitor</code>:
</p>
<a class="index-entry-id" id="index-make_002dframe_002don_002dmonitor"></a>
<dl class="table">
<dt><kbd class="kbd">M-x make-frame-on-monitor <kbd class="key">RET</kbd> <var class="var">monitor</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Create a new frame on monitor <var class="var">monitor</var> whose screen area is
a part of the current display.
</p></dd>
</dl>

</div>
<div class="section-level-extent" id="Frame-Parameters">
<h3 class="section" id="Frame-Parameters-1">22.11 Frame Parameters</h3>
<a class="index-entry-id" id="index-default_002dframe_002dalist"></a>

<p>You can control the default appearance and behavior of all frames by
specifying a default list of <em class="dfn">frame parameters</em> in the variable
<code class="code">default-frame-alist</code>.  Its value should be a list of entries,
each specifying a parameter name and a value for that parameter.
These entries take effect whenever Emacs creates a new frame,
including the initial frame.
</p>
<a class="index-entry-id" id="index-frame-size_002c-specifying-default"></a>
<p>For example, you can add the following lines to your init file
(see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>) to set the default frame width to 90 character
columns, the default frame height to 40 character rows, and the
default font to &#8216;<samp class="samp">Monospace-10</samp>&#8217;:
</p>
<div class="example">
<pre class="example-preformatted">(add-to-list 'default-frame-alist '(width  . 90))
(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(font . &quot;Monospace-10&quot;))
</pre></div>

<p>For a list of frame parameters and their effects, see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Parameters.html#Frame-Parameters">Frame
Parameters</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.
</p>
<a class="index-entry-id" id="index-initial_002dframe_002dalist"></a>
<p>You can also specify a list of frame parameters which apply to just
the initial frame, by customizing the variable
<code class="code">initial-frame-alist</code>.
</p>
<p>If Emacs is compiled to use an X toolkit, frame parameters that
specify colors and fonts don&#8217;t affect menus and the menu bar, since
those are drawn by the toolkit and not directly by Emacs.
</p>
<p>Frame appearance and behavior can also be customized through X
resources (see <a class="pxref" href="X-Resources.xhtml#X-Resources">X Options and Resources</a>); these override the parameters of the
initial frame specified in your init file.
</p>
<p>Note that if you are using the desktop library to save and restore
your sessions, the frames to be restored are recorded in the desktop
file, together with their parameters.  When these frames are restored,
the recorded parameters take precedence over the frame parameters
specified by <code class="code">default-frame-alist</code> and <code class="code">initial-frame-alist</code>
in your init file.  See <a class="xref" href="Saving-Emacs-Sessions.xhtml">Saving Emacs Sessions</a>, for how to avoid
that.
</p>
</div>
<div class="section-level-extent" id="Scroll-Bars">
<h3 class="section" id="Scroll-Bars-1">22.12 Scroll Bars</h3>
<a class="index-entry-id" id="index-Scroll-Bar-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Scroll-Bar"></a>
<a class="index-entry-id" id="index-Vertical-Scroll-Bar"></a>

<p>On graphical displays, there is a <em class="dfn">vertical scroll bar</em> on the
side of each Emacs window.  Clicking <kbd class="kbd">mouse-1</kbd> on the scroll bar&#8217;s
up and down buttons scrolls the window by one line at a time (but some
toolkits allow you to customize the scroll bars to not have those
buttons).  Clicking <kbd class="kbd">mouse-1</kbd> above or below the scroll bar&#8217;s
inner box scrolls the window by nearly the entire height of the
window, like <kbd class="kbd">M-v</kbd> and <kbd class="kbd">C-v</kbd> respectively (see <a class="pxref" href="Basic.xhtml#Moving-Point">Changing the Location of Point</a>).  (This, too, can behave differently with some toolkits.)
Dragging the inner box scrolls continuously.
</p>
<p>If Emacs is compiled on the X Window System without X toolkit
support, the scroll bar behaves differently.  Clicking <kbd class="kbd">mouse-1</kbd>
anywhere on the scroll bar scrolls forward like <kbd class="kbd">C-v</kbd>, while
<kbd class="kbd">mouse-3</kbd> scrolls backward like <kbd class="kbd">M-v</kbd>.  Clicking <kbd class="kbd">mouse-2</kbd>
in the scroll bar lets you drag the inner box up and down.
</p>
<a class="index-entry-id" id="index-scroll_002dbar_002dmode"></a>
<a class="index-entry-id" id="index-toggle_002dscroll_002dbar"></a>
<p>To toggle the use of vertical scroll bars, type <kbd class="kbd">M-x
scroll-bar-mode</kbd>.  This command applies to all frames, including frames
yet to be created.  To toggle vertical scroll bars for just the selected
frame, use the command <kbd class="kbd">M-x toggle-scroll-bar</kbd>.
</p>
<a class="index-entry-id" id="index-scroll_002dbar_002dmode-1"></a>
<p>To control the use of vertical scroll bars at startup, customize the
variable <code class="code">scroll-bar-mode</code> (see <a class="pxref" href="Customization.xhtml#Customization">Customization</a>).  Its value
should be either <code class="code">right</code> (put scroll bars on the right side of
windows), <code class="code">left</code> (put them on the left), or <code class="code">nil</code> (disable
vertical scroll bars).  By default, Emacs puts scroll bars on the
right if it was compiled with GTK+ support on the X Window System, and
on MS-Windows or macOS; Emacs puts scroll bars on the left if compiled
on the X Window System without GTK+ support (following the old
convention for X applications).
</p>
<a class="index-entry-id" id="index-scroll_002dbar_002dwidth"></a>
<a class="index-entry-id" id="index-width-of-the-vertical-scroll-bar"></a>
<p>You can also use the X resource &#8216;<samp class="samp">verticalScrollBars</samp>&#8217; to enable
or disable the scroll bars (see <a class="pxref" href="X-Resources.xhtml#Resources">X Resources</a>).  To control the scroll
bar width, change the <code class="code">scroll-bar-width</code> frame parameter
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Parameters.html#Frame-Parameters">Frame Parameters</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).
</p>
<a class="index-entry-id" id="index-scroll_002dbar_002dadjust_002dthumb_002dportion"></a>
<a class="index-entry-id" id="index-overscrolling"></a>
<p>If you&#8217;re using Emacs on X (with GTK+ or Motif), you can customize the
variable <code class="code">scroll-bar-adjust-thumb-portion</code> to control
<em class="dfn">overscrolling</em> of the scroll bar, i.e., dragging the thumb down even
when the end of the buffer is visible.  If its value is
non-<code class="code">nil</code>, the scroll bar can be dragged downwards even if the
end of the buffer is shown; if <code class="code">nil</code>, the thumb will be at the
bottom when the end of the buffer is shown.  You cannot over-scroll
when the entire buffer is visible.
</p>
<a class="index-entry-id" id="index-scroll_002dbar-face"></a>
<p>The visual appearance of the scroll bars is controlled by the
<code class="code">scroll-bar</code> face.  (Some toolkits, such as GTK+ and MS-Windows,
ignore this face; the scroll-bar appearance there can only be
customized system-wide, for GTK+ see <a class="pxref" href="X-Resources.xhtml#GTK-resources">GTK+ resources</a>).
</p>
<a class="index-entry-id" id="index-vertical-border"></a>
<p>On graphical frames, vertical scroll bars implicitly serve to separate
side-by-side windows visually.  When vertical scroll bars are disabled,
Emacs by default separates such windows with the help of a one-pixel
wide <em class="dfn">vertical border</em>.  That border occupies the first pixel column
of the window on the right and may thus overdraw the leftmost pixels of
any glyph displayed there.  If these pixels convey important
information, you can make them visible by enabling window dividers, see
<a class="ref" href="#Window-Dividers">Window Dividers</a>.  To replicate the look of vertical borders, set
the <code class="code">right-divider-width</code> parameter of frames to one and have the
<code class="code">window-divider</code> face inherit from that of <code class="code">vertical-border</code>,
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Dividers.html#Window-Dividers">Window Dividers</a> in <cite class="cite">The Emacs Lisp Reference
Manual</cite>.
</p>
<a class="index-entry-id" id="index-Horizontal-Scroll-Bar"></a>
<a class="index-entry-id" id="index-Horizontal-Scroll-Bar-mode"></a>
<p>On graphical displays with toolkit support, Emacs may also supply a
<em class="dfn">horizontal scroll bar</em> on the bottom of each window.  Clicking
<kbd class="kbd">mouse-1</kbd> on that scroll bar&#8217;s left and right buttons scrolls the
window horizontally by one column at a time.  (Note that some toolkits
allow customizations of the scroll bar that cause these buttons not to
be shown.)  Clicking <kbd class="kbd">mouse-1</kbd> on the left or right of the scroll
bar&#8217;s inner box scrolls the window by four columns.  Dragging the
inner box scrolls the window continuously.
</p>
<p>Note that such horizontal scrolling can make the window&#8217;s position of
point disappear on the left or the right.  Typing a character to insert
text or moving point with a keyboard command will usually bring it back
into view.
</p>
<a class="index-entry-id" id="index-horizontal_002dscroll_002dbar_002dmode"></a>
<p>To toggle the use of horizontal scroll bars, type <kbd class="kbd">M-x
horizontal-scroll-bar-mode</kbd>.  This command applies to all frames,
including frames yet to be created.  To toggle horizontal scroll bars
for just the selected frame, use the command <kbd class="kbd">M-x
toggle-horizontal-scroll-bar</kbd>.
</p>
<a class="index-entry-id" id="index-horizontal_002dscroll_002dbar_002dmode-1"></a>
<p>To control the use of horizontal scroll bars at startup, customize the
variable <code class="code">horizontal-scroll-bar-mode</code>.
</p>
<a class="index-entry-id" id="index-scroll_002dbar_002dheight"></a>
<a class="index-entry-id" id="index-height-of-the-horizontal-scroll-bar"></a>
<p>You can also use the X resource &#8216;<samp class="samp">horizontalScrollBars</samp>&#8217; to enable
or disable horizontal scroll bars (see <a class="pxref" href="X-Resources.xhtml#Resources">X Resources</a>).  To control the
scroll bar height, change the <code class="code">scroll-bar-height</code> frame parameter
(see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Parameters.html#Frame-Parameters">Frame Parameters</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).
</p>
</div>
<div class="section-level-extent" id="Window-Dividers">
<h3 class="section" id="Window-Dividers-1">22.13 Window Dividers</h3>
<a class="index-entry-id" id="index-Window-Divider-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Window-Divider"></a>

<p>On graphical displays, you can use <em class="dfn">window dividers</em> in order to
separate windows visually.  Window dividers are bars that can be dragged
with the mouse, thus allowing you to easily resize adjacent windows.
</p>
<a class="index-entry-id" id="index-window_002ddivider_002dmode"></a>
<p>To toggle the display of window dividers, use the command <kbd class="kbd">M-x
window-divider-mode</kbd>.
</p>
<a class="index-entry-id" id="index-window_002ddivider_002ddefault_002dplaces"></a>
<p>To customize where dividers should appear, use the option
<code class="code">window-divider-default-places</code>.  Its value should be either
<code class="code">bottom-only</code> (to show dividers only on the bottom of windows),
<code class="code">right-only</code> (to show dividers only on the right of windows), or
<code class="code">t</code> (to show them on the bottom and on the right).
</p>
<a class="index-entry-id" id="index-window_002ddivider_002ddefault_002dbottom_002dwidth"></a>
<a class="index-entry-id" id="index-window_002ddivider_002ddefault_002dright_002dwidth"></a>
<p>To adjust the width of window dividers displayed by this mode
customize the options <code class="code">window-divider-default-bottom-width</code> and
<code class="code">window-divider-default-right-width</code>.
</p>
<p>When vertical scroll bars are disabled, dividers can be also useful to
make the first pixel column of a window visible, which would be otherwise
covered by the vertical border used to separate side-by-side windows
(see <a class="pxref" href="#Scroll-Bars">Scroll Bars</a>).
</p>
<p>For more details about window dividers see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Dividers.html#Window-Dividers">Window Dividers</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.
</p>
</div>
<div class="section-level-extent" id="Drag-and-Drop">
<h3 class="section" id="Drag-and-Drop-1">22.14 Drag and Drop</h3>
<a class="index-entry-id" id="index-drag-and-drop"></a>

<p>In most graphical desktop environments, Emacs has basic support for
<em class="dfn">drag and drop</em> operations.  For instance, dropping text onto an
Emacs frame inserts the text where it is dropped.  Dropping a file
onto an Emacs frame visits that file.  As a special case, dropping the
file on a Dired buffer moves or copies the file (according to the
conventions of the application it came from) into the directory
displayed in that buffer.
</p>
<a class="index-entry-id" id="index-dnd_002dopen_002dfile_002dother_002dwindow"></a>
<p>Dropping a file normally visits it in the window you drop it on.  If
you prefer to visit the file in a new window in such cases, customize
the variable <code class="code">dnd-open-file-other-window</code>.
</p>
<p>The XDND and Motif drag and drop protocols, and the old KDE 1.x
protocol, are currently supported.
</p>
<a class="index-entry-id" id="index-dnd_002dindicate_002dinsertion_002dpoint"></a>
<a class="index-entry-id" id="index-dnd_002dscroll_002dmargin"></a>

<p>It can be difficult to scroll a window or determine where dropped
text will be inserted while dragging text onto an Emacs window.
Setting the option <code class="code">dnd-indicate-insertion-point</code> to a
non-<code class="code">nil</code> value makes point move to the location any dropped text
will be inserted when the mouse moves in a window during drag, and
setting <code class="code">dnd-scroll-margin</code> to an integer value causes a window
to be scrolled if the mouse moves within that many lines of the top
or bottom of the window during drag.
</p>
<a class="index-entry-id" id="index-mouse_002ddrag_002dand_002ddrop_002dregion"></a>
<p>Emacs can also optionally drag the region with the mouse into
another portion of this or another buffer.  To enable that, customize
the variable <code class="code">mouse-drag-and-drop-region</code> to a non-<code class="code">nil</code>
value.  Normally, the text is moved, i.e. cut and pasted, when the
destination is the same buffer as the origin; dropping the region on
another buffer copies the text instead.  If the value of this variable
names a modifier key, such as &#8216;<samp class="samp">shift</samp>&#8217;, &#8216;<samp class="samp">control</samp>&#8217; or
&#8216;<samp class="samp">alt</samp>&#8217;, then pressing that modifier key when dropping the text
will copy it instead of cutting it, even if you drop on the same
buffer as the one from which the text came.
</p>
<a class="index-entry-id" id="index-mouse_002ddrag_002dand_002ddrop_002dregion_002dcut_002dwhen_002dbuffers_002ddiffer"></a>
<a class="index-entry-id" id="index-mouse_002ddrag_002dand_002ddrop_002dregion_002dshow_002dtooltip"></a>
<a class="index-entry-id" id="index-mouse_002ddrag_002dand_002ddrop_002dregion_002dshow_002dcursor"></a>
<p>In order to cut text even when source and destination buffers differ,
set the option
<code class="code">mouse-drag-and-drop-region-cut-when-buffers-differ</code> to a
non-<code class="code">nil</code> value.  By default, on a graphic display the selected
text is shown in a tooltip and point moves together with the mouse
cursor during dragging.  To suppress such behavior, set the options
<code class="code">mouse-drag-and-drop-region-show-tooltip</code> and/or
<code class="code">mouse-drag-and-drop-region-show-cursor</code> to <code class="code">nil</code>.
</p>
<a class="index-entry-id" id="index-mouse_002ddrag_002dand_002ddrop_002dregion_002dcross_002dprogram"></a>
<p>To drag text from Emacs to other programs, set the option
<code class="code">mouse-drag-and-drop-region-cross-program</code> to a non-<code class="code">nil</code>
value.
</p>
<p>On the X window system, some programs can drop files on Emacs,
expecting Emacs to save them.  Normally, Emacs will prompt for a file
name under which the file will be saved, and then open the file, but
that behavior can be changed by changing the variable
<code class="code">x-dnd-direct-save-function</code>.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Drag-and-Drop.html#Drag-and-Drop">Drag and Drop</a> in <cite class="cite">The
Emacs Lisp Reference Manual</cite>.
</p>
</div>
<div class="section-level-extent" id="Menu-Bars">
<h3 class="section" id="Menu-Bars-1">22.15 Menu Bars</h3>
<a class="index-entry-id" id="index-menu-bar-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Menu-Bar"></a>
<a class="index-entry-id" id="index-menu_002dbar_002dmode"></a>
<a class="index-entry-id" id="index-menu_002dbar_002dmode-1"></a>

<p>You can toggle the use of menu bars with <kbd class="kbd">M-x menu-bar-mode</kbd>.
With no argument, this command toggles Menu Bar mode, a global minor
mode.  With an argument, the command turns Menu Bar mode on if the
argument is positive, off if the argument is not positive.  To control
the use of menu bars at startup, customize the variable
<code class="code">menu-bar-mode</code>.
</p>
<a class="index-entry-id" id="index-C_002dmouse_002d3-_0028when-menu-bar-is-disabled_0029"></a>
<p>Expert users often turn off the menu bar, especially on text
terminals, where this makes one additional line available for text.
If the menu bar is off, you can still pop up a menu of its contents
with <kbd class="kbd">C-mouse-3</kbd> on a display which supports pop-up menus.
Or you can enable <code class="code">context-menu-mode</code> and customize the variable
<code class="code">context-menu-functions</code> to pop up a context menu with
<kbd class="kbd">mouse-3</kbd>.  See <a class="xref" href="#Menu-Mouse-Clicks">Mouse Clicks for Menus</a>.
</p>
<p>See <a class="xref" href="Screen.xhtml#Menu-Bar">The Menu Bar</a>, for information on how to invoke commands with the
menu bar.  See <a class="xref" href="X-Resources.xhtml#X-Resources">X Options and Resources</a>, for how to customize the menu bar
menus&#8217; visual appearance.
</p>
</div>
<div class="section-level-extent" id="Tool-Bars">
<h3 class="section" id="Tool-Bars-1">22.16 Tool Bars</h3>
<a class="index-entry-id" id="index-tool-bar-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Tool-Bar"></a>
<a class="index-entry-id" id="index-icons_002c-toolbar"></a>

<p>On graphical displays, Emacs puts a <em class="dfn">tool bar</em> at the top of
each frame, just below the menu bar.  This is a row of icons which you
can click on with the mouse to invoke various commands.
</p>
<p>The global (default) tool bar contains general commands.  Some major
modes define their own tool bars; whenever a buffer with such a major
mode is current, the mode&#8217;s tool bar replaces the global tool bar.
</p>
<a class="index-entry-id" id="index-tool_002dbar_002dmode"></a>
<a class="index-entry-id" id="index-tool_002dbar_002dmode-1"></a>
<p>To toggle the use of tool bars, type <kbd class="kbd">M-x tool-bar-mode</kbd>.  This
command applies to all frames, including frames yet to be created.  To
control the use of tool bars at startup, customize the variable
<code class="code">tool-bar-mode</code>.
</p>
<a class="index-entry-id" id="index-tool_002dbar_002dstyle"></a>
<a class="index-entry-id" id="index-Tool-Bar-style"></a>
<p>When Emacs is compiled with GTK+ support, each tool bar item can
consist of an image, or a text label, or both.  By default, Emacs
follows the Gnome desktop&#8217;s tool bar style setting; if none is
defined, it displays tool bar items as just images.  To impose a
specific tool bar style, customize the variable <code class="code">tool-bar-style</code>.
</p>
<a class="index-entry-id" id="index-Tool-Bar-position"></a>
<p>You can also control the placement of the tool bar for the GTK+ tool
bar with the frame parameter <code class="code">tool-bar-position</code>.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Parameters.html#Frame-Parameters">Frame
Parameters</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.
</p>
<p>NS builds consider the tool bar to be a window decoration, and
therefore do not display it when a window is undecorated.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Parameters.html#Frame-Parameters">Frame
Parameters</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.  On macOS the
tool bar is hidden when the frame is put into fullscreen, but can be
displayed by moving the mouse pointer to the top of the screen.
</p>
</div>
<div class="section-level-extent" id="Tab-Bars">
<h3 class="section" id="Tab-Bars-1">22.17 Tab Bars</h3>
<a class="index-entry-id" id="index-tab-bar-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Tab-Bar"></a>
<a class="index-entry-id" id="index-tabs_002c-on-the-Tab-Bar"></a>

<p>On graphical displays and on text terminals, Emacs can optionally
display a <em class="dfn">Tab Bar</em> at the top of each frame, just below the menu
bar (see <a class="pxref" href="#Menu-Bars">Menu Bars</a>) and above or below the tool bar (see <a class="pxref" href="#Tool-Bars">Tool Bars</a>) depending on the variable <code class="code">tab-bar-position</code>.
The Tab Bar is a row of <em class="dfn">tabs</em>&#8212;buttons that you can click to
switch between window configurations.
</p>
<p>Each tab on the Tab Bar represents a named persistent window
configuration of its frame, i.e., how that frame is partitioned into
windows and which buffer is displayed in each window.  The tab&#8217;s name
is composed from the list of names of buffers shown in windows of that
window configuration.  Clicking on the tab switches to the window
configuration recorded by the tab; it is a configuration of windows
and buffers which was previously used in the frame when that tab was
the current tab.
</p>
<p>If you are using the desktop library to save and restore your
sessions (see <a class="pxref" href="Saving-Emacs-Sessions.xhtml">Saving Emacs Sessions</a>), the tabs from the Tab Bar are
recorded in the desktop file, together with their associated window
configurations, and will be available after restoring the session.
</p>
<p>Note that the Tab Bar is different from the Tab Line (see <a class="pxref" href="Windows.xhtml#Tab-Line">Window Tab Line</a>).
Whereas tabs on the Tab Line at the top of each window are used to
switch between buffers in the window, tabs on the Tab Bar at the top
of each frame are used to switch between window configurations
containing several windows showing one or more buffers.
</p>
<a class="index-entry-id" id="index-tab_002dbar_002dmode"></a>
<p>To toggle the use of Tab Bars, type <kbd class="kbd">M-x tab-bar-mode</kbd>.  This
command applies to all frames, including frames yet to be created.  To
control the use of tab bars at startup, customize the variable
<code class="code">tab-bar-mode</code> and save your customization.
</p>
<a class="index-entry-id" id="index-tab_002dbar_002dshow"></a>
<p>The variable <code class="code">tab-bar-show</code> controls whether the Tab Bar mode
is turned on automatically.  If the value is <code class="code">t</code>, then
<code class="code">tab-bar-mode</code> is enabled when using the commands that create new
tabs.  The value <code class="code">1</code> hides the tab bar when it has only one tab,
and shows it again when more tabs are created.  More generally, a
value that is a non-negative integer causes the Tab Bar to be
displayed only if the number of tabs is greater than that integer.
The value <code class="code">nil</code> always keeps the Tab Bar hidden; in this case
it&#8217;s still possible to switch between named window configurations
without displaying the Tab Bar by using <kbd class="kbd">M-x tab-next</kbd>, <kbd class="kbd">M-x
tab-switcher</kbd>, and other commands that provide completion on tab
names.  Also it&#8217;s possible to create and close tabs without the Tab
Bar by using commands <kbd class="kbd">M-x tab-new</kbd>, <kbd class="kbd">M-x tab-close</kbd>, etc.
</p>
<p>Note that a numerical value of <code class="code">tab-bar-show</code> can cause the Tab
Bar to be displayed on some frames, but not on others, depending on
the number of tabs created on each frame.
</p>
<a class="index-entry-id" id="index-toggle_002dframe_002dtab_002dbar"></a>
<p>To toggle the use of the Tab Bar only on the selected frame, type
<kbd class="kbd">M-x toggle-frame-tab-bar</kbd>.  This command allows to enable the
display of the Tab Bar on some frames and disable it on others,
regardless of the values of <code class="code">tab-bar-mode</code> and <code class="code">tab-bar-show</code>.
</p>
<a class="index-entry-id" id="index-C_002dx-t"></a>
<p>The prefix key <kbd class="kbd">C-x t</kbd> is analogous to <kbd class="kbd">C-x 5</kbd>.
Whereas each <kbd class="kbd">C-x 5</kbd> command pops up a buffer in a different frame
(see <a class="pxref" href="#Creating-Frames">Creating Frames</a>), the <kbd class="kbd">C-x t</kbd> commands use a different
tab with a different window configuration in the selected frame.
</p>
<p>The various <kbd class="kbd">C-x t</kbd> commands differ in how they find or create the
buffer to select.  The following commands can be used to select a buffer
in a new tab:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-tab_002dnew"></a>
<a class="index-entry-id" id="index-tab_002dbar_002dtab_002dname_002dfunction"></a>
<a id="index-C_002dx-t-2"></a><kbd class="kbd">C-x t 2</kbd></dt>
<dd><p>Add a new tab (<code class="code">tab-new</code>).  You can control the choice of the
buffer displayed in a new tab by customizing the variable
<code class="code">tab-bar-new-tab-choice</code>.  You can control the names given by
default to new tabs by customizing the variable
<code class="code">tab-bar-tab-name-function</code>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-switch_002dto_002dbuffer_002dother_002dtab"></a>
<a id="index-C_002dx-t-b"></a><kbd class="kbd">C-x t b <var class="var">bufname</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Select buffer <var class="var">bufname</var> in another tab.  This runs
<code class="code">switch-to-buffer-other-tab</code>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-find_002dfile_002dother_002dtab"></a>
<a id="index-C_002dx-t-f"></a><kbd class="kbd">C-x t f <var class="var">filename</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Visit the file <var class="var">filename</var> (see <a class="pxref" href="Files.xhtml#Visiting">Visiting Files</a>) and select its buffer
in another tab.  This runs <code class="code">find-file-other-tab</code>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-dired_002dother_002dtab"></a>
<a id="index-C_002dx-t-d"></a><kbd class="kbd">C-x t d <var class="var">directory</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Edit the specified <var class="var">directory</var> (see <a class="pxref" href="Dired.xhtml#Dired">Dired, the Directory Editor</a>) in another tab.
This runs <code class="code">dired-other-tab</code>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-other_002dtab_002dprefix"></a>
<a id="index-C_002dx-t-t"></a><kbd class="kbd">C-x t t</kbd></dt>
<dd><p>This is a prefix command (<code class="code">other-tab-prefix</code>) that affects the
next command invoked immediately after this prefix command.  It
requests the buffer displayed by the next command to be shown in
another tab.
</p></dd>
</dl>

<a class="index-entry-id" id="index-tab_002dbar_002dnew_002dtab_002dchoice"></a>
<p>By default, a new tab starts with the buffer that was
current before calling the command that adds a new tab.
To start a new tab with other buffers, customize the variable
<code class="code">tab-bar-new-tab-choice</code>.
</p>
<a class="index-entry-id" id="index-tab_002dbar_002dnew_002dtab_002dto"></a>
<p>The variable <code class="code">tab-bar-new-tab-to</code> defines where to place a new tab.
By default, a new tab is added on the right side of the current tab.
</p>
<p>The following commands can be used to delete tabs:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-tab_002dclose"></a>
<a class="index-entry-id" id="index-tab_002dbar_002dclose_002dlast_002dtab_002dchoice"></a>
<a id="index-C_002dx-t-0"></a><kbd class="kbd">C-x t 0</kbd></dt>
<dd><p>Close the selected tab (<code class="code">tab-close</code>).  This has no effect if there
is only one tab, unless the variable <code class="code">tab-bar-close-last-tab-choice</code>
is customized to a non-default value.
</p>
</dd>
<dt><a class="index-entry-id" id="index-tab_002dclose_002dother"></a>
<a id="index-C_002dx-t-1"></a><kbd class="kbd">C-x t 1</kbd></dt>
<dd><p>Close all tabs, except the selected tab, on the selected frame.
</p></dd>
</dl>

<a class="index-entry-id" id="index-tab_002dbar_002dclose_002dtab_002dselect"></a>
<p>The variable <code class="code">tab-bar-close-tab-select</code> defines what tab to
select after closing the current tab.  By default, it selects
a recently used tab.
</p>
<a class="index-entry-id" id="index-tab_002dundo"></a>
<p>The command <code class="code">tab-undo</code> restores the last closed tab.
</p>
<p>The following commands can be used to switch between tabs:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-C_002dTAB-1"></a>
<a class="index-entry-id" id="index-tab_002dnext"></a>
<a id="index-C_002dx-t-o"></a><kbd class="kbd">C-x t o</kbd></dt>
<dt><kbd class="kbd">C-<kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Switch to the next tab (<code class="code">tab-next</code>).  If you repeat this command,
it cycles through all the tabs on the selected frame.  With a positive
numeric argument <var class="var">n</var>, it switches to the <var class="var">n</var>th next tab; with
a negative argument &#8722;<var class="var">n</var>, it switches back to the <var class="var">n</var>th
previous tab.
</p>
</dd>
<dt><a class="index-entry-id" id="index-tab_002dprevious"></a>
<a id="index-S_002dC_002dTAB"></a><kbd class="kbd">S-C-<kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Switch to the previous tab (<code class="code">tab-previous</code>).  With a positive
numeric argument <var class="var">n</var>, it switches to the <var class="var">n</var>th previous tab;
with a negative argument &#8722;<var class="var">n</var>, it switches to the
<var class="var">n</var>th next tab.
</p>
</dd>
<dt><a class="index-entry-id" id="index-tab_002dswitch"></a>
<a id="index-C_002dx-t-RET"></a><kbd class="kbd">C-x t <kbd class="key">RET</kbd> <var class="var">tabname</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Switch to the tab by its name (<code class="code">tab-switch</code>), with completion on
all tab names.  The default value and the &#8220;future history&#8221; of tab
names is sorted by recency, so you can use <kbd class="kbd">M-n</kbd>
(<code class="code">next-history-element</code>) to get the name of the last visited tab,
the second last, and so on.
</p>
</dd>
<dt><a class="index-entry-id" id="index-M_002d1_002c-tab-bar"></a>
<a class="index-entry-id" id="index-tab_002dselect"></a>
<a class="index-entry-id" id="index-tab_002dbar_002dselect_002dtab_002dmodifiers"></a>
<a class="index-entry-id" id="index-tab_002dbar_002dtab_002dhints"></a>
<a id="index-C_002d1_002c-tab-bar"></a><kbd class="kbd"><var class="var">modifier</var>-<var class="var">tab-number</var></kbd></dt>
<dd><p>Switch to the tab by its number <var class="var">tab-number</var> (<code class="code">tab-select</code>).
After customizing the variable <code class="code">tab-bar-select-tab-modifiers</code> to
specify one or more <var class="var">modifier</var> keys, you can select a tab by its
ordinal number using one of the specified modifiers in combination
with the tab number to select.  The number 9 can be used to select the
last tab. You can select any modifiers supported by Emacs,
see <a class="pxref" href="Customization.xhtml#Modifier-Keys">Modifier Keys</a>.  To display the tab number alongside the tab
name, you can customize another variable <code class="code">tab-bar-tab-hints</code>.
This will help you decide which numerical key to press to select the
tab by its number.
</p>
</dd>
<dt><a class="index-entry-id" id="index-M_002d9_002c-tab-bar"></a>
<a class="index-entry-id" id="index-tab_002dlast"></a>
<a id="index-C_002d9_002c-tab-bar"></a><kbd class="kbd"><var class="var">modifier</var>-<kbd class="kbd">9</kbd></kbd></dt>
<dd><p>Switch to the last tab (<code class="code">tab-last</code>).  The key combination is
the modifier key defined by <code class="code">tab-bar-select-tab-modifiers</code> and
the key <kbd class="kbd">9</kbd>.  With a numeric argument <var class="var">n</var>, switch to the
<var class="var">n</var>th last tab.
</p>
</dd>
<dt><a class="index-entry-id" id="index-M_002d0_002c-tab-bar"></a>
<a class="index-entry-id" id="index-tab_002drecent"></a>
<a id="index-C_002d0_002c-tab-bar"></a><kbd class="kbd"><var class="var">modifier</var>-<kbd class="kbd">0</kbd></kbd></dt>
<dd><p>Switch to the recent tab (<code class="code">tab-recent</code>).  The key combination is
the modifier key defined by <code class="code">tab-bar-select-tab-modifiers</code> and
the key <kbd class="kbd">0</kbd>.  With a numeric argument <var class="var">n</var>, switch to the
<var class="var">n</var>th recent tab.
</p></dd>
</dl>

<p>The following commands can be used to operate on tabs:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-tab_002drename"></a>
<a id="index-C_002dx-t-r"></a><kbd class="kbd">C-x t r <var class="var">tabname</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Rename the current tab to <var class="var">tabname</var> (<code class="code">tab-rename</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-tab_002dmove"></a>
<a id="index-C_002dx-t-m"></a><kbd class="kbd">C-x t m</kbd></dt>
<dd><p>Move the current tab one position to the right (<code class="code">tab-move</code>).
With a positive numeric argument <var class="var">n</var>, move it that many positions
to the right; with a negative argument &#8722;<var class="var">n</var>, move it
<var class="var">n</var> positions to the left.
</p></dd>
</dl>

<p>You can use the mouse to operate on tabs.  Clicking <kbd class="kbd">mouse-2</kbd>
closes the tab.  Clicking <kbd class="kbd">mouse-3</kbd> pops up the context menu with
the items that operate on the clicked tab.  Dragging the tab with
<kbd class="kbd">mouse-1</kbd> moves it to another position on the tab bar.  Mouse
wheel scrolling switches to the next or previous tab.  Holding down
the <kbd class="key">SHIFT</kbd> key during scrolling moves the tab to the left or right.
</p>
<a class="index-entry-id" id="index-tab_002dbar_002dhistory_002dmode"></a>
<p>You can enable <code class="code">tab-bar-history-mode</code> to remember window
configurations used in every tab, and later restore them.
</p>
<dl class="table">
<dt><a id="index-tab_002dbar_002dhistory_002dback"></a><kbd class="kbd">M-x tab-bar-history-back</kbd></dt>
<dd><p>Restore a previous window configuration used in the current tab.
This navigates back in the history of window configurations.
</p>
</dd>
<dt><a id="index-tab_002dbar_002dhistory_002dforward"></a><kbd class="kbd">M-x tab-bar-history-forward</kbd></dt>
<dd><p>Cancel restoration of the previous window configuration.
This moves forward in the history of window configurations.
</p></dd>
</dl>

<p>It&#8217;s possible to customize the items displayed on the tab bar
by the user option <code class="code">tab-bar-format</code>.
</p>
</div>
<div class="section-level-extent" id="Dialog-Boxes">
<h3 class="section" id="Using-Dialog-Boxes">22.18 Using Dialog Boxes</h3>
<a class="index-entry-id" id="index-dialog-boxes"></a>

<a class="index-entry-id" id="index-use_002ddialog_002dbox"></a>
<p>A dialog box is a special kind of menu for asking you a yes-or-no
question or some other special question.  Many Emacs commands use a
dialog box to ask a yes-or-no question, if you used the mouse to
invoke the command that led to the question.
</p>
<p>To disable the use of dialog boxes, change the variable
<code class="code">use-dialog-box</code> to <code class="code">nil</code>.  In that case, Emacs always
performs yes-or-no prompts using the echo area and keyboard input.
This variable also controls whether to use file selection windows (but
those are not supported on all platforms).
</p>
<a class="index-entry-id" id="index-use_002dfile_002ddialog"></a>
<a class="index-entry-id" id="index-file-selection-dialog_002c-how-to-disable"></a>
<p>A file selection window is a special kind of dialog box for asking
for file names.  You can customize the variable <code class="code">use-file-dialog</code>
to suppress the use of file selection windows, even if you still want
other kinds of dialogs.  This variable has no effect if you have
suppressed all dialog boxes with the variable <code class="code">use-dialog-box</code>.
</p>
<a class="index-entry-id" id="index-x_002dgtk_002dshow_002dhidden_002dfiles"></a>
<a class="index-entry-id" id="index-x_002dgtk_002dfile_002ddialog_002dhelp_002dtext"></a>
<a class="index-entry-id" id="index-hidden-files_002c-in-GTK_002b-file-chooser"></a>
<a class="index-entry-id" id="index-help-text_002c-in-GTK_002b-file-chooser"></a>
<p>When Emacs is compiled with GTK+ support, it uses the GTK+ file
chooser dialog.  Emacs adds an additional toggle button to this
dialog, which you can use to enable or disable the display of hidden
files (files starting with a dot) in that dialog.  If you want this
toggle to be activated by default, change the variable
<code class="code">x-gtk-show-hidden-files</code> to <code class="code">t</code>.  In addition, Emacs adds
help text to the GTK+ file chooser dialog; to disable this help text,
change the variable <code class="code">x-gtk-file-dialog-help-text</code> to <code class="code">nil</code>.
</p>
</div>
<div class="section-level-extent" id="Tooltips">
<h3 class="section" id="Tooltips-1">22.19 Tooltips</h3>
<a class="index-entry-id" id="index-tooltips"></a>

<p><em class="dfn">Tooltips</em> are small special frames that display text
information at the current mouse position.  They activate when there
is a pause in mouse movement over some significant piece of text in a
window, or the mode line, or some other part of the Emacs frame such
as a tool bar button or menu item.
</p>
<a class="index-entry-id" id="index-tooltip_002dmode"></a>
<p>You can toggle the use of tooltips with the command <kbd class="kbd">M-x
tooltip-mode</kbd>.  When Tooltip mode is disabled, the help text is
displayed in the echo area instead.  To control the use of tooltips at
startup, customize the variable <code class="code">tooltip-mode</code>.
</p>
<p>The following variables provide customization options for tooltip
display:
</p>
<dl class="vtable">
<dt><a id="index-tooltip_002ddelay"></a><code class="code">tooltip-delay</code></dt>
<dd><p>This variable specifies how long Emacs should wait before displaying
the first tooltip.  The value is in seconds.
</p>
</dd>
<dt><a id="index-tooltip_002dshort_002ddelay"></a><code class="code">tooltip-short-delay</code></dt>
<dd><p>This variable specifies how long Emacs should wait before displaying
subsequent tooltips on different items, having already displayed the
first tooltip.  The value is in seconds.
</p>
</dd>
<dt><a id="index-tooltip_002dhide_002ddelay"></a><code class="code">tooltip-hide-delay</code></dt>
<dd><p>The number of seconds since displaying a tooltip to hide it, if the
mouse doesn&#8217;t move.
</p>
</dd>
<dt><a id="index-tooltip_002dx_002doffset"></a><code class="code">tooltip-x-offset</code></dt>
<dt><a id="index-tooltip_002dy_002doffset"></a><code class="code">tooltip-y-offset</code></dt>
<dd><p>The X and Y offsets, in pixels, of the left top corner of the tooltip
from the mouse pointer position.  Note that these are ignored if
<code class="code">tooltip-frame-parameters</code> was customized to include,
respectively, the <code class="code">left</code> and <code class="code">top</code> parameters.  The values
of the offsets should be chosen so that the tooltip doesn&#8217;t cover the
mouse pointer&#8217;s hot spot, or it might interfere with clicking the
mouse.
</p>
</dd>
<dt><a id="index-tooltip_002dframe_002dparameters"></a><code class="code">tooltip-frame-parameters</code></dt>
<dd><p>The frame parameters used for displaying tooltips.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Parameters.html#Frame-Parameters">Frame
Parameters</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>, and also
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Tooltips.html#Tooltips">Tooltips</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.
</p></dd>
</dl>

<p>For additional customization options for displaying tooltips, use
<kbd class="kbd">M-x customize-group <kbd class="key">RET</kbd> tooltip <kbd class="key">RET</kbd></kbd>.
</p>
<a class="index-entry-id" id="index-use_002dsystem_002dtooltips"></a>
<p>If Emacs is built with the GTK+ toolkit, Nextstep windowing, or
Haiku windowing support, it displays tooltips via the toolkit, using
the default appearance of the toolkit&#8217;s tooltips.<a class="footnote" id="DOCF7" href="#FOOT7"><sup>7</sup></a> To disable this, change the variable
<code class="code">use-system-tooltips</code> to <code class="code">nil</code>.  If you do this, or if Emacs
is built without the appropriate windowing support, most attributes of
the tooltip text are specified by the <code class="code">tooltip</code> face, and by X
resources (see <a class="pxref" href="X-Resources.xhtml#X-Resources">X Options and Resources</a>).
</p>
<p><em class="dfn">GUD tooltips</em> are special tooltips that show the values of
variables when debugging a program with GUD.  See <a class="xref" href="Building.xhtml#Debugger-Operation">Debugger Operation</a>.
</p>
</div>
<div class="section-level-extent" id="Mouse-Avoidance">
<h3 class="section" id="Mouse-Avoidance-1">22.20 Mouse Avoidance</h3>
<a class="index-entry-id" id="index-avoiding-mouse-in-the-way-of-your-typing"></a>
<a class="index-entry-id" id="index-mouse-avoidance"></a>

<p>On graphical terminals, the mouse pointer may obscure the text in
the Emacs frame.  Emacs provides two methods to avoid this problem.
</p>
<p>Firstly, Emacs hides the mouse pointer each time you type a
self-inserting character, if the pointer lies inside an Emacs frame;
moving the mouse pointer makes it visible again.  To disable this
feature, set the variable <code class="code">make-pointer-invisible</code> to <code class="code">nil</code>.
See <a class="xref" href="Display.xhtml#Display-Custom">Customization of Display</a>.
</p>
<a class="index-entry-id" id="index-mouse_002davoidance_002dmode-1"></a>
<p>Secondly, you can use Mouse Avoidance mode, a minor mode, to keep
the mouse pointer away from point.  To use Mouse Avoidance mode,
customize the variable <code class="code">mouse-avoidance-mode</code>.  You can set this
to various values to move the mouse in several ways:
</p>
<dl class="table">
<dt><code class="code">banish</code></dt>
<dd><p>Move the pointer to a corner of the frame on any key-press.  You can
customize the variable <code class="code">mouse-avoidance-banish-position</code> to
specify where the pointer goes when it is banished.
</p></dd>
<dt><code class="code">exile</code></dt>
<dd><p>Banish the pointer only if the cursor gets too close, and allow it to
return once the cursor is out of the way.
</p></dd>
<dt><code class="code">jump</code></dt>
<dd><p>If the cursor gets too close to the pointer, displace the pointer by a
random distance and direction.
</p></dd>
<dt><code class="code">animate</code></dt>
<dd><p>As <code class="code">jump</code>, but shows steps along the way for illusion of motion.
</p></dd>
<dt><code class="code">cat-and-mouse</code></dt>
<dd><p>The same as <code class="code">animate</code>.
</p></dd>
<dt><code class="code">proteus</code></dt>
<dd><p>As <code class="code">animate</code>, but changes the shape of the mouse pointer too.
</p></dd>
</dl>

<a class="index-entry-id" id="index-mouse_002davoidance_002dmode"></a>
<p>You can also use the command <kbd class="kbd">M-x mouse-avoidance-mode</kbd> to enable
the mode.  Whenever Mouse Avoidance mode moves the mouse, it also
raises the frame.
</p>
</div>
<div class="section-level-extent" id="Text-Terminals">
<h3 class="section" id="Text-Terminals-1">22.21 Text Terminals</h3>
<a class="index-entry-id" id="index-text-terminal"></a>

<p>On a text terminal, Emacs can display only one Emacs frame at a
time.  However, you can still create multiple Emacs frames, and switch
between them.  Switching frames on these terminals is much like
switching between different window configurations.
</p>
<p>Use <kbd class="kbd">C-x 5 2</kbd> to create a new frame and switch to it; use <kbd class="kbd">C-x
5 o</kbd> to cycle through the existing frames; use <kbd class="kbd">C-x 5 0</kbd> to delete
the current frame.
</p>
<p>Each frame has a number to distinguish it.  If your terminal can
display only one frame at a time, the selected frame&#8217;s number <var class="var">n</var>
appears near the beginning of the mode line, in the form
&#8216;<samp class="samp">F<var class="var">n</var></samp>&#8217;.
</p>
<a class="index-entry-id" id="index-set_002dframe_002dname"></a>
<a class="index-entry-id" id="index-select_002dframe_002dby_002dname"></a>
<p>&#8216;<samp class="samp">F<var class="var">n</var></samp>&#8217; is in fact the frame&#8217;s initial name.  You can give
frames more meaningful names if you wish, and you can select a frame
by its name.  Use the command <kbd class="kbd">M-x set-frame-name <kbd class="key">RET</kbd>
<var class="var">name</var> <kbd class="key">RET</kbd></kbd> to specify a new name for the selected frame,
and use <kbd class="kbd">M-x select-frame-by-name <kbd class="key">RET</kbd> <var class="var">name</var> <kbd class="key">RET</kbd></kbd>
to select a frame according to its name.  The name you specify appears
in the mode line when the frame is selected.
</p>
</div>
<div class="section-level-extent" id="Text_002dOnly-Mouse">
<h3 class="section" id="Using-a-Mouse-in-Text-Terminals">22.22 Using a Mouse in Text Terminals</h3>
<a class="index-entry-id" id="index-mouse-support"></a>
<a class="index-entry-id" id="index-terminal-emulators_002c-mouse-support"></a>

<p>Some text terminals support mouse clicks in the terminal window.
</p>
<a class="index-entry-id" id="index-xterm"></a>
<p>In a terminal emulator which is compatible with <code class="command">xterm</code>, you
can use <kbd class="kbd">M-x xterm-mouse-mode</kbd> to give Emacs control over simple
uses of the mouse&#8212;basically, only non-modified single clicks are
supported.  Newer versions of <code class="command">xterm</code> also support
mouse-tracking.  The normal <code class="command">xterm</code> mouse functionality for
such clicks is still available by holding down the <kbd class="key">SHIFT</kbd> key
when you press the mouse button.  Xterm Mouse mode is a global minor
mode (see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).  Repeating the command turns the mode off
again.
</p>
<a class="index-entry-id" id="index-gpm_002dmouse_002dmode"></a>
<p>In the console on GNU/Linux, you can use <kbd class="kbd">M-x gpm-mouse-mode</kbd> to
enable mouse support.  You must have the gpm server installed and
running on your system in order for this to work.  Note that when
this mode is enabled, you cannot use the mouse to transfer text
between Emacs and other programs which use GPM.  This is due to
limitations in GPM and the Linux kernel.
</p>
<p>See <a class="xref" href="Microsoft-Windows.xhtml#MS_002dDOS-Mouse">Mouse Usage on MS-DOS</a>,
for information about mouse support on MS-DOS.
</p></div>
</div>
<div class="footnotes-segment">
<h4 class="footnotes-heading">Footnotes</h4>

<h5 class="footnote-body-heading"><a id="FOOT7" href="#DOCF7">(7)</a></h5>
<p>The
foreground and background colors of toolkit-created tooltips on
Nextstep can also be customized by setting the <code class="code">foreground</code> and
<code class="code">background</code> frame parameters that are part of
<code class="code">tooltip-frame-parameters</code>.</p>
</div>



</body>
</html>
