<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>27 Editing Programs (GNU Emacs Manual)</title>

<meta name="description" content="27 Editing Programs (GNU Emacs Manual)"/>
<meta name="keywords" content="27 Editing Programs (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="Building.xhtml#Building" rel="next" title="28 Compiling and Testing Programs"/>
<link href="Text.xhtml#Text" rel="prev" title="26 Commands for Human Languages"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
ul.mark-bullet {list-style-type: disc}
-->
</style>


</head>

<body lang="zh_CN">
<div class="chapter-level-extent" id="Programs">

<h2 class="chapter" id="Editing-Programs">27 Editing Programs</h2>
<a class="index-entry-id" id="index-Lisp-editing"></a>
<a class="index-entry-id" id="index-C-editing"></a>
<a class="index-entry-id" id="index-program-editing"></a>

<p>This chapter describes Emacs features for facilitating editing
programs.  Some of the things these features can do are:
</p>
<ul class="itemize mark-bullet">
<li>Find or move over top-level definitions (see <a class="pxref" href="#Defuns">Top-Level Definitions, or Defuns</a>).
</li><li>Apply the usual indentation conventions of the language
(see <a class="pxref" href="#Program-Indent">Indentation for Programs</a>).
</li><li>Balance parentheses (see <a class="pxref" href="#Parentheses">Commands for Editing with Parentheses</a>).
</li><li>Insert, kill or align comments (see <a class="pxref" href="#Comments">Manipulating Comments</a>).
</li><li>Highlight program syntax (see <a class="pxref" href="Display.xhtml#Font-Lock">Font Lock mode</a>).
</li></ul>


<div class="section-level-extent" id="Program-Modes">
<h3 class="section" id="Major-Modes-for-Programming-Languages">27.1 Major Modes for Programming Languages</h3>
<a class="index-entry-id" id="index-modes-for-programming-languages"></a>

<p>Emacs has specialized major modes (see <a class="pxref" href="Modes.xhtml#Major-Modes">Major Modes</a>) for many
programming languages.  A programming language mode typically
specifies the syntax of expressions, the customary rules for
indentation, how to do syntax highlighting for the language, and how
to find the beginning or end of a function definition.  It often has
features for compiling and debugging programs as well.  The major mode
for each language is named after the language; for instance, the major
mode for the C programming language is <code class="code">c-mode</code>.
</p>
<a class="index-entry-id" id="index-Perl-mode"></a>
<a class="index-entry-id" id="index-Icon-mode"></a>
<a class="index-entry-id" id="index-Makefile-mode"></a>
<a class="index-entry-id" id="index-Tcl-mode"></a>
<a class="index-entry-id" id="index-CPerl-mode"></a>
<a class="index-entry-id" id="index-DSSSL-mode"></a>
<a class="index-entry-id" id="index-Octave-mode"></a>
<a class="index-entry-id" id="index-Metafont-mode"></a>
<a class="index-entry-id" id="index-Modula2-mode"></a>
<a class="index-entry-id" id="index-Prolog-mode"></a>
<a class="index-entry-id" id="index-Python-mode"></a>
<a class="index-entry-id" id="index-Ruby-mode"></a>
<a class="index-entry-id" id="index-Simula-mode"></a>
<a class="index-entry-id" id="index-Verilog-mode"></a>
<a class="index-entry-id" id="index-VHDL-mode"></a>
<a class="index-entry-id" id="index-M4-mode"></a>
<a class="index-entry-id" id="index-Shell_002dscript-mode"></a>
<a class="index-entry-id" id="index-OPascal-mode"></a>
<a class="index-entry-id" id="index-PostScript-mode"></a>
<a class="index-entry-id" id="index-Conf-mode"></a>
<a class="index-entry-id" id="index-DNS-mode"></a>
<a class="index-entry-id" id="index-Javascript-mode"></a>
<a class="index-entry-id" id="index-Awk-mode"></a>
<a class="index-entry-id" id="index-C_0023-mode"></a>
<a class="index-entry-id" id="index-IDLWAVE-mode"></a>
<a class="index-entry-id" id="index-JSON-mode"></a>
<a class="index-entry-id" id="index-SQL-mode"></a>
<a class="index-entry-id" id="index-TypeScript-mode"></a>
<a class="index-entry-id" id="index-CSS-mode"></a>
<a class="index-entry-id" id="index-Dockerfile-mode"></a>
<a class="index-entry-id" id="index-CMake-mode"></a>
<a class="index-entry-id" id="index-TOML-mode"></a>
<p>Emacs has programming language modes for Lisp, Scheme, the
Scheme-based DSSSL expression language, Ada, ASM, AWK, C, C++, C#,
Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles,
Metafont (TeX&#8217;s companion for font creation), Modula2, Object
Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog,
Python, Ruby, Simula, SQL, Tcl, TypeScript, Verilog, and VHDL.  An
alternative mode for Perl is called CPerl mode.  Modes are also
available for the scripting languages of the common GNU and Unix
shells, and MS-DOS/MS-Windows &#8216;<samp class="samp">BAT</samp>&#8217; files, JSON, DNS master
files, CSS (Cascading Style Sheets), Dockerfiles, CMake files, and various sorts of configuration files.
</p>
<p>Ideally, Emacs should have a major mode for each programming
language that you might want to edit.  If it doesn&#8217;t have a mode for
your favorite language, the mode might be implemented in a package not
distributed with Emacs (see <a class="pxref" href="Packages.xhtml#Packages">Emacs Lisp Packages</a>); or you can contribute one.
</p>
<a class="index-entry-id" id="index-tree_002dsitter-library_002c-supported-major-modes"></a>
<p>If Emacs has been compiled with the &#8216;<samp class="samp">tree-sitter</samp>&#8217; library, it
offers several optional editing modes based on that library, which
utilize the incremental parsing capabilities provided by
&#8216;<samp class="samp">tree-sitter</samp>&#8217;.  These modes have &#8216;<samp class="samp">-ts-</samp>&#8217; in their names; for
example <code class="code">c-ts-mode</code>, <code class="code">python-ts-mode</code>, etc.
</p>
<a class="index-entry-id" id="index-DEL-_0028programming-modes_0029"></a>
<a class="index-entry-id" id="index-backward_002ddelete_002dchar_002duntabify"></a>
<p>In most programming languages, indentation should vary from line to
line to illustrate the structure of the program.  Therefore, in most
programming language modes, typing <kbd class="kbd"><kbd class="key">TAB</kbd></kbd> updates the
indentation of the current line (see <a class="pxref" href="#Program-Indent">Indentation for Programs</a>).
Furthermore, <kbd class="kbd"><kbd class="key">DEL</kbd></kbd> is usually bound to
<code class="code">backward-delete-char-untabify</code>, which deletes backward treating
each tab as if it were the equivalent number of spaces, so that you
can delete one column of indentation without worrying whether the
whitespace consists of spaces or tabs.
</p>
<a class="index-entry-id" id="index-mode-hook_002c-and-major-modes"></a>
<a class="index-entry-id" id="index-c_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-lisp_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-emacs_002dlisp_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-lisp_002dinteraction_002dmode_002dhook"></a>
<a class="index-entry-id" id="index-scheme_002dmode_002dhook"></a>
<p>Entering a programming language mode runs the custom Lisp functions
specified in the hook variable <code class="code">prog-mode-hook</code>, followed by
those specified in the mode&#8217;s own mode hook (see <a class="pxref" href="Modes.xhtml#Major-Modes">Major Modes</a>).
For instance, entering C mode runs the hooks <code class="code">prog-mode-hook</code> and
<code class="code">c-mode-hook</code>.  See <a class="xref" href="Customization.xhtml#Hooks">Hooks</a>, for information about hooks.
</p>
<p>Separate manuals are available for the modes for Ada (see <a href="https://elpa.gnu.org/packages/ada-mode.html#Top">Ada Mode</a> in <cite class="cite">Ada Mode</cite>), C/C++/Objective C/Java/Corba
IDL/Pike/AWK (see <a href="https://www.gnu.org/software/emacs/manual/html_node/ccmode/index.html#Top">CC Mode</a> in <cite class="cite">CC Mode</cite>), Octave, VHDL,
and IDLWAVE (see <a href="https://www.gnu.org/software/emacs/manual/html_node/idlwave/index.html#Top">IDLWAVE</a> in <cite class="cite">IDLWAVE User Manual</cite>).
</p>
</div>
<div class="section-level-extent" id="Defuns">
<h3 class="section" id="Top_002dLevel-Definitions_002c-or-Defuns">27.2 Top-Level Definitions, or Defuns</h3>

<p>In Emacs, a major definition at the top level in the buffer, such as
a function, is called a <em class="dfn">defun</em>.  The name comes from Lisp, but in
Emacs we use it for all languages.
</p>

<div class="subsection-level-extent" id="Left-Margin-Paren">
<h4 class="subsection" id="Left-Margin-Convention">27.2.1 Left Margin Convention</h4>

<a class="index-entry-id" id="index-open_002dparenthesis-in-leftmost-column"></a>
<a class="index-entry-id" id="index-_0028-in-leftmost-column"></a>
<p>Many programming-language modes have traditionally assumed that any
opening parenthesis or brace found at the left margin is the start of
a top-level definition, or defun.  So, by default, commands which seek
the beginning of a defun accept such a delimiter as signifying that
position.
</p>
<a class="index-entry-id" id="index-open_002dparen_002din_002dcolumn_002d0_002dis_002ddefun_002dstart"></a>
<p>If you want to override this convention, you can do so by setting
the user option <code class="code">open-paren-in-column-0-is-defun-start</code> to
<code class="code">nil</code>.  If this option is set to <code class="code">t</code> (the default), commands
seeking the start of a defun will stop at opening parentheses or
braces at column zero which aren&#8217;t in a comment or string.  When it is
<code class="code">nil</code>, defuns are found by searching for parens or braces at the
outermost level.  Since low-level Emacs routines no longer depend on
this convention, you usually won&#8217;t need to change
<code class="code">open-paren-in-column-0-is-defun-start</code> from its default.
</p>
</div>
<div class="subsection-level-extent" id="Moving-by-Defuns">
<h4 class="subsection" id="Moving-by-Defuns-1">27.2.2 Moving by Defuns</h4>
<a class="index-entry-id" id="index-defuns"></a>

<p>These commands move point or set up the region based on top-level
major definitions, also called <em class="dfn">defuns</em>.
</p>
<dl class="table">
<dt><kbd class="kbd">C-M-a</kbd></dt>
<dd><p>Move to beginning of current or preceding defun
(<code class="code">beginning-of-defun</code>).
</p></dd>
<dt><kbd class="kbd">C-M-e</kbd></dt>
<dd><p>Move to end of current or following defun (<code class="code">end-of-defun</code>).
</p></dd>
<dt><kbd class="kbd">C-M-h</kbd></dt>
<dd><p>Put region around whole current or following defun (<code class="code">mark-defun</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-move-to-beginning-or-end-of-function"></a>
<a class="index-entry-id" id="index-function_002c-move-to-beginning-or-end"></a>
<a class="index-entry-id" id="index-C_002dM_002da"></a>
<a class="index-entry-id" id="index-C_002dM_002de"></a>
<a class="index-entry-id" id="index-C_002dM_002dh"></a>
<a class="index-entry-id" id="index-beginning_002dof_002ddefun"></a>
<a class="index-entry-id" id="index-end_002dof_002ddefun"></a>
<a class="index-entry-id" id="index-mark_002ddefun"></a>
<p>The commands to move to the beginning and end of the current defun
are <kbd class="kbd">C-M-a</kbd> (<code class="code">beginning-of-defun</code>) and <kbd class="kbd">C-M-e</kbd>
(<code class="code">end-of-defun</code>).  If you repeat one of these commands, or use a
positive numeric argument, each repetition moves to the next defun in
the direction of motion.
</p>
<p><kbd class="kbd">C-M-a</kbd> with a negative argument &#8722;<var class="var">n</var> moves forward
<var class="var">n</var> times to the next beginning of a defun.  This is not exactly
the same place that <kbd class="kbd">C-M-e</kbd> with argument <var class="var">n</var> would move to;
the end of this defun is not usually exactly the same place as the
beginning of the following defun.  (Whitespace, comments, and perhaps
declarations can separate them.)  Likewise, <kbd class="kbd">C-M-e</kbd> with a
negative argument moves back to an end of a defun, which is not quite
the same as <kbd class="kbd">C-M-a</kbd> with a positive argument.
</p>
<a class="index-entry-id" id="index-C_002dM_002dh-_0028C-mode_0029"></a>
<a class="index-entry-id" id="index-c_002dmark_002dfunction"></a>
<p>To operate on the current defun, use <kbd class="kbd">C-M-h</kbd>
(<code class="code">mark-defun</code>), which sets the mark at the end of the current
defun and puts point at its beginning.  See <a class="xref" href="Mark.xhtml#Marking-Objects">Commands to Mark Textual Objects</a>.  This
is the easiest way to get ready to kill the defun in order to move it
to a different place in the file.  If the defun is directly preceded
by comments (with no intervening blank lines), they are marked, too.
If you use the command while point is between defuns, it uses the
following defun.  If you use the command while the mark is already
active, it extends the end of the region to include one more defun.
With a prefix argument, it marks that many defuns or extends the
region by the appropriate number of defuns.  With negative prefix
argument it marks defuns in the opposite direction and also changes
the direction of selecting for subsequent uses of <code class="code">mark-defun</code>.
</p>
<p>In C mode, <kbd class="kbd">C-M-h</kbd> runs the function <code class="code">c-mark-function</code>,
which is almost the same as <code class="code">mark-defun</code>; the difference is that
it backs up over the argument declarations, function name and returned
data type so that the entire C function is inside the region.  This is
an example of how major modes adjust the standard key bindings so that
they do their standard jobs in a way better fitting a particular
language.  Other major modes may replace any or all of these key
bindings for that purpose.
</p>
<a class="index-entry-id" id="index-nested-defuns"></a>
<a class="index-entry-id" id="index-treesit_002ddefun_002dtactic"></a>
<p>Some programming languages supported <em class="dfn">nested defuns</em>, whereby a
defun (such as a function or a method or a class) can be defined
inside (i.e., as part of the body) of another defun.  The commands
described above by default find the beginning and the end of the
<em class="emph">innermost</em> defun around point.  Major modes based on the
tree-sitter library provide control of this behavior: if the variable
<code class="code">treesit-defun-tactic</code> is set to the value <code class="code">top-level</code>, the
defun commands will find the <em class="emph">outermost</em> defuns instead.
</p>
</div>
<div class="subsection-level-extent" id="Imenu">
<h4 class="subsection" id="Imenu-1">27.2.3 Imenu</h4>
<a class="index-entry-id" id="index-index-of-buffer-definitions"></a>
<a class="index-entry-id" id="index-buffer-definitions-index"></a>

<p>The Imenu facility offers a way to find the major definitions in
a file by name.  It is also useful in text formatter major modes,
where it treats each chapter, section, etc., as a definition.
(See <a class="xref" href="Maintaining.xhtml#Xref">Find Identifier References</a>, for a more powerful feature that handles multiple files
together.)
</p>
<a class="index-entry-id" id="index-imenu"></a>
<p>If you type <kbd class="kbd">M-g i</kbd> (<code class="code">imenu</code>), it reads the name of a
definition using the minibuffer, then moves point to that definition.
You can use completion to specify the name; the command always
displays the whole list of valid names.
</p>
<a class="index-entry-id" id="index-imenu_002dadd_002dmenubar_002dindex"></a>
<p>Alternatively, you can bind the command <code class="code">imenu</code> to a mouse
click.  Then it displays mouse menus for you to select a definition
name.  You can also add the buffer&#8217;s index to the menu bar by calling
<code class="code">imenu-add-menubar-index</code>.  If you want to have this menu bar
item available for all buffers in a certain major mode, you can do
this by adding <code class="code">imenu-add-menubar-index</code> to its mode hook.  But
if you have done that, you will have to wait a little while each time
you visit a file in that mode, while Emacs finds all the definitions
in that buffer.
</p>
<a class="index-entry-id" id="index-imenu_002dauto_002drescan"></a>
<p>When you change the contents of a buffer, if you add or delete
definitions, you can update the buffer&#8217;s index based on the
new contents by invoking the &#8216;<samp class="samp">*Rescan*</samp>&#8217; item in the menu.
Rescanning happens automatically if you set <code class="code">imenu-auto-rescan</code> to
a non-<code class="code">nil</code> value.  There is no need to rescan because of small
changes in the text.
</p>
<a class="index-entry-id" id="index-imenu_002dauto_002drescan_002dmaxout"></a>
<a class="index-entry-id" id="index-imenu_002dmax_002dindex_002dtime"></a>
<p><code class="code">imenu-auto-rescan</code> will be disabled in buffers that are larger
than <code class="code">imenu-auto-rescan-maxout</code> in bytes, and scanning is
stopped if it takes more than <code class="code">imenu-max-index-time</code> seconds.
</p>
<a class="index-entry-id" id="index-imenu_002dsort_002dfunction"></a>
<p>You can customize the way the menus are sorted by setting the
variable <code class="code">imenu-sort-function</code>.  By default, names are ordered as
they occur in the buffer; if you want alphabetic sorting, use the
symbol <code class="code">imenu--sort-by-name</code> as the value.  You can also
define your own comparison function by writing Lisp code.
</p>
<p>If Eglot is activated for the current buffer&#8217;s project
(see <a class="pxref" href="Maintaining.xhtml#Projects">Working with Projects</a>) and the current buffer&#8217;s major mode, Eglot provides
its own facility for producing the buffer&#8217;s index based on the
analysis of the program source by the language-server which manages
the current buffer.  See <a href="../eglot_epub3/Eglot-Features.html#Eglot-Features">Eglot Features</a> in <cite class="cite">Eglot: The Emacs
LSP Client</cite>.
</p>
<p>Imenu provides the information to guide Which Function mode
(see <a class="pxref" href="#Which-Function">Which Function Mode</a>).
The Speedbar can also use it (see <a class="pxref" href="Frames.xhtml#Speedbar">Speedbar Frames</a>).
</p>
</div>
<div class="subsection-level-extent" id="Which-Function">
<h4 class="subsection" id="Which-Function-Mode">27.2.4 Which Function Mode</h4>
<a class="index-entry-id" id="index-current-function-name-in-mode-line"></a>

<p>Which Function mode is a global minor mode (see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>)
which displays the current function name in the mode line, updating it
as you move around in a buffer.
</p>
<a class="index-entry-id" id="index-which_002dfunction_002dmode"></a>
<a class="index-entry-id" id="index-which_002dfunc_002dmodes"></a>
<p>To either enable or disable Which Function mode, use the command
<kbd class="kbd">M-x which-function-mode</kbd>.  Which Function mode is a global minor
mode.  By default, it takes effect in all major modes that
know how to support it (i.e., all the major modes that support
Imenu).  You can restrict it to a specific list of major modes by
changing the value of the variable <code class="code">which-func-modes</code> from
<code class="code">t</code> (which means to support all available major modes) to a list
of major mode names.
</p>
</div>
</div>
<div class="section-level-extent" id="Program-Indent">
<h3 class="section" id="Indentation-for-Programs">27.3 Indentation for Programs</h3>
<a class="index-entry-id" id="index-indentation-for-programs"></a>

<p>The best way to keep a program properly indented is to use Emacs to
reindent it as you change it.  Emacs has commands to indent either a
single line, a specified number of lines, or all of the lines inside a
single parenthetical grouping.
</p>
<p>See <a class="xref" href="Indentation.xhtml#Indentation">Indentation</a>, for general information about indentation.  This
section describes indentation features specific to programming
language modes.
</p>

<a class="index-entry-id" id="index-pretty_002dprinter"></a>
<p>Emacs also provides a Lisp pretty-printer in the <code class="code">pp</code> package,
which reformats Lisp objects with nice-looking indentation.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#Output-Functions">pp</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>.
</p>
<div class="subsection-level-extent" id="Basic-Indent">
<h4 class="subsection" id="Basic-Program-Indentation-Commands">27.3.1 Basic Program Indentation Commands</h4>

<dl class="table">
<dt><kbd class="kbd"><kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Adjust indentation of current line (<code class="code">indent-for-tab-command</code>).
</p></dd>
<dt><kbd class="kbd"><kbd class="key">RET</kbd></kbd></dt>
<dd><p>Insert a newline, then adjust indentation of following line
(<code class="code">newline</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-TAB-_0028programming-modes_0029"></a>
<a class="index-entry-id" id="index-indent_002dline_002dfunction"></a>
<p>The basic indentation command is <kbd class="kbd"><kbd class="key">TAB</kbd></kbd>
(<code class="code">indent-for-tab-command</code>), which was documented in
<a class="ref" href="Indentation.xhtml#Indentation">Indentation</a>.  In programming language modes, <kbd class="kbd"><kbd class="key">TAB</kbd></kbd>
indents the current line, based on the indentation and syntactic
content of the preceding lines; if the region is active,
<kbd class="kbd"><kbd class="key">TAB</kbd></kbd> indents each line within the region, not just the
current line.
</p>
<p>The command <kbd class="kbd"><kbd class="key">RET</kbd></kbd> (<code class="code">newline</code>), which was documented
in <a class="ref" href="Basic.xhtml#Inserting-Text">Inserting Text</a>, does the same as <kbd class="kbd">C-j</kbd> followed by
<kbd class="kbd"><kbd class="key">TAB</kbd></kbd>: it inserts a new line, then adjusts the line&#8217;s
indentation.
</p>
<p>When indenting a line that starts within a parenthetical grouping,
Emacs usually places the start of the line under the preceding line
within the group, or under the text after the parenthesis.  If you
manually give one of these lines a nonstandard indentation (e.g., for
aesthetic purposes), the lines below will follow it.
</p>
<p>The indentation commands for most programming language modes assume
that an open-parenthesis, open-brace or other opening delimiter at the
left margin is the start of a function.  If the code you are editing
violates this assumption&#8212;even if the delimiters occur in strings or
comments&#8212;you must set <code class="code">open-paren-in-column-0-is-defun-start</code>
to <code class="code">nil</code> for indentation to work properly.  See <a class="xref" href="#Left-Margin-Paren">Left Margin Convention</a>.
</p>
</div>
<div class="subsection-level-extent" id="Multi_002dline-Indent">
<h4 class="subsection" id="Indenting-Several-Lines">27.3.2 Indenting Several Lines</h4>

<p>Sometimes, you may want to reindent several lines of code at a time.
One way to do this is to use the mark; when the mark is active and the
region is non-empty, <kbd class="kbd"><kbd class="key">TAB</kbd></kbd> indents every line in the region.
Alternatively, the command <kbd class="kbd">C-M-\</kbd> (<code class="code">indent-region</code>) indents
every line in the region, whether or not the mark is active
(see <a class="pxref" href="Indentation.xhtml#Indentation-Commands">Indentation Commands</a>).
</p>
<p>In addition, Emacs provides the following commands for indenting
large chunks of code:
</p>
<dl class="table">
<dt><kbd class="kbd">C-M-q</kbd></dt>
<dd><p>Reindent all the lines within one parenthetical grouping.
</p></dd>
<dt><kbd class="kbd">C-u <kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Shift an entire parenthetical grouping rigidly sideways so that its
first line is properly indented.
</p></dd>
<dt><kbd class="kbd">M-x indent-code-rigidly</kbd></dt>
<dd><p>Shift all the lines in the region rigidly sideways, but do not alter
lines that start inside comments and strings.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dM_002dq"></a>
<a class="index-entry-id" id="index-indent_002dpp_002dsexp"></a>
<p>To reindent the contents of a single parenthetical grouping,
position point before the beginning of the grouping and type
<kbd class="kbd">C-M-q</kbd>.  This changes the relative indentation within the
grouping, without affecting its overall indentation (i.e., the
indentation of the line where the grouping starts).  The function that
<kbd class="kbd">C-M-q</kbd> runs depends on the major mode; it is
<code class="code">indent-pp-sexp</code> in Lisp mode, <code class="code">c-indent-exp</code> in C mode,
etc.  To correct the overall indentation as well, type <kbd class="kbd"><kbd class="key">TAB</kbd></kbd>
first.
</p>
<a class="index-entry-id" id="index-C_002du-TAB"></a>
<p>If you like the relative indentation within a grouping but not the
indentation of its first line, move point to that first line and type
<kbd class="kbd">C-u <kbd class="key">TAB</kbd></kbd>.  In Lisp, C, and some other major modes,
<kbd class="kbd"><kbd class="key">TAB</kbd></kbd> with a numeric argument reindents the current line as
usual, then reindents by the same amount all the lines in the
parenthetical grouping starting on the current line.  It is clever,
though, and does not alter lines that start inside strings.  Neither
does it alter C preprocessor lines when in C mode, but it does
reindent any continuation lines that may be attached to them.
</p>
<a class="index-entry-id" id="index-indent_002dcode_002drigidly"></a>
<p>The command <kbd class="kbd">M-x indent-code-rigidly</kbd> rigidly shifts all the
lines in the region sideways, like <code class="code">indent-rigidly</code> does
(see <a class="pxref" href="Indentation.xhtml#Indentation-Commands">Indentation Commands</a>).  It doesn&#8217;t alter the indentation of
lines that start inside a string, unless the region also starts inside
that string.  The prefix arg specifies the number of columns to
indent.
</p>
</div>
<div class="subsection-level-extent" id="Lisp-Indent">
<h4 class="subsection" id="Customizing-Lisp-Indentation">27.3.3 Customizing Lisp Indentation</h4>
<a class="index-entry-id" id="index-customizing-Lisp-indentation"></a>

<p>The indentation pattern for a Lisp expression can depend on the function
called by the expression.  For each Lisp function, you can choose among
several predefined patterns of indentation, or define an arbitrary one with
a Lisp program.
</p>
<p>The standard pattern of indentation is as follows: the second line of the
expression is indented under the first argument, if that is on the same
line as the beginning of the expression; otherwise, the second line is
indented underneath the function name.  Each following line is indented
under the previous line whose nesting depth is the same.
</p>
<a class="index-entry-id" id="index-lisp_002dindent_002doffset"></a>
<p>If the variable <code class="code">lisp-indent-offset</code> is non-<code class="code">nil</code>, it overrides
the usual indentation pattern for the second line of an expression, so that
such lines are always indented <code class="code">lisp-indent-offset</code> more columns than
the containing list.
</p>
<a class="index-entry-id" id="index-lisp_002dbody_002dindent"></a>
<p>Certain functions override the standard pattern.  Functions whose
names start with <code class="code">def</code> treat the second lines as the start of
a <em class="dfn">body</em>, by indenting the second line <code class="code">lisp-body-indent</code>
additional columns beyond the open-parenthesis that starts the
expression.
</p>
<a class="index-entry-id" id="index-lisp_002dindent_002dfunction-property"></a>
<p>You can override the standard pattern in various ways for individual
functions, according to the <code class="code">lisp-indent-function</code> property of
the function name.  This is normally done for macro definitions, using
the <code class="code">declare</code> construct.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Macros.html#Defining-Macros">Defining Macros</a> in <cite class="cite">The
Emacs Lisp Reference Manual</cite>.
</p>
<p>In Emacs Lisp, lists are usually indented as if they are
function-like forms:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(setq foo '(bar zot
                gazonk))
</pre></div>

<p>However, if you add a space after the opening parenthesis, this tells
Emacs that it&#8217;s a data list instead of a piece of code, and Emacs will
then indent it like this:
</p>
<div class="example lisp">
<pre class="lisp-preformatted">(setq foo '( bar zot
             gazonk))
</pre></div>

</div>
<div class="subsection-level-extent" id="C-Indent">
<h4 class="subsection" id="Commands-for-C-Indentation">27.3.4 Commands for C Indentation</h4>

<p>Here are special features for indentation in C mode and related modes:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-c_002dindent_002ddefun"></a>
<a class="index-entry-id" id="index-c_002dts_002dmode_002dindent_002ddefun"></a>
<a id="index-C_002dc-C_002dq-_0028C-mode_0029"></a><kbd class="kbd">C-c C-q</kbd></dt>
<dd><p>Reindent the current top-level function definition or aggregate type
declaration (<code class="code">c-indent-defun</code> in CC mode,
<code class="code">c-ts-mode-indent-defun</code> in <code class="code">c-ts-mode</code> based on tree-sitter).
</p>
</dd>
<dt><a class="index-entry-id" id="index-c_002dindent_002dexp"></a>
<a class="index-entry-id" id="index-prog_002dindent_002dsexp"></a>
<a id="index-C_002dM_002dq-_0028C-mode_0029"></a><kbd class="kbd">C-M-q</kbd></dt>
<dd><p>Reindent each line in the balanced expression (see <a class="pxref" href="#Expressions">Expressions with Balanced Parentheses</a>),
also known as &#8220;sexp&#8221;, that follows point.  In CC mode, this invokes
<code class="code">c-indent-exp</code>; in tree-sitter based <code class="code">c-ts-mode</code> this
invokes a more general <code class="code">prog-indent-sexp</code>.  A prefix argument
inhibits warning messages about invalid syntax.
</p>
</dd>
<dt><a id="index-c_002dindent_002dline_002dor_002dregion"></a><kbd class="kbd"><kbd class="key">TAB</kbd></kbd></dt>
<dd><p>Reindent the current line, active region, or block starting on this
line (<code class="code">c-indent-line-or-region</code>).  With prefix argument, rigidly
reindent the balanced expression which starts on the current line, if
the current line needs reindentation.
</p>
<a class="index-entry-id" id="index-c_002dtab_002dalways_002dindent"></a>
<p>If <code class="code">c-tab-always-indent</code> is <code class="code">t</code>, this command always reindents
the current line and does nothing else.  This is the default.
</p>
<p>If that variable is <code class="code">nil</code>, this command reindents the current line
only if point is at the left margin or in the line&#8217;s indentation;
otherwise, it inserts a tab (or the equivalent number of spaces,
if <code class="code">indent-tabs-mode</code> is <code class="code">nil</code>).
</p>
<p>Any other value (not <code class="code">nil</code> or <code class="code">t</code>) means always reindent the
line, and also insert a tab if within a comment or a string.
</p></dd>
</dl>

<p>To reindent the whole current buffer, type <kbd class="kbd">C-x h C-M-\</kbd>.  This
first selects the whole buffer as the region, then reindents that
region.
</p>
<p>To reindent the current block, use <kbd class="kbd">C-M-u C-M-q</kbd>.  This moves
to the front of the block and then reindents it all.
</p>
</div>
<div class="subsection-level-extent" id="Custom-C-Indent">
<h4 class="subsection" id="Customizing-C-Indentation">27.3.5 Customizing C Indentation</h4>
<a class="index-entry-id" id="index-style-_0028for-indentation_0029"></a>

<p>C mode and related modes use a flexible mechanism for customizing
indentation.  C mode indents a source line in two steps: first it
classifies the line syntactically according to its contents and
context; second, it determines the indentation offset associated by
your selected <em class="dfn">style</em> with the syntactic construct and adds this
onto the indentation of the <em class="dfn">anchor statement</em>.
</p>
<dl class="table">
<dt><kbd class="kbd">C-c . <var class="var">style</var> <kbd class="key">RET</kbd></kbd></dt>
<dd><p>Select a predefined style <var class="var">style</var> (<code class="code">c-set-style</code> in CC mode,
<code class="code">c-ts-mode-set-style</code> in <code class="code">c-ts-mode</code> based on tree-sitter).
</p></dd>
</dl>

<p>A <em class="dfn">style</em> is a named collection of customizations that can be
used in C mode and the related modes.  <a href="https://www.gnu.org/software/emacs/manual/html_node/ccmode/Styles.html#Styles">Styles</a> in <cite class="cite">The CC
Mode Manual</cite>, for a complete description.  Emacs comes with several
predefined styles, including <code class="code">gnu</code>, <code class="code">k&amp;r</code>, <code class="code">bsd</code>,
<code class="code">stroustrup</code>, <code class="code">linux</code>, <code class="code">python</code>, <code class="code">java</code>,
<code class="code">whitesmith</code>, <code class="code">ellemtel</code>, and <code class="code">awk</code>.  Some of these
styles are primarily intended for one language, but any of them can be
used with any of the languages supported by these modes.  To find out
what a style looks like, select it and reindent some code, e.g., by
typing <kbd class="kbd">C-M-q</kbd> at the start of a function definition.
</p>
<a class="index-entry-id" id="index-C_002dc-_002e-_0028C-mode_0029"></a>
<a class="index-entry-id" id="index-c_002dset_002dstyle"></a>
<a class="index-entry-id" id="index-c_002dts_002dmode_002dset_002dstyle"></a>
<p>To choose a style for the current buffer, use the command <kbd class="kbd">C-c&#160;.</kbd><!-- /@w -->.  Specify a style name as an argument (case is not significant).
This command affects the current buffer only, and it affects only
future invocations of the indentation commands; it does not reindent
the code already in the buffer.  To reindent the whole buffer in the
new style, you can type <kbd class="kbd">C-x h C-M-\</kbd>.
</p>
<a class="index-entry-id" id="index-c_002ddefault_002dstyle"></a>
<p>When using CC mode, you can also set the variable
<code class="code">c-default-style</code> to specify the default style for various major
modes.  Its value should be either the style&#8217;s name (a string) or an
alist, in which each element specifies one major mode and which
indentation style to use for it.  For example,
</p>
<div class="example">
<pre class="example-preformatted">(setq c-default-style
      '((java-mode . &quot;java&quot;)
        (awk-mode . &quot;awk&quot;)
        (other . &quot;gnu&quot;)))
</pre></div>

<p>specifies explicit choices for Java and AWK modes, and the default
&#8216;<samp class="samp">gnu</samp>&#8217; style for the other C-like modes.  (These settings are
actually the defaults.)  This variable takes effect when you select
one of the C-like major modes; thus, if you specify a new default
style for Java mode, you can make it take effect in an existing Java
mode buffer by typing <kbd class="kbd">M-x java-mode</kbd> there.
</p>
<a class="index-entry-id" id="index-c_002dts_002dmode_002dindent_002dstyle"></a>
<p>When using the tree-sitter based <code class="code">c-ts-mode</code>, you can set the
default indentation style by customizing the variable
<code class="code">c-ts-mode-indent-style</code>.
</p>
<p>The <code class="code">gnu</code> style specifies the formatting recommended by the GNU
Project for C; it is the default, so as to encourage use of our
recommended style.
</p>
<p>See <a href="https://www.gnu.org/software/emacs/manual/html_node/ccmode/Indentation-Engine-Basics.html#Indentation-Engine-Basics">Indentation Engine Basics</a> in <cite class="cite">the CC Mode Manual</cite>, and
<a href="https://www.gnu.org/software/emacs/manual/html_node/ccmode/Customizing-Indentation.html#Customizing-Indentation">Customizing Indentation</a> in <cite class="cite">the CC Mode Manual</cite>, for more
information on customizing indentation for C and related modes,
including how to override parts of an existing style and how to define
your own styles.
</p>
<a class="index-entry-id" id="index-c_002dguess"></a>
<a class="index-entry-id" id="index-c_002dguess_002dinstall"></a>
<p>As an alternative to specifying a style, you can tell Emacs to guess
a style by typing <kbd class="kbd">M-x c-guess</kbd> in a sample code buffer.  You can
then apply the guessed style to other buffers with <kbd class="kbd">M-x
c-guess-install</kbd>.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/ccmode/Guessing-the-Style.html#Guessing-the-Style">Guessing the Style</a> in <cite class="cite">the CC Mode
Manual</cite>, for details.
</p>
</div>
</div>
<div class="section-level-extent" id="Parentheses">
<h3 class="section" id="Commands-for-Editing-with-Parentheses">27.4 Commands for Editing with Parentheses</h3>

<a class="index-entry-id" id="index-check_002dparens"></a>
<a class="index-entry-id" id="index-unbalanced-parentheses-and-quotes"></a>
<p>This section describes the commands and features that take advantage
of the parenthesis structure in a program, or help you keep it
balanced.
</p>
<p>When talking about these facilities, the term &#8220;parenthesis&#8221; also
includes braces, brackets, or whatever delimiters are defined to match
in pairs.  The major mode controls which delimiters are significant,
through the syntax table (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Tables.html#Syntax-Tables">Syntax Tables</a> in <cite class="cite">The Emacs Lisp Reference Manual</cite>).  In Lisp, only parentheses count;
in C, these commands apply to braces and brackets too.
</p>
<p>You can use <kbd class="kbd">M-x check-parens</kbd> to find any unbalanced
parentheses and unbalanced string quotes in the buffer.
</p>

<div class="subsection-level-extent" id="Expressions">
<h4 class="subsection" id="Expressions-with-Balanced-Parentheses">27.4.1 Expressions with Balanced Parentheses</h4>

<a class="index-entry-id" id="index-sexp"></a>
<a class="index-entry-id" id="index-expression"></a>
<a class="index-entry-id" id="index-balanced-expression"></a>
<p>Each programming language mode has its own definition of a
<em class="dfn">balanced expression</em>.  Balanced expressions typically include
individual symbols, numbers, and string constants, as well as pieces
of code enclosed in a matching pair of delimiters.  The following
commands deal with balanced expressions (in Emacs, such expressions
are referred to internally as <em class="dfn">sexps</em><a class="footnote" id="DOCF13" href="#FOOT13"><sup>13</sup></a>).
</p>
<dl class="table">
<dt><kbd class="kbd">C-M-f</kbd></dt>
<dd><p>Move forward over a balanced expression (<code class="code">forward-sexp</code>).
</p></dd>
<dt><kbd class="kbd">C-M-b</kbd></dt>
<dd><p>Move backward over a balanced expression (<code class="code">backward-sexp</code>).
</p></dd>
<dt><kbd class="kbd">C-M-k</kbd></dt>
<dd><p>Kill balanced expression forward (<code class="code">kill-sexp</code>).
</p></dd>
<dt><kbd class="kbd">C-M-t</kbd></dt>
<dd><p>Transpose expressions (<code class="code">transpose-sexps</code>).
</p></dd>
<dt><kbd class="kbd">C-M-@</kbd></dt>
<dt><kbd class="kbd">C-M-<kbd class="key">SPC</kbd></kbd></dt>
<dd><p>Put mark after following expression (<code class="code">mark-sexp</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dM_002df"></a>
<a class="index-entry-id" id="index-C_002dM_002db"></a>
<a class="index-entry-id" id="index-forward_002dsexp"></a>
<a class="index-entry-id" id="index-backward_002dsexp"></a>
<p>To move forward over a balanced expression, use <kbd class="kbd">C-M-f</kbd>
(<code class="code">forward-sexp</code>).  If the first significant character after point
is an opening delimiter (e.g., &#8216;<samp class="samp">(</samp>&#8217;, &#8216;<samp class="samp">[</samp>&#8217; or &#8216;<samp class="samp">{</samp>&#8217; in C),
this command moves past the matching closing delimiter.  If the
character begins a symbol, string, or number, the command moves over
that.
</p>
<p>The command <kbd class="kbd">C-M-b</kbd> (<code class="code">backward-sexp</code>) moves backward over a
balanced expression&#8212;like <kbd class="kbd">C-M-f</kbd>, but in the reverse direction.
If the expression is preceded by any prefix characters (single-quote,
backquote and comma, in Lisp), the command moves back over them as
well.
</p>
<p><kbd class="kbd">C-M-f</kbd> or <kbd class="kbd">C-M-b</kbd> with an argument repeats that operation
the specified number of times; with a negative argument means to move
in the opposite direction.  In most modes, these two commands move
across comments as if they were whitespace.  Note that their keys,
<kbd class="kbd">C-M-f</kbd> and <kbd class="kbd">C-M-b</kbd>, are analogous to <kbd class="kbd">C-f</kbd> and <kbd class="kbd">C-b</kbd>,
which move by characters (see <a class="pxref" href="Basic.xhtml#Moving-Point">Changing the Location of Point</a>), and <kbd class="kbd">M-f</kbd> and
<kbd class="kbd">M-b</kbd>, which move by words (see <a class="pxref" href="Text.xhtml#Words">Words</a>).
</p>
<a class="index-entry-id" id="index-killing-expressions"></a>
<a class="index-entry-id" id="index-C_002dM_002dk"></a>
<a class="index-entry-id" id="index-kill_002dsexp"></a>
<p>To kill a whole balanced expression, type <kbd class="kbd">C-M-k</kbd>
(<code class="code">kill-sexp</code>).  This kills the text that <kbd class="kbd">C-M-f</kbd> would move
over.
</p>
<a class="index-entry-id" id="index-transposition-of-expressions"></a>
<a class="index-entry-id" id="index-C_002dM_002dt"></a>
<a class="index-entry-id" id="index-transpose_002dsexps"></a>
<p><kbd class="kbd">C-M-t</kbd> (<code class="code">transpose-sexps</code>) switches the positions of the
previous balanced expression and the next one.  It is analogous to the
<kbd class="kbd">C-t</kbd> command, which transposes characters (see <a class="pxref" href="Fixit.xhtml#Transpose">Transposing Text</a>).
An argument to <kbd class="kbd">C-M-t</kbd> serves as a repeat count, moving the
previous expression over that many following ones.  A negative
argument moves the previous balanced expression backwards across those
before it.  An argument of zero, rather than doing nothing, transposes
the balanced expressions ending at or after point and the mark.
</p>
<a class="index-entry-id" id="index-C_002dM_002dSPC"></a>
<p>To operate on balanced expressions with a command which acts on the
region, type <kbd class="kbd">C-M-<kbd class="key">SPC</kbd></kbd> (<code class="code">mark-sexp</code>).  This sets the
mark where <kbd class="kbd">C-M-f</kbd> would move to.  While the mark is active, each
successive call to this command extends the region by shifting the
mark by one expression.  Positive or negative numeric arguments move
the mark forward or backward by the specified number of expressions.
The alias <kbd class="kbd">C-M-@</kbd> is equivalent to <kbd class="kbd">C-M-<kbd class="key">SPC</kbd></kbd>.
See <a class="xref" href="Mark.xhtml#Marking-Objects">Commands to Mark Textual Objects</a>, for more information about this and related
commands.
</p>
<p>In languages that use infix operators, such as C, it is not possible
to recognize all balanced expressions because there can be multiple
possibilities at a given position.  For example, C mode does not treat
&#8216;<samp class="samp">foo + bar</samp>&#8217; as a single expression, even though it <em class="emph">is</em> one
C expression; instead, it recognizes &#8216;<samp class="samp">foo</samp>&#8217; as one expression and
&#8216;<samp class="samp">bar</samp>&#8217; as another, with the &#8216;<samp class="samp">+</samp>&#8217; as punctuation between them.
However, C mode recognizes &#8216;<samp class="samp">(foo + bar)</samp>&#8217; as a single expression,
because of the parentheses.
</p>
</div>
<div class="subsection-level-extent" id="Moving-by-Parens">
<h4 class="subsection" id="Moving-in-the-Parenthesis-Structure">27.4.2 Moving in the Parenthesis Structure</h4>

<a class="index-entry-id" id="index-parenthetical-groupings"></a>
<a class="index-entry-id" id="index-parentheses_002c-moving-across"></a>
<a class="index-entry-id" id="index-matching-parenthesis-and-braces_002c-moving-to"></a>
<a class="index-entry-id" id="index-braces_002c-moving-across"></a>
<a class="index-entry-id" id="index-list-commands"></a>

<p>The following commands move over groupings delimited by parentheses
(or whatever else serves as delimiters in the language you are working
with).  They ignore strings and comments, including any parentheses
within them, and also ignore parentheses that are quoted with an
escape character.  These commands are mainly intended for editing
programs, but can be useful for editing any text containing
parentheses.  They are referred to internally as &#8220;list commands&#8221;
because in Lisp these groupings are lists.
</p>
<p>These commands assume that the starting point is not inside a string
or a comment.  If you invoke them from inside a string or comment, the
results are unreliable.
</p>
<dl class="table">
<dt><kbd class="kbd">C-M-n</kbd></dt>
<dd><p>Move forward over a parenthetical group (<code class="code">forward-list</code>).
</p></dd>
<dt><kbd class="kbd">C-M-p</kbd></dt>
<dd><p>Move backward over a parenthetical group (<code class="code">backward-list</code>).
</p></dd>
<dt><kbd class="kbd">C-M-u</kbd></dt>
<dd><p>Move up in parenthesis structure (<code class="code">backward-up-list</code>).
</p></dd>
<dt><kbd class="kbd">C-M-d</kbd></dt>
<dd><p>Move down in parenthesis structure (<code class="code">down-list</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dM_002dn"></a>
<a class="index-entry-id" id="index-C_002dM_002dp"></a>
<a class="index-entry-id" id="index-forward_002dlist"></a>
<a class="index-entry-id" id="index-backward_002dlist"></a>
<p>The list commands <kbd class="kbd">C-M-n</kbd> (<code class="code">forward-list</code>) and
<kbd class="kbd">C-M-p</kbd> (<code class="code">backward-list</code>) move forward or backward over one
(or <var class="var">n</var>) parenthetical groupings.
</p>
<a class="index-entry-id" id="index-C_002dM_002du"></a>
<a class="index-entry-id" id="index-backward_002dup_002dlist"></a>
<p><kbd class="kbd">C-M-n</kbd> and <kbd class="kbd">C-M-p</kbd> try to stay at the same level in the
parenthesis structure.  To move <em class="emph">up</em> one (or <var class="var">n</var>) levels, use
<kbd class="kbd">C-M-u</kbd> (<code class="code">backward-up-list</code>).  <kbd class="kbd">C-M-u</kbd> moves backward up
past one unmatched opening delimiter.  A positive argument serves as a
repeat count; a negative argument reverses the direction of motion, so
that the command moves forward and up one or more levels.
</p>
<a class="index-entry-id" id="index-C_002dM_002dd"></a>
<a class="index-entry-id" id="index-down_002dlist"></a>
<p>To move <em class="emph">down</em> in the parenthesis structure, use <kbd class="kbd">C-M-d</kbd>
(<code class="code">down-list</code>).  In Lisp mode, where &#8216;<samp class="samp">(</samp>&#8217; is the only opening
delimiter, this is nearly the same as searching for a &#8216;<samp class="samp">(</samp>&#8217;.  An
argument specifies the number of levels to go down.
</p>
</div>
<div class="subsection-level-extent" id="Matching">
<h4 class="subsection" id="Matching-Parentheses">27.4.3 Matching Parentheses</h4>
<a class="index-entry-id" id="index-matching-parentheses"></a>
<a class="index-entry-id" id="index-parentheses_002c-displaying-matches"></a>

<p>Emacs has a number of <em class="dfn">parenthesis matching</em> features, which
make it easy to see how and whether parentheses (or other delimiters)
match up.
</p>
<p>Whenever you type a self-inserting character that is a closing
delimiter, Emacs briefly indicates the location of the matching
opening delimiter, provided that is on the screen.  If it is not on
the screen, Emacs displays some of the text near it in the echo area.
Either way, you can tell which grouping you are closing off.  If the
opening delimiter and closing delimiter are mismatched&#8212;such as in
&#8216;<samp class="samp">[x)</samp>&#8217;&#8212;a warning message is displayed in the echo area.
</p>
<a class="index-entry-id" id="index-blink_002dmatching_002dparen"></a>
<a class="index-entry-id" id="index-blink_002dmatching_002dparen_002ddistance"></a>
<a class="index-entry-id" id="index-blink_002dmatching_002ddelay"></a>
<p>Three variables control the display of matching parentheses:
</p>
<ul class="itemize mark-bullet">
<li><code class="code">blink-matching-paren</code> turns the feature on or off: <code class="code">nil</code>
disables it, but the default is <code class="code">t</code> to enable it.  Set it to
<code class="code">jump</code> to make indication work by momentarily moving the cursor
to the matching opening delimiter.  Set it to <code class="code">jump-offscreen</code> to
make the cursor jump, even if the opening delimiter is off screen.

</li><li><code class="code">blink-matching-delay</code> says how many seconds to keep indicating
the matching opening delimiter.  This may be an integer or
floating-point number; the default is 1.

</li><li><code class="code">blink-matching-paren-distance</code> specifies how many characters
back to search to find the matching opening delimiter.  If the match
is not found in that distance, Emacs stops scanning and nothing is
displayed.  The default is 102400.
</li></ul>

<a class="index-entry-id" id="index-Show-Paren-mode"></a>
<a class="index-entry-id" id="index-highlighting-matching-parentheses"></a>
<a class="index-entry-id" id="index-show_002dparen_002dmode"></a>
<a class="index-entry-id" id="index-show_002dparen_002dlocal_002dmode"></a>
<p>Show Paren mode is a minor mode that provides a more powerful kind
of automatic matching.  Whenever point is before an opening delimiter
or after a closing delimiter, the delimiter, its matching delimiter,
and optionally the text between them are highlighted.  To toggle Show
Paren mode globally, type <kbd class="kbd">M-x show-paren-mode</kbd>.  To toggle it
only in the current buffer, type <kbd class="kbd">M-x show-paren-local-mode</kbd>.
</p>
<a class="index-entry-id" id="index-show_002dparen_002dpredicate"></a>
<p>By default, this mode is switched on in all buffers that are meant
for editing, but is not enabled in buffers that show data.  This is
controlled by the <code class="code">show-paren-predicate</code> user option.
</p>
<p>To customize the mode, type <kbd class="kbd">M-x&#160;customize-group&#160;<kbd class="key">RET</kbd>&#160;paren-showing</kbd><!-- /@w -->.  The customizable options which control the operation
of this mode include:
</p>
<ul class="itemize mark-bullet">
<li><a class="index-entry-id" id="index-show_002dparen_002dhighlight_002dopenparen"></a>
<code class="code">show-paren-highlight-openparen</code> controls whether to highlight
an open paren when point is just before it, and hence its position
is marked by the cursor anyway.  The default is non-<code class="code">nil</code> (yes).

</li><li><a class="index-entry-id" id="index-show_002dparen_002dstyle"></a>
<code class="code">show-paren-style</code> controls whether just the two parens, or also
the text between them get highlighted.  The valid options here are
<code class="code">parenthesis</code> (show the matching paren), <code class="code">expression</code>
(highlight the entire expression enclosed by the parens), and
<code class="code">mixed</code> (highlight the matching paren if it is visible in the
window, the expression otherwise).

</li><li><a class="index-entry-id" id="index-show_002dparen_002dwhen_002dpoint_002dinside_002dparen"></a>
<code class="code">show-paren-when-point-inside-paren</code>, when non-<code class="code">nil</code>, causes
highlighting also when point is inside of the parentheses.  The
default is <code class="code">nil</code>.

</li><li><a class="index-entry-id" id="index-show_002dparen_002dwhen_002dpoint_002din_002dperiphery"></a>
<code class="code">show-paren-when-point-in-periphery</code>, when non-<code class="code">nil</code>, causes
highlighting also when point is in whitespace at the beginning of a
line and there is a paren at the first or last non-whitespace position
on the line, or when point is at the end of a line and there is a
paren at the last non-whitespace position on the line.

</li><li><a class="index-entry-id" id="index-show_002dparen_002dcontext_002dwhen_002doffscreen"></a>
<code class="code">show-paren-context-when-offscreen</code>, when non-<code class="code">nil</code>, shows
some context in the echo area when point is in a closing delimiter and
the opening delimiter is offscreen.  The context is usually the line
that contains the opening delimiter, except if the opening delimiter
is on its own line, in which case the context includes the previous
nonblank line.
</li></ul>

<a class="index-entry-id" id="index-Electric-Pair-mode"></a>
<a class="index-entry-id" id="index-inserting-matching-parentheses"></a>
<a class="index-entry-id" id="index-electric_002dpair_002dmode"></a>
<p>Electric Pair mode, a global minor mode, provides a way to easily
insert matching delimiters: parentheses, braces, brackets, etc.
Whenever you insert an opening delimiter, the matching closing
delimiter is automatically inserted as well, leaving point between the
two.  Conversely, when you insert a closing delimiter over an existing
one, no insertion takes places, and that position is simply skipped
over.  If the region is active (see <a class="pxref" href="Mark.xhtml#Mark">The Mark and the Region</a>), insertion of a
delimiter operates on the region: the characters in the region are
enclosed in a pair of matching delimiters, leaving point after the
delimiter you typed.
</p>
<p>These variables control additional features of Electric Pair mode:
</p>
<ul class="itemize mark-bullet">
<li><a class="index-entry-id" id="index-electric_002dpair_002dpreserve_002dbalance"></a>
<code class="code">electric-pair-preserve-balance</code>, when non-<code class="code">nil</code>, makes the
default pairing logic balance out the number of opening and closing
delimiters.

</li><li><a class="index-entry-id" id="index-electric_002dpair_002ddelete_002dadjacent_002dpairs"></a>
<code class="code">electric-pair-delete-adjacent-pairs</code>, when non-<code class="code">nil</code>, makes
backspacing between two adjacent delimiters also automatically delete
the closing delimiter.

</li><li><a class="index-entry-id" id="index-electric_002dpair_002dopen_002dnewline_002dbetween_002dpairs"></a>
<code class="code">electric-pair-open-newline-between-pairs</code>, when non-<code class="code">nil</code>,
makes inserting a newline between two adjacent pairs also
automatically open an extra newline after point.

</li><li><a class="index-entry-id" id="index-electric_002dpair_002dskip_002dwhitespace"></a>
<code class="code">electric-pair-skip-whitespace</code>, when non-<code class="code">nil</code>, causes the minor
mode to skip whitespace forward before deciding whether to skip over
the closing delimiter.
</li></ul>

<p>To toggle Electric Pair mode, type <kbd class="kbd">M-x electric-pair-mode</kbd>.  To
toggle the mode in a single buffer, use <kbd class="kbd">M-x
electric-pair-local-mode</kbd>.
</p>
</div>
</div>
<div class="section-level-extent" id="Comments">
<h3 class="section" id="Manipulating-Comments">27.5 Manipulating Comments</h3>
<a class="index-entry-id" id="index-comments"></a>

<p>Because comments are such an important part of programming, Emacs
provides special commands for editing and inserting comments.  It can
also do spell checking on comments with Flyspell Prog mode
(see <a class="pxref" href="Fixit.xhtml#Spelling">Checking and Correcting Spelling</a>).
</p>
<p>Some major modes have special rules for indenting different kinds of
comments.  For example, in Lisp code, comments starting with two
semicolons are indented as if they were lines of code, while those
starting with three semicolons are supposed to be aligned to the left
margin and are often used for sectioning purposes.  Emacs understands
these conventions; for instance, typing <kbd class="kbd"><kbd class="key">TAB</kbd></kbd> on a comment
line will indent the comment to the appropriate position.
</p>
<div class="example">
<pre class="example-preformatted">;; This function is just an example.
;;; Here either two or three semicolons are appropriate.
(defun foo (x)
;;;  And now, the first part of the function:
  ;; The following line adds one.
  (1+ x))           ; This line adds one.
</pre></div>


<div class="subsection-level-extent" id="Comment-Commands">
<h4 class="subsection" id="Comment-Commands-1">27.5.1 Comment Commands</h4>
<a class="index-entry-id" id="index-indentation-for-comments"></a>
<a class="index-entry-id" id="index-alignment-for-comments"></a>

<p>The following commands operate on comments:
</p>
<dl class="table">
<dt><kbd class="kbd">M-;</kbd></dt>
<dd><p>Insert or realign comment on current line; if the region is active,
comment or uncomment the region instead (<code class="code">comment-dwim</code>).
</p></dd>
<dt><kbd class="kbd">C-x C-;</kbd></dt>
<dd><p>Comment or uncomment the current line (<code class="code">comment-line</code>).  If the
region is active, comment or uncomment the lines in the region
instead.
</p></dd>
<dt><kbd class="kbd">C-u M-;</kbd></dt>
<dd><p>Kill comment on current line (<code class="code">comment-kill</code>).
</p></dd>
<dt><kbd class="kbd">C-x ;</kbd></dt>
<dd><p>Set comment column (<code class="code">comment-set-column</code>).
</p></dd>
<dt><kbd class="kbd">C-M-j</kbd></dt>
<dt><kbd class="kbd">M-j</kbd></dt>
<dd><p>Like <kbd class="kbd"><kbd class="key">RET</kbd></kbd> followed by inserting and aligning a comment
(<code class="code">default-indent-new-line</code>).  See <a class="xref" href="#Multi_002dLine-Comments">Multiple Lines of Comments</a>.
</p></dd>
<dt><kbd class="kbd">M-x comment-region</kbd></dt>
<dt><kbd class="kbd">C-c C-c</kbd> (in C-like modes)</dt>
<dd><p>Add comment delimiters to all the lines in the region.
</p></dd>
</dl>

<a class="index-entry-id" id="index-M_002d_003b"></a>
<a class="index-entry-id" id="index-comment_002ddwim"></a>
<p>The command to create or align a comment is <kbd class="kbd">M-;</kbd>
(<code class="code">comment-dwim</code>).  The word &#8220;dwim&#8221; is an acronym for &#8220;Do What
I Mean&#8221;; it indicates that this command can be used for many
different jobs relating to comments, depending on the situation where
you use it.
</p>
<p>When a region is active (see <a class="pxref" href="Mark.xhtml#Mark">The Mark and the Region</a>), <kbd class="kbd">M-;</kbd> either adds
comment delimiters to the region, or removes them.  If every line in
the region is already a comment, it uncomments each of those lines
by removing their comment delimiters.  Otherwise, it adds comment
delimiters to enclose the text in the region.
</p>
<p>If you supply a prefix argument to <kbd class="kbd">M-;</kbd> when a region is
active, that specifies the number of comment delimiters to add or
delete.  A positive argument <var class="var">n</var> adds <var class="var">n</var> delimiters, while a
negative argument &#8722;<var class="var">n</var> removes <var class="var">n</var> delimiters.
</p>
<p>If the region is not active, and there is no existing comment on the
current line, <kbd class="kbd">M-;</kbd> adds a new comment to the current line.  If
the line is blank (i.e., empty or containing only whitespace
characters), the comment is indented to the same position where
<kbd class="kbd"><kbd class="key">TAB</kbd></kbd> would indent to (see <a class="pxref" href="#Basic-Indent">Basic Program Indentation Commands</a>).  If the line
is non-blank, the comment is placed after the last non-whitespace
character on the line.  Emacs tries to fit the comment between the
columns specified by the variables <code class="code">comment-column</code> and
<code class="code">comment-fill-column</code> (see <a class="pxref" href="#Options-for-Comments">Options Controlling Comments</a>), if
possible.  Otherwise, it will choose some other suitable position,
usually separated from the non-comment text by at least one space.  In
each case, Emacs places point after the comment&#8217;s starting delimiter,
so that you can start typing the comment text right away.
</p>
<p>You can also use <kbd class="kbd">M-;</kbd> to align an existing comment.  If a line
already contains the comment-start string, <kbd class="kbd">M-;</kbd> realigns it to
the conventional alignment and moves point after the comment&#8217;s
starting delimiter.  As an exception, comments starting in column 0
are not moved.  Even when an existing comment is properly aligned,
<kbd class="kbd">M-;</kbd> is still useful for moving directly to the start of the
comment text.
</p>
<a class="index-entry-id" id="index-comment_002dline"></a>
<a class="index-entry-id" id="index-C_002dx-C_002d_003b"></a>
<p><kbd class="kbd">C-x C-;</kbd> (<code class="code">comment-line</code>) comments or uncomments complete
lines.  When a region is active (see <a class="pxref" href="Mark.xhtml#Mark">The Mark and the Region</a>), <kbd class="kbd">C-x C-;</kbd> either
comments or uncomments the lines in the region.  If the region is not
active, this command comments or uncomments the line point is on.
With a positive prefix argument <var class="var">n</var>, it operates on <var class="var">n</var> lines
starting with the current one; with a negative argument
&#8722;<var class="var">n</var>, it affects <var class="var">n</var> preceding lines.  After invoking
this command with a negative argument, successive invocations with a
positive argument will operate on preceding lines as if the argument
were negated.
</p>
<a class="index-entry-id" id="index-comment_002dkill"></a>
<a class="index-entry-id" id="index-C_002du-M_002d_003b"></a>
<p><kbd class="kbd">C-u M-;</kbd> (<code class="code">comment-dwim</code> with a prefix argument) when the
region is not active kills any comment on the current line, along with
the whitespace before it.  Since the comment is saved to the kill
ring, you can reinsert it on another line by moving to the end of that
line, doing <kbd class="kbd">C-y</kbd>, and then <kbd class="kbd">M-;</kbd> to realign the comment.  You
can achieve the same effect as <kbd class="kbd">C-u M-;</kbd> by typing <kbd class="kbd">M-x
comment-kill</kbd> (<code class="code">comment-dwim</code> actually calls <code class="code">comment-kill</code>
as a subroutine when it is given a prefix argument).  Invoking
<code class="code">comment-dwim</code> with a prefix numeric argument, as in <kbd class="kbd">C-u&#160;<var class="var">n</var>&#160;M-;</kbd><!-- /@w -->, when there&#8217;s no active region, tells
<code class="code">comment-kill</code> to kill comments on <var class="var">n</var> lines.
</p>
<a class="index-entry-id" id="index-C_002dc-C_002dc-_0028C-mode_0029"></a>
<a class="index-entry-id" id="index-comment_002dregion"></a>
<a class="index-entry-id" id="index-uncomment_002dregion"></a>
<p>The command <kbd class="kbd">M-x comment-region</kbd> is equivalent to calling
<kbd class="kbd">M-;</kbd> on an active region, except that it always acts on the
region, even if the mark is inactive.  In C mode and related modes,
this command is bound to <kbd class="kbd">C-c C-c</kbd>.  The command <kbd class="kbd">M-x
uncomment-region</kbd> uncomments each line in the region; a numeric prefix
argument specifies the number of comment delimiters to remove
(negative arguments specify the number of comment delimiters to add).
</p>
<p>For C-like modes, you can configure the exact effect of <kbd class="kbd">M-;</kbd> by
setting the variables <code class="code">c-indent-comment-alist</code> and
<code class="code">c-indent-comments-syntactically-p</code>.  For example, on a line
ending in a closing brace, <kbd class="kbd">M-;</kbd> puts the comment one space after
the brace rather than at <code class="code">comment-column</code>.  For full details see
<a href="https://www.gnu.org/software/emacs/manual/html_node/ccmode/Comment-Commands.html#Comment-Commands">Comment Commands</a> in <cite class="cite">The CC Mode Manual</cite>.
</p>
</div>
<div class="subsection-level-extent" id="Multi_002dLine-Comments">
<h4 class="subsection" id="Multiple-Lines-of-Comments">27.5.2 Multiple Lines of Comments</h4>

<a class="index-entry-id" id="index-C_002dM_002dj"></a>
<a class="index-entry-id" id="index-M_002dj"></a>
<a class="index-entry-id" id="index-blank-lines-in-programs"></a>
<a class="index-entry-id" id="index-default_002dindent_002dnew_002dline"></a>
<a class="index-entry-id" id="index-comment_002dmulti_002dline"></a>
<p>If you are typing a comment and wish to continue it to another line,
type <kbd class="kbd">M-j</kbd> or <kbd class="kbd">C-M-j</kbd> (<code class="code">default-indent-new-line</code>).  This
breaks the current line, and inserts the necessary comment delimiters
and indentation to continue the comment.
</p>
<p>For languages with closing comment delimiters (e.g., &#8216;<samp class="samp">*/</samp>&#8217; in
C), the exact behavior of <kbd class="kbd">M-j</kbd> depends on the value of the
variable <code class="code">comment-multi-line</code>.  If the value is <code class="code">nil</code>, the
command closes the comment on the old line and starts a new comment on
the new line.  Otherwise, it opens a new line within the current
comment delimiters.
</p>
<p>When Auto Fill mode is on, going past the fill column while typing a
comment also continues the comment, in the same way as an explicit
invocation of <kbd class="kbd">M-j</kbd>.
</p>
<p>To turn existing lines into comment lines, use <kbd class="kbd">M-;</kbd> with the
region active, or use <kbd class="kbd">M-x comment-region</kbd>
as described in the preceding section.
</p>
<p>You can configure C Mode such that when you type a &#8216;<samp class="samp">/</samp>&#8217; at the
start of a line in a multi-line block comment, this closes the
comment.  Enable the <code class="code">comment-close-slash</code> clean-up for this.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/ccmode/Clean_002dups.html#Clean_002dups">Clean-ups</a> in <cite class="cite">The CC Mode Manual</cite>.
</p>
</div>
<div class="subsection-level-extent" id="Options-for-Comments">
<h4 class="subsection" id="Options-Controlling-Comments">27.5.3 Options Controlling Comments</h4>

<a class="index-entry-id" id="index-comment_002dcolumn"></a>
<a class="index-entry-id" id="index-comment_002dfill_002dcolumn"></a>
<a class="index-entry-id" id="index-C_002dx-_003b"></a>
<a class="index-entry-id" id="index-comment_002dset_002dcolumn"></a>
<p>As mentioned in <a class="ref" href="#Comment-Commands">Comment Commands</a>, when the <kbd class="kbd">M-j</kbd> command
adds a comment to a line, it tries to place the comment between the
columns specified by the buffer-local variables <code class="code">comment-column</code>
and <code class="code">comment-fill-column</code> (or if that is <code class="code">nil</code>, then the
value of <code class="code">fill-column</code>, see <a class="pxref" href="Text.xhtml#Fill-Commands">Explicit Fill Commands</a>).  You can set
either the local value or the default value of these buffer-local
variables in the usual way (see <a class="pxref" href="Customization.xhtml#Locals">Local Variables</a>).  Alternatively, you can
type <kbd class="kbd">C-x ;</kbd> (<code class="code">comment-set-column</code>) to set the value of
<code class="code">comment-column</code> in the current buffer to the column where point
is currently located.  <kbd class="kbd">C-u C-x ;</kbd> sets the comment column to
match the last comment before point in the buffer, and then does a
<kbd class="kbd">M-;</kbd> to align the current line&#8217;s comment under the previous one.
</p>
<a class="index-entry-id" id="index-comment_002dstart_002dskip"></a>
<p>The comment commands recognize comments based on the regular
expression that is the value of the variable <code class="code">comment-start-skip</code>.
Make sure this regexp does not match the null string.  It may match more
than the comment starting delimiter in the strictest sense of the word;
for example, in C mode the value of the variable could be
<code class="code">&quot;/\\*+[&#160;\t]*\\|//+[&#160;\t]*&quot;<!-- /@w --></code>, which matches extra stars and
spaces after the &#8216;<samp class="samp">/*</samp>&#8217; itself, and accepts C++ style (&#8216;<samp class="samp">//</samp>&#8217;)
comments also.  (Note that &#8216;<samp class="samp">\\</samp>&#8217; is needed in Lisp syntax to
include a &#8216;<samp class="samp">\</samp>&#8217; in the string, which is needed to deny the first
star its special meaning in regexp syntax.  See <a class="xref" href="Search.xhtml#Regexp-Backslash">Backslash in Regular Expressions</a>.)
</p>
<a class="index-entry-id" id="index-comment_002dstart"></a>
<a class="index-entry-id" id="index-comment_002dend"></a>
<p>When a comment command makes a new comment, it inserts the value of
<code class="code">comment-start</code> as an opening comment delimiter.  It also inserts
the value of <code class="code">comment-end</code> after point, as a closing comment
delimiter.  For example, in Lisp mode, <code class="code">comment-start</code> is
&#8216;<samp class="samp">&quot;;&quot;</samp>&#8217; and <code class="code">comment-end</code> is <code class="code">&quot;&quot;</code> (the empty string).  In
C mode, <code class="code">comment-start</code> is <code class="code">&quot;/* &quot;</code> and <code class="code">comment-end</code> is
<code class="code">&quot; */&quot;</code>.
</p>
<a class="index-entry-id" id="index-comment_002dpadding"></a>
<p>The variable <code class="code">comment-padding</code> specifies a string that the
commenting commands should insert between the comment delimiter(s) and
the comment text.  The default, &#8216;<samp class="samp">&quot; &quot;</samp>&#8217;, specifies a single space.
Alternatively, the value can be a number, which specifies that number
of spaces, or <code class="code">nil</code>, which means no spaces at all.
</p>
<p>The variable <code class="code">comment-multi-line</code> controls how <kbd class="kbd">M-j</kbd> and
Auto Fill mode continue comments over multiple lines.
See <a class="xref" href="#Multi_002dLine-Comments">Multiple Lines of Comments</a>.
</p>
<a class="index-entry-id" id="index-comment_002dindent_002dfunction"></a>
<p>The variable <code class="code">comment-indent-function</code> should contain a function
that will be called to compute the alignment for a newly inserted
comment or for aligning an existing comment.  It is set differently by
various major modes.  The function is called with no arguments, but with
point at the beginning of the comment, or at the end of a line if a new
comment is to be inserted.  It should return the column in which the
comment ought to start.  For example, the default function bases its
decision on how many comment characters begin an existing comment.
</p>
<p>Emacs also tries to align comments on adjacent lines.  To override
this, the function may return a cons of two (possibly equal) integers
to indicate an acceptable range of indentation.
</p>
</div>
</div>
<div class="section-level-extent" id="Documentation">
<h3 class="section" id="Documentation-Lookup">27.6 Documentation Lookup</h3>

<p>Emacs provides several features you can use to look up the
documentation of functions, variables and commands that you plan to
use in your program.
</p>

<div class="subsection-level-extent" id="Info-Lookup">
<h4 class="subsection" id="Info-Documentation-Lookup">27.6.1 Info Documentation Lookup</h4>

<a class="index-entry-id" id="index-info_002dlookup_002dfile"></a>
<p>For major modes that apply to languages which have documentation in
Info, you can use <kbd class="kbd">C-h S</kbd> (<code class="code">info-lookup-symbol</code>) to view the
Info documentation for a symbol used in the program.  You specify the
symbol with the minibuffer; the default is the symbol appearing in the
buffer at point.  For example, in C mode this looks for the symbol in
the C Library Manual.  The command only works if the appropriate
manual&#8217;s Info files are installed.
</p>
<p>Emacs determines where to look for documentation for the
symbol&#8212;which Info files to look in, and which indices to
search&#8212;based on the major mode.  You can also use <kbd class="kbd">M-x
info-lookup-file</kbd> to look for documentation for a file name.
</p>
<p>If you use <kbd class="kbd">C-h S</kbd> in a major mode that does not support it,
it asks you to specify the symbol help mode.  You should enter
a command such as <code class="code">c-mode</code> that would select a major
mode which <kbd class="kbd">C-h S</kbd> does support.
</p>
</div>
<div class="subsection-level-extent" id="Man-Page">
<h4 class="subsection" id="Man-Page-Lookup">27.6.2 Man Page Lookup</h4>

<a class="index-entry-id" id="index-man-page"></a>
<p>On Unix, the main form of on-line documentation was the <em class="dfn">manual
page</em> or <em class="dfn">man page</em>.  In the GNU operating system, we aim to
replace man pages with better-organized manuals that you can browse
with Info (see <a class="pxref" href="Help.xhtml#Misc-Help">Other Help Commands</a>).  This process is not finished, so it is
still useful to read manual pages.
</p>
<a class="index-entry-id" id="index-man"></a>
<p>You can read the man page for an operating system command, library
function, or system call, with the <kbd class="kbd">M-x man</kbd> command.  This
prompts for a topic, with completion (see <a class="pxref" href="Minibuffer.xhtml#Completion">Completion</a>), and runs
the <code class="command">man</code> program to format the corresponding man page.  If
the system permits, it runs <code class="command">man</code> asynchronously, so that you
can keep on editing while the page is being formatted.  The result
goes in a buffer named <samp class="file">*Man <var class="var">topic</var>*</samp>.  These buffers use a
special major mode, Man mode, that facilitates scrolling and jumping
to other manual pages.  For details, type <kbd class="kbd">C-h m</kbd> while in a Man
mode buffer.
</p>
<a class="index-entry-id" id="index-sections-of-manual-pages"></a>
<p>Each man page belongs to one of ten or more <em class="dfn">sections</em>, each
named by a digit or by a digit and a letter.  Sometimes there are man
pages with the same name in different sections.  To read a man page
from a specific section, type &#8216;<samp class="samp"><var class="var">topic</var>(<var class="var">section</var>)</samp>&#8217; or
&#8216;<samp class="samp"><var class="var">section</var> <var class="var">topic</var></samp>&#8217; when <kbd class="kbd">M-x man</kbd> prompts for the
topic.  For example, the man page for the C library function
<code class="code">chmod</code> is in section 2, but there is a shell command of the same
name, whose man page is in section 1; to view the former, type
<kbd class="kbd">M-x&#160;man&#160;<kbd class="key">RET</kbd>&#160;chmod(2)&#160;<kbd class="key">RET</kbd></kbd><!-- /@w -->.
</p>
<a class="index-entry-id" id="index-Man_002dswitches"></a>
<a class="index-entry-id" id="index-M_002dn-_0028Man-mode_0029"></a>
<a class="index-entry-id" id="index-M_002dp-_0028Man-mode_0029"></a>
<p>If you do not specify a section, <kbd class="kbd">M-x man</kbd> normally displays
only the first man page found.  On some systems, the <code class="code">man</code>
program accepts a &#8216;<samp class="samp">-a</samp>&#8217; command-line option, which tells it to
display all the man pages for the specified topic.  To make use of
this, change the value of the variable <code class="code">Man-switches</code> to
&#8216;<samp class="samp">&quot;-a&quot;</samp>&#8217;.  Then, in the Man mode buffer, you can type <kbd class="kbd">M-n</kbd> and
<kbd class="kbd">M-p</kbd> to switch between man pages in different sections.  The mode
line shows how many manual pages are available.
</p>
<a class="index-entry-id" id="index-woman"></a>
<a class="index-entry-id" id="index-manual-pages_002c-on-MS_002dDOS_002fMS_002dWindows"></a>
<p>An alternative way of reading manual pages is the <kbd class="kbd">M-x woman</kbd>
command.  Unlike <kbd class="kbd">M-x man</kbd>, it does not run any external programs
to format and display the man pages; the formatting is done by Emacs,
so it works on systems such as MS-Windows where the <code class="command">man</code>
program may be unavailable.  It prompts for a man page, and displays
it in a buffer named <samp class="file">*WoMan <var class="var">section</var> <var class="var">topic</var></samp>.
</p>
<p><kbd class="kbd">M-x woman</kbd> computes the completion list for manpages the first
time you invoke the command.  With a numeric argument, it recomputes
this list; this is useful if you add or delete manual pages.
</p>
<p>If you type a name of a manual page and <kbd class="kbd">M-x woman</kbd> finds that
several manual pages by the same name exist in different sections, it
pops up a window with possible candidates asking you to choose one of
them.
</p>
<p>Note that <kbd class="kbd">M-x woman</kbd> doesn&#8217;t yet support the latest features of
modern man pages, so we recommend using <kbd class="kbd">M-x man</kbd> if that is
available on your system.
</p>
<p>For more information about setting up and using <kbd class="kbd">M-x woman</kbd>, see
the WoMan Info manual, which is distributed with Emacs.
</p>
</div>
<div class="subsection-level-extent" id="Programming-Language-Doc">
<h4 class="subsection" id="Programming-Language-Documentation-Lookup">27.6.3 Programming Language Documentation Lookup</h4>
<a class="index-entry-id" id="index-documentation-for-program-symbols"></a>
<a class="index-entry-id" id="index-program-functions-and-variables_002c-documentation-lookup"></a>

<p>When editing Emacs Lisp code, you can use the commands <kbd class="kbd">C-h f</kbd>
(<code class="code">describe-function</code>) and <kbd class="kbd">C-h v</kbd> (<code class="code">describe-variable</code>)
to view the built-in documentation for the Lisp functions and
variables that you want to use.  See <a class="xref" href="Help.xhtml#Name-Help">Help by Command or Variable Name</a>.
</p>
<a class="index-entry-id" id="index-ElDoc-mode"></a>
<a class="index-entry-id" id="index-at_002dpoint-documentation-for-program-symbols"></a>
<a class="index-entry-id" id="index-eldoc_002dmode"></a>
<a class="index-entry-id" id="index-global_002deldoc_002dmode"></a>
<p>ElDoc<a class="footnote" id="DOCF14" href="#FOOT14"><sup>14</sup></a> is a buffer-local minor mode that helps with looking up
documentation of symbols (functions, methods, classes, variables,
etc.) in your program.  When this mode is enabled, the echo area
displays useful information whenever there is a documented symbol at
point.  For example, in buffers under the Emacs Lisp mode, it shows
the argument list of a function at point, and for a Lisp variable it
shows the first line of the variable&#8217;s documentation string.
</p>
<p>To toggle ElDoc mode, type <kbd class="kbd">M-x eldoc-mode</kbd>.  There&#8217;s also a
Global ElDoc mode, which is turned on by default, and turns on the
ElDoc mode in buffers whose major mode sets the variables described
below.  Use <kbd class="kbd">M-x&#160;global-eldoc-mode</kbd><!-- /@w --> to turn it off globally.
</p>
<p>Various major modes configure the Global ElDoc mode to use their
documentation functions.  Examples include Emacs Lisp mode, Python
mode, and Cfengine mode.  In addition, Emacs features that provide
support for several major modes configure ElDoc to use their
facilities for retrieving the documentation.  Examples include Eglot
(see <a href="../eglot_epub3/Eglot-Features.html#Eglot-Features">Eglot Features</a> in <cite class="cite">Eglot: The Emacs LSP Client</cite>), which
provides documentation based on information from language servers;
Semantic&#8217;s Idle Summary mode (see <a href="https://www.gnu.org/software/emacs/manual/html_node/semantic/Idle-Summary-Mode.html#Idle-Summary-Mode">Idle Summary Mode</a> in <cite class="cite">Semantic Manual</cite>); and Flymake, which uses ElDoc to show diagnostics
at point (see <a href="https://www.gnu.org/software/emacs/manual/html_node/flymake/Finding-diagnostics.html#Finding-diagnostics">Finding diagnostics</a> in <cite class="cite">GNU Flymake manual</cite>).
</p>
<p>The ElDoc mode works by scheduling the display of the available
documentation for the symbol at point after Emacs has been idle for
some short time.  This avoids annoying flickering of documentation
messages in the echo area or the mode line when you type quickly and
without delay.
</p>
<a class="index-entry-id" id="index-eldoc_002dprint_002dcurrent_002dsymbol_002dinfo"></a>
<p>You can also trigger the display of documentation for a symbol at
point by using the command <kbd class="kbd">M-x eldoc-print-current-symbol-info</kbd>.
</p>
<p>The following variables can be used to configure ElDoc mode:
</p>
<dl class="vtable">
<dt><a id="index-eldoc_002didle_002ddelay"></a><code class="code">eldoc-idle-delay</code></dt>
<dd><p>The value of this user option controls the amount of idle time before
the at-point documentation is displayed.  It should be set to the
number of seconds to wait; the value of zero means to display without
any delay.  The default is 0.5 sec.
</p>
</dd>
<dt><a id="index-eldoc_002dprint_002dafter_002dedit"></a><code class="code">eldoc-print-after-edit</code></dt>
<dd><p>If this user option is non-<code class="code">nil</code>, ElDoc will show documentation
only after some editing command, like inserting or deleting some
text.  This comes in handy if you want Emacs to display documentation
only about symbols that you type, but not about symbols that are
already in the buffer (so just reading the source code will not show
documentation).  The default value is <code class="code">nil</code>.  If you change the
value, you need to toggle <code class="code">eldoc-mode</code> off and on again.
</p>
</dd>
<dt><a id="index-eldoc_002decho_002darea_002duse_002dmultiline_002dp"></a><code class="code">eldoc-echo-area-use-multiline-p</code></dt>
<dd><p>This user option controls whether and how to truncate documentation
text if it is longer than the echo-area can display as a single screen
line.  If the value is a positive number, it specifies the number of
screen lines that ElDoc is allowed to display in the echo area without
truncating the documentation.  A positive integer specifies the
absolute maximum number of screen lines to use; a floating-point
number specifies the number of screen lines as a fraction of the
frame&#8217;s height.  The value of <code class="code">t</code> means never truncate the
documentation (the echo-area will be resized up to the height allowed
by <code class="code">max-mini-window-height</code>, see <a class="pxref" href="Minibuffer.xhtml#Minibuffer-Edit">Editing in the Minibuffer</a>), whereas
the value of <code class="code">nil</code> means truncate if the documentation is longer
than a single screen line.  Finally, the special value
<code class="code">truncate-sym-name-if-fit</code> (the default) means to truncate the
part of the documentation that represents a symbol&#8217;s name if doing
that will allow the documentation to fit on a single screen line.
</p>
</dd>
<dt><a id="index-eldoc_002decho_002darea_002ddisplay_002dtruncation_002dmessage"></a><code class="code">eldoc-echo-area-display-truncation-message</code></dt>
<dd><p>If non-<code class="code">nil</code> (the default), and documentation shown in the echo
area is truncated because it&#8217;s too long, follow the documentation by
instructions about how to view the complete documentation text.  If
<code class="code">nil</code>, just indicate with &#8216;<samp class="samp">&#8230;</samp>&#8217; that the documentation
was truncated.
</p>
</dd>
<dt><a class="index-entry-id" id="index-eldoc_002ddoc_002dbuffer"></a>
<a id="index-eldoc_002decho_002darea_002dprefer_002ddoc_002dbuffer"></a><code class="code">eldoc-echo-area-prefer-doc-buffer</code></dt>
<dd><p>If the value of this user option is <code class="code">t</code>, ElDoc will not show the
documentation in the echo area if the ElDoc buffer with the
documentation is already displayed in some window.  (You can use the
command <kbd class="kbd">M-x eldoc-doc-buffer</kbd> any time to show the ElDoc buffer.)
If the value of this option is the symbol <code class="code">maybe</code>, the
documentation will not be displayed in the echo area if the ElDoc
buffer is shown in some window, and the documentation text has to be
truncated if displayed in the echo area.  Finally, the value of
<code class="code">nil</code> (the default) means always show the documentation in the
echo area.
</p>
</dd>
<dt><a id="index-eldoc_002ddocumentation_002dstrategy"></a><code class="code">eldoc-documentation-strategy</code></dt>
<dd><p>This customizable variable&#8217;s value is the function which is used to
retrieve and display documentation for the symbol at point.  The
documentation is produced by the functions in the hook
<code class="code">eldoc-documentation-functions</code>.  The default value of
<code class="code">eldoc-documentation-strategy</code> specifies that ElDoc should
display the first documentation text produced by functions in the
<code class="code">eldoc-documentation-functions</code> hook, but you can customize
<code class="code">eldoc-documentation-strategy</code> to work in other ways, such as
displaying all of the documentation texts concatenated together.
</p>
</dd>
<dt><a id="index-eldoc_002ddocumentation_002dfunctions"></a><code class="code">eldoc-documentation-functions</code></dt>
<dd><p>This abnormal hook&#8217;s value is a list of functions that can produce
documentation for the symbol at point as appropriate for the current
buffer&#8217;s major-mode.  These functions act as a collection of backends
for ElDoc.  Major modes register their documentation lookup functions
with ElDoc by adding their functions to the buffer-local value of this
variable.
</p></dd>
</dl>

</div>
</div>
<div class="section-level-extent" id="Hideshow">
<h3 class="section" id="Hideshow-minor-mode">27.7 Hideshow minor mode</h3>
<a class="index-entry-id" id="index-Hideshow-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Hideshow"></a>

<a class="index-entry-id" id="index-hs_002dminor_002dmode"></a>
<p>Hideshow mode is a buffer-local minor mode that allows you to
selectively display portions of a program, which are referred to as
<em class="dfn">blocks</em>.  Type <kbd class="kbd">M-x hs-minor-mode</kbd> to toggle this minor mode
(see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).
</p>
<p>When you use Hideshow mode to hide a block, the block disappears
from the screen, to be replaced by an ellipsis (three periods in a
row).  Just what constitutes a block depends on the major mode.  In C
mode and related modes, blocks are delimited by braces, while in Lisp
mode they are delimited by parentheses.  Multi-line comments also
count as blocks.
</p>
<p>Hideshow mode provides the following commands:
</p>
<a class="index-entry-id" id="index-hs_002dhide_002dall"></a>
<a class="index-entry-id" id="index-hs_002dhide_002dblock"></a>
<a class="index-entry-id" id="index-hs_002dshow_002dall"></a>
<a class="index-entry-id" id="index-hs_002dshow_002dblock"></a>
<a class="index-entry-id" id="index-hs_002dshow_002dregion"></a>
<a class="index-entry-id" id="index-hs_002dhide_002dlevel"></a>
<a class="index-entry-id" id="index-hs_002dtoggle_002dhiding"></a>
<a class="index-entry-id" id="index-hs_002dtoggle_002dhiding-1"></a>
<a class="index-entry-id" id="index-C_002dc-_0040-C_002dh"></a>
<a class="index-entry-id" id="index-C_002dc-_0040-C_002ds"></a>
<a class="index-entry-id" id="index-C_002dc-_0040-C_002dc"></a>
<a class="index-entry-id" id="index-C_002dc-_0040-C_002dM_002dh"></a>
<a class="index-entry-id" id="index-C_002dc-_0040-C_002dM_002ds"></a>
<a class="index-entry-id" id="index-C_002dc-_0040-C_002dr"></a>
<a class="index-entry-id" id="index-C_002dc-_0040-C_002dl"></a>
<a class="index-entry-id" id="index-S_002dmouse_002d2"></a>
<dl class="table">
<dt><kbd class="kbd">C-c @ C-h</kbd></dt>
<dt><kbd class="kbd">C-c @ C-d</kbd></dt>
<dd><p>Hide the current block (<code class="code">hs-hide-block</code>).
</p></dd>
<dt><kbd class="kbd">C-c @ C-s</kbd></dt>
<dd><p>Show the current block (<code class="code">hs-show-block</code>).
</p></dd>
<dt><kbd class="kbd">C-c @ C-c</kbd></dt>
<dt><kbd class="kbd">C-c @ C-e</kbd></dt>
<dt><kbd class="kbd">S-mouse-2</kbd></dt>
<dd><p>Either hide or show the current block (<code class="code">hs-toggle-hiding</code>).
</p></dd>
<dt><kbd class="kbd">C-c @ C-M-h</kbd></dt>
<dt><kbd class="kbd">C-c @ C-t</kbd></dt>
<dd><p>Hide all top-level blocks (<code class="code">hs-hide-all</code>).
</p></dd>
<dt><kbd class="kbd">C-c @ C-M-s</kbd></dt>
<dt><kbd class="kbd">C-c @ C-a</kbd></dt>
<dd><p>Show all blocks in the buffer (<code class="code">hs-show-all</code>).
</p></dd>
<dt><kbd class="kbd">C-u <var class="var">n</var> C-c @ C-l</kbd></dt>
<dd><p>Hide all blocks <var class="var">n</var> levels below this block
(<code class="code">hs-hide-level</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-hs_002dhide_002dcomments_002dwhen_002dhiding_002dall"></a>
<a class="index-entry-id" id="index-hs_002disearch_002dopen"></a>
<a class="index-entry-id" id="index-hs_002dspecial_002dmodes_002dalist"></a>
<p>These variables can be used to customize Hideshow mode:
</p>
<dl class="table">
<dt><code class="code">hs-hide-comments-when-hiding-all</code></dt>
<dd><p>If non-<code class="code">nil</code>, <kbd class="kbd">C-c @ C-M-h</kbd> (<code class="code">hs-hide-all</code>) hides
comments too.
</p>
</dd>
<dt><code class="code">hs-isearch-open</code></dt>
<dd><p>This variable specifies the conditions under which incremental search
should unhide a hidden block when matching text occurs within the
block.  Its value should be either <code class="code">code</code> (unhide only code
blocks), <code class="code">comment</code> (unhide only comments), <code class="code">t</code> (unhide both
code blocks and comments), or <code class="code">nil</code> (unhide neither code blocks
nor comments).  The default value is <code class="code">code</code>.
</p></dd>
</dl>

</div>
<div class="section-level-extent" id="Symbol-Completion">
<h3 class="section" id="Completion-for-Symbol-Names">27.8 Completion for Symbol Names</h3>
<a class="index-entry-id" id="index-completion-_0028symbol-names_0029"></a>

<p>Completion is normally done in the minibuffer (see <a class="pxref" href="Minibuffer.xhtml#Completion">Completion</a>),
but you can also complete symbol names in ordinary Emacs buffers.
</p>
<a class="index-entry-id" id="index-tags_002dbased-completion"></a>
<a class="index-entry-id" id="index-M_002dTAB"></a>
<a class="index-entry-id" id="index-C_002dM_002di"></a>
<a class="index-entry-id" id="index-completion_002dat_002dpoint_002c-in-programming-language-modes"></a>
<a class="index-entry-id" id="index-Lisp-symbol-completion"></a>
<a class="index-entry-id" id="index-completion-_0028Lisp-symbols_0029"></a>
<p>In most programming language modes, <kbd class="kbd">C-M-i</kbd> (or
<kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd><a class="footnote" id="DOCF15" href="#FOOT15"><sup>15</sup></a>) invokes the command <code class="code">completion-at-point</code>, which generates the
list of possible completions for the symbol at point.  This command
uses the available support facilities to come up with the completion
candidates:
</p>
<ul class="itemize mark-bullet">
<li>If Eglot is activated for the current buffer&#8217;s project
(see <a class="pxref" href="Maintaining.xhtml#Projects">Working with Projects</a>) and the current buffer&#8217;s major mode, the command
tries to use the corresponding language server for producing the list
of completion candidates.  See <a href="../eglot_epub3/Eglot-Features.html#Eglot-Features">Eglot Features</a> in <cite class="cite">Eglot: The
Emacs LSP Client</cite>.

</li><li>If Semantic mode is enabled (see <a class="pxref" href="#Semantic">Semantic</a>), the command tries to
use the Semantic parser data for completion.

</li><li>If Semantic mode is not enabled or fails at performing completion, the
command tries to complete using the selected tags table (see <a class="pxref" href="Maintaining.xhtml#Tags-Tables">Tags Tables</a>); you need to visit the tags table with <kbd class="kbd">M-x&#160;visit-tags-table</kbd><!-- /@w --> for that to work.

</li><li>In Emacs Lisp mode, the command performs completion using the
function, variable, or property names defined in the current Emacs
session.
</li></ul>

<p>In all other respects, in-buffer symbol completion behaves like
minibuffer completion.  For instance, if Emacs cannot complete to
a unique symbol, it displays a list of completion alternatives in
another window.  Then you can use the keys <kbd class="kbd">M-<kbd class="key">DOWN</kbd></kbd> and
<kbd class="kbd">M-<kbd class="key">UP</kbd></kbd> to navigate through the completions displayed
in the completions buffer without leaving the original buffer,
and the key <kbd class="kbd">M-<kbd class="key">RET</kbd></kbd> to insert the currently highlighted
completion to the buffer.  See <a class="xref" href="Minibuffer.xhtml#Completion">Completion</a>.
</p>
<p>In Text mode and related modes, <kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> completes words
based on the spell-checker&#8217;s dictionary.  See <a class="xref" href="Fixit.xhtml#Spelling">Checking and Correcting Spelling</a>.
</p>
</div>
<div class="section-level-extent" id="MixedCase-Words">
<h3 class="section" id="MixedCase-Words-1">27.9 MixedCase Words</h3>
<a class="index-entry-id" id="index-camel-case"></a>

<p>Some programming styles make use of mixed-case (or &#8220;CamelCase&#8221;)
symbols like &#8216;<samp class="samp">unReadableSymbol</samp>&#8217;.  (In the GNU project, we recommend
using underscores to separate words within an identifier, rather than
using case distinctions.)  Emacs has various features to make it easier
to deal with such symbols.
</p>
<a class="index-entry-id" id="index-Glasses-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Glasses"></a>
<p>Glasses mode is a buffer-local minor mode that makes it easier to read
such symbols, by altering how they are displayed.  By default, it
displays extra underscores between each lower-case letter and the
following capital letter.  This does not alter the buffer text, only how
it is displayed.
</p>
<p>To toggle Glasses mode, type <kbd class="kbd">M-x glasses-mode</kbd> (see <a class="pxref" href="Modes.xhtml#Minor-Modes">Minor Modes</a>).  When Glasses mode is enabled, the minor mode indicator
&#8216;<samp class="samp">o^o</samp>&#8217; appears in the mode line.  For more information about
Glasses mode, type <kbd class="kbd">C-h P glasses <kbd class="key">RET</kbd></kbd>.
</p>
<a class="index-entry-id" id="index-Subword-mode"></a>
<a class="index-entry-id" id="index-subword_002dmode"></a>
<p>Subword mode is another buffer-local minor mode.  In subword mode,
Emacs&#8217;s word commands recognize upper case letters in
&#8216;<samp class="samp">StudlyCapsIdentifiers</samp>&#8217; as word boundaries.  When Subword mode is
enabled, the minor mode indicator &#8216;<samp class="samp">,</samp>&#8217; appears in the mode line.
See also the similar <code class="code">superword-mode</code> (see <a class="pxref" href="#Misc-for-Programs">Other Features Useful for Editing Programs</a>).
</p>
</div>
<div class="section-level-extent" id="Semantic">
<h3 class="section" id="Semantic-1">27.10 Semantic</h3>
<a class="index-entry-id" id="index-Semantic-package"></a>

<p>Semantic is a package that provides language-aware editing commands
based on <code class="code">source code parsers</code>.  This section provides a brief
description of Semantic; for full details,
see <a href="https://www.gnu.org/software/emacs/manual/html_node/semantic/index.html#Top">Semantic</a> in <cite class="cite">Semantic</cite>.
</p>
<p>Most of the language-aware features in Emacs, such as Font Lock
mode (see <a class="pxref" href="Display.xhtml#Font-Lock">Font Lock mode</a>), rely on rules of thumb<a class="footnote" id="DOCF16" href="#FOOT16"><sup>16</sup></a> that usually give good results but are
never completely exact.  In contrast, the parsers used by Semantic
have an exact understanding of programming language syntax.  This
allows Semantic to provide search, navigation, and completion commands
that are powerful and precise.
</p>
<a class="index-entry-id" id="index-Semantic-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Semantic"></a>
<p>To begin using Semantic, type <kbd class="kbd">M-x semantic-mode</kbd> or click on
the menu item named &#8216;<samp class="samp">Source Code Parsers (Semantic)</samp>&#8217; in the
&#8216;<samp class="samp">Tools</samp>&#8217; menu.  This enables Semantic mode, a global minor mode.
</p>
<p>When Semantic mode is enabled, Emacs automatically attempts to
parse each file you visit.  Currently, Semantic understands C, C++,
HTML, Java, Javascript, Make, Python, Scheme, SRecode, and Texinfo.
Within each parsed buffer, the following commands are available:
</p>
<dl class="table">
<dt><a id="index-C_002dc-_002c-j"></a><kbd class="kbd">C-c , j</kbd></dt>
<dd><p>Prompt for the name of a function defined in the current file, and
move point there (<code class="code">semantic-complete-jump-local</code>).
</p>
</dd>
<dt><a id="index-C_002dc-_002c-J"></a><kbd class="kbd">C-c , J</kbd></dt>
<dd><p>Prompt for the name of a function defined in any file Emacs has
parsed, and move point there (<code class="code">semantic-complete-jump</code>).
</p>
</dd>
<dt><a id="index-C_002dc-_002c-SPC"></a><kbd class="kbd">C-c , <kbd class="key">SPC</kbd></kbd></dt>
<dd><p>Display a list of possible completions for the symbol at point
(<code class="code">semantic-complete-analyze-inline</code>).  This also activates a set
of special key bindings for choosing a completion: <kbd class="kbd"><kbd class="key">RET</kbd></kbd>
accepts the current completion, <kbd class="kbd">M-n</kbd> and <kbd class="kbd">M-p</kbd> cycle through
possible completions, <kbd class="kbd"><kbd class="key">TAB</kbd></kbd> completes as far as possible and
then cycles, and <kbd class="kbd">C-g</kbd> or any other key aborts completion.
</p>
</dd>
<dt><a id="index-C_002dc-_002c-l"></a><kbd class="kbd">C-c , l</kbd></dt>
<dd><p>Display a list of the possible completions of the symbol at point, in
another window (<code class="code">semantic-analyze-possible-completions</code>).
</p></dd>
</dl>

<p>In addition to the above commands, the Semantic package provides a
variety of other ways to make use of parser information.  For
instance, you can use it to display a list of completions when Emacs
is idle.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/semantic/index.html#Top">Semantic</a> in <cite class="cite">Semantic</cite>, for details.
</p>
</div>
<div class="section-level-extent" id="Misc-for-Programs">
<h3 class="section" id="Other-Features-Useful-for-Editing-Programs">27.11 Other Features Useful for Editing Programs</h3>

<p>Some Emacs commands that aren&#8217;t designed specifically for editing
programs are useful for that nonetheless.
</p>
<p>The Emacs commands that operate on words, sentences and paragraphs
are useful for editing code.  Most symbol names contain words
(see <a class="pxref" href="Text.xhtml#Words">Words</a>), while sentences can be found in strings and comments
(see <a class="pxref" href="Text.xhtml#Sentences">Sentences</a>).  As for paragraphs, they are defined in most
programming language modes to begin and end at blank lines
(see <a class="pxref" href="Text.xhtml#Paragraphs">Paragraphs</a>).  Therefore, judicious use of blank lines to make
the program clearer will also provide useful chunks of text for the
paragraph commands to work on.  Auto Fill mode, if enabled in a
programming language major mode, indents the new lines which it
creates.
</p>
<a class="index-entry-id" id="index-superword_002dmode"></a>
<p>Superword mode is a buffer-local minor mode that causes editing and
motion commands to treat symbols (e.g., &#8216;<samp class="samp">this_is_a_symbol</samp>&#8217;) as words.
When Superword mode is enabled, the minor mode indicator
&#8216;<samp class="samp">²</samp>&#8217;
appears in the mode line.  See also the similar <code class="code">subword-mode</code>
(see <a class="pxref" href="#MixedCase-Words">MixedCase Words</a>).
</p>
<a class="index-entry-id" id="index-electric_002dlayout_002dmode"></a>
<p>Electric Layout mode (<kbd class="kbd">M-x electric-layout-mode</kbd>) is a global
minor mode that automatically inserts newlines when you type certain
characters; for example, &#8216;<samp class="samp">{</samp>&#8217;, &#8216;<samp class="samp">}</samp>&#8217; and &#8216;<samp class="samp">;</samp>&#8217; in Javascript
mode.
</p>
<p>Apart from Hideshow mode (see <a class="pxref" href="#Hideshow">Hideshow minor mode</a>), another way to
selectively display parts of a program is to use the selective display
feature (see <a class="pxref" href="Display.xhtml#Selective-Display">Selective Display</a>).  Programming modes often also
support Outline minor mode (see <a class="pxref" href="Text.xhtml#Outline-Mode">Outline Mode</a>), which can be used
with the Foldout package (see <a class="pxref" href="Text.xhtml#Foldout">Folding Editing</a>).
</p>

<a class="index-entry-id" id="index-prettify_002dsymbols_002dmode"></a>
<p>Prettify Symbols mode is a buffer-local minor mode that replaces
certain strings with more attractive versions for display purposes.
For example, in Emacs Lisp mode, it replaces the string &#8216;<samp class="samp">lambda</samp>&#8217;
with the Greek lambda character &#8216;<samp class="samp">λ</samp>&#8217;.  In a TeX buffer, it will
replace &#8216;<samp class="samp">\alpha</samp>&#8217; &#8230; &#8216;<samp class="samp">\omega</samp>&#8217; and other math macros with
their Unicode characters.  You may wish to use this in non-programming
modes as well.  You can customize the mode by adding more entries to
<code class="code">prettify-symbols-alist</code>.  More elaborate customization is
available via customizing <code class="code">prettify-symbols-compose-predicate</code> if
its default value <code class="code">prettify-symbols-default-compose-p</code> is not
appropriate.  There is also a global version,
<code class="code">global-prettify-symbols-mode</code>, which enables the mode in all
buffers that support it.
</p>
<p>The symbol at point can be shown in its original form.  This is
controlled by the variable <code class="code">prettify-symbols-unprettify-at-point</code>:
if non-<code class="code">nil</code>, the original form of symbol at point will be
restored for as long as point is at it.
</p>

</div>
<div class="section-level-extent" id="C-Modes">
<h3 class="section" id="C-and-Related-Modes">27.12 C and Related Modes</h3>
<a class="index-entry-id" id="index-C-mode"></a>
<a class="index-entry-id" id="index-Java-mode"></a>
<a class="index-entry-id" id="index-Pike-mode"></a>
<a class="index-entry-id" id="index-IDL-mode"></a>
<a class="index-entry-id" id="index-CORBA-IDL-mode"></a>
<a class="index-entry-id" id="index-Objective-C-mode"></a>
<a class="index-entry-id" id="index-C_002b_002b-mode"></a>
<a class="index-entry-id" id="index-AWK-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Java"></a>
<a class="index-entry-id" id="index-mode_002c-C"></a>
<a class="index-entry-id" id="index-mode_002c-C_002b_002b"></a>
<a class="index-entry-id" id="index-mode_002c-Objective-C"></a>
<a class="index-entry-id" id="index-mode_002c-CORBA-IDL"></a>
<a class="index-entry-id" id="index-mode_002c-Pike"></a>
<a class="index-entry-id" id="index-mode_002c-AWK"></a>

<p>This section gives a brief description of the special features
available in C, C++, Objective-C, Java, CORBA IDL, Pike and AWK modes.
(These are called &#8220;C mode and related modes&#8221;.)
For more details, see the CC mode Info manual, which is distributed
with Emacs.
</p>

<div class="subsection-level-extent" id="Motion-in-C">
<h4 class="subsection" id="C-Mode-Motion-Commands">27.12.1 C Mode Motion Commands</h4>

<p>This section describes commands for moving point, in C mode and
related modes.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-c_002dend_002dof_002ddefun"></a>
<a id="index-c_002dbeginning_002dof_002ddefun"></a><code class="code">C-M-a</code></dt>
<dt><code class="code">C-M-e</code></dt>
<dd><p>Move point to the beginning or end of the current function or
top-level definition.  In languages with enclosing scopes (such as
C++&#8217;s classes) the <em class="dfn">current function</em> is the immediate one,
possibly inside a scope.  Otherwise it is the one defined by the least
enclosing braces.  (By contrast, <code class="code">beginning-of-defun</code> and
<code class="code">end-of-defun</code> search for braces in column zero.)  See <a class="xref" href="#Moving-by-Defuns">Moving by Defuns</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-c_002dup_002dconditional"></a>
<a id="index-C_002dc-C_002du-_0028C-mode_0029"></a><code class="code">C-c C-u</code></dt>
<dd><p>Move point back to the containing preprocessor conditional, leaving the
mark behind.  A prefix argument acts as a repeat count.  With a negative
argument, move point forward to the end of the containing
preprocessor conditional.
</p>
<p>&#8216;<samp class="samp">#elif</samp>&#8217; is equivalent to &#8216;<samp class="samp">#else</samp>&#8217; followed by &#8216;<samp class="samp">#if</samp>&#8217;, so
the function will stop at a &#8216;<samp class="samp">#elif</samp>&#8217; when going backward, but not
when going forward.
</p>
</dd>
<dt><a class="index-entry-id" id="index-c_002dbackward_002dconditional"></a>
<a id="index-C_002dc-C_002dp-_0028C-mode_0029"></a><code class="code">C-c C-p</code></dt>
<dd><p>Move point back over a preprocessor conditional, leaving the mark
behind.  A prefix argument acts as a repeat count.  With a negative
argument, move forward.
</p>
</dd>
<dt><a class="index-entry-id" id="index-c_002dforward_002dconditional"></a>
<a id="index-C_002dc-C_002dn-_0028C-mode_0029"></a><code class="code">C-c C-n</code></dt>
<dd><p>Move point forward across a preprocessor conditional, leaving the mark
behind.  A prefix argument acts as a repeat count.  With a negative
argument, move backward.
</p>
</dd>
<dt><a class="index-entry-id" id="index-c_002dbeginning_002dof_002dstatement"></a>
<a id="index-M_002da-_0028C-mode_0029"></a><code class="code">M-a</code></dt>
<dd><p>Move point to the beginning of the innermost C statement
(<code class="code">c-beginning-of-statement</code>).  If point is already at the beginning
of a statement, move to the beginning of the preceding statement.  With
prefix argument <var class="var">n</var>, move back <var class="var">n</var> &#8722; 1 statements.
</p>
<p>In comments or in strings which span more than one line, this command
moves by sentences instead of statements.
</p>
</dd>
<dt><a class="index-entry-id" id="index-c_002dend_002dof_002dstatement"></a>
<a id="index-M_002de-_0028C-mode_0029"></a><code class="code">M-e</code></dt>
<dd><p>Move point to the end of the innermost C statement or sentence; like
<kbd class="kbd">M-a</kbd> except that it moves in the other direction
(<code class="code">c-end-of-statement</code>).
</p></dd>
</dl>

</div>
<div class="subsection-level-extent" id="Electric-C">
<h4 class="subsection" id="Electric-C-Characters">27.12.2 Electric C Characters</h4>

<p>In C mode and related modes, certain printing characters are
<em class="dfn">electric</em>&#8212;in addition to inserting themselves, they also
reindent the current line, and optionally also insert newlines.  The
electric characters are <kbd class="kbd">{</kbd>, <kbd class="kbd">}</kbd>, <kbd class="kbd">:</kbd>, <kbd class="kbd">#</kbd>,
<kbd class="kbd">;</kbd>, <kbd class="kbd">,</kbd>, <kbd class="kbd">&lt;</kbd>, <kbd class="kbd">&gt;</kbd>, <kbd class="kbd">/</kbd>, <kbd class="kbd">*</kbd>, <kbd class="kbd">(</kbd>, and
<kbd class="kbd">)</kbd>.
</p>
<p>You might find electric indentation inconvenient if you are editing
chaotically indented code.  If you are new to CC Mode, you might find
it disconcerting.  You can toggle electric action with the command
<kbd class="kbd">C-c C-l</kbd>; when it is enabled, &#8216;<samp class="samp">/<var class="var">c</var>l</samp>&#8217; appears in the
mode line after the mode name (where <var class="var">c</var>, if present, is &#8216;<samp class="samp">*</samp>&#8217;
or &#8216;<samp class="samp">/</samp>&#8217;, depending on whether the comment style is block or line).
See <a href="https://www.gnu.org/software/emacs/manual/html_node/ccmode/Minor-Modes.html#Minor-Modes">Minor Modes</a> in <cite class="cite">The CC Mode Manual</cite>, for more about
mode-line indicators in CC Mode.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-c_002dtoggle_002delectric_002dstate"></a>
<a id="index-C_002dc-C_002dl-_0028C-mode_0029"></a><kbd class="kbd">C-c C-l</kbd></dt>
<dd><p>Toggle electric action (<code class="code">c-toggle-electric-state</code>).  With a
positive prefix argument, this command enables electric action, with a
negative one it disables it.
</p></dd>
</dl>

<p>Electric characters insert newlines only when, in addition to the
electric state, the <em class="dfn">auto-newline</em> feature is enabled (indicated
by &#8216;<samp class="samp">/<var class="var">c</var>la</samp>&#8217; in the mode line after the mode name).  You can
turn this feature on or off with the command <kbd class="kbd">C-c C-a</kbd>:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-c_002dtoggle_002dauto_002dnewline"></a>
<a id="index-C_002dc-C_002da-_0028C-mode_0029"></a><kbd class="kbd">C-c C-a</kbd></dt>
<dd><p>Toggle the auto-newline feature (<code class="code">c-toggle-auto-newline</code>).  With a
prefix argument, this command turns the auto-newline feature on if the
argument is positive, and off if it is negative.
</p></dd>
</dl>

<p>Usually the CC Mode style configures the exact circumstances in
which Emacs inserts auto-newlines.  You can also configure this
directly.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/ccmode/Custom-Auto_002dnewlines.html#Custom-Auto_002dnewlines">Custom Auto-newlines</a> in <cite class="cite">The CC Mode Manual</cite>.
</p>
</div>
<div class="subsection-level-extent" id="Hungry-Delete">
<h4 class="subsection" id="Hungry-Delete-Feature-in-C">27.12.3 Hungry Delete Feature in C</h4>
<a class="index-entry-id" id="index-hungry-deletion-_0028C-Mode_0029"></a>

<p>If you want to delete an entire block of whitespace at point, you
can use <em class="dfn">hungry deletion</em>.  This deletes all the contiguous
whitespace either before point or after point in a single operation.
<em class="dfn">Whitespace</em> here includes tabs and newlines, but not comments or
preprocessor commands.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-C_002dc-C_002dDEL-_0028C-Mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-DEL-_0028C-Mode_0029"></a>
<a id="index-c_002dhungry_002ddelete_002dbackwards"></a><kbd class="kbd">C-c C-<kbd class="key">DEL</kbd></kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">DEL</kbd></kbd></dt>
<dd><p>Delete the entire block of whitespace preceding point (<code class="code">c-hungry-delete-backwards</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dc-C_002dd-_0028C-Mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dDelete-_0028C-Mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-Delete-_0028C-Mode_0029"></a>
<a id="index-c_002dhungry_002ddelete_002dforward"></a><kbd class="kbd">C-c C-d</kbd></dt>
<dt><kbd class="kbd">C-c C-<kbd class="key">Delete</kbd></kbd></dt>
<dt><kbd class="kbd">C-c <kbd class="key">Delete</kbd></kbd></dt>
<dd><p>Delete the entire block of whitespace after point (<code class="code">c-hungry-delete-forward</code>).
</p></dd>
</dl>

<p>As an alternative to the above commands, you can enable <em class="dfn">hungry
delete mode</em>.  When this feature is enabled (indicated by &#8216;<samp class="samp">h</samp>&#8217;
after a &#8216;<samp class="samp">/</samp>&#8217; in the mode line after the mode name), a single
<kbd class="kbd"><kbd class="key">DEL</kbd></kbd> deletes all preceding whitespace, not just one space,
and a single <kbd class="kbd">C-d</kbd> (but <em class="emph">not</em> plain <kbd class="kbd"><kbd class="key">Delete</kbd></kbd>)
deletes all following whitespace.
</p>
<dl class="table">
<dt><a id="index-c_002dtoggle_002dhungry_002dstate"></a><kbd class="kbd">M-x c-toggle-hungry-state</kbd></dt>
<dd><p>Toggle the hungry-delete feature
(<code class="code">c-toggle-hungry-state</code>).  With a prefix argument,
this command turns the hungry-delete feature on if the argument is
positive, and off if it is negative.
</p></dd>
</dl>

<a class="index-entry-id" id="index-c_002dhungry_002ddelete_002dkey"></a>
<p>The variable <code class="code">c-hungry-delete-key</code> controls whether the
hungry-delete feature is enabled.
</p>
</div>
<div class="subsection-level-extent" id="Other-C-Commands">
<h4 class="subsection" id="Other-Commands-for-C-Mode">27.12.4 Other Commands for C Mode</h4>

<dl class="table">
<dt><a id="index-c_002dcontext_002dline_002dbreak"></a><kbd class="kbd">M-x c-context-line-break</kbd></dt>
<dd><p>This command inserts a line break and indents the new line in a manner
appropriate to the context.  In normal code, it does the work of
<kbd class="kbd"><kbd class="key">RET</kbd></kbd> (<code class="code">newline</code>), in a C preprocessor line it additionally
inserts a &#8216;<samp class="samp">\</samp>&#8217; at the line break, and within comments it&#8217;s like
<kbd class="kbd">M-j</kbd> (<code class="code">c-indent-new-comment-line</code>).
</p>
<p><code class="code">c-context-line-break</code> isn&#8217;t bound to a key by default, but it
needs a binding to be useful.  The following code will bind it to
<kbd class="kbd"><kbd class="key">RET</kbd></kbd>.  We use <code class="code">c-initialization-hook</code> here to make
sure the keymap is loaded before we try to change it.
</p>
<div class="example">
<pre class="example-preformatted">(defun my-bind-clb ()
  (keymap-set c-mode-base-map &quot;RET&quot;
              'c-context-line-break))
(add-hook 'c-initialization-hook 'my-bind-clb)
</pre></div>

</dd>
<dt><kbd class="kbd">C-M-h</kbd></dt>
<dd><p>Put mark at the end of a function definition, and put point at the
beginning (<code class="code">c-mark-function</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-c_002dfill_002dparagraph"></a>
<a id="index-M_002dq-_0028C-mode_0029"></a><kbd class="kbd">M-q</kbd></dt>
<dd><p>Fill a paragraph, handling C and C++ comments (<code class="code">c-fill-paragraph</code>).
If any part of the current line is a comment or within a comment, this
command fills the comment or the paragraph of it that point is in,
preserving the comment indentation and comment delimiters.
</p>
</dd>
<dt><a class="index-entry-id" id="index-expansion-of-C-macros"></a>
<a class="index-entry-id" id="index-c_002dmacro_002dexpand"></a>
<a class="index-entry-id" id="index-C_002dc-C_002de-_0028C-mode_0029"></a>
<a id="index-macro-expansion-in-C"></a><kbd class="kbd">C-c C-e</kbd></dt>
<dd><p>Run the C preprocessor on the text in the region, and show the result,
which includes the expansion of all the macro calls
(<code class="code">c-macro-expand</code>).  The buffer text before the region is also
included in preprocessing, for the sake of macros defined there, but the
output from this part isn&#8217;t shown.
</p>
<p>When you are debugging C code that uses macros, sometimes it is hard to
figure out precisely how the macros expand.  With this command, you
don&#8217;t have to figure it out; you can see the expansions.
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dc-C_002d_005c-_0028C-mode_0029"></a>
<a id="index-c_002dbackslash_002dregion"></a><kbd class="kbd">C-c C-\</kbd></dt>
<dd><p>Insert or align &#8216;<samp class="samp">\</samp>&#8217; characters at the ends of the lines of the
region (<code class="code">c-backslash-region</code>).  This is useful after writing or
editing a C macro definition.
</p>
<p>If a line already ends in &#8216;<samp class="samp">\</samp>&#8217;, this command adjusts the amount of
whitespace before it.  Otherwise, it inserts a new &#8216;<samp class="samp">\</samp>&#8217;.  However,
the last line in the region is treated specially; no &#8216;<samp class="samp">\</samp>&#8217; is
inserted on that line, and any &#8216;<samp class="samp">\</samp>&#8217; there is deleted.
</p>
</dd>
<dt><a class="index-entry-id" id="index-cpp_002dhighlight_002dbuffer"></a>
<a id="index-preprocessor-highlighting"></a><kbd class="kbd">M-x cpp-highlight-buffer</kbd></dt>
<dd><p>Highlight parts of the text according to its preprocessor conditionals.
This command displays another buffer named <samp class="file">*CPP Edit*</samp>, which
serves as a graphic menu for selecting how to display particular kinds
of conditionals and their contents.  After changing various settings,
click on &#8216;<samp class="samp">[A]pply these settings</samp>&#8217; (or go to that buffer and type
<kbd class="kbd">a</kbd>) to rehighlight the C mode buffer accordingly.
</p>
</dd>
<dt><a class="index-entry-id" id="index-C_002dc-C_002ds-_0028C-mode_0029"></a>
<a id="index-c_002dshow_002dsyntactic_002dinformation"></a><kbd class="kbd">C-c C-s</kbd></dt>
<dd><p>Display the syntactic information about the current source line
(<code class="code">c-show-syntactic-information</code>).  This information directs how
the line is indented.
</p>
</dd>
<dt><a class="index-entry-id" id="index-global_002dcwarn_002dmode"></a>
<a class="index-entry-id" id="index-global_002dcwarn_002dmode-1"></a>
<a class="index-entry-id" id="index-CWarn-mode"></a>
<a class="index-entry-id" id="index-suspicious-constructions-in-C_002c-C_002b_002b"></a>
<a id="index-cwarn_002dmode"></a><kbd class="kbd">M-x cwarn-mode</kbd></dt>
<dt><kbd class="kbd">M-x global-cwarn-mode</kbd></dt>
<dd><p>CWarn minor mode highlights certain suspicious C and C++ constructions:
</p>
<ul class="itemize mark-bullet">
<li>Assignments inside expressions.
</li><li>Semicolon following immediately after &#8216;<samp class="samp">if</samp>&#8217;, &#8216;<samp class="samp">for</samp>&#8217;, and &#8216;<samp class="samp">while</samp>&#8217;
(except after a &#8216;<samp class="samp">do &#8230; while</samp>&#8217; statement);
</li><li>C++ functions with reference parameters.
</li></ul>

<p>You can enable the mode for one buffer with the command <kbd class="kbd">M-x
cwarn-mode</kbd>, or for all suitable buffers with the command <kbd class="kbd">M-x
global-cwarn-mode</kbd> or by customizing the variable
<code class="code">global-cwarn-mode</code>.  You must also enable Font Lock mode to make
it work.
</p>
</dd>
<dt><a class="index-entry-id" id="index-Hide_002difdef-mode"></a>
<a class="index-entry-id" id="index-hide_002difdef_002dshadow"></a>
<a id="index-hide_002difdef_002dmode"></a><kbd class="kbd">M-x hide-ifdef-mode</kbd></dt>
<dd><p>Hide-ifdef minor mode hides selected code within &#8216;<samp class="samp">#if</samp>&#8217; and
&#8216;<samp class="samp">#ifdef</samp>&#8217; preprocessor blocks.  If you change the variable
<code class="code">hide-ifdef-shadow</code> to <code class="code">t</code>, Hide-ifdef minor mode
shadows preprocessor blocks by displaying them with a less
prominent face, instead of hiding them entirely.  See the
documentation string of <code class="code">hide-ifdef-mode</code> for more information.
</p>
</dd>
<dt><a class="index-entry-id" id="index-ff_002dfind_002drelated_002dfile"></a>
<a class="index-entry-id" id="index-ff_002drelated_002dfile_002dalist"></a>
<a id="index-related-files"></a><kbd class="kbd">M-x ff-find-related-file</kbd></dt>
<dd><p>Find a file related in a special way to the file visited by the
current buffer.  Typically this will be the header file corresponding
to a C/C++ source file, or vice versa.  The variable
<code class="code">ff-related-file-alist</code> specifies how to compute related file
names.
</p></dd>
</dl>

</div>
</div>
<div class="section-level-extent" id="Asm-Mode">
<h3 class="section" id="Asm-Mode-1">27.13 Asm Mode</h3>

<a class="index-entry-id" id="index-Asm-mode"></a>
<a class="index-entry-id" id="index-assembler-mode"></a>
<p>Asm mode is a major mode for editing files of assembler code.  It
defines these commands:
</p>
<dl class="table">
<dt><kbd class="kbd"><kbd class="key">TAB</kbd></kbd></dt>
<dd><p><code class="code">tab-to-tab-stop</code>.
</p>
</dd>
<dt><kbd class="kbd">C-j</kbd></dt>
<dd><p>Insert a newline and then indent using <code class="code">tab-to-tab-stop</code>.
</p>
</dd>
<dt><kbd class="kbd">:</kbd></dt>
<dd><p>Insert a colon and then remove the indentation from before the label
preceding colon.  Then do <code class="code">tab-to-tab-stop</code>.
</p>
</dd>
<dt><kbd class="kbd">;</kbd></dt>
<dd><p>Insert or align a comment.
</p></dd>
</dl>

<p>The variable <code class="code">asm-comment-char</code> specifies which character
starts comments in assembler syntax.
</p>
</div>
<div class="section-level-extent" id="Fortran">
<h3 class="section" id="Fortran-Mode">27.14 Fortran Mode</h3>
<a class="index-entry-id" id="index-Fortran-mode"></a>
<a class="index-entry-id" id="index-mode_002c-Fortran"></a>

<a class="index-entry-id" id="index-Fortran-fixed-form-and-free-form"></a>
<a class="index-entry-id" id="index-Fortran-77-and-Fortran-90_002c-95_002c-2003_002c-2008"></a>
<a class="index-entry-id" id="index-f90_002dmode"></a>
<a class="index-entry-id" id="index-fortran_002dmode"></a>
<p>Fortran mode is meant for editing fixed form (and also tab
format) source code (normally Fortran 77).  For editing more modern
free-form source code (Fortran 90, 95, 2003, 2008), use F90 mode
(<code class="code">f90-mode</code>).  Emacs normally uses Fortran mode for files with
extension &#8216;<samp class="samp">.f</samp>&#8217;, &#8216;<samp class="samp">.F</samp>&#8217; or &#8216;<samp class="samp">.for</samp>&#8217;, and F90 mode for the
extensions &#8216;<samp class="samp">.f90</samp>&#8217;, &#8216;<samp class="samp">.f95</samp>&#8217;, &#8216;<samp class="samp">.f03</samp>&#8217; and &#8216;<samp class="samp">.f08</samp>&#8217;.
Customize <code class="code">auto-mode-alist</code> to add more extensions.  GNU Fortran
supports both free and fixed form.  This manual mainly documents Fortran
mode, but the corresponding F90 mode features are mentioned when
relevant.
</p>
<p>Fortran mode provides special motion commands for Fortran statements
and subprograms, and indentation commands that understand Fortran
conventions of nesting, line numbers and continuation statements.
Fortran mode has support for Auto Fill mode that breaks long lines into
proper Fortran continuation lines.  Fortran mode also supports Hideshow
minor mode
(see <a class="pxref" href="#Hideshow">Hideshow minor mode</a>),
and Imenu
(see <a class="pxref" href="#Imenu">Imenu</a>).
</p>
<p>Special commands for comments are provided because Fortran comments
are unlike those of other languages.  Built-in abbrevs optionally save
typing when you insert Fortran keywords.
</p>
<p>Use <kbd class="kbd">M-x fortran-mode</kbd> to switch to this major mode.  This
command runs the hook <code class="code">fortran-mode-hook</code>.
See <a class="xref" href="Customization.xhtml#Hooks">Hooks</a>.
</p>

<div class="subsection-level-extent" id="Fortran-Motion">
<h4 class="subsection" id="Motion-Commands">27.14.1 Motion Commands</h4>

<p>In addition to the normal commands for moving by and operating on
defuns (Fortran subprograms&#8212;functions and subroutines, as well
as modules for F90 mode, using the commands <code class="code">fortran-end-of-subprogram</code>
and <code class="code">fortran-beginning-of-subprogram</code>), Fortran mode provides
special commands to move by statements and other program units.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-fortran_002dnext_002dstatement"></a>
<a class="index-entry-id" id="index-f90_002dnext_002dstatement"></a>
<a id="index-C_002dc-C_002dn-_0028Fortran-mode_0029"></a><kbd class="kbd">C-c C-n</kbd></dt>
<dd><p>Move to the beginning of the next statement
(<code class="code">fortran-next-statement</code>/<code class="code">f90-next-statement</code>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-fortran_002dprevious_002dstatement"></a>
<a class="index-entry-id" id="index-f90_002dprevious_002dstatement"></a>
<a id="index-C_002dc-C_002dp-_0028Fortran-mode_0029"></a><kbd class="kbd">C-c C-p</kbd></dt>
<dd><p>Move to the beginning of the previous statement
(<code class="code">fortran-previous-statement</code>/<code class="code">f90-previous-statement</code>).
If there is no previous statement (i.e., if called from the first
statement in the buffer), move to the start of the buffer.
</p>
</dd>
<dt><a class="index-entry-id" id="index-f90_002dnext_002dblock"></a>
<a id="index-C_002dc-C_002de-_0028F90-mode_0029"></a><kbd class="kbd">C-c C-e</kbd></dt>
<dd><p>Move point forward to the start of the next code block, or the end of
the current one, whichever comes first (<code class="code">f90-next-block</code>).
A code block is a subroutine, <code class="code">if</code>&#8211;<code class="code">endif</code> statement, and
so forth.  This command exists for F90 mode only, not Fortran mode.
With a numeric argument, it moves forward that many blocks.
</p>
</dd>
<dt><a class="index-entry-id" id="index-f90_002dprevious_002dblock"></a>
<a id="index-C_002dc-C_002da-_0028F90-mode_0029"></a><kbd class="kbd">C-c C-a</kbd></dt>
<dd><p>Move point backward to the previous block
(<code class="code">f90-previous-block</code>).  This is like <code class="code">f90-next-block</code>, but
moves backwards.
</p>
</dd>
<dt><a class="index-entry-id" id="index-fortran_002dend_002dof_002dblock"></a>
<a class="index-entry-id" id="index-f90_002dend_002dof_002dblock"></a>
<a id="index-C_002dM_002dn-_0028Fortran-mode_0029"></a><kbd class="kbd">C-M-n</kbd></dt>
<dd><p>Move to the end of the current code block
(<code class="code">fortran-end-of-block</code>/<code class="code">f90-end-of-block</code>).  With a numeric
argument, move forward that number of blocks.  The mark is set before
moving point.  The F90 mode version of this command checks for
consistency of block types and labels (if present), but it does not
check the outermost block since that may be incomplete.
</p>
</dd>
<dt><a class="index-entry-id" id="index-fortran_002dbeginning_002dof_002dblock"></a>
<a class="index-entry-id" id="index-f90_002dbeginning_002dof_002dblock"></a>
<a id="index-C_002dM_002dp-_0028Fortran-mode_0029"></a><kbd class="kbd">C-M-p</kbd></dt>
<dd><p>Move to the start of the current code block
(<code class="code">fortran-beginning-of-block</code>/<code class="code">f90-beginning-of-block</code>). This
is like <code class="code">fortran-end-of-block</code>, but moves backwards.
</p></dd>
</dl>

<p>The commands <code class="code">fortran-beginning-of-subprogram</code> and
<code class="code">fortran-end-of-subprogram</code> move to the start or end of the
current subprogram, respectively.  The commands <code class="code">fortran-mark-do</code>
and <code class="code">fortran-mark-if</code> mark the end of the current <code class="code">do</code> or
<code class="code">if</code> block, and move point to the start.
</p>

</div>
<div class="subsection-level-extent" id="Fortran-Indent">
<h4 class="subsection" id="Fortran-Indentation">27.14.2 Fortran Indentation</h4>

<p>Special commands and features are needed for indenting fixed (or tab)
form Fortran code in order to make sure various syntactic entities (line
numbers, comment line indicators and continuation line flags) appear in
the required columns.
</p>

<div class="subsubsection-level-extent" id="ForIndent-Commands">
<h4 class="subsubsection" id="Fortran-Indentation-and-Filling-Commands">27.14.2.1 Fortran Indentation and Filling Commands</h4>

<dl class="table">
<dt><kbd class="kbd">C-M-j</kbd></dt>
<dd><p>Break the current line at point and set up a continuation line
(<code class="code">fortran-split-line</code>).
</p>
</dd>
<dt><kbd class="kbd">M-^</kbd></dt>
<dd><p>Join this line to the previous line (<code class="code">fortran-join-line</code>).
</p>
</dd>
<dt><kbd class="kbd">C-M-q</kbd></dt>
<dd><p>Indent all the lines of the subprogram that point is in
(<code class="code">fortran-indent-subprogram</code>).
</p>
</dd>
<dt><kbd class="kbd">M-q</kbd></dt>
<dd><p>Fill a comment block or statement (using <code class="code">fortran-fill-paragraph</code>
or <code class="code">fortran-fill-statement</code>).
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dM_002dq-_0028Fortran-mode_0029"></a>
<a class="index-entry-id" id="index-fortran_002dindent_002dsubprogram"></a>
<p>The key <kbd class="kbd">C-M-q</kbd> runs <code class="code">fortran-indent-subprogram</code>, a command
to reindent all the lines of the Fortran subprogram (function or
subroutine) containing point.
</p>
<a class="index-entry-id" id="index-C_002dM_002dj-_0028Fortran-mode_0029"></a>
<a class="index-entry-id" id="index-fortran_002dsplit_002dline"></a>
<p>The key <kbd class="kbd">C-M-j</kbd> runs <code class="code">fortran-split-line</code>, which splits
a line in the appropriate fashion for Fortran.  In a non-comment line,
the second half becomes a continuation line and is indented
accordingly.  In a comment line, both halves become separate comment
lines.
</p>
<a class="index-entry-id" id="index-M_002d_005e-_0028Fortran-mode_0029"></a>
<a class="index-entry-id" id="index-C_002dc-C_002dd-_0028Fortran-mode_0029"></a>
<a class="index-entry-id" id="index-fortran_002djoin_002dline"></a>
<p><kbd class="kbd">M-^</kbd> or <kbd class="kbd">C-c C-d</kbd> run the command <code class="code">fortran-join-line</code>,
which joins a continuation line back to the previous line, roughly as
the inverse of <code class="code">fortran-split-line</code>.  The point must be on a
continuation line when this command is invoked.
</p>
<a class="index-entry-id" id="index-M_002dq-_0028Fortran-mode_0029"></a>
<p><kbd class="kbd">M-q</kbd> in Fortran mode fills the comment block or statement that
point is in.  This removes any excess statement continuations.
</p>
</div>
<div class="subsubsection-level-extent" id="ForIndent-Cont">
<h4 class="subsubsection" id="Continuation-Lines-2">27.14.2.2 Continuation Lines</h4>
<a class="index-entry-id" id="index-Fortran-continuation-lines"></a>

<a class="index-entry-id" id="index-fortran_002dcontinuation_002dstring"></a>
<p>Most Fortran 77 compilers allow two ways of writing continuation lines.
If the first non-space character on a line is in column 5, then that
line is a continuation of the previous line.  We call this <em class="dfn">fixed
form</em>.  (In GNU Emacs we always count columns from 0; but note that
the Fortran standard counts from 1.  You can customize the variable
<code class="code">column-number-indicator-zero-based</code> to make the column display
Fortran-like; see <a class="pxref" href="Display.xhtml#Optional-Mode-Line">Optional Mode Line Features</a>.)
The variable
<code class="code">fortran-continuation-string</code> specifies what character to put in
column 5.  A line that starts with a tab character followed by any digit
except &#8216;<samp class="samp">0</samp>&#8217; is also a continuation line.  We call this style of
continuation <em class="dfn">tab format</em>.  (Fortran 90 introduced free-form
continuation lines.)
</p>
<a class="index-entry-id" id="index-indent_002dtabs_002dmode-_0028Fortran-mode_0029"></a>
<a class="index-entry-id" id="index-fortran_002danalyze_002ddepth"></a>
<a class="index-entry-id" id="index-fortran_002dtab_002dmode_002ddefault"></a>
<p>Fortran mode can use either style of continuation line.  When you
enter Fortran mode, it tries to deduce the proper continuation style
automatically from the buffer contents.  It does this by scanning up to
<code class="code">fortran-analyze-depth</code> (default 100) lines from the start of the
buffer.  The first line that begins with either a tab character or six
spaces determines the choice.  If the scan fails (for example, if the
buffer is new and therefore empty), the value of
<code class="code">fortran-tab-mode-default</code> (<code class="code">nil</code> for fixed form, and
non-<code class="code">nil</code> for tab format) is used.  &#8216;<samp class="samp">/t</samp>&#8217;
(<code class="code">fortran-tab-mode-string</code>) in the mode line indicates tab format
is selected.  Fortran mode sets the value of <code class="code">indent-tabs-mode</code>
accordingly.
</p>
<p>If the text on a line starts with the Fortran continuation marker
&#8216;<samp class="samp">$</samp>&#8217;, or if it begins with any non-whitespace character in column
5, Fortran mode treats it as a continuation line.  When you indent a
continuation line with <kbd class="kbd"><kbd class="key">TAB</kbd></kbd>, it converts the line to the
current continuation style.  When you split a Fortran statement with
<kbd class="kbd">C-M-j</kbd>, the continuation marker on the newline is created
according to the continuation style.
</p>
<p>The setting of continuation style affects several other aspects of
editing in Fortran mode.  In fixed form mode, the minimum column
number for the body of a statement is 6.  Lines inside of Fortran
blocks that are indented to larger column numbers must use only the
space character for whitespace.  In tab format mode, the minimum
column number for the statement body is 8, and the whitespace before
column 8 must consist of one tab character.
</p>
</div>
<div class="subsubsection-level-extent" id="ForIndent-Num">
<h4 class="subsubsection" id="Line-Numbers">27.14.2.3 Line Numbers</h4>

<p>If a number is the first non-whitespace in the line, Fortran
indentation assumes it is a line number and moves it to columns 0
through 4.  (Columns always count from 0 in Emacs, but setting
<code class="code">column-number-indicator-zero-based</code> to <code class="code">nil</code> can change
that,
see <a class="pxref" href="Display.xhtml#Optional-Mode-Line">Optional Mode Line Features</a>.)
</p>
<a class="index-entry-id" id="index-fortran_002dline_002dnumber_002dindent"></a>
<p>Line numbers of four digits or less are normally indented one space.
The variable <code class="code">fortran-line-number-indent</code> controls this; it
specifies the maximum indentation a line number can have.  The default
value of the variable is 1.  Fortran mode tries to prevent line number
digits passing column 4, reducing the indentation below the specified
maximum if necessary.  If <code class="code">fortran-line-number-indent</code> has the
value 5, line numbers are right-justified to end in column 4.
</p>
<a class="index-entry-id" id="index-fortran_002delectric_002dline_002dnumber"></a>
<p>Simply inserting a line number is enough to indent it according to
these rules.  As each digit is inserted, the indentation is recomputed.
To turn off this feature, set the variable
<code class="code">fortran-electric-line-number</code> to <code class="code">nil</code>.
</p>

</div>
<div class="subsubsection-level-extent" id="ForIndent-Conv">
<h4 class="subsubsection" id="Syntactic-Conventions">27.14.2.4 Syntactic Conventions</h4>

<p>Fortran mode assumes that you follow certain conventions that simplify
the task of understanding a Fortran program well enough to indent it
properly:
</p>
<ul class="itemize mark-bullet">
<li>Two nested &#8216;<samp class="samp">do</samp>&#8217; loops never share a &#8216;<samp class="samp">continue</samp>&#8217; statement.

</li><li>Fortran keywords such as &#8216;<samp class="samp">if</samp>&#8217;, &#8216;<samp class="samp">else</samp>&#8217;, &#8216;<samp class="samp">then</samp>&#8217;, &#8216;<samp class="samp">do</samp>&#8217;
and others are written without embedded whitespace or line breaks.

<p>Fortran compilers generally ignore whitespace outside of string
constants, but Fortran mode does not recognize these keywords if they
are not contiguous.  Constructs such as &#8216;<samp class="samp">else if</samp>&#8217; or &#8216;<samp class="samp">end do</samp>&#8217;
are acceptable, but the second word should be on the same line as the
first and not on a continuation line.
</p></li></ul>

<p>If you fail to follow these conventions, the indentation commands may
indent some lines unaesthetically.  However, a correct Fortran program
retains its meaning when reindented even if the conventions are not
followed.
</p>
</div>
<div class="subsubsection-level-extent" id="ForIndent-Vars">
<h4 class="subsubsection" id="Variables-for-Fortran-Indentation">27.14.2.5 Variables for Fortran Indentation</h4>

<a class="index-entry-id" id="index-fortran_002ddo_002dindent"></a>
<a class="index-entry-id" id="index-fortran_002dif_002dindent"></a>
<a class="index-entry-id" id="index-fortran_002dstructure_002dindent"></a>
<a class="index-entry-id" id="index-fortran_002dcontinuation_002dindent"></a>
<a class="index-entry-id" id="index-fortran_002dcheck_002dall_002dnum_2026"></a>
<a class="index-entry-id" id="index-fortran_002dminimum_002dstatement_002dindent_2026"></a>
<p>Several additional variables control how Fortran indentation works:
</p>
<dl class="table">
<dt><code class="code">fortran-do-indent</code></dt>
<dd><p>Extra indentation within each level of &#8216;<samp class="samp">do</samp>&#8217; statement (default 3).
</p>
</dd>
<dt><code class="code">fortran-if-indent</code></dt>
<dd><p>Extra indentation within each level of &#8216;<samp class="samp">if</samp>&#8217;, &#8216;<samp class="samp">select case</samp>&#8217;, or
&#8216;<samp class="samp">where</samp>&#8217; statements (default 3).
</p>
</dd>
<dt><code class="code">fortran-structure-indent</code></dt>
<dd><p>Extra indentation within each level of &#8216;<samp class="samp">structure</samp>&#8217;, &#8216;<samp class="samp">union</samp>&#8217;,
&#8216;<samp class="samp">map</samp>&#8217;, or &#8216;<samp class="samp">interface</samp>&#8217; statements (default 3).
</p>
</dd>
<dt><code class="code">fortran-continuation-indent</code></dt>
<dd><p>Extra indentation for bodies of continuation lines (default 5).
</p>
</dd>
<dt><code class="code">fortran-check-all-num-for-matching-do</code></dt>
<dd><p>In Fortran 77, a numbered &#8216;<samp class="samp">do</samp>&#8217; statement is terminated by any statement
with a matching line number.  It is common (but not compulsory) to use a
&#8216;<samp class="samp">continue</samp>&#8217; statement for this purpose.  If this variable has a
non-<code class="code">nil</code> value, indenting any numbered statement must check for a
&#8216;<samp class="samp">do</samp>&#8217; that ends there.  If you always end &#8216;<samp class="samp">do</samp>&#8217; statements with
a &#8216;<samp class="samp">continue</samp>&#8217; line (or if you use the more modern &#8216;<samp class="samp">enddo</samp>&#8217;),
then you can speed up indentation by setting this variable to
<code class="code">nil</code> (the default).
</p>
</dd>
<dt><code class="code">fortran-blink-matching-if</code></dt>
<dd><p>If this is <code class="code">t</code>, indenting an &#8216;<samp class="samp">endif</samp>&#8217; (or &#8216;<samp class="samp">enddo</samp>&#8217;)
statement moves the cursor momentarily to the matching &#8216;<samp class="samp">if</samp>&#8217; (or
&#8216;<samp class="samp">do</samp>&#8217;) statement to show where it is.  The default is <code class="code">nil</code>.
</p>
</dd>
<dt><code class="code">fortran-minimum-statement-indent-fixed</code></dt>
<dd><p>Minimum indentation for Fortran statements when using fixed form
continuation line style.  Statement bodies are never indented by less than
this.  The default is 6.
</p>
</dd>
<dt><code class="code">fortran-minimum-statement-indent-tab</code></dt>
<dd><p>Minimum indentation for Fortran statements for tab format continuation line
style.  Statement bodies are never indented by less than this.  The
default is 8.
</p></dd>
</dl>

<p>The following section describes the variables controlling the
indentation of comments.
</p>
</div>
</div>
<div class="subsection-level-extent" id="Fortran-Comments">
<h4 class="subsection" id="Fortran-Comments-1">27.14.3 Fortran Comments</h4>

<p>The usual Emacs comment commands assume that a comment can follow a
line of code.  In Fortran 77, the standard comment syntax requires an
entire line to be just a comment.  Therefore, Fortran mode replaces the
standard Emacs comment commands and defines some new variables.
</p>
<a class="index-entry-id" id="index-fortran_002dcomment_002dline_002dstart"></a>
<p>Fortran mode can also handle the Fortran 90 comment syntax where
comments start with &#8216;<samp class="samp">!</samp>&#8217; and can follow other text.  Because only
some Fortran 77 compilers accept this syntax, Fortran mode will not
insert such comments unless you have said in advance to do so.  To do
this, set the variable <code class="code">fortran-comment-line-start</code> to &#8216;<samp class="samp">&quot;!&quot;</samp>&#8217;.
If you use an unusual value, you may need to change
<code class="code">fortran-comment-line-start-skip</code>.
</p>

<dl class="table">
<dt><kbd class="kbd">M-;</kbd></dt>
<dd><p>Align comment or insert new comment (<code class="code">comment-dwim</code>).
</p>
</dd>
<dt><kbd class="kbd">C-x ;</kbd></dt>
<dd><p>Applies to nonstandard &#8216;<samp class="samp">!</samp>&#8217; comments only (<code class="code">comment-set-column</code>).
</p>
</dd>
<dt><kbd class="kbd">C-c ;</kbd></dt>
<dd><p>Turn all lines of the region into comments, or (with argument) turn them back
into real code (<code class="code">fortran-comment-region</code>).
</p></dd>
</dl>

<p><kbd class="kbd">M-;</kbd> in Fortran mode runs the standard <code class="code">comment-dwim</code>.
This recognizes any kind of existing comment and aligns its text
appropriately; if there is no existing comment, a comment is inserted
and aligned.  Inserting and aligning comments are not the same in
Fortran mode as in other modes.
</p>
<p>When a new comment must be inserted, if the current line is blank, a
full-line comment is inserted.  On a non-blank line, a nonstandard &#8216;<samp class="samp">!</samp>&#8217;
comment is inserted if you have said you want to use them.  Otherwise, a
full-line comment is inserted on a new line before the current line.
</p>
<p>Nonstandard &#8216;<samp class="samp">!</samp>&#8217; comments are aligned like comments in other
languages, but full-line comments are different.  In a standard full-line
comment, the comment delimiter itself must always appear in column zero.
What can be aligned is the text within the comment.  You can choose from
three styles of alignment by setting the variable
<code class="code">fortran-comment-indent-style</code> to one of these values:
</p>
<a class="index-entry-id" id="index-fortran_002dcomment_002dindent_002dstyle"></a>
<a class="index-entry-id" id="index-fortran_002dcomment_002dline_002dextra_002dindent"></a>
<dl class="table">
<dt><code class="code">fixed</code></dt>
<dd><p>Align the text at a fixed column, which is the sum of
<code class="code">fortran-comment-line-extra-indent</code> and the minimum statement
indentation.  This is the default.
</p>
<p>The minimum indentation is
<code class="code">fortran-minimum-statement-indent-tab</code> for tab format
continuation line style and <code class="code">fortran-minimum-statement-indent-fixed</code>
for fixed form style.
</p>
</dd>
<dt><code class="code">relative</code></dt>
<dd><p>Align the text as if it were a line of code, but with an additional
<code class="code">fortran-comment-line-extra-indent</code> columns of indentation.
</p>
</dd>
<dt><code class="code">nil</code></dt>
<dd><p>Don&#8217;t move text in full-line comments automatically.
</p></dd>
</dl>

<a class="index-entry-id" id="index-fortran_002dcomment_002dindent_002dchar"></a>
<p>In addition, you can specify the character to be used to indent within
full-line comments by setting the variable
<code class="code">fortran-comment-indent-char</code> to the single-character string you want
to use.
</p>
<a class="index-entry-id" id="index-fortran_002ddirective_002dre"></a>
<p>Compiler directive lines, or preprocessor lines, have much the same
appearance as comment lines.  It is important, though, that such lines
never be indented at all, no matter what the value of
<code class="code">fortran-comment-indent-style</code>.  The variable
<code class="code">fortran-directive-re</code> is a regular expression that specifies which
lines are directives.  Matching lines are never indented, and receive
distinctive font-locking.
</p>
<p>The normal Emacs comment command <kbd class="kbd">C-x ;</kbd> (<code class="code">comment-set-column</code>)
has not been redefined.  If you use &#8216;<samp class="samp">!</samp>&#8217; comments, this command
can be used with them.  Otherwise, it is useless in Fortran mode.
</p>
<a class="index-entry-id" id="index-C_002dc-_003b-_0028Fortran-mode_0029"></a>
<a class="index-entry-id" id="index-fortran_002dcomment_002dregion"></a>
<a class="index-entry-id" id="index-fortran_002dcomment_002dregion-1"></a>
<p>The command <kbd class="kbd">C-c ;</kbd> (<code class="code">fortran-comment-region</code>) turns all the
lines of the region into comments by inserting the string &#8216;<samp class="samp">c$$$</samp>&#8217; at
the front of each one.  With a numeric argument, it turns the region
back into live code by deleting &#8216;<samp class="samp">c$$$</samp>&#8217; from the front of each line
in it.  The string used for these comments can be controlled by setting
the variable <code class="code">fortran-comment-region</code>.  Note that here we have an
example of a command and a variable with the same name; these two uses
of the name never conflict because in Lisp and in Emacs it is always
clear from the context which one is meant.
</p>
</div>
<div class="subsection-level-extent" id="Fortran-Autofill">
<h4 class="subsection" id="Auto-Fill-in-Fortran-Mode">27.14.4 Auto Fill in Fortran Mode</h4>

<p>Fortran mode has specialized support for Auto Fill mode, which is a
minor mode that automatically splits statements as you insert them
when they become too wide.  Splitting a statement involves making
continuation lines using <code class="code">fortran-continuation-string</code>
(see <a class="pxref" href="#ForIndent-Cont">Continuation Lines</a>).  This splitting happens when you type
<kbd class="kbd"><kbd class="key">SPC</kbd></kbd>, <kbd class="kbd"><kbd class="key">RET</kbd></kbd>, or <kbd class="kbd"><kbd class="key">TAB</kbd></kbd>, and also in the
Fortran indentation commands.  You activate Auto Fill in Fortran mode
in the normal way.
See <a class="xref" href="Text.xhtml#Auto-Fill">Auto Fill Mode</a>.
</p>
<a class="index-entry-id" id="index-fortran_002dbreak_002dbefore_002ddelimiters"></a>
<p>Auto Fill breaks lines at spaces or delimiters when the lines get
longer than the desired width (the value of <code class="code">fill-column</code>).  The
delimiters (besides whitespace) that Auto Fill can break at are
&#8216;<samp class="samp">+</samp>&#8217;, &#8216;<samp class="samp">-</samp>&#8217;, &#8216;<samp class="samp">/</samp>&#8217;, &#8216;<samp class="samp">*</samp>&#8217;, &#8216;<samp class="samp">=</samp>&#8217;, &#8216;<samp class="samp">&lt;</samp>&#8217;, &#8216;<samp class="samp">&gt;</samp>&#8217;,
and &#8216;<samp class="samp">,</samp>&#8217;.  The line break comes after the delimiter if the
variable <code class="code">fortran-break-before-delimiters</code> is <code class="code">nil</code>.
Otherwise (and by default), the break comes before the delimiter.
</p>
<p>To enable Auto Fill in all Fortran buffers, add
<code class="code">auto-fill-mode</code> to <code class="code">fortran-mode-hook</code>.
See <a class="xref" href="Customization.xhtml#Hooks">Hooks</a>.
</p>
</div>
<div class="subsection-level-extent" id="Fortran-Columns">
<h4 class="subsection" id="Checking-Columns-in-Fortran">27.14.5 Checking Columns in Fortran</h4>

<a class="index-entry-id" id="index-fortran_002dline_002dlength"></a>
<p>In standard Fortran 77, anything beyond column 72 is ignored.
Most compilers provide an option to change this (for example,
&#8216;<samp class="samp">-ffixed-line-length-N</samp>&#8217; in gfortran).  Customize the variable
<code class="code">fortran-line-length</code> to change the line length in Fortran mode.
Anything beyond this point is font-locked as a comment.  (Unless it is
inside a string: strings that extend beyond <code class="code">fortran-line-length</code>
will confuse font-lock.)
</p>
<dl class="table">
<dt><kbd class="kbd">C-c C-r</kbd></dt>
<dd><p>Display a column ruler momentarily above the current line
(<code class="code">fortran-column-ruler</code>).
</p>
</dd>
<dt><kbd class="kbd">C-c C-w</kbd></dt>
<dd><p>Split the current window horizontally temporarily so that it is
<code class="code">fortran-line-length</code> columns wide
(<code class="code">fortran-window-create-momentarily</code>).  This may help you avoid
making lines longer than the limit imposed by your Fortran compiler.
</p>
</dd>
<dt><kbd class="kbd">C-u C-c C-w</kbd></dt>
<dd><p>Split the current window horizontally so that it is
<code class="code">fortran-line-length</code> columns wide (<code class="code">fortran-window-create</code>).
You can then continue editing.
</p>
</dd>
<dt><kbd class="kbd">M-x fortran-strip-sequence-nos</kbd></dt>
<dd><p>Delete all text in column <code class="code">fortran-line-length</code> and beyond.
</p></dd>
</dl>

<a class="index-entry-id" id="index-C_002dc-C_002dr-_0028Fortran-mode_0029"></a>
<a class="index-entry-id" id="index-fortran_002dcolumn_002druler"></a>
<p>The command <kbd class="kbd">C-c C-r</kbd> (<code class="code">fortran-column-ruler</code>) shows a column
ruler momentarily above the current line.  The comment ruler is two lines
of text that show you the locations of columns with special significance in
Fortran programs.  Square brackets show the limits of the columns for line
numbers, and curly brackets show the limits of the columns for the
statement body.  Column numbers appear above them.
</p>
<p>Note that the column numbers count from zero, as always in GNU Emacs
(but customizing <code class="code">column-number-indicator-zero-based</code> can change
column display to match that of Fortran;
see <a class="pxref" href="Display.xhtml#Optional-Mode-Line">Optional Mode Line Features</a>.)
As a result, the numbers may be one less than those you are familiar
with; but the positions they indicate in the line are standard for
Fortran.
</p>
<a class="index-entry-id" id="index-fortran_002dcolumn_002druler_002dfixed"></a>
<a class="index-entry-id" id="index-fortran_002dcolumn_002druler_002dtabs"></a>
<p>The text used to display the column ruler depends on the value of the
variable <code class="code">indent-tabs-mode</code>.  If <code class="code">indent-tabs-mode</code> is
<code class="code">nil</code>, then the value of the variable
<code class="code">fortran-column-ruler-fixed</code> is used as the column ruler.
Otherwise, the value of the variable <code class="code">fortran-column-ruler-tab</code> is
displayed.  By changing these variables, you can change the column ruler
display.
</p>
<a class="index-entry-id" id="index-C_002dc-C_002dw-_0028Fortran-mode_0029"></a>
<a class="index-entry-id" id="index-fortran_002dwindow_002dcreate_002dmomentarily"></a>
<p><kbd class="kbd">C-c C-w</kbd> (<code class="code">fortran-window-create-momentarily</code>) temporarily
splits the current window horizontally, making a window
<code class="code">fortran-line-length</code> columns wide, so you can see any lines that
are too long.  Type a space to restore the normal width.
</p>
<a class="index-entry-id" id="index-C_002du-C_002dc-C_002dw-_0028Fortran-mode_0029"></a>
<a class="index-entry-id" id="index-fortran_002dwindow_002dcreate"></a>
<p>You can also split the window horizontally and continue editing with
the split in place.  To do this, use <kbd class="kbd">C-u C-c C-w</kbd> (<code class="code">M-x
fortran-window-create</code>).  By editing in this window you can
immediately see when you make a line too wide to be correct Fortran.
</p>
<a class="index-entry-id" id="index-fortran_002dstrip_002dsequence_002dnos"></a>
<p>The command <kbd class="kbd">M-x fortran-strip-sequence-nos</kbd> deletes all text in
column <code class="code">fortran-line-length</code> and beyond, on all lines in the
current buffer.  This is the easiest way to get rid of old sequence
numbers.
</p>
</div>
<div class="subsection-level-extent" id="Fortran-Abbrev">
<h4 class="subsection" id="Fortran-Keyword-Abbrevs">27.14.6 Fortran Keyword Abbrevs</h4>

<p>Fortran mode provides many built-in abbrevs for common keywords and
declarations.  These are the same sort of abbrev that you can define
yourself.  To use them, you must turn on Abbrev mode.
See <a class="xref" href="Abbrevs.xhtml#Abbrevs">Abbrevs</a>.
</p>
<p>The built-in abbrevs are unusual in one way: they all start with a
semicolon.  For example, one built-in Fortran abbrev is &#8216;<samp class="samp">;c</samp>&#8217; for
&#8216;<samp class="samp">continue</samp>&#8217;.  If you insert &#8216;<samp class="samp">;c</samp>&#8217; and then insert a punctuation
character such as a space or a newline, the &#8216;<samp class="samp">;c</samp>&#8217; expands automatically
to &#8216;<samp class="samp">continue</samp>&#8217;, provided Abbrev mode is enabled.
</p>
<p>Type &#8216;<samp class="samp">;?</samp>&#8217; or &#8216;<samp class="samp">;C-h</samp>&#8217; to display a list of all the built-in
Fortran abbrevs and what they stand for.
</p></div>
</div>
</div>
<div class="footnotes-segment">
<h4 class="footnotes-heading">Footnotes</h4>

<h5 class="footnote-body-heading"><a id="FOOT13" href="#DOCF13">(13)</a></h5>
<p>The word &#8220;sexp&#8221;
is used to refer to an expression in Lisp.</p>
<h5 class="footnote-body-heading"><a id="FOOT14" href="#DOCF14">(14)</a></h5>
<p>The name &#8220;ElDoc&#8221; is a historical accident: this mode started by
supporting Emacs Lisp buffers.
</p>
<h5 class="footnote-body-heading"><a id="FOOT15" href="#DOCF15">(15)</a></h5>
<p>On graphical displays, the <kbd class="kbd">M-<kbd class="key">TAB</kbd></kbd> key is usually reserved
by the window manager for switching graphical windows, so you should
type <kbd class="kbd">C-M-i</kbd> or <kbd class="kbd"><kbd class="key">ESC</kbd> <kbd class="key">TAB</kbd></kbd> instead.
</p>
<h5 class="footnote-body-heading"><a id="FOOT16" href="#DOCF16">(16)</a></h5>
<p>Regular
expressions and syntax tables.</p>
</div>



</body>
</html>
