<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Created by GNU Texinfo 7.1, https://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<!-- 这是 GNU Emacs 手册,
为 Emacs  29.2 更新

英文原版版权提示 - Original English version copyright note

Copyright © 1985-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."

中文翻译版版权提示 - Chinese translation revision copyright notice

版权所有 © 1985-2024 林羿轩(Ralph Lin).

您有在 Free Software Foundation发布的GNU Free Documentation License 第1.3版或之后版本的约束下对其进行再发布及修的权利。 恒定章节为 "The GNU Manifesto," "分发" "(中文版)GNU GENERAL PUBLIC LICENSE" 和
"GNU GENERAL PUBLIC LICENSE" , 前封面文字为 "A GNU
Manual,"后封面文字如下(a).  本书的FDL许可证可以在 "GNU Free Documentation
License."找到.

(a) FSF的后封面文字为: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom."
 -->
<title>Appendix C Command Line Arguments for Emacs Invocation (GNU Emacs Manual)</title>

<meta name="description" content="Appendix C Command Line Arguments for Emacs Invocation (GNU Emacs Manual)"/>
<meta name="keywords" content="Appendix C Command Line Arguments for Emacs Invocation (GNU Emacs Manual)"/>
<meta name="resource-type" content="document"/>
<meta name="distribution" content="global"/>
<meta name="Generator" content="texi2any"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link href="emacs.xhtml" rel="start" title="Emacs 编辑器"/>
<link href="Key-Index.xhtml" rel="index" title="Key (Character) Index"/>
<link href="emacs.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="emacs.xhtml" rel="up" title="Emacs 编辑器"/>
<link href="X-Resources.xhtml#X-Resources" rel="next" title="Appendix D X Options and Resources"/>
<link href="GNU-Free-Documentation-License.xhtml" rel="prev" title="Appendix B GNU Free Documentation License"/>
<style type="text/css">
<!--
div.example {margin-left: 3.2em}
kbd.kbd {font-style: oblique}
kbd.key {font-style: normal}
span.r {font-family: initial; font-weight: normal; font-style: normal}
-->
</style>


</head>

<body lang="zh_CN">
<div class="appendix-level-extent" id="Emacs-Invocation">

<h2 class="appendix" id="Command-Line-Arguments-for-Emacs-Invocation">Appendix C Command Line Arguments for Emacs Invocation</h2>
<a class="index-entry-id" id="index-command-line-arguments"></a>
<a class="index-entry-id" id="index-arguments-_0028command-line_0029"></a>
<a class="index-entry-id" id="index-options-_0028command-line_0029"></a>
<a class="index-entry-id" id="index-switches-_0028command-line_0029"></a>
<a class="index-entry-id" id="index-startup-_0028command-line-arguments_0029"></a>
<a class="index-entry-id" id="index-invocation-_0028command-line-arguments_0029"></a>

<p>Emacs supports command line arguments to request various actions
when invoking Emacs.  These are for compatibility with other editors
and for sophisticated activities.  We don&#8217;t recommend using them for
ordinary editing (See <a class="xref" href="Emacs-Server.xhtml#Emacs-Server">Using Emacs as a Server</a>, for a way to access an existing
Emacs job from the command line).
</p>
<p>Arguments starting with &#8216;<samp class="samp">-</samp>&#8217; are <em class="dfn">options</em>, and so is
&#8216;<samp class="samp">+<var class="var">linenum</var></samp>&#8217;.  All other arguments specify files to visit.
Emacs visits the specified files while it starts up.  The last file
specified on the command line becomes the current buffer; the other
files are also visited in other buffers.  As with most programs, the
special argument &#8216;<samp class="samp">--</samp>&#8217; says that all subsequent arguments are file
names, not options, even if they start with &#8216;<samp class="samp">-</samp>&#8217;.
</p>
<p>Emacs command options can specify many things, such as the size and
position of the X window Emacs uses, its colors, and so on.  A few
options support advanced usage, such as running Lisp functions on files
in batch mode.  The sections of this chapter describe the available
options, arranged according to their purpose.
</p>
<p>There are two ways of writing options: the short forms that start with
a single &#8216;<samp class="samp">-</samp>&#8217;, and the long forms that start with &#8216;<samp class="samp">--</samp>&#8217;.  For
example, &#8216;<samp class="samp">-d</samp>&#8217; is a short form and &#8216;<samp class="samp">--display</samp>&#8217; is the
corresponding long form.
</p>
<p>The long forms with &#8216;<samp class="samp">--</samp>&#8217; are easier to remember, but longer to
type.  However, you don&#8217;t have to spell out the whole option name; any
unambiguous abbreviation is enough.  When a long option requires an
argument, you can use either a space or an equal sign to separate the
option name and the argument.  Thus, for the option &#8216;<samp class="samp">--display</samp>&#8217;,
you can write either &#8216;<samp class="samp">--display sugar-bombs:0.0</samp>&#8217; or
&#8216;<samp class="samp">--display=sugar-bombs:0.0</samp>&#8217;.  We recommend an equal sign because
it makes the relationship clearer, and the tables below always show an
equal sign.
</p>
<a class="index-entry-id" id="index-initial-options-_0028command-line_0029"></a>
<a class="index-entry-id" id="index-action-options-_0028command-line_0029"></a>
<a class="index-entry-id" id="index-command_002dline_002dargs"></a>
<p>Most options specify how to initialize Emacs, or set parameters for
the Emacs session.  We call them <em class="dfn">initial options</em>.  A few options
specify things to do, such as loading libraries or calling Lisp
functions.  These are called <em class="dfn">action options</em>.  These and file
names together are called <em class="dfn">action arguments</em>.  The action
arguments are stored as a list of strings in the variable
<code class="code">command-line-args</code>.  (Actually, when Emacs starts up,
<code class="code">command-line-args</code> contains all the arguments passed from the
command line; during initialization, the initial arguments are removed
from this list when they are processed, leaving only the action
arguments.)
</p>

<div class="appendixsec-level-extent" id="Action-Arguments">
<h3 class="appendixsec" id="Action-Arguments-1">C.1 Action Arguments</h3>

<p>Here is a table of action arguments:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-inhibit_002dstartup_002dbuffer_002dmenu"></a>
<a id="index-visiting-files_002c-command_002dline-argument"></a>&#8216;<samp class="samp"><var class="var">file</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002d_002dfile"></a>
</dd>
<dt>&#8216;<samp class="samp">--file=<var class="var">file</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002d_002dfind_002dfile"></a>
</dd>
<dt>&#8216;<samp class="samp">--find-file=<var class="var">file</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002d_002dvisit"></a>
</dd>
<dt>&#8216;<samp class="samp">--visit=<var class="var">file</var></samp>&#8217;</dt>
<dd><p>Visit the specified <var class="var">file</var>.  See <a class="xref" href="Files.xhtml#Visiting">Visiting Files</a>.
</p>
<p>When Emacs starts up, it displays the startup buffer in one window,
and the buffer visiting <var class="var">file</var> in another window
(see <a class="pxref" href="Windows.xhtml#Windows">Multiple Windows</a>).  If you supply more than one file argument, the
displayed file is the last one specified on the command line; the
other files are visited but their buffers are not shown.
</p>
<p>If the startup buffer is disabled (see <a class="pxref" href="Entering-Emacs.xhtml">Entering Emacs</a>), then
starting Emacs with one file argument displays the buffer visiting
<var class="var">file</var> in a single window.  With two file arguments, Emacs
displays the files in two different windows.  With more than two file
arguments, Emacs displays the last file specified in one window, plus
another window with a Buffer Menu showing all the other files
(see <a class="pxref" href="Buffers.xhtml#Several-Buffers">Operating on Several Buffers</a>).  To inhibit using the Buffer Menu for this,
change the variable <code class="code">inhibit-startup-buffer-menu</code> to <code class="code">t</code>.
</p>
</dd>
<dt><a id="index-_002blinenum"></a>&#8216;<samp class="samp">+<var class="var">linenum</var> <var class="var">file</var></samp>&#8217;</dt>
<dd><p>Visit the specified <var class="var">file</var>, then go to line number <var class="var">linenum</var>
in it.
</p>
</dd>
<dt>&#8216;<samp class="samp">+<var class="var">linenum</var>:<var class="var">columnnum</var> <var class="var">file</var></samp>&#8217;</dt>
<dd><p>Visit the specified <var class="var">file</var>, then go to line number <var class="var">linenum</var>
and put point at column number <var class="var">columnnum</var>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-loading-Lisp-libraries_002c-command_002dline-argument"></a>
<a id="index-_002d_002dload"></a>&#8216;<samp class="samp">-l <var class="var">file</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dl"></a>
</dd>
<dt>&#8216;<samp class="samp">--load=<var class="var">file</var></samp>&#8217;</dt>
<dd><p>Load a Lisp library named <var class="var">file</var> with the function <code class="code">load</code>.
If <var class="var">file</var> is not an absolute file name, Emacs first looks for it
in the current directory, then in the directories listed in
<code class="code">load-path</code> (see <a class="pxref" href="Building.xhtml#Lisp-Libraries">Libraries of Lisp Code for Emacs</a>).
</p>
<p><strong class="strong">Warning:</strong> If previous command-line arguments have visited
files, the current directory is the directory of the last file
visited.
</p>
</dd>
<dt><a id="index-_002d_002ddirectory"></a>&#8216;<samp class="samp">-L <var class="var">dir</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dL"></a>
</dd>
<dt>&#8216;<samp class="samp">--directory=<var class="var">dir</var></samp>&#8217;</dt>
<dd><p>Prepend directory <var class="var">dir</var> to the variable <code class="code">load-path</code>.
If you specify multiple &#8216;<samp class="samp">-L</samp>&#8217; options, Emacs preserves the
relative order; i.e., using &#8216;<samp class="samp">-L /foo -L /bar</samp>&#8217; results in
a <code class="code">load-path</code> of the form <code class="code">(&quot;/foo&quot; &quot;/bar&quot; &#8230;)</code>.
If <var class="var">dir</var> begins with &#8216;<samp class="samp">:</samp>&#8217;, Emacs removes the &#8216;<samp class="samp">:</samp>&#8217; and
appends (rather than prepends) the remainder to <code class="code">load-path</code>.
(On MS Windows, use &#8216;<samp class="samp">;</samp>&#8217; instead of &#8216;<samp class="samp">:</samp>&#8217;; i.e., use
the value of <code class="code">path-separator</code>.)
</p>
</dd>
<dt><a class="index-entry-id" id="index-call-Lisp-functions_002c-command_002dline-argument"></a>
<a id="index-_002d_002dfuncall"></a>&#8216;<samp class="samp">-f <var class="var">function</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002df"></a>
</dd>
<dt>&#8216;<samp class="samp">--funcall=<var class="var">function</var></samp>&#8217;</dt>
<dd><p>Call Lisp function <var class="var">function</var>.  If it is an interactive function
(a command), it reads the arguments interactively just as if you had
called the same function with a key sequence.  Otherwise, it calls the
function with no arguments.
</p>
</dd>
<dt><a class="index-entry-id" id="index-evaluate-expression_002c-command_002dline-argument"></a>
<a id="index-_002d_002dexecute"></a>&#8216;<samp class="samp">--eval=<var class="var">expression</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002d_002deval"></a>
</dd>
<dt>&#8216;<samp class="samp">--execute=<var class="var">expression</var></samp>&#8217;</dt>
<dd><p>Evaluate Lisp expression <var class="var">expression</var>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-insert-file-contents_002c-command_002dline-argument"></a>
<a id="index-_002d_002dinsert"></a>&#8216;<samp class="samp">--insert=<var class="var">file</var></samp>&#8217;</dt>
<dd><p>Insert the contents of <var class="var">file</var> into the buffer that is current when
this command-line argument is processed.  Usually, this is the
<samp class="file">*scratch*</samp> buffer (see <a class="pxref" href="Building.xhtml#Lisp-Interaction">Lisp Interaction Buffers</a>), but if arguments
earlier on the command line visit files or switch buffers, that might
be a different buffer.  The effect of this command-line argument is
like what <kbd class="kbd">M-x insert-file</kbd> does (see <a class="pxref" href="Files.xhtml#Misc-File-Ops">Miscellaneous File Operations</a>).
</p>
</dd>
<dt><a id="index-_002d_002dkill"></a>&#8216;<samp class="samp">--kill</samp>&#8217;</dt>
<dd><p>Exit from Emacs without asking for confirmation.
</p>
</dd>
<dt><a id="index-_002d_002dhelp"></a>&#8216;<samp class="samp">--help</samp>&#8217;</dt>
<dd><p>Print a usage message listing all available options, then exit
successfully.
</p>
</dd>
<dt><a id="index-_002d_002dversion"></a>&#8216;<samp class="samp">--version</samp>&#8217;</dt>
<dd><p>Print Emacs version, then exit successfully.
</p>
</dd>
<dt><a id="index-_002d_002dfingerprint"></a>&#8216;<samp class="samp">--fingerprint</samp>&#8217;</dt>
<dd><p>Print the Emacs &#8220;fingerprint&#8221;, which is used to uniquely identify
the compiled version of Emacs.
</p></dd>
</dl>

</div>
<div class="appendixsec-level-extent" id="Initial-Options">
<h3 class="appendixsec" id="Initial-Options-1">C.2 Initial Options</h3>

<p>The initial options specify parameters for the Emacs session.  This
section describes the more general initial options; some other options
specifically related to the X Window System appear in the following
sections.
</p>
<p>Some initial options affect the loading of the initialization file.
Normally, Emacs first loads <samp class="file">site-start.el</samp> if it exists, then
your own initialization file if it exists, and finally the default
initialization file <samp class="file">default.el</samp> if it exists (see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>).  Certain options prevent loading of some of these files or
substitute other files for them.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-change-Emacs-directory"></a>
<a id="index-_002d_002dchdir"></a>&#8216;<samp class="samp">-chdir <var class="var">directory</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dchdir"></a>
</dd>
<dt>&#8216;<samp class="samp">--chdir=<var class="var">directory</var></samp>&#8217;</dt>
<dd><p>Change to <var class="var">directory</var> before doing anything else.  This is mainly used
by session management in X so that Emacs starts in the same directory as it
stopped.  This makes desktop saving and restoring easier.
</p>
</dd>
<dt><a class="index-entry-id" id="index-device-for-Emacs-terminal-I_002fO"></a>
<a id="index-_002d_002dterminal"></a>&#8216;<samp class="samp">-t <var class="var">device</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dt"></a>
</dd>
<dt>&#8216;<samp class="samp">--terminal=<var class="var">device</var></samp>&#8217;</dt>
<dd><p>Use <var class="var">device</var> as the device for terminal input and output.  This
option implies &#8216;<samp class="samp">--no-window-system</samp>&#8217;.
</p>
</dd>
<dt><a class="index-entry-id" id="index-display-for-Emacs-frame"></a>
<a id="index-_002d_002ddisplay"></a>&#8216;<samp class="samp">-d <var class="var">display</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dd"></a>
</dd>
<dt>&#8216;<samp class="samp">--display=<var class="var">display</var></samp>&#8217;</dt>
<dd><p>Use the X Window System and use the display named <var class="var">display</var> to open
the initial Emacs frame.  See <a class="xref" href="#Display-X">Specifying the Display Name</a>, for more details.
</p>
</dd>
<dt><a class="index-entry-id" id="index-disable-window-system"></a>
<a id="index-_002d_002dno_002dwindow_002dsystem"></a>&#8216;<samp class="samp">-nw</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dnw"></a>
</dd>
<dt>&#8216;<samp class="samp">--no-window-system</samp>&#8217;</dt>
<dd><p>Don&#8217;t communicate directly with the window system, disregarding the
<code class="env">DISPLAY</code> environment variable even if it is set.  This means that
Emacs uses the terminal from which it was launched for all its display
and input.
</p>
</dd>
<dt><a id="index-batch-mode"></a>&#8216;<samp class="samp">-batch</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002d_002dbatch"></a>
</dd>
<dt>&#8216;<samp class="samp">--batch</samp>&#8217;</dt>
<dd><p>Run Emacs in <em class="dfn">batch mode</em>.  Batch mode is used for running
programs written in Emacs Lisp from shell scripts, makefiles, and so
on.  To invoke a Lisp program, use the &#8216;<samp class="samp">-batch</samp>&#8217; option in
conjunction with one or more of &#8216;<samp class="samp">-l</samp>&#8217;, &#8216;<samp class="samp">-f</samp>&#8217; or &#8216;<samp class="samp">--eval</samp>&#8217;
(see <a class="pxref" href="#Action-Arguments">Action Arguments</a>).  See <a class="xref" href="#Command-Example">Command Argument Example</a>, for an example.
</p>
<p>In batch mode, Emacs does not display the text being edited, and the
standard terminal interrupt characters such as <kbd class="kbd">C-z</kbd> and <kbd class="kbd">C-c</kbd>
have their usual effect.  Emacs functions that normally print a
message in the echo area will print to either the standard output
stream (<code class="code">stdout</code>) or the standard error stream (<code class="code">stderr</code>)
instead.  (To be precise, functions like <code class="code">prin1</code>, <code class="code">princ</code>
and <code class="code">print</code> print to <code class="code">stdout</code>, while <code class="code">message</code> and
<code class="code">error</code> print to <code class="code">stderr</code>.)  Functions that normally read
keyboard input from the minibuffer take their input from the
terminal&#8217;s standard input stream (<code class="code">stdin</code>) instead.
</p>
<p>&#8216;<samp class="samp">--batch</samp>&#8217; implies &#8216;<samp class="samp">-q</samp>&#8217; (do not load an initialization file),
but <samp class="file">site-start.el</samp> is loaded nonetheless.  It also causes Emacs
to exit after processing all the command options.  In addition, it
disables auto-saving except in buffers for which auto-saving is
explicitly requested, and when saving files it omits the <code class="code">fsync</code>
system call unless otherwise requested.
</p>
<a class="index-entry-id" id="index-backtrace_002don_002derror_002dnoninteractive"></a>
<p>Errors that occur when running a &#8216;<samp class="samp">--batch</samp>&#8217; Emacs will result in
an Emacs Lisp backtrace being printed.  To disable this behavior, set
<code class="code">backtrace-on-error-noninteractive</code> to <code class="code">nil</code>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-script-mode"></a>
<a id="index-_002d_002dscript"></a>&#8216;<samp class="samp">--script <var class="var">file</var></samp>&#8217;</dt>
<dd><p>Run Emacs in batch mode, like &#8216;<samp class="samp">--batch</samp>&#8217;, and then read and
execute the Lisp code in <var class="var">file</var>.
</p>
<p>The normal use of this option is in executable script files that run
Emacs.  They can start with this text on the first line
</p>
<div class="example">
<pre class="example-preformatted">#!/usr/bin/emacs --script
</pre></div>

<p>which will invoke Emacs with &#8216;<samp class="samp">--script</samp>&#8217; and supply the name of
the script file as <var class="var">file</var>.  Emacs Lisp then treats the &#8216;<samp class="samp">#!</samp>&#8217;
on this first line as a comment delimiter.
</p>
</dd>
<dt><a id="index-_002dx"></a>&#8216;<samp class="samp">-x</samp>&#8217;</dt>
<dd><p>This option can only be used in executable script files, and should be
invoked like this:
</p>
<div class="example">
<pre class="example-preformatted">#!/usr/bin/emacs -x
</pre></div>

<p>This is like &#8216;<samp class="samp">--script</samp>&#8217;, but suppresses loading the init files
(like <code class="code">--quick</code>), and can&#8217;t be used on a normal command line
(since it doesn&#8217;t specify the script to load).  In addition, when it
reaches the end of the script, it exits Emacs and uses the value of
the final form as the exit value from the script (if the final value
is numerical).  Otherwise, it will always exit with a zero value.
Note that when Emacs reads the Lisp code in this case, it ignores any
file-local variables (see <a class="pxref" href="Customization.xhtml#Specifying-File-Variables">Specifying File Variables</a>), both in the
first line and in a local-variables section near the end of the file.
</p>
</dd>
<dt><a class="index-entry-id" id="index-build-details"></a>
<a class="index-entry-id" id="index-deterministic-build"></a>
<a id="index-_002d_002dno_002dbuild_002ddetails"></a>&#8216;<samp class="samp">--no-build-details</samp>&#8217;</dt>
<dd><p>Omit details like system name and build time from the Emacs
executable, so that builds are more deterministic.  This switch is not
meant for regular (or interactive) use, since it makes commands like
<code class="code">system-name</code> return <code class="code">nil</code>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-bypassing-init-and-default_002eel-file"></a>
<a class="index-entry-id" id="index-init-file_002c-not-loading"></a>
<a class="index-entry-id" id="index-default_002eel-file_002c-not-loading"></a>
<a id="index-_002d_002dno_002dinit_002dfile"></a>&#8216;<samp class="samp">-q</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dq"></a>
</dd>
<dt>&#8216;<samp class="samp">--no-init-file</samp>&#8217;</dt>
<dd><p>Do not load any initialization file (see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>).  When Emacs
is invoked with this option, the Customize facility does not allow
options to be saved (see <a class="pxref" href="Customization.xhtml#Easy-Customization">Easy Customization Interface</a>).  This option does
not disable loading <samp class="file">site-start.el</samp>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-site_002dstart_002eel-file_002c-not-loading"></a>
<a id="index-_002dnsl"></a>&#8216;<samp class="samp">--no-site-file</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002d_002dno_002dsite_002dfile"></a>
</dd>
<dt>&#8216;<samp class="samp">-nsl</samp>&#8217;</dt>
<dd><p>Do not load <samp class="file">site-start.el</samp> (see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>).  The &#8216;<samp class="samp">-Q</samp>&#8217;
option does this too, but other options like &#8216;<samp class="samp">-q</samp>&#8217; do not.
</p>
</dd>
<dt><a class="index-entry-id" id="index-site_002dlisp-files_002c-not-loading"></a>
<a id="index-_002d_002dno_002dsite_002dlisp"></a>&#8216;<samp class="samp">--no-site-lisp</samp>&#8217;</dt>
<dd><p>Do not include the <samp class="file">site-lisp</samp> directories in <code class="code">load-path</code>
(see <a class="pxref" href="Customization.xhtml#Init-File">The Emacs Initialization File</a>).  The &#8216;<samp class="samp">-Q</samp>&#8217; option does this too.
</p>
</dd>
<dt><a id="index-_002d_002dinit_002ddirectory"></a>&#8216;<samp class="samp">--init-directory</samp>&#8217;</dt>
<dd><p>Specify the directory to use when looking for the Emacs init files.
</p>
</dd>
<dt><a class="index-entry-id" id="index-splash-screen"></a>
<a class="index-entry-id" id="index-startup-message"></a>
<a id="index-_002d_002dno_002dsplash"></a>&#8216;<samp class="samp">--no-splash</samp>&#8217;</dt>
<dd><p>Do not display a startup screen.  You can also achieve this effect by
setting the variable <code class="code">inhibit-startup-screen</code> to non-<code class="code">nil</code>
in your initialization file (see <a class="pxref" href="Entering-Emacs.xhtml">Entering Emacs</a>).
</p>
</dd>
<dt><a class="index-entry-id" id="index-X-resources_002c-not-loading"></a>
<a id="index-_002d_002dno_002dx_002dresources"></a>&#8216;<samp class="samp">--no-x-resources</samp>&#8217;</dt>
<dd><p>Do not load X resources.  You can also achieve this effect by setting
the variable <code class="code">inhibit-x-resources</code> to <code class="code">t</code> in your
initialization file (see <a class="pxref" href="X-Resources.xhtml#Resources">X Resources</a>).
</p>
</dd>
<dt><a id="index-_002d_002dquick"></a>&#8216;<samp class="samp">-Q</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dQ"></a>
</dd>
<dt>&#8216;<samp class="samp">--quick</samp>&#8217;</dt>
<dd><p>Start Emacs with minimum customizations.  This is similar to using
&#8216;<samp class="samp">-q</samp>&#8217;, &#8216;<samp class="samp">--no-site-file</samp>&#8217;, &#8216;<samp class="samp">--no-site-lisp</samp>&#8217;,
&#8216;<samp class="samp">--no-x-resources</samp>&#8217;, and &#8216;<samp class="samp">--no-splash</samp>&#8217; together.
</p>
</dd>
<dt>&#8216;<samp class="samp">-daemon</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002ddaemon"></a>
</dd>
<dt>&#8216;<samp class="samp">--daemon[=<var class="var">name</var>]</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002d_002ddaemon"></a>
</dd>
<dt>&#8216;<samp class="samp">--bg-daemon[=<var class="var">name</var>]</samp>&#8217;</dt>
<dt>&#8216;<samp class="samp">--fg-daemon[=<var class="var">name</var>]</samp>&#8217;</dt>
<dd><p>Start Emacs as a daemon: after Emacs starts up, it starts the Emacs
server without opening any frames.  You can then use the
<code class="command">emacsclient</code> command to connect to Emacs for editing.
(Optionally, you can specify an explicit <var class="var">name</var> for the server; if
you do, you will need to specify the same <var class="var">name</var> when you invoke
<code class="command">emacsclient</code>, via its <samp class="option">--socket-name</samp> option, see
<a class="ref" href="Emacs-Server.xhtml#emacsclient-Options"><code class="code">emacsclient</code> Options</a>.)  See <a class="xref" href="Emacs-Server.xhtml#Emacs-Server">Using Emacs as a Server</a>, for information
about using Emacs as a daemon.  A &#8220;background&#8221; daemon disconnects
from the terminal and runs in the background (&#8216;<samp class="samp">--daemon</samp>&#8217; is an
alias for &#8216;<samp class="samp">--bg-daemon</samp>&#8217;).
</p>
</dd>
<dt><a id="index-_002d_002dno_002ddesktop"></a>&#8216;<samp class="samp">--no-desktop</samp>&#8217;</dt>
<dd><p>Do not reload any saved desktop.  See <a class="xref" href="Saving-Emacs-Sessions.xhtml">Saving Emacs Sessions</a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-load-init-file-of-another-user"></a>
<a id="index-_002d_002duser"></a>&#8216;<samp class="samp">-u <var class="var">user</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002du"></a>
</dd>
<dt>&#8216;<samp class="samp">--user=<var class="var">user</var></samp>&#8217;</dt>
<dd><p>Load <var class="var">user</var>&#8217;s initialization file instead of your
own<a class="footnote" id="DOCF25" href="#FOOT25"><sup>25</sup></a>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-errors-in-init-file"></a>
<a id="index-_002d_002ddebug_002dinit"></a>&#8216;<samp class="samp">--debug-init</samp>&#8217;</dt>
<dd><p>Enable the Emacs Lisp debugger for errors in the init file.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html#Error-Debugging">Entering the Debugger on an Error</a> in <cite class="cite">The
GNU Emacs Lisp Reference Manual</cite>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-module-verification"></a>
<a id="index-_002d_002dmodule_002dassertions"></a>&#8216;<samp class="samp">--module-assertions</samp>&#8217;</dt>
<dd><p>Enable expensive correctness checks when dealing with dynamically
loadable modules.  This is intended for module authors that wish to
verify that their module conforms to the module API requirements.  The
option makes Emacs abort if a module-related assertion triggers.
See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Writing-Dynamic-Modules.html#Writing-Dynamic-Modules">Writing Dynamically-Loaded Modules</a> in <cite class="cite">The GNU Emacs Lisp Reference Manual</cite>.
</p>
</dd>
<dt><a class="index-entry-id" id="index-specify-dump-file"></a>
<a id="index-_002d_002ddump_002dfile"></a>&#8216;<samp class="samp">--dump-file=<var class="var">file</var></samp>&#8217;</dt>
<dd><p>Load the dumped Emacs state from the named <var class="var">file</var>.  By default, an
installed Emacs will look for its dump state in a file named
<samp class="file"><var class="var">emacs</var>.pdmp</samp> in the directory where the Emacs installation
puts the architecture-dependent files; the variable
<code class="code">exec-directory</code> holds the name of that directory.  <var class="var">emacs</var>
is the name of the Emacs executable file, normally just <samp class="file">emacs</samp>.
(When you invoke Emacs from the <samp class="file">src</samp> directory where it was
built without installing it, it will look for the dump file in the
directory of the executable.)  If you rename or move the dump file to
a different place, you can use this option to tell Emacs where to find
that file.
</p></dd>
</dl>

</div>
<div class="appendixsec-level-extent" id="Command-Example">
<h3 class="appendixsec" id="Command-Argument-Example">C.3 Command Argument Example</h3>

<p>Here is an example of using Emacs with arguments and options.  It
assumes you have a Lisp program file called <samp class="file">hack-c.el</samp> which, when
loaded, performs some useful operation on the current buffer, expected
to be a C program.
</p>
<div class="example">
<pre class="example-preformatted">emacs --batch foo.c -l hack-c -f save-buffer &gt;&amp; log
</pre></div>

<p>This says to visit <samp class="file">foo.c</samp>, load <samp class="file">hack-c.el</samp> (which makes
changes in the visited file), save <samp class="file">foo.c</samp> (note that
<code class="code">save-buffer</code> is the function that <kbd class="kbd">C-x C-s</kbd> is bound to), and
then exit back to the shell (because of &#8216;<samp class="samp">--batch</samp>&#8217;).  &#8216;<samp class="samp">--batch</samp>&#8217;
also guarantees there will be no problem redirecting output to
<samp class="file">log</samp>, because Emacs will not assume that it has a display terminal
to work with.
</p>
</div>
<div class="appendixsec-level-extent" id="Environment">
<h3 class="appendixsec" id="Environment-Variables">C.4 Environment Variables</h3>
<a class="index-entry-id" id="index-environment-variables"></a>

<p>The <em class="dfn">environment</em> is a feature of the operating system; it
consists of a collection of variables with names and values.  Each
variable is called an <em class="dfn">environment variable</em>; environment variable
names are case-sensitive, and it is conventional to use upper case
letters only.  The values are all text strings.
</p>
<p>What makes the environment useful is that subprocesses inherit the
environment automatically from their parent process.  This means you
can set up an environment variable in your login shell, and all the
programs you run (including Emacs) will automatically see it.
Subprocesses of Emacs (such as shells, compilers, and version control
programs) inherit the environment from Emacs, too.
</p>
<a class="index-entry-id" id="index-setenv"></a>
<a class="index-entry-id" id="index-getenv"></a>
<a class="index-entry-id" id="index-initial_002denvironment"></a>
<p>Inside Emacs, the command <kbd class="kbd">M-x getenv</kbd> reads the name of an
environment variable, and prints its value in the echo area.  <kbd class="kbd">M-x
setenv</kbd> sets a variable in the Emacs environment, and <kbd class="kbd">C-u M-x
setenv</kbd> removes a variable.  (Environment variable substitutions with
&#8216;<samp class="samp">$</samp>&#8217; work in the value just as in file names; see <a class="ref" href="Files.xhtml#File-Names-with-_0024">File Names with $</a>.)  The variable <code class="code">initial-environment</code> stores the initial
environment inherited by Emacs.
</p>
<p>The way to set environment variables outside of Emacs depends on the
operating system, and especially the shell that you are using.  For
example, here&#8217;s how to set the environment variable <code class="env">ORGANIZATION</code>
to &#8216;<samp class="samp">not very much</samp>&#8217; using Bash:
</p>
<div class="example">
<pre class="example-preformatted">export ORGANIZATION=&quot;not very much&quot;
</pre></div>

<p>and here&#8217;s how to do it in csh or tcsh:
</p>
<div class="example">
<pre class="example-preformatted">setenv ORGANIZATION &quot;not very much&quot;
</pre></div>

<p>When Emacs is using the X Window System, various environment
variables that control X work for Emacs as well.  See the X
documentation for more information.
</p>

<div class="appendixsubsec-level-extent" id="General-Variables">
<h4 class="appendixsubsec" id="General-Variables-1">C.4.1 General Variables</h4>

<p>Here is an alphabetical list of environment variables that have
special meanings in Emacs.  Most of these variables are also used by
some other programs.  Emacs does not require any of these environment
variables to be set, but it uses their values if they are set.
</p>
<dl class="table">
<dt><a id="index-CDPATH_002c-environment-variable"></a><code class="env">CDPATH</code></dt>
<dd><p>Used by the <code class="code">cd</code> command to search for the directory you specify,
when you specify a relative directory.
</p></dd>
<dt><a id="index-COLORTERM_002c-environment-variable"></a><code class="env">COLORTERM</code></dt>
<dd><p>If this variable is set to the value &#8216;<samp class="samp">truecolor</samp>&#8217;, it tells Emacs
to use 24-bit true color on text-mode displays even if the terminfo
database is not installed.  Emacs will use built-in commands to
request true color by RGB values instead of the missing terminfo
information.
</p></dd>
<dt><a id="index-DBUS_005fSESSION_005fBUS_005fADDRESS_002c-environment-variable"></a><code class="env">DBUS_SESSION_BUS_ADDRESS</code></dt>
<dd><p>Used by D-Bus when Emacs is compiled with it.  Usually, there is no
need to change it.  Setting it to a dummy address, like
&#8216;<samp class="samp">unix:path=/dev/null</samp>&#8217;, suppresses connections to the D-Bus session
bus as well as autolaunching the D-Bus session bus if not running yet.
</p></dd>
<dt><a id="index-EMACSDATA_002c-environment-variable"></a><code class="env">EMACSDATA</code></dt>
<dd><p>Directory for the architecture-independent files that come with Emacs.
This is used to initialize the variable <code class="code">data-directory</code>.
</p></dd>
<dt><a id="index-EMACSDOC_002c-environment-variable"></a><code class="env">EMACSDOC</code></dt>
<dd><p>Directory for the documentation string file, which is used to
initialize the Lisp variable <code class="code">doc-directory</code>.
</p></dd>
<dt><a id="index-EMACSLOADPATH_002c-environment-variable"></a><code class="env">EMACSLOADPATH</code></dt>
<dd><p>A colon-separated list of directories<a class="footnote" id="DOCF26" href="#FOOT26"><sup>26</sup></a> to search for
Emacs Lisp files.  If set, it modifies the usual initial value of the
<code class="code">load-path</code> variable (see <a class="pxref" href="Building.xhtml#Lisp-Libraries">Libraries of Lisp Code for Emacs</a>).  An empty element
stands for the default value of <code class="code">load-path</code>; e.g., using
&#8216;<samp class="samp">EMACSLOADPATH=&quot;/tmp:&quot;</samp>&#8217; adds <samp class="file">/tmp</samp> to the front of
the default <code class="code">load-path</code>.  To specify an empty element in the
middle of the list, use 2 colons in a row, as in
&#8216;<samp class="samp">EMACSLOADPATH=&quot;/tmp::/foo&quot;</samp>&#8217;.
</p></dd>
<dt><a id="index-EMACSPATH_002c-environment-variable"></a><code class="env">EMACSPATH</code></dt>
<dd><p>A colon-separated list of directories to search for executable files.
If set, Emacs uses this in addition to <code class="env">PATH</code> (see below) when
initializing the variable <code class="code">exec-path</code> (see <a class="pxref" href="Shell.xhtml#Shell">Running Shell Commands from Emacs</a>).
</p></dd>
<dt><a class="index-entry-id" id="index-user_002dmail_002daddress_002c-initialization"></a>
<a id="index-EMAIL_002c-environment-variable"></a><code class="env">EMAIL</code></dt>
<dd><p>Your email address; used to initialize the Lisp variable
<code class="code">user-mail-address</code>, which the Emacs mail interface puts into the
&#8216;<samp class="samp">From</samp>&#8217; header of outgoing messages (see <a class="pxref" href="Sending-Mail.xhtml#Mail-Headers">Mail Header Fields</a>).
</p></dd>
<dt><a id="index-ESHELL_002c-environment-variable"></a><code class="env">ESHELL</code></dt>
<dd><p>Used for shell-mode to override the <code class="env">SHELL</code> environment variable
(see <a class="pxref" href="Shell.xhtml#Interactive-Shell">Interactive Subshell</a>).
</p></dd>
<dt><a id="index-HISTFILE_002c-environment-variable"></a><code class="env">HISTFILE</code></dt>
<dd><p>The name of the file that shell commands are saved in between logins.
This variable defaults to <samp class="file">~/.bash_history</samp> if you use Bash, to
<samp class="file">~/.sh_history</samp> if you use ksh, and to <samp class="file">~/.history</samp>
otherwise.
</p></dd>
<dt><a id="index-HOME_002c-environment-variable"></a><code class="env">HOME</code></dt>
<dd><p>The location of your files in the directory tree; used for expansion
of file names starting with a tilde (<samp class="file">~</samp>).  If set, it should be
set to an absolute file name.  (If set to a relative file name, Emacs
interprets it relative to the directory where Emacs was started, but
we don&#8217;t recommend to use this feature.)  If unset, <code class="env">HOME</code>
normally defaults to the home directory of the user given by
<code class="env">LOGNAME</code>, <code class="env">USER</code> or your user ID, or to <samp class="file">/</samp> if all else
fails.  On MS-DOS, it defaults to the directory from which Emacs was
started, with &#8216;<samp class="samp">/bin</samp>&#8217; removed from the end if it was present.  On
Windows, the default value of <code class="env">HOME</code> is the <samp class="file">Application
Data</samp> subdirectory of the user profile directory (normally, this is
<samp class="file">C:/Documents and Settings/<var class="var">username</var>/Application Data</samp>,
where <var class="var">username</var> is your user name), though for backwards
compatibility <samp class="file">C:/</samp> will be used instead if a <samp class="file">.emacs</samp> file
is found there.
</p></dd>
<dt><a id="index-HOSTNAME_002c-environment-variable"></a><code class="env">HOSTNAME</code></dt>
<dd><p>The name of the machine that Emacs is running on.
</p></dd>
<dt><a id="index-INFOPATH_002c-environment-variable"></a><code class="env">INFOPATH</code></dt>
<dd><p>A colon-separated list of directories in which to search for Info files.
</p></dd>
<dt><a id="index-LANG_002c-environment-variable"></a><code class="env">LC_ALL</code></dt>
<dd><a class="index-entry-id" id="index-LC_005fALL_002c-environment-variable"></a>
</dd>
<dt><code class="env">LC_COLLATE</code></dt>
<dd><a class="index-entry-id" id="index-LC_005fCOLLATE_002c-environment-variable"></a>
</dd>
<dt><code class="env">LC_CTYPE</code></dt>
<dd><a class="index-entry-id" id="index-LC_005fCTYPE_002c-environment-variable"></a>
</dd>
<dt><code class="env">LC_MESSAGES</code></dt>
<dd><a class="index-entry-id" id="index-LC_005fMESSAGES_002c-environment-variable"></a>
</dd>
<dt><code class="env">LC_MONETARY</code></dt>
<dd><a class="index-entry-id" id="index-LC_005fMONETARY_002c-environment-variable"></a>
</dd>
<dt><code class="env">LC_NUMERIC</code></dt>
<dd><a class="index-entry-id" id="index-LC_005fNUMERIC_002c-environment-variable"></a>
</dd>
<dt><code class="env">LC_TIME</code></dt>
<dd><a class="index-entry-id" id="index-LC_005fTIME_002c-environment-variable"></a>
</dd>
<dt><code class="env">LANG</code></dt>
<dd><p>The user&#8217;s preferred locale.  The locale has six categories, specified
by the environment variables <code class="env">LC_COLLATE</code> for sorting,
<code class="env">LC_CTYPE</code> for character encoding, <code class="env">LC_MESSAGES</code> for system
messages, <code class="env">LC_MONETARY</code> for monetary formats, <code class="env">LC_NUMERIC</code> for
numbers, and <code class="env">LC_TIME</code> for dates and times.  If one of these
variables is not set, the category defaults to the value of the
<code class="env">LANG</code> environment variable, or to the default &#8216;<samp class="samp">C</samp>&#8217; locale if
<code class="env">LANG</code> is not set.  But if <code class="env">LC_ALL</code> is specified, it overrides
the settings of all the other locale environment variables.
</p>
<p>On MS-Windows and macOS, if <code class="env">LANG</code> is not already set in the
environment, Emacs sets it based on the system-wide default.  You can
set this in the &#8220;Regional Settings&#8221; Control Panel on some versions
of MS-Windows, and in the &#8220;Language and Region&#8221; System Preference on
macOS.
</p>
<p>The value of the <code class="env">LC_CTYPE</code> category is
matched against entries in <code class="code">locale-language-names</code>,
<code class="code">locale-charset-language-names</code>, and
<code class="code">locale-preferred-coding-systems</code>, to select a default language
environment and coding system.  See <a class="xref" href="International.xhtml#Language-Environments">Language Environments</a>.
</p></dd>
<dt><a id="index-LOGNAME_002c-environment-variable"></a><code class="env">LOGNAME</code></dt>
<dd><p>The user&#8217;s login name.  See also <code class="env">USER</code>.
</p></dd>
<dt><a id="index-MAIL_002c-environment-variable"></a><code class="env">MAIL</code></dt>
<dd><p>The name of your system mail inbox.
</p></dd>
<dt><a id="index-MH_002c-environment-variable"></a><code class="env">MH</code></dt>
<dd><p>Name of setup file for the mh system.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/mh-e/index.html#Top">MH-E</a> in <cite class="cite">The Emacs
Interface to MH</cite>.
</p></dd>
<dt><a id="index-NAME_002c-environment-variable"></a><code class="env">NAME</code></dt>
<dd><p>Your real-world name.  This is used to initialize the variable
<code class="code">user-full-name</code> (see <a class="pxref" href="Sending-Mail.xhtml#Mail-Headers">Mail Header Fields</a>).
</p></dd>
<dt><a id="index-NNTPSERVER_002c-environment-variable"></a><code class="env">NNTPSERVER</code></dt>
<dd><p>The name of the news server.  Used by the mh and Gnus packages.
</p></dd>
<dt><a id="index-ORGANIZATION_002c-environment-variable"></a><code class="env">ORGANIZATION</code></dt>
<dd><p>The name of the organization to which you belong.  Used for setting the
&#8216;<samp class="samp">Organization:</samp>&#8217; header in your posts from the Gnus package.
</p></dd>
<dt><a id="index-PATH_002c-environment-variable"></a><code class="env">PATH</code></dt>
<dd><p>A colon-separated list of directories containing executable files.
This is used to initialize the variable <code class="code">exec-path</code>
(see <a class="pxref" href="Shell.xhtml#Shell">Running Shell Commands from Emacs</a>).
</p></dd>
<dt><a id="index-PWD_002c-environment-variable"></a><code class="env">PWD</code></dt>
<dd><p>If set, this should be the default directory when Emacs was started.
</p></dd>
<dt><a id="index-REPLYTO_002c-environment-variable"></a><code class="env">REPLYTO</code></dt>
<dd><p>If set, this specifies an initial value for the variable
<code class="code">mail-default-reply-to</code> (see <a class="pxref" href="Sending-Mail.xhtml#Mail-Headers">Mail Header Fields</a>).
</p></dd>
<dt><a id="index-SAVEDIR_002c-environment-variable"></a><code class="env">SAVEDIR</code></dt>
<dd><p>The name of a directory in which news articles are saved by default.
Used by the Gnus package.
</p></dd>
<dt><a id="index-SHELL_002c-environment-variable"></a><code class="env">SHELL</code></dt>
<dd><p>The name of an interpreter used to parse and execute programs run from
inside Emacs.  This is used to initialize the variable
<code class="code">shell-file-name</code> (see <a class="pxref" href="Shell.xhtml#Single-Shell">Single Shell Commands</a>).
</p></dd>
<dt><a id="index-SMTPSERVER_002c-environment-variable"></a><code class="env">SMTPSERVER</code></dt>
<dd><p>The name of the outgoing mail server.  This is used to initialize the
variable <code class="code">smtpmail-smtp-server</code> (see <a class="pxref" href="Sending-Mail.xhtml#Mail-Sending">Mail Sending</a>).
<a class="index-entry-id" id="index-background-mode_002c-on-xterm"></a>
</p></dd>
<dt><a id="index-TERM_002c-environment-variable"></a><code class="env">TERM</code></dt>
<dd><p>The type of the terminal that Emacs is using.  This variable must be
set unless Emacs is run in batch mode.  On MS-DOS, it defaults to
&#8216;<samp class="samp">internal</samp>&#8217;, which specifies a built-in terminal emulation that
handles the machine&#8217;s own display.
</p></dd>
<dt><a id="index-TERMCAP_002c-environment-variable"></a><code class="env">TERMCAP</code></dt>
<dd><p>The name of the termcap library file describing how to program the
terminal specified by <code class="env">TERM</code>.  This defaults to
<samp class="file">/etc/termcap</samp>.
</p></dd>
<dt><a id="index-TEMP_002c-environment-variable"></a><code class="env">TMPDIR</code></dt>
<dd><a class="index-entry-id" id="index-TMPDIR_002c-environment-variable"></a>
</dd>
<dt><code class="env">TMP</code></dt>
<dd><a class="index-entry-id" id="index-TMP_002c-environment-variable"></a>
</dd>
<dt><code class="env">TEMP</code></dt>
<dd><p>These environment variables are used to initialize the variable
<code class="code">temporary-file-directory</code>, which specifies a directory in which
to put temporary files (see <a class="pxref" href="Files.xhtml#Backup">Backup Files</a>).  Emacs tries to use
<code class="env">TMPDIR</code> first.  If that is unset, Emacs normally falls back on
<samp class="file">/tmp</samp>, but on MS-Windows and MS-DOS it instead falls back on
<code class="env">TMP</code>, then <code class="env">TEMP</code>, and finally <samp class="file">c:/temp</samp>.
</p></dd>
<dt><a id="index-TZ_002c-environment-variable"></a><code class="env">TZ</code></dt>
<dd><p>This specifies the default time zone and possibly also daylight
saving time information.  See <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Zone-Rules.html#Time-Zone-Rules">Time Zone Rules</a> in <cite class="cite">The GNU
Emacs Lisp Reference Manual</cite>.  On MS-DOS, if <code class="env">TZ</code> is not set in the
environment when Emacs starts, Emacs defines a default value as
appropriate for the country code returned by DOS.  On MS-Windows, Emacs
does not use <code class="env">TZ</code> at all.
</p></dd>
<dt><a id="index-USER_002c-environment-variable"></a><code class="env">USER</code></dt>
<dd><p>The user&#8217;s login name.  See also <code class="env">LOGNAME</code>.  On MS-DOS, this
defaults to &#8216;<samp class="samp">root</samp>&#8217;.
</p></dd>
<dt><a id="index-VERSION_005fCONTROL_002c-environment-variable"></a><code class="env">VERSION_CONTROL</code></dt>
<dd><p>Used to initialize the <code class="code">version-control</code> variable (see <a class="pxref" href="Files.xhtml#Backup-Names">Single or Numbered Backups</a>).
</p></dd>
</dl>

</div>
<div class="appendixsubsec-level-extent" id="Misc-Variables">
<h4 class="appendixsubsec" id="Miscellaneous-Variables">C.4.2 Miscellaneous Variables</h4>

<p>These variables are used only on particular configurations:
</p>
<dl class="vtable">
<dt><a id="index-COMSPEC"></a><code class="env">COMSPEC</code></dt>
<dd><p>On MS-DOS and MS-Windows, the name of the command interpreter to use
when invoking batch files and commands internal to the shell.  On MS-DOS
this is also used to make a default value for the <code class="env">SHELL</code> environment
variable.
</p>
</dd>
<dt><a id="index-NAME"></a><code class="env">NAME</code></dt>
<dd><p>On MS-DOS, this variable defaults to the value of the <code class="env">USER</code>
variable.
</p>
</dd>
<dt><a id="index-EMACSTEST"></a><code class="env">EMACSTEST</code></dt>
<dd><p>On MS-DOS, this specifies a file to use to log the operation of the
internal terminal emulator.  This feature is useful for submitting bug
reports.
</p>
</dd>
<dt><a id="index-EMACSCOLORS"></a><code class="env">EMACSCOLORS</code></dt>
<dd><p>On MS-DOS, this specifies the screen colors.  It is useful to set them
this way, since otherwise Emacs would display the default colors
momentarily when it starts up.
</p>
<p>The value of this variable should be the two-character encoding of the
foreground (the first character) and the background (the second
character) colors of the default face.  Each character should be the
hexadecimal code for the desired color on a standard PC text-mode
display.  For example, to get blue text on a light gray background,
specify &#8216;<samp class="samp">EMACSCOLORS=17</samp>&#8217;, since 1 is the code of the blue color and
7 is the code of the light gray color.
</p>
<p>The PC display usually supports only eight background colors.  However,
Emacs switches the DOS display to a mode where all 16 colors can be used
for the background, so all four bits of the background color are
actually used.
</p>
</dd>
<dt><a id="index-PRELOAD_005fWINSOCK"></a><code class="env">PRELOAD_WINSOCK</code></dt>
<dd><p>On MS-Windows, if you set this variable, Emacs will load and initialize
the network library at startup, instead of waiting until the first
time it is required.
</p>
</dd>
<dt><a id="index-WAYLAND_005fDISPLAY"></a><code class="env">WAYLAND_DISPLAY</code></dt>
<dd><p>Pgtk Emacs (built with <samp class="option">--with-pgtk</samp>) can run on Wayland natively.
<code class="env">WAYLAND_DISPLAY</code> specifies the connection to the compositor.
</p>
</dd>
<dt><a id="index-emacs_005fdir"></a><code class="env">emacs_dir</code></dt>
<dd><p>On MS-Windows, <code class="env">emacs_dir</code> is a special environment variable, which
indicates the full path of the directory in which Emacs is installed.
If Emacs is installed in the standard directory structure, it
calculates this value automatically.  It is not much use setting this
variable yourself unless your installation is non-standard, since
unlike other environment variables, it will be overridden by Emacs at
startup.  When setting other environment variables, such as
<code class="env">EMACSLOADPATH</code>, you may find it useful to use <code class="env">emacs_dir</code>
rather than hard-coding an absolute path.  This allows multiple
versions of Emacs to share the same environment variable settings, and
it allows you to move the Emacs installation directory, without
changing any environment or registry settings.
</p></dd>
</dl>

</div>
<div class="appendixsubsec-level-extent" id="MS_002dWindows-Registry">
<h4 class="appendixsubsec" id="The-MS_002dWindows-System-Registry">C.4.3 The MS-Windows System Registry</h4>
<a class="index-entry-id" id="index-addpm_002c-MS_002dWindows-installation-program"></a>
<a class="index-entry-id" id="index-registry_002c-setting-environment-variables-_0028MS_002dWindows_0029"></a>

<p>On MS-Windows, the environment variables <code class="env">emacs_dir</code>,
<code class="env">EMACSLOADPATH</code>, <code class="env">EMACSDATA</code>, <code class="env">EMACSPATH</code>, <code class="env">EMACSDOC</code>,
<code class="env">SHELL</code>, <code class="env">TERM</code>, <code class="env">HOME</code>, <code class="env">LANG</code>, and
<code class="env">PRELOAD_WINSOCK</code> can also be set in the <samp class="file">HKEY_CURRENT_USER</samp>
or the <samp class="file">HKEY_LOCAL_MACHINE</samp> section of the system registry, under
the <samp class="file">/Software/GNU/Emacs</samp> key.  When Emacs starts, as well as
checking the environment, it also checks the system registry for those
variables.
</p>
<p>To determine the value of those variables, Emacs goes through the
following procedure.  First, it checks the environment.  If the
variable is not found there, Emacs looks for a registry key by the
name of the variable under <samp class="file">/Software/GNU/Emacs</samp>; first in the
<samp class="file">HKEY_CURRENT_USER</samp> section of the registry, and if not found
there, in the <samp class="file">HKEY_LOCAL_MACHINE</samp> section.  Finally, if Emacs
still cannot determine the values, it uses the compiled-in defaults.
</p>
<p>Note that the registry settings have global system-wide effect: they
will affect all Emacs sessions run on the system.  Thus, if you run
different Emacs versions, or use both installed and un-installed Emacs
executables, or build newer versions of Emacs, the settings in the
registry will cause all of them to use the same directories, which is
probably not what you want.  For this reason, <em class="emph">we recommend
against setting these variables in the registry</em>.  If you have such
settings in the registry, we recommend that you remove them.
</p>
<p>If you run the Emacs MS-Windows installation program
<code class="command">addpm.exe</code>, it will update any existing registry settings of
the <code class="env">emacs_dir</code>, <code class="env">EMACSLOADPATH</code>, <code class="env">EMACSDATA</code>,
<code class="env">EMACSPATH</code>, <code class="env">EMACSDOC</code>, <code class="env">SHELL</code>, and <code class="env">TERM</code> variables
to have the values suitable for the installed Emacs version with which
<code class="command">addpm.exe</code> came.  Note that <code class="command">addpm.exe</code> will
<em class="emph">not</em> create any registry setting that didn&#8217;t exist, it will only
update existing settings, which are most probably inherited from an
old Emacs installation, so that they are compatible with the newly
installed Emacs version.  Running <code class="command">addpm.exe</code> is no longer
necessary when installing recent versions of Emacs, so we only
recommend doing that if you are upgrading from an older version, and
cannot remove these settings from the registry for some reason.
</p>
<p>In addition to the environment variables above, you can also add
settings to the <samp class="file">/Software/GNU/Emacs</samp> registry key to specify X
resources (see <a class="pxref" href="X-Resources.xhtml#X-Resources">X Options and Resources</a>).  Most of the settings you can specify
in your <samp class="file">.Xdefaults</samp> file can be set from that registry key.
</p>
</div>
</div>
<div class="appendixsec-level-extent" id="Display-X">
<h3 class="appendixsec" id="Specifying-the-Display-Name">C.5 Specifying the Display Name</h3>
<a class="index-entry-id" id="index-display-name-_0028X-Window-System_0029"></a>
<a class="index-entry-id" id="index-DISPLAY-environment-variable"></a>

<p>The environment variable <code class="env">DISPLAY</code> tells all X clients,
including Emacs, where to display their windows.  Its value is set by
default in ordinary circumstances, when you start an X server and run
jobs locally.  You can specify the display yourself; one reason to do
this is if you want to log into another system and run Emacs there,
and have the window displayed at your local terminal.
</p>
<p><code class="env">DISPLAY</code> has the syntax
&#8216;<samp class="samp"><var class="var">host</var>:<var class="var">display</var>.<var class="var">screen</var></samp>&#8217;, where <var class="var">host</var> is the
host name of the X Window System server machine, <var class="var">display</var> is an
arbitrarily-assigned number that distinguishes your server (X
terminal) from other servers on the same machine, and <var class="var">screen</var> is
a field that allows an X server to control multiple terminal screens.
The period and the <var class="var">screen</var> field are optional.  If included,
<var class="var">screen</var> is usually zero.
</p>
<p>For example, if your host is named &#8216;<samp class="samp">glasperle</samp>&#8217; and your server is
the first (or perhaps the only) server listed in the configuration, your
<code class="env">DISPLAY</code> is &#8216;<samp class="samp">glasperle:0.0</samp>&#8217;.
</p>
<p>You can specify the display name explicitly when you run Emacs, either
by changing the <code class="env">DISPLAY</code> variable, or with the option &#8216;<samp class="samp">-d
<var class="var">display</var></samp>&#8217; or &#8216;<samp class="samp">--display=<var class="var">display</var></samp>&#8217;.  Here is an example:
</p>
<div class="example smallexample">
<pre class="example-preformatted">emacs --display=glasperle:0 &amp;
</pre></div>

<p>You can inhibit the use of the X window system with the &#8216;<samp class="samp">-nw</samp>&#8217;
option.  Then Emacs uses its controlling text terminal for display.
See <a class="xref" href="#Initial-Options">Initial Options</a>.
</p>
<p>Sometimes, security arrangements prevent a program on a remote system
from displaying on your local system.  In this case, trying to run Emacs
produces messages like this:
</p>
<div class="example smallexample">
<pre class="example-preformatted">Xlib:  connection to &quot;glasperle:0.0&quot; refused by server
</pre></div>

<p>You might be able to overcome this problem by using the <code class="command">xhost</code>
command on the local system to give permission for access from your
remote machine.
</p>
</div>
<div class="appendixsec-level-extent" id="Font-X">
<h3 class="appendixsec" id="Font-Specification-Options">C.6 Font Specification Options</h3>
<a class="index-entry-id" id="index-font-name-_0028X-Window-System_0029"></a>

<p>You can use the command line option &#8216;<samp class="samp">-fn <var class="var">font</var></samp>&#8217; (or
&#8216;<samp class="samp">--font</samp>&#8217;, which is an alias for &#8216;<samp class="samp">-fn</samp>&#8217;) to specify a default
font:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-specify-default-font-from-the-command-line"></a>
<a id="index-_002d_002dfont"></a>&#8216;<samp class="samp">-fn <var class="var">font</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dfn"></a>
</dd>
<dt>&#8216;<samp class="samp">--font=<var class="var">font</var></samp>&#8217;</dt>
<dd><p>Use <var class="var">font</var> as the default font.
</p></dd>
</dl>

<p>When passing a font name to Emacs on the command line, you may need to
quote it, by enclosing it in quotation marks, if it contains
characters that the shell treats specially (e.g., spaces).  For
example:
</p>
<div class="example smallexample">
<pre class="example-preformatted">emacs -fn &quot;DejaVu Sans Mono-12&quot;
</pre></div>

<p>See <a class="xref" href="Frames.xhtml#Fonts">Fonts</a>, for details about font names and other ways to specify
the default font.
</p>
</div>
<div class="appendixsec-level-extent" id="Colors-X">
<h3 class="appendixsec" id="Window-Color-Options">C.7 Window Color Options</h3>
<a class="index-entry-id" id="index-color-of-window_002c-from-command-line"></a>
<a class="index-entry-id" id="index-text-colors_002c-from-command-line"></a>

<p>You can use the following command-line options to specify the colors
to use for various parts of the Emacs display.  Colors may be
specified using either color names or RGB triplets (see <a class="pxref" href="Display.xhtml#Colors">Colors for Faces</a>).
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-foreground-color_002c-command_002dline-argument"></a>
<a id="index-_002d_002dforeground_002dcolor"></a>&#8216;<samp class="samp">-fg <var class="var">color</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dfg"></a>
</dd>
<dt>&#8216;<samp class="samp">--foreground-color=<var class="var">color</var></samp>&#8217;</dt>
<dd><p>Specify the foreground color, overriding the color specified by the
<code class="code">default</code> face (see <a class="pxref" href="Display.xhtml#Faces">Text Faces</a>).
</p></dd>
<dt><a class="index-entry-id" id="index-background-color_002c-command_002dline-argument"></a>
<a id="index-_002d_002dbackground_002dcolor"></a>&#8216;<samp class="samp">-bg <var class="var">color</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dbg"></a>
</dd>
<dt>&#8216;<samp class="samp">--background-color=<var class="var">color</var></samp>&#8217;</dt>
<dd><p>Specify the background color, overriding the color specified by the
<code class="code">default</code> face.
</p></dd>
<dt><a class="index-entry-id" id="index-border-color_002c-command_002dline-argument"></a>
<a id="index-_002d_002dborder_002dcolor"></a>&#8216;<samp class="samp">-bd <var class="var">color</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dbd"></a>
</dd>
<dt>&#8216;<samp class="samp">--border-color=<var class="var">color</var></samp>&#8217;</dt>
<dd><p>Specify the color of the border of the X window.  This has no effect
if Emacs is compiled with GTK+ support.
</p></dd>
<dt><a class="index-entry-id" id="index-cursor-color_002c-command_002dline-argument"></a>
<a id="index-_002d_002dcursor_002dcolor"></a>&#8216;<samp class="samp">-cr <var class="var">color</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dcr"></a>
</dd>
<dt>&#8216;<samp class="samp">--cursor-color=<var class="var">color</var></samp>&#8217;</dt>
<dd><p>Specify the color of the Emacs cursor which indicates where point is.
</p></dd>
<dt><a class="index-entry-id" id="index-mouse-pointer-color_002c-command_002dline-argument"></a>
<a id="index-_002d_002dmouse_002dcolor"></a>&#8216;<samp class="samp">-ms <var class="var">color</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dms"></a>
</dd>
<dt>&#8216;<samp class="samp">--mouse-color=<var class="var">color</var></samp>&#8217;</dt>
<dd><p>Specify the color for the mouse cursor when the mouse is in the Emacs window.
</p></dd>
<dt><a class="index-entry-id" id="index-reverse-video_002c-command_002dline-argument"></a>
<a id="index-_002d_002dreverse_002dvideo"></a>&#8216;<samp class="samp">-r</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dr"></a>
</dd>
<dt>&#8216;<samp class="samp">-rv</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002drv"></a>
</dd>
<dt>&#8216;<samp class="samp">--reverse-video</samp>&#8217;</dt>
<dd><p>Reverse video: swap the foreground and background colors.
</p></dd>
<dt><a class="index-entry-id" id="index-standard-colors-on-a-character-terminal"></a>
<a class="index-entry-id" id="index-override-character-terminal-color-support"></a>
<a id="index-_002d_002dcolor"></a>&#8216;<samp class="samp">--color=<var class="var">mode</var></samp>&#8217;</dt>
<dd><p>Set the <em class="dfn">color support mode</em> when Emacs is run on a text terminal.
This option overrides the number of supported colors that the
character terminal advertises in its <code class="code">termcap</code> or <code class="code">terminfo</code>
database.  The parameter <var class="var">mode</var> can be one of the following:
</p><dl class="table">
<dt>&#8216;<samp class="samp">never</samp>&#8217;</dt>
<dt>&#8216;<samp class="samp">no</samp>&#8217;</dt>
<dd><p>Don&#8217;t use colors even if the terminal&#8217;s capabilities specify color
support.
</p></dd>
<dt>&#8216;<samp class="samp">default</samp>&#8217;</dt>
<dt>&#8216;<samp class="samp">auto</samp>&#8217;</dt>
<dd><p>Same as when <samp class="option">--color</samp> is not used at all: Emacs detects at
startup whether the terminal supports colors, and if it does, turns on
colored display.
</p></dd>
<dt>&#8216;<samp class="samp">always</samp>&#8217;</dt>
<dt>&#8216;<samp class="samp">yes</samp>&#8217;</dt>
<dt>&#8216;<samp class="samp">ansi8</samp>&#8217;</dt>
<dd><p>Turn on the color support unconditionally, and use color commands
specified by the ANSI escape sequences for the 8 standard colors.
</p></dd>
<dt>&#8216;<samp class="samp"><var class="var">num</var></samp>&#8217;</dt>
<dd><p>Use color mode for <var class="var">num</var> colors.  If <var class="var">num</var> is &#8722;1, turn off
color support (equivalent to &#8216;<samp class="samp">never</samp>&#8217;); if it is 0, use the
default color support for this terminal (equivalent to &#8216;<samp class="samp">auto</samp>&#8217;);
otherwise use an appropriate standard mode for <var class="var">num</var> colors.
Depending on your terminal&#8217;s capabilities, Emacs might be able to turn
on a color mode for 8, 16, 88, or 256 as the value of <var class="var">num</var>.  If
there is no mode that supports <var class="var">num</var> colors, Emacs acts as if
<var class="var">num</var> were 0, i.e., it uses the terminal&#8217;s default color support
mode.
</p></dd>
</dl>
<p>If <var class="var">mode</var> is omitted, it defaults to <var class="var">ansi8</var>.
</p></dd>
</dl>

<p>For example, to use a coral mouse cursor and a slate blue text cursor,
enter:
</p>
<div class="example">
<pre class="example-preformatted">emacs -ms coral -cr 'slate blue' &amp;
</pre></div>

<p>You can reverse the foreground and background colors through the
&#8216;<samp class="samp">-rv</samp>&#8217; option or with the X resource &#8216;<samp class="samp">reverseVideo</samp>&#8217;.
</p>
<p>The &#8216;<samp class="samp">-fg</samp>&#8217;, &#8216;<samp class="samp">-bg</samp>&#8217;, and &#8216;<samp class="samp">-rv</samp>&#8217; options function on text
terminals as well as on graphical displays.
</p>
</div>
<div class="appendixsec-level-extent" id="Window-Size-X">
<h3 class="appendixsec" id="Options-for-Window-Size-and-Position">C.8 Options for Window Size and Position</h3>
<a class="index-entry-id" id="index-geometry-of-Emacs-window"></a>
<a class="index-entry-id" id="index-position-and-size-of-Emacs-frame"></a>
<a class="index-entry-id" id="index-width-and-height-of-Emacs-frame"></a>
<a class="index-entry-id" id="index-specifying-fullscreen-for-Emacs-frame"></a>

<p>Here is a list of the command-line options for specifying size and
position of the initial Emacs frame:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-geometry_002c-command_002dline-argument"></a>
<a id="index-_002d_002dgeometry"></a>&#8216;<samp class="samp">-g <var class="var">width</var>x<var class="var">height</var><span class="r">[{</span>+-<span class="r">}</span><var class="var">xoffset</var><span class="r">{</span>+-<span class="r">}</span><var class="var">yoffset</var><span class="r">]]</span></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dg"></a>
</dd>
<dt>&#8216;<samp class="samp">--geometry=<var class="var">width</var>x<var class="var">height</var><span class="r">[{</span>+-<span class="r">}</span><var class="var">xoffset</var><span class="r">{</span>+-<span class="r">}</span><var class="var">yoffset</var><span class="r">]]</span></samp>&#8217;</dt>
<dd><p>Specify the size <var class="var">width</var> and <var class="var">height</var> (measured in character
columns and lines), and positions <var class="var">xoffset</var> and <var class="var">yoffset</var>
(measured in pixels).  The <var class="var">width</var> and <var class="var">height</var> parameters
apply to all frames, whereas <var class="var">xoffset</var> and <var class="var">yoffset</var> only to
the initial frame.
</p>
</dd>
<dt><a class="index-entry-id" id="index-fullscreen_002c-command_002dline-argument"></a>
<a id="index-_002d_002dfullscreen"></a>&#8216;<samp class="samp">-fs</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dfs"></a>
</dd>
<dt>&#8216;<samp class="samp">--fullscreen</samp>&#8217;</dt>
<dd><p>Specify that width and height should be that of the screen.  Normally
no window manager decorations are shown.  (After starting Emacs,
you can toggle this state using <kbd class="key">F11</kbd>, <code class="code">toggle-frame-fullscreen</code>.)
</p>
</dd>
<dt><a class="index-entry-id" id="index-maximized_002c-command_002dline-argument"></a>
<a id="index-_002d_002dmaximized"></a>&#8216;<samp class="samp">-mm</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dmm"></a>
</dd>
<dt>&#8216;<samp class="samp">--maximized</samp>&#8217;</dt>
<dd><p>Specify that the Emacs frame should be maximized.  This normally
means that the frame has window manager decorations.
(After starting Emacs, you can toggle this state using <kbd class="kbd">M-F10</kbd>,
<code class="code">toggle-frame-maximized</code>.)
</p>
</dd>
<dt><a class="index-entry-id" id="index-fullheight_002c-command_002dline-argument"></a>
<a id="index-_002d_002dfullheight"></a>&#8216;<samp class="samp">-fh</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dfh"></a>
</dd>
<dt>&#8216;<samp class="samp">--fullheight</samp>&#8217;</dt>
<dd><p>Specify that the height should be the height of the screen.
</p>
</dd>
<dt><a class="index-entry-id" id="index-fullwidth_002c-command_002dline-argument"></a>
<a id="index-_002d_002dfullwidth"></a>&#8216;<samp class="samp">-fw</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dfw"></a>
</dd>
<dt>&#8216;<samp class="samp">--fullwidth</samp>&#8217;</dt>
<dd><p>Specify that the width should be the width of the screen.
</p></dd>
</dl>

<p>In the &#8216;<samp class="samp">--geometry</samp>&#8217; option, <code class="code"><span class="r">{</span>+-<span class="r">}</span></code> means either a plus
 sign or a minus sign.  A plus
sign before <var class="var">xoffset</var> means it is the distance from the left side of
the screen; a minus sign means it counts from the right side.  A plus
sign before <var class="var">yoffset</var> means it is the distance from the top of the
screen, and a minus sign there indicates the distance from the bottom.
The values <var class="var">xoffset</var> and <var class="var">yoffset</var> may themselves be positive or
negative, but that doesn&#8217;t change their meaning, only their direction.
</p>
<p>Emacs uses the same units as <code class="command">xterm</code> does to interpret the geometry.
The <var class="var">width</var> and <var class="var">height</var> are measured in characters, so a large font
creates a larger frame than a small font.  (If you specify a proportional
font, Emacs uses its maximum bounds width as the width unit.)  The
<var class="var">xoffset</var> and <var class="var">yoffset</var> are measured in pixels.
</p>
<p>You do not have to specify all of the fields in the geometry
specification.  If you omit both <var class="var">xoffset</var> and <var class="var">yoffset</var>, the
window manager decides where to put the Emacs frame, possibly by
letting you place it with the mouse.  For example, &#8216;<samp class="samp">164x55</samp>&#8217;
specifies a window 164 columns wide, enough for two ordinary width
windows side by side, and 55 lines tall.
</p>
<p>The default frame width is 80 characters and the default height is
between 35 and 40 lines, depending on the OS and the window manager.
You can omit either the width or the height or both.  If you start the
geometry with an integer, Emacs interprets it as the width.  If you
start with an &#8216;<samp class="samp">x</samp>&#8217; followed by an integer, Emacs interprets it as
the height.  Thus, &#8216;<samp class="samp">81</samp>&#8217; specifies just the width; &#8216;<samp class="samp">x45</samp>&#8217;
specifies just the height.
</p>
<p>If you start the geometry with &#8216;<samp class="samp">+</samp>&#8217; or &#8216;<samp class="samp">-</samp>&#8217;, that introduces
an offset, which means both sizes are omitted.  Thus, &#8216;<samp class="samp">-3</samp>&#8217;
specifies the <var class="var">xoffset</var> only.  (If you give just one offset, it is
always <var class="var">xoffset</var>.)  &#8216;<samp class="samp">+3-3</samp>&#8217; specifies both the <var class="var">xoffset</var>
and the <var class="var">yoffset</var>, placing the frame near the bottom left of the
screen.
</p>
<p>You can specify a default for any or all of the fields in your X
resource file (see <a class="pxref" href="X-Resources.xhtml#Resources">X Resources</a>), and then override selected fields
with a &#8216;<samp class="samp">--geometry</samp>&#8217; option.
</p>
<p>Since the mode line and the echo area occupy the last 2 lines of the
frame, the height of the initial text window is 2 less than the height
specified in your geometry.  In non-X-toolkit versions of Emacs, the
menu bar also takes one line of the specified number.  But in the X
toolkit version, the menu bar is additional and does not count against
the specified height.  The tool bar, if present, is also additional.
</p>
<p>Enabling or disabling the menu bar or tool bar alters the amount of
space available for ordinary text.  Therefore, if Emacs starts up with
a tool bar (which is the default), and handles the geometry
specification assuming there is a tool bar, and then your
initialization file disables the tool bar, you will end up with a
frame geometry different from what you asked for.  To get the intended
size with no tool bar, use an X resource to specify &#8220;no tool bar&#8221;
(see <a class="pxref" href="X-Resources.xhtml#Table-of-Resources">Table of X Resources for Emacs</a>); then Emacs will already know there&#8217;s no
tool bar when it processes the specified geometry.
</p>
<p>When using one of &#8216;<samp class="samp">--fullscreen</samp>&#8217;, &#8216;<samp class="samp">--maximized</samp>&#8217;,
&#8216;<samp class="samp">--fullwidth</samp>&#8217; or &#8216;<samp class="samp">--fullheight</samp>&#8217;, some window managers require
you to set the variable <code class="code">frame-resize-pixelwise</code> to a non-<code class="code">nil</code>
value to make a frame appear truly maximized or full-screen.
</p>
<p>Some window managers have options that can make them ignore both
program-specified and user-specified positions.  If these are set,
Emacs fails to position the window correctly.
</p>
</div>
<div class="appendixsec-level-extent" id="Borders-X">
<h3 class="appendixsec" id="Internal-and-Outer-Borders">C.9 Internal and Outer Borders</h3>
<a class="index-entry-id" id="index-borders-_0028X-Window-System_0029"></a>

<p>An Emacs frame has an internal border and an outer border.  The
internal border is an extra strip of the background color around the
text portion of the frame.  Emacs itself draws the internal border.  The
outer border is drawn by X outside the tool and menu bars of the frame.
There is also an external border which is drawn by the window manager.
The size of the external border cannot be set from within Emacs.
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-internal-border-width_002c-command_002dline-argument"></a>
<a id="index-_002d_002dinternal_002dborder"></a>&#8216;<samp class="samp">-ib <var class="var">width</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dib"></a>
</dd>
<dt>&#8216;<samp class="samp">--internal-border=<var class="var">width</var></samp>&#8217;</dt>
<dd><p>Specify <var class="var">width</var> as the width of the internal border (around the
frame&#8217;s text area), in pixels.
</p>
</dd>
<dt><a class="index-entry-id" id="index-main-border-width_002c-command_002dline-argument"></a>
<a class="index-entry-id" id="index-outer-border-width_002c-command_002dline-argument"></a>
<a id="index-_002d_002dborder_002dwidth"></a>&#8216;<samp class="samp">-bw <var class="var">width</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dbw"></a>
</dd>
<dt>&#8216;<samp class="samp">--border-width=<var class="var">width</var></samp>&#8217;</dt>
<dd><p>Specify <var class="var">width</var> as the width of the outer border, in pixels.
</p></dd>
</dl>

<p>When you specify the size of the frame, that does not count the
borders.  The frame&#8217;s position is measured from the outside edge of the
external border.
</p>
<p>Use the &#8216;<samp class="samp">-ib <var class="var">n</var></samp>&#8217; option to specify an internal border
<var class="var">n</var> pixels wide.  The default is 1.  Use &#8216;<samp class="samp">-bw <var class="var">n</var></samp>&#8217; to
specify the width of the outer border (though the window manager may not
pay attention to what you specify).  The default width of the outer
border is 2.
</p>
</div>
<div class="appendixsec-level-extent" id="Title-X">
<h3 class="appendixsec" id="Frame-Titles">C.10 Frame Titles</h3>

<p>Each Emacs frame always has a title, which appears in window
decorations and icons as the name of the frame.  The default title is
of the form &#8216;<samp class="samp"><var class="var">invocation-name</var>@<var class="var">machine</var></samp>&#8217; (if there is
only one frame) or shows the selected window&#8217;s buffer name (if there
is more than one frame).
</p>
<p>You can specify a non-default title for the initial Emacs frame with
a command line option:
</p>
<dl class="table">
<dt><a class="index-entry-id" id="index-frame-title_002c-command_002dline-argument"></a>
<a id="index-_002d_002dtitle"></a>&#8216;<samp class="samp">-T <var class="var">title</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dT"></a>
</dd>
<dt>&#8216;<samp class="samp">--title=<var class="var">title</var></samp>&#8217;</dt>
<dd><p>Specify <var class="var">title</var> as the title for the initial Emacs frame.
</p></dd>
</dl>

<p>The &#8216;<samp class="samp">--name</samp>&#8217; option (see <a class="pxref" href="X-Resources.xhtml#Resources">X Resources</a>) also specifies the title
for the initial Emacs frame.
</p>
</div>
<div class="appendixsec-level-extent" id="Icons-X">
<h3 class="appendixsec" id="Icons-2">C.11 Icons</h3>
<a class="index-entry-id" id="index-icons-_0028X-Window-System_0029"></a>
<a class="index-entry-id" id="index-minimizing-a-frame-at-startup"></a>

<dl class="table">
<dt><a id="index-start-iconified_002c-command_002dline-argument"></a>&#8216;<samp class="samp">-iconic</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002d_002diconic"></a>
</dd>
<dt>&#8216;<samp class="samp">--iconic</samp>&#8217;</dt>
<dd><p>Start Emacs in an iconified state.
</p>
</dd>
<dt><a class="index-entry-id" id="index-Emacs-icon_002c-a-gnu"></a>
<a id="index-_002d_002dno_002dbitmap_002dicon"></a>&#8216;<samp class="samp">-nbi</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dnbi"></a>
</dd>
<dt>&#8216;<samp class="samp">--no-bitmap-icon</samp>&#8217;</dt>
<dd><p>Disable the use of the Emacs icon.
</p></dd>
</dl>

<p>Most window managers allow you to iconify (or &#8220;minimize&#8221;) an
Emacs frame, hiding it from sight.  Some window managers replace
iconified windows with tiny icons, while others remove them
entirely from sight.  The &#8216;<samp class="samp">-iconic</samp>&#8217; option tells Emacs to begin
running in an iconified state, rather than showing a frame right away.
The text frame doesn&#8217;t appear until you deiconify (or &#8220;un-minimize&#8221;)
it.
</p>
<p>By default, Emacs uses an icon containing the Emacs logo.  On
desktop environments such as Gnome, this icon is also displayed in
other contexts, e.g., when switching into an Emacs frame.  The
&#8216;<samp class="samp">-nbi</samp>&#8217; or &#8216;<samp class="samp">--no-bitmap-icon</samp>&#8217; option tells Emacs to let the
window manager choose what sort of icon to use&#8212;usually just a small
rectangle containing the frame&#8217;s title.
</p>
</div>
<div class="appendixsec-level-extent" id="Misc-X">
<h3 class="appendixsec" id="Other-Display-Options">C.12 Other Display Options</h3>

<dl class="table">
<dt>&#8216;<samp class="samp">--parent-id <var class="var">id</var></samp>&#8217;</dt>
<dd><p>Open Emacs as a client X window via the XEmbed protocol, with <var class="var">id</var>
as the parent X window id.  Currently, this option is mainly useful
for developers.
</p>
</dd>
<dt><a class="index-entry-id" id="index-vertical-scroll-bars_002c-command_002dline-argument"></a>
<a id="index-_002d_002dvertical_002dscroll_002dbars"></a>&#8216;<samp class="samp">-vb</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dvb"></a>
</dd>
<dt>&#8216;<samp class="samp">--vertical-scroll-bars</samp>&#8217;</dt>
<dd><p>Enable vertical scroll bars.
</p>
</dd>
<dt><a class="index-entry-id" id="index-line-spacing_002c-command_002dline-argument"></a>
<a id="index-_002d_002dline_002dspacing"></a>&#8216;<samp class="samp">-lsp <var class="var">pixels</var></samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dlsp"></a>
</dd>
<dt>&#8216;<samp class="samp">--line-spacing=<var class="var">pixels</var></samp>&#8217;</dt>
<dd><p>Specify <var class="var">pixels</var> as additional space to put between lines, in pixels.
</p>
</dd>
<dt><a class="index-entry-id" id="index-blinking-cursor-disable_002c-command_002dline-argument"></a>
<a id="index-_002d_002dno_002dblinking_002dcursor"></a>&#8216;<samp class="samp">-nbc</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dnbc"></a>
</dd>
<dt>&#8216;<samp class="samp">--no-blinking-cursor</samp>&#8217;</dt>
<dd><p>Disable the blinking cursor on graphical displays.
</p>
</dd>
<dt><a id="index-_002d_002dbasic_002ddisplay"></a>&#8216;<samp class="samp">-D</samp>&#8217;</dt>
<dd><a class="index-entry-id" id="index-_002dD"></a>
</dd>
<dt>&#8216;<samp class="samp">--basic-display</samp>&#8217;</dt>
<dd><p>Disable the menu-bar, the tool-bar, the scroll-bars, tool tips, and
turn off font-lock-mode and the blinking cursor.  This can be useful
for making a test case that simplifies debugging of display problems.
</p></dd>
</dl>

<p>The &#8216;<samp class="samp">--xrm</samp>&#8217; option (see <a class="pxref" href="X-Resources.xhtml#Resources">X Resources</a>) specifies additional
X resource values.
</p></div>
</div>
<div class="footnotes-segment">
<h4 class="footnotes-heading">Footnotes</h4>

<h5 class="footnote-body-heading"><a id="FOOT25" href="#DOCF25">(25)</a></h5>
<p>This option has no effect on MS-Windows.</p>
<h5 class="footnote-body-heading"><a id="FOOT26" href="#DOCF26">(26)</a></h5>
<p>Here and below,
whenever we say &#8220;colon-separated list of directories&#8221;, it pertains
to Unix and GNU/Linux systems.  On MS-DOS and MS-Windows, the
directories are separated by semi-colons instead, since DOS/Windows
file names might include a colon after a drive letter.</p>
</div>



</body>
</html>
