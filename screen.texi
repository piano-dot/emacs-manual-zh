@c This is part of the Emacs manual.
@c Copyright (C) 1985--1987, 1993--1995, 1997, 2001--2024 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Screen
@chapter 一个屏幕的组织
@cindex screen
@cindex frame

  在图形显示屏上，例如在使用 X 窗口系统的 GNU/Linux 上，Emacs 会占用图形窗口。
系统上，Emacs 占用一个图形窗口。 在文本终端上、
Emacs 占用整个终端屏幕。 我们将使用
我们将使用 @dfn{窗口(frame)} 来表示图形窗口或终端屏幕被
Emacs 占用的图形窗口或终端屏幕。 Emacs 在这两种窗口上的行为非常相似。 它
开始时通常只有一个窗口，但您可以根据需要创建额外的
窗口 (@pxref{Frames}).

  每个窗口由几个不同的区域组成。 在
窗口顶部有一个 @dfn{菜单栏}，可以通过一系列菜单访问命令。
一系列菜单来访问命令。 在图形显示屏上，菜单栏的正下方
是 @dfn{工具栏}，这是一排图标，点击后可执行编辑命令。
点击这些图标即可执行编辑命令。窗口的最下方是 @dfn{回显区}，这里显示信息，当 Emacs 要求输入信息时，你可以在这里输入信息。

  窗口的主要区域在工具栏（如果有的话）的下方和回声区域的
回显区的上方，称为 @dfn{窗格}。 因此在本手册中
本手册中，我们将在此意义上使用 "窗格 "一词。 图形
窗口 "一词的含义不同。
但如上所述，我们将这些图形窗格称为
称为 "窗口"。

  Emacs 窗格是 @dfn{缓冲区}--即您正在编辑或查看的文本或其他图像--显示的地方。显示的地方。 在图形 窗格的一侧有一个 @dfn{滚动条}，可以用来滚动缓冲区。可用于滚动缓冲区。 窗格的最后一行 是 @dfn{状态栏}。 它显示缓冲区中的各种信息 缓冲区中正在进行的操作，例如是否有未保存的更改、正在使用的编辑模式、是否有已保存的更改。正在使用的编辑状态栏、当前行号等。

  当你启动 Emacs 时，框架中通常只有一个窗口。但是，您可以水平或垂直切分此窗口以创建多个窗口，每个窗口可以独立显示一个缓冲区(@pxref{Windows}).

  在任何时候，都会有一个窗格是 @dfn{选定的窗格}。在图形显示屏上，选中的窗格会显示一个比较显眼的光标（通常是实心和闪烁的）；其他窗格则显示一个不太显眼的光标（通常是空心方框）。在文本终端上，只有一个光标，显示在选定的窗格中。选定窗口中显示的缓冲区称为 @dfn{当前缓冲区}，是进行编辑的地方。
进行编辑的地方。大多数 Emacs 命令都会隐式应用于当前缓冲区；未选中窗格中显示的大多数文本都是可见的，以供参考。如果在图形显示屏上使用了多个窗口，则选择特定窗口将选择该窗口中的所有窗格。

@menu
* Point::             The place in the text where editing commands operate.
* Echo Area::         Short messages appear at the bottom of the screen.
* Mode Line::         Interpreting the mode line.
* Menu Bar::          How to use the menu bar.
@end menu

@node Point
@section 光标
@cindex point
@cindex cursor

  所选窗口中的光标显示大多数编辑命令生效的位置，称为 @dfn{光标}@footnote{''光标'' 来自字符 @samp{.}，这是 TECO（Emacs的编写语言）中用于访问编辑位置的命令。} 许多 Emacs 命令将光标移动到缓冲区中的不同位置;例如，您可以通过单击鼠标按钮 1（通哦常是左键）将点放置在所需位置。

  默认情况下，所选窗格中的光标绘制成一个实心块，并显示为 @emph{on} 字符，但您应该将光标视为在两个字符@emph{之间} ;它位于光标下方的字符@emph{之前}。 例如，如果你的文字看起来像@samp{frob}，而光标位于 @samp{b} 上，言光标则指向 @samp{o} 和 @samp{b} 之间。 如果在该位置插入字符 @samp{！}，则结果为 @samp{fro！b}，光标 @samp{！} 之间 和 @samp{b}。 因此，光标保持在 @samp{b} 上，如前所述。

  如果你在 Emacs 中编辑多个文件，每个文件都有自己的缓冲区，则每个缓冲区都有自己的光标值。 如果以后再次显示当前未显示的缓冲区，则该缓冲区会记住其 光标值。此外，如果缓冲区显示在多个窗口中，则每个窗口都有自己的光标值。

  @xref{Cursor Display}来查看控制Emacs如何显示光标的选项。

@node Echo Area
@section 回显区
@cindex echo area 回显区

在窗口最底部的一条线叫做@dfn{回显区}，显示用于各种目的的少量文本。
 

@cindex echoing 回显
  回显区之所以这么叫，是因为他的用途之一就是@dfn{回显}，意思是显示键入的多字符命令。单字符命令不会被回显。多键（@pxref{Keys}）命令会在你输入命令一半停超过一秒时回显。然后Emacs 回显现在已经按下的所有键，以提示你完成其余操作。这个行为旨在为自信的用户提供快速回应，同时为犹豫不决的用户提供最大反馈。
@cindex error message
@cindex echo area message
  
  当一个命令无法完成它的任务，回显区也用来显示@dfn{错误信息}，错误信息可以以发出嘟的一声或闪烁屏幕来传达。

  一些命令在回显区中提供有用的信息，以告诉你该命令已经完成，或者为你提供详细信息。不像错误信息，这些@dfn{有用的}信息不会伴随嘟的一声或者屏幕的闪烁。举个例子，@kbd{C-x =}（就是按住@key{Ctrl}同时按下@kbd{x}键，然后再松开@kbd{Ctrl}，再按下@kbd{=}键）显示一条信息，告诉你光标上对应的字符、它在缓冲区的位置，以及它在窗格中当前的列数。一些要长时间的命令都在工作时显示以@samp{...}结尾的信息（有时也会通过百分比的形式显示已经完成了多少），在完成时添加@samp{done}。

@cindex @file{*Messages*} buffer
@cindex saved echo area messages
@cindex messages saved from echo area
@vindex message-log-max
  Informative echo area messages are saved in a special buffer named @file{*Messages*}.  (We have not explained buffers yet; see @ref{Buffers}, for more information about them.)  If you miss a message that appeared briefly on the screen, you can switch to the @file{*Messages*} buffer to see it again.  The @file{*Messages*} buffer is limited to a certain number of lines, specified by the variable @code{message-log-max}.  (We have not explained variables either; see @ref{Variables}, for more information about them.)  Beyond this limit, one line is deleted from the beginning whenever a new message line is added at the end.
回显区回显有用信息的消息保存在名为 @file{*Messages*} 的特殊缓冲区中。 （我们还没有解释缓冲区;有关它们的更多信息，请参阅 @ref{Buffers}。 如果您错过了屏幕上短暂出现的消息，您可以切换到 @file{*Messages*} 缓冲区以再次查看它。 变量 @code{message-log-max} 限定@file{*Messages*} 缓冲区限制只能多少行。 （我们也没有解释变量;有关它们的更多信息，请参阅 @ref{Variables}。 超过此限制，每当在末尾添加新消息行时，都会从开头删除一行。

@xref{Display Custom}，看 Emacs 如何控制来使用回显区域的选项。

  The echo area is also used to display the @dfn{minibuffer}, a special window where you can input arguments to commands, such as the name of a file to be edited.  When the minibuffer is in use, the text displayed in the echo area begins with a @dfn{prompt string}, and the active cursor appears within the minibuffer, which is temporarily considered the selected window.  You can always get out of the minibuffer by typing @kbd{C-g}.  @xref{Minibuffer}.

@node Mode Line
@section The Mode Line
@cindex mode line
@cindex top level

  At the bottom of each window is a @dfn{mode line}, which describes
what is going on in the current buffer.  When there is only one
window, the mode line appears right above the echo area; it is the
next-to-last line in the frame.  On a graphical display, the mode line
is drawn with a 3D box appearance.  Emacs also usually draws the mode
line of the selected window with a different color from that of
unselected windows, in order to make it stand out.

  The text displayed in the mode line has the following format:

@example
 @var{cs}:@var{ch}-@var{fr}  @var{buf}      @var{pos} @var{line}   (@var{major} @var{minor})
@end example

@noindent
On a text terminal, this text is followed by a series of dashes
extending to the right edge of the window.  These dashes are omitted
on a graphical display.

The @var{cs} string and the colon character after it describe the
character set and newline convention used for the current buffer.
Normally, Emacs automatically handles these settings for you, but it
is sometimes useful to have this information.

  @var{cs} describes the character set of the text in the buffer
(@pxref{Coding Systems}).  If it is a dash (@samp{-}), that indicates
no special character set handling (with the possible exception of
end-of-line conventions, described in the next paragraph).  @samp{=}
means no conversion whatsoever, and is usually used for files
containing non-textual data.  Other characters represent various
@dfn{coding systems}---for example, @samp{1} represents ISO Latin-1.

  On a text terminal, @var{cs} is preceded by two additional
characters that describe the coding systems for keyboard input and
terminal output.  Furthermore, if you are using an input method,
@var{cs} is preceded by a string that identifies the input method
(@pxref{Input Methods}).

@cindex end-of-line convention, mode-line indication
  The character after @var{cs} is usually a colon.  If a different
string is displayed, that indicates a nontrivial end-of-line
convention for encoding a file.  Usually, lines of text are separated
by @dfn{newline characters} in a file, but two other conventions are
sometimes used.  The MS-DOS convention uses a carriage return
character followed by a linefeed character; when editing such
files, the colon changes to either a backslash (@samp{\}) or
@samp{(DOS)}, depending on the operating system.  Another convention,
employed by older Macintosh systems, uses a carriage return
character instead of a newline; when editing such files, the colon
changes to either a forward slash (@samp{/}) or @samp{(Mac)}.  On some
systems, Emacs displays @samp{(Unix)} instead of the colon for files
that use newline as the line separator.

  On frames created for @command{emacsclient} (@pxref{Invoking
emacsclient}), the next character is @samp{@@}.  This indication is
typical for frames of an Emacs process running as a daemon
(@pxref{Emacs Server}).

  The next element on the mode line is the string indicated by
@var{ch}.  This shows two dashes (@samp{--}) if the buffer displayed
in the window has the same contents as the corresponding file on the
disk; i.e., if the buffer is unmodified.  If the buffer is
modified, it shows two stars (@samp{**}).  For a read-only buffer, it
shows @samp{%*} if the buffer is modified, and @samp{%%} otherwise.

  The character after @var{ch} is normally a dash (@samp{-}).
However, if @code{default-directory} (@pxref{File Names}) for the
current buffer is on a remote machine, @samp{@@} is displayed instead.

  @var{fr} gives the selected frame name (@pxref{Frames}).  It appears
only on text terminals.  The initial frame's name is @samp{F1}.

  @var{buf} is the name of the buffer displayed in the window.
Usually, this is the same as the name of a file you are editing.
@xref{Buffers}.

  @var{pos} tells you whether there is additional text above the top
of the window, or below the bottom.  If your buffer is small and all
of it is visible in the window, @var{pos} is @samp{All}.  Otherwise,
it is @samp{Top} if you are looking at the beginning of the buffer,
@samp{Bot} if you are looking at the end of the buffer, or
@samp{@var{nn}%}, where @var{nn} is the percentage of the buffer above
the top of the window.  With Size Indication mode, you can display the
size of the buffer as well.  @xref{Optional Mode Line}.

  @var{line} is the character @samp{L} followed by the line number at
point.  (You can display the current column number too, by turning on
Column Number mode.  @xref{Optional Mode Line}.)

  @var{major} is the name of the @dfn{major mode} used in the buffer.
A major mode is a principal editing mode for the buffer, such as Text
mode, Lisp mode, C mode, and so forth.  @xref{Major Modes}.  Some
major modes display additional information after the major mode name.
For example, Compilation buffers and Shell buffers display the status
of the subprocess.

  @var{minor} is a list of some of the enabled @dfn{minor modes},
which are optional editing modes that provide additional features on
top of the major mode.  @xref{Minor Modes}.

  Some features are listed together with the minor modes whenever they
are turned on, even though they are not really minor modes.
@samp{Narrow} means that the buffer being displayed has editing
restricted to only a portion of its text (@pxref{Narrowing}).
@samp{Def} means that a keyboard macro is currently being defined
(@pxref{Keyboard Macros}).

  In addition, if Emacs is inside a recursive editing level, square
brackets (@samp{[@dots{}]}) appear around the parentheses that
surround the modes.  If Emacs is in one recursive editing level within
another, double square brackets appear, and so on.  Since recursive
editing levels affect Emacs globally, such square brackets appear in
the mode line of every window.  @xref{Recursive Edit}.

  You can change the appearance of the mode line as well as the format
of its contents.  @xref{Optional Mode Line}.  In addition, the mode
line is mouse-sensitive; clicking on different parts of the mode line
performs various commands.  @xref{Mode Line Mouse}.  Also, hovering
the mouse pointer above mouse-sensitive portions of the mode line
shows tooltips (@pxref{Tooltips}) with information about commands you
can invoke by clicking on the mode line.

@node Menu Bar
@section The Menu Bar
@cindex menu bar

  Each Emacs frame normally has a @dfn{menu bar} at the top which you
can use to perform common operations.  There's no need to list them
here, as you can more easily see them yourself.

  On a display that supports a mouse, you can use the mouse to choose a
command from the menu bar.  An arrow on the right edge of a menu item
means it leads to a subsidiary menu, or @dfn{submenu}.  A @samp{...}
at the end of a menu item means that the command will prompt you for
further input before it actually does anything.

  Some of the commands in the menu bar have ordinary key bindings as
well; if so, a key binding is shown after the item itself.  To view
the full command name and documentation for a menu item, type
@kbd{C-h k}, and then select the menu bar with the mouse in the usual
way (@pxref{Key Help}).

@kindex F10
@findex menu-bar-open
@cindex menu bar access using keyboard
  Instead of using the mouse, you can also invoke the first menu bar
item by pressing @key{F10} (to run the command @code{menu-bar-open}).
You can then navigate the menus with the arrow keys or with @kbd{C-b},
@kbd{C-f} (left/right), @kbd{C-p}, and @kbd{C-n} (up/down).  To
activate a selected menu item, press @key{RET}; to cancel menu
navigation, press @kbd{C-g} or @kbd{@key{ESC} @key{ESC} @key{ESC}}.
(However, note that when Emacs was built with a GUI toolkit, the menus
are drawn and controlled by the toolkit, and the key sequences to
cancel menu navigation might be different from the above description.)

@kindex M-`
@findex tmm-menubar
@vindex tty-menu-open-use-tmm
  On a text terminal, you can optionally access the menu-bar menus in
the echo area.  To this end, customize the variable
@code{tty-menu-open-use-tmm} to a non-@code{nil} value.  Then typing
@key{F10} will run the command @code{tmm-menubar} instead of dropping
down the menu.  (You can also type @kbd{M-`}, which always invokes
@code{tmm-menubar}.)  @code{tmm-menubar} lets you select a menu item
with the keyboard.  A provisional choice appears in the echo area.
You can use the up and down arrow keys to move through the menu to
different items, and then you can type @key{RET} to select the item.
Each menu item is also designated by a letter or digit (usually the
initial of some word in the item's name).  This letter or digit is
separated from the item name by @samp{==>}.  You can type the item's
letter or digit to select the item.
