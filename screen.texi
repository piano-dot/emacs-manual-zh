'@c This is part of the Emacs manual.
@c Copyright (C) 1985--1987, 1993--1995, 1997, 2001--2024 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Screen
@chapter 一个屏幕的组织
@cindex screen
@cindex frame

  在图形显示屏上，例如在使用 X 窗口系统的 GNU/Linux 上，Emacs 会占用一个图形窗口。
 在文本终端上，Emacs 占用整个终端屏幕。 我们将使用
我们将使用 @dfn{窗口(frame)} 来表示被
Emacs 占用的图形窗口或终端屏幕。 Emacs 在这两种窗口上的行为非常相似。 它
开始时通常只有一个窗口，但您可以根据需要创建额外的
窗口 (@pxref{Frames})。

  每个窗口由几个不同的区域组成。 在
窗口顶部有一个 @dfn{菜单栏}，可以通过一系列菜单访问命令。
一系列菜单来访问命令。 在图形显示屏上，菜单栏的正下方
是 @dfn{工具栏}，这是一排图标,点击这些图标即可执行编辑命令。
窗口的最下方是 @dfn{回显区}，这里显示信息，当 Emacs 要求输入信息时，你可以在这里输入信息。

  窗口的主要区域在工具栏（如果有的话）的下方和
回显区的上方，称为 @dfn{窗格}。 因此在本手册中，
在这个意义上，我们将会使用 "窗格 "一词。
图形系统在“窗口” 一词的使用含义不同。
但如上所述，我们将这些图形称为
称为 "窗口"。

  Emacs 窗格是 @dfn{缓冲区}--即您正在编辑或查看的文本或其他图像--显示的地方。显示的地方。 在图形 窗格的一侧有一个 @dfn{滚动条}，可以用来滚动缓冲区。 窗格的最后一行是 @dfn{状态栏}。 它显示缓冲区中的各种信息：例如缓冲区中正在进行的操作、是否有未保存的更改、正在使用的编辑模式、是否有已保存的更改、正在使用的编辑状态栏、当前行号等。

  当你启动 Emacs 时，窗口中通常只有一个窗格。但是，您可以水平或垂直切分此窗口以创建多个窗口，每个窗口可以独立显示一个缓冲区(@pxref{Windows}).

  在任何时候，都会有一个窗格是 @dfn{选定的窗格}。在图形显示屏上，选中的窗格会显示一个比较显眼的光标（通常是实心和闪烁的）；其他窗格则显示一个不太显眼的光标（通常是空心方框）。在文本终端上，只有一个光标，显示在选定的窗格中。选定窗口中显示的缓冲区称为 @dfn{当前缓冲区}，是进行编辑的地方。
进行编辑的地方。大多数 Emacs 命令都会隐式应用于当前缓冲区；未选中窗格中显示的大多数文本都是可见的，以供参考。如果在图形显示屏上使用了多个窗口，则选择特定窗口将选择该窗口中的所有窗格。

@menu
* Point::             The place in the text where editing commands operate.
* Echo Area::         Short messages appear at the bottom of the screen.
* Mode Line::         Interpreting the mode line.
* Menu Bar::          How to use the menu bar.
@end menu

@node Point
@section 光标
@cindex point
@cindex cursor

  所选窗口中的光标显示大多数编辑命令生效的位置，称为 @dfn{光标}@footnote{“光标” 来自字符 @samp{.}，这是 TECO（Emacs的编写语言）中用于访问编辑位置的命令。} 许多 Emacs 命令将光标移动到缓冲区中的不同位置;例如，您可以通过单击鼠标按钮 1（通哦常是左键）将点放置在所需位置。

  默认情况下，所选窗格中的光标绘制成一个实心块，并显示为 @emph{on} 字符，但您应该将光标视为在两个字符@emph{之间} ;它位于光标下方的字符@emph{之前}。 例如，如果你的文字看起来像@samp{frob}，而光标位于 @samp{b} 上，言光标则指向 @samp{o} 和 @samp{b} 之间。 如果在该位置插入字符 @samp{！}，则结果为 @samp{fro！b}，光标 @samp{！} 之间 和 @samp{b}。 因此，光标保持在 @samp{b} 上，如前所述。

  如果你在 Emacs 中编辑多个文件，每个文件都有自己的缓冲区，则每个缓冲区都有自己的光标值。 如果以后再次显示当前未显示的缓冲区，则该缓冲区会记住其 光标值。此外，如果缓冲区显示在多个窗口中，则每个窗口都有自己的光标值。

  @xref{Cursor Display}来查看控制Emacs如何显示光标的选项。

@node Echo Area
@section 回显区
@cindex echo area 回显区

在窗口最底部的一条线叫做@dfn{回显区}，显示用于各种目的的少量文本。
 

@cindex echoing 回显
  回显区之所以这么叫，是因为他的用途之一就是@dfn{回显}，意思是显示键入的多字符命令。单字符命令不会被回显。多键（@pxref{Keys}）命令会在你输入命令一半停超过一秒时回显。然后Emacs 回显现在已经按下的所有键，以提示你完成其余操作。这个行为旨在为自信的用户提供快速回应，同时为犹豫不决的用户提供最大反馈。
@cindex error message
@cindex echo area message
  
  当一个命令无法完成它的任务，回显区也用来显示@dfn{错误信息}，错误信息可以通过发出嘟的一声或闪烁屏幕来传达。

  一些命令在回显区中提供有用的信息，以告诉你该命令已经完成，或者为你提供详细信息。不像错误信息，这些@dfn{有用的}信息不会伴随嘟的一声或者屏幕的闪烁。举个例子，@kbd{C-x =}（就是按住@key{Ctrl}同时按下@kbd{x}键，然后再松开@kbd{Ctrl}，再按下@kbd{=}键）显示一条信息，告诉你光标上对应的字符、它在缓冲区的位置，以及它在窗格中当前的列数。一些要长时间的命令都在工作时显示以@samp{...}结尾的信息（有时也会通过百分比的形式显示已经完成了多少），在完成时添加@samp{done}。

@cindex @file{*Messages*} buffer
@cindex saved echo area messages
@cindex messages saved from echo area
@vindex message-log-max
  回显区回显有用信息的消息保存在名为 @file{*Messages*} 的特殊缓冲区中。 （我们还没有解释缓冲区;有关它们的更多信息，请参阅 @ref{Buffers}。 如果您错过了屏幕上短暂出现的消息，您可以切换到 @file{*Messages*} 缓冲区以再次查看它。 变量 @code{message-log-max} 限定@file{*Messages*} 缓冲区限制只能多少行。 （我们也没有解释变量;有关它们的更多信息，请参阅 @ref{Variables}。 超过此限制，每当在末尾添加新消息行时，都会从开头删除一行。

@xref{Display Custom}，看 Emacs 如何控制来使用回显区域的选项。

  回显区域还用于显示 @dfn{小缓冲区}，这是一个特殊的窗格，您可以在其中输入命令的参数，例如要编辑的文件的名称。 使用小缓冲区时，回显区域中显示的文本以 @dfn{prompt string} 开头，活动光标出现在微型缓冲区中，暂时将其视为选定的窗口。 您始终可以通过键入 @kbd{C-g} 来退出 minibuffer。 @xref{Minibuffer}。

@node Mode Line
@section 状态栏
@cindex mode line
@cindex top level

每个窗口的底部都有一个 @dfn{状态栏}，用于描述当前缓冲区中正在发生的事情。 当只有一个窗口时，模式线出现在回显区的正上方;它是窗口中的倒数第二行。 在图形界面上，状态栏以 3D 箱型外观绘制。 Emacs 通常还会用与未选择窗口不同的颜色绘制所选窗口的状态栏，以使其脱颖而出。

  在状态栏中显示的文本有以下格式:

@example
 @var{cs}:@var{ch}-@var{fr}  @var{buf}      @var{pos} @var{line}   (@var{major} @var{minor})
@end example

@noindent
在文本终端上，此文本后跟一系列延伸到窗格右边缘的破折号。 这些破折号在图形显示中被省略。

@var{cs} 字符串及其后面的冒号字符描述用于当前缓冲区的字符集和换行符约定。通常，Emacs 会自动为你处理这些设置，但有时拥有这些信息很有用。

@var{cs} 描述缓冲区中文本的字符集（@pxref{Coding Systems}） 。 如果是短划线 （@samp{-}），则表示没有特殊的字符集处理（行尾约定可能除外，将在下一段中介绍）。 @samp{=} 表示不进行任何转换，通常用于包含非文本数据的文件。 其他字符表示各种@dfn{编码系统}---例如，@samp{1} 表示 ISO Latin-1。

在文本终端上，@var{cs} 前面有两个附加字符，用于描述键盘输入和终端输出的编码系统。 此外，如果使用的是输入法，则 @var{cs} 前面有一个用于标识输入法的字符串 （@pxref{Input Methods}）。

@cindex end-of-line convention, mode-line indication
@c    The character after @var{cs} is usually a colon.  If a different string is displayed, that indicates a nontrivial end-of-line convention for encoding a file.  Usually, lines of text are separated by @dfn{newline characters} in a file, but two other conventions are sometimes used.  The MS-DOS convention uses a carriage return character followed by a linefeed character; when editing such files, the colon changes to either a backslash (@samp{\}) or @samp{(DOS)}, depending on the operating system.  Another convention, employed by older Macintosh systems, uses a carriage return character instead of a newline; when editing such files, the colon changes to either a forward slash (@samp{/}) or @samp{(Mac)}.  On some systems, Emacs displays @samp{(Unix)} instead of the colon for files that use newline as the line separator.@var{cs} 
后面的字符通常是冒号。 如果显示不同的字符串，则表示对文件进行编码的行尾约定不一样。 通常，文件中的文本行用 @dfn{换行符} 分隔，但有时也会使用另外两种约定： MS-DOS 约定使用回车符后跟换行符;编辑此类文件时，冒号将更改为反斜杠 （@samp{\}） 或 @samp{（DOS）}，具体取决于操作系统。 旧版 Macintosh 系统采用的另一种约定是使用回车符而不是换行符;编辑此类文件时，冒号将更改为正斜杠 （@samp{/}） 或 @samp{（Mac）}。 在某些系统上，对于使用换行符作为行分隔符的文件，Emacs 显示 @samp{（Unix）} 而不是冒号。

  在为 @command{emacsclient} （@pxref{Invoking emacsclient}） 而创建的窗口上，下一个字符为 @samp{@@}。 此指示是作为守护进程 x（@pxref{Emacs Server}） 运行的 Emacs 进程帧的典型指示。
  @c This indication is typical for frames of an Emacs process running as a daemon x(@pxref{Emacs Server}).

  状态栏的下一个元素是 @var{ch} 所指示的字符串。 如果窗格中显示的缓冲区与磁盘上相应文件的内容相同（即缓冲区未修改），则显示两个连字符（@samp{--}）。 如果缓冲区已修改，则显示两个星号（@samp{**}）。 对于只读缓冲区，如果缓冲区已修改，则显示 @samp{%*}，否则显示 @samp{%%}。

@c The character after @var{ch} is normally a dash (@samp{-}). However, if @code{default-directory} (@pxref{File Names}) for the current buffer is on a remote machine, @samp{@@} is displayed instead.
  @var{ch} 后面的字符通常是连字符（@samp{-}）。但是，如果 @code{default-directory}（@pxref{File Names}）的当前缓冲区位于远程计算机上，则会显示 @samp{@@}。

  @var{fr} 给出选定的帧名称 （@pxref{Frames}）。 它仅显示在文本终端上。 初始帧的名称为 @samp{F1}。

  @var{buf}是窗口中显示的缓冲区的名称。 通常，这与您正在编辑的文件的名称相同。 @xref{Buffers}.

  @var{pos} 告诉您窗口顶部上方还是底部下方是否有其他文本。如果你的缓冲区里面的内容小，而其全部都能被看见，@var{pos} 就会是@samp{All}（全部）。 其他情况下,如果你看见的是缓冲区的顶部，就是 @samp{Top}；如果你看见的是其底部，就是@samp{Bot}；或者是 @samp{@var{nn}%}，此处 @var{nn} 是缓冲区高于窗格顶部的百分比。使用Size Indication Mode（大小指示模式），你也可以看到缓冲区的大小。 @xref{Optional Mode Line}.

  @var{line}就是一个字符@samp{L}后面跟着光标所处的行数。（你也可以通过打开列数模式Column Number mode 来显示光标所处列数。@xref{Optional Mode Line}）

  @var{major}就是当前使用的@dfn{主模式（major mode）}的名字。一个主模式就是这一个缓冲区的主要编辑模式，如Text mode, C mode, Lisp mode等等。@xref{Major Modes}。部分主模式在主模式名字后显示其他信息。比如，编译缓冲区(Compilation buffer)和Shell缓冲区显示其下进程的状态。

  @var{minor} 就列出一些已经打开的@dfn{辅模式(minor modes)}，就是那些在主模式之上提供一些其他功能的编辑模式。@xref{Minor Modes}。

  有些功能虽然不是真正的辅模式，但只要开启，就会与辅模式一起列出。
@samp{Narrow} 表示正在显示的缓冲区只限于编辑部分文本（@pxref{Narrowing}）。
@samp{Def} 表示当前正在定义一个键盘宏（@pxref{KeyboardMacro}）。
(@pxref{键盘宏}）。

  此外，如果 Emacs 位于递归编辑层内，则模式周围的括号会出现方括号（@samp{[@dots{}]}）。 如果 Emacs 处于另一个递归编辑层中的一个递归编辑层，则会出现双方括号，依此类推。 由于递归编辑级别会对 Emacs 产生全局影响，因此这种方括号会出现在每个窗口的状态栏中。 @xref{递归编辑}。

  您可以更改状态栏的外观以及内容格式。 @xref{Optional Mode Line}。 此外，状态栏对鼠标敏感；点击状态栏的不同部分可执行各种命令。 @xref{Mode Line Mouse}。 同时，将鼠标指针悬停在状态栏的鼠标敏感部分上方，会显示工具提示（@pxref{Tooltips}），其中包含通过点击状态栏可以调用的命令信息。

@node Menu Bar
@section The Menu Bar
@cindex menu bar

  每个 Emacs 窗口的顶部通常都有一个 @dfn{菜单栏}，您可以使用它来执行常用操作。其实没有必要在这里列出它们，因为您可以更容易地自己看到它们。

  在支持鼠标的显示器上，可以使用鼠标从菜单栏中选择命令。 菜单项如果右边缘有箭头，表示它指向子菜单，即 @dfn{submenu}。  菜单项末尾的 @samp{...} 表示该命令将在实际执行任何操作之前需要您进一步输入。

  菜单栏中的某些命令也有普通按键绑定它；如果有，按键绑定会显示在项目本身之后。 要查看菜单项的完整命令名称和文档，请键入 @kbd{C-h k}，然后用鼠标按常规方法（@pxref{Key Help}）选择菜单栏。

@kindex F10
@findex menu-bar-open
@cindex menu bar access using keyboard
  您也可以按 @key{F10}（执行命令 @code{menu-bar-open}）来调用第一个菜单栏的项目，而不是使用鼠标。然后，您可以使用箭头键或 @kbd{C-b}、@kbd{C-f}（左/右）、@kbd{C-p} 和 @kbd{C-n}（上/下）浏览菜单。 要激活所选菜单项，请按 @key{RET}；要取消菜单导航，请按 @kbd{C-g} 或 @kbd{ @key{ESC} @key{ESC} @key{ESC}} （不过请注意，如果 Emacs 是使用图形用户界面工具包构建的，则菜单由图形界面绘制和控制，取消菜单导航的按键顺序可能与上述描述不同）。

@kindex M-`
@findex tmm-menubar
@vindex tty-menu-open-use-tmm
  在文本终端上，也可以选择在回显区访问菜单栏菜单。 为此，请将变量 @code{tty-menu-open-use-tmm} 自定义为 non-@code{nil} 值。 然后键入 @key{F10} 将运行 @code{tty-menu-open-use-tmm} 命令，而不是下拉菜单。 (您也可以键入 @kbd{M-`}，它将始终调用 @code{tmm-menubar}。）@code{tmm-menubar} 可让您用键盘选择菜单项。 临时选择会出现在回显区。您可以使用上下箭头键在菜单中移动到不同的项目，然后键入 @key{RET} 来选择项目。每个菜单项也由一个字母或数字（通常是项目名称中某个单词的首字母）指定。 该字母或数字与项目名称之间用 @samp{==>} 分隔。 您可以键入项目的字母或数字来选择项目。
